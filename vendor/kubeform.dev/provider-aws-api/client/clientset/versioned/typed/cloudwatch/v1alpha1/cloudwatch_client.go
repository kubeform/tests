/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"
	"kubeform.dev/provider-aws-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type CloudwatchV1alpha1Interface interface {
	RESTClient() rest.Interface
	CompositeAlarmsGetter
	DashboardsGetter
	EventArchivesGetter
	EventBusesGetter
	EventPermissionsGetter
	EventRulesGetter
	EventTargetsGetter
	LogDestinationsGetter
	LogDestinationPoliciesGetter
	LogGroupsGetter
	LogMetricFiltersGetter
	LogResourcePoliciesGetter
	LogStreamsGetter
	LogSubscriptionFiltersGetter
	MetricAlarmsGetter
	QueryDefinitionsGetter
}

// CloudwatchV1alpha1Client is used to interact with features provided by the cloudwatch.aws.kubeform.com group.
type CloudwatchV1alpha1Client struct {
	restClient rest.Interface
}

func (c *CloudwatchV1alpha1Client) CompositeAlarms(namespace string) CompositeAlarmInterface {
	return newCompositeAlarms(c, namespace)
}

func (c *CloudwatchV1alpha1Client) Dashboards(namespace string) DashboardInterface {
	return newDashboards(c, namespace)
}

func (c *CloudwatchV1alpha1Client) EventArchives(namespace string) EventArchiveInterface {
	return newEventArchives(c, namespace)
}

func (c *CloudwatchV1alpha1Client) EventBuses(namespace string) EventBusInterface {
	return newEventBuses(c, namespace)
}

func (c *CloudwatchV1alpha1Client) EventPermissions(namespace string) EventPermissionInterface {
	return newEventPermissions(c, namespace)
}

func (c *CloudwatchV1alpha1Client) EventRules(namespace string) EventRuleInterface {
	return newEventRules(c, namespace)
}

func (c *CloudwatchV1alpha1Client) EventTargets(namespace string) EventTargetInterface {
	return newEventTargets(c, namespace)
}

func (c *CloudwatchV1alpha1Client) LogDestinations(namespace string) LogDestinationInterface {
	return newLogDestinations(c, namespace)
}

func (c *CloudwatchV1alpha1Client) LogDestinationPolicies(namespace string) LogDestinationPolicyInterface {
	return newLogDestinationPolicies(c, namespace)
}

func (c *CloudwatchV1alpha1Client) LogGroups(namespace string) LogGroupInterface {
	return newLogGroups(c, namespace)
}

func (c *CloudwatchV1alpha1Client) LogMetricFilters(namespace string) LogMetricFilterInterface {
	return newLogMetricFilters(c, namespace)
}

func (c *CloudwatchV1alpha1Client) LogResourcePolicies(namespace string) LogResourcePolicyInterface {
	return newLogResourcePolicies(c, namespace)
}

func (c *CloudwatchV1alpha1Client) LogStreams(namespace string) LogStreamInterface {
	return newLogStreams(c, namespace)
}

func (c *CloudwatchV1alpha1Client) LogSubscriptionFilters(namespace string) LogSubscriptionFilterInterface {
	return newLogSubscriptionFilters(c, namespace)
}

func (c *CloudwatchV1alpha1Client) MetricAlarms(namespace string) MetricAlarmInterface {
	return newMetricAlarms(c, namespace)
}

func (c *CloudwatchV1alpha1Client) QueryDefinitions(namespace string) QueryDefinitionInterface {
	return newQueryDefinitions(c, namespace)
}

// NewForConfig creates a new CloudwatchV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*CloudwatchV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &CloudwatchV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new CloudwatchV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *CloudwatchV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new CloudwatchV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *CloudwatchV1alpha1Client {
	return &CloudwatchV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *CloudwatchV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
