/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/apigatewayv2/v1alpha1"
	"kubeform.dev/provider-aws-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type Apigatewayv2V1alpha1Interface interface {
	RESTClient() rest.Interface
	ApisGetter
	ApiMappingsGetter
	AuthorizersGetter
	DeploymentsGetter
	DomainNamesGetter
	IntegrationsGetter
	IntegrationResponsesGetter
	ModelsGetter
	RoutesGetter
	RouteResponsesGetter
	StagesGetter
	VpcLinksGetter
}

// Apigatewayv2V1alpha1Client is used to interact with features provided by the apigatewayv2.aws.kubeform.com group.
type Apigatewayv2V1alpha1Client struct {
	restClient rest.Interface
}

func (c *Apigatewayv2V1alpha1Client) Apis(namespace string) ApiInterface {
	return newApis(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) ApiMappings(namespace string) ApiMappingInterface {
	return newApiMappings(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) Authorizers(namespace string) AuthorizerInterface {
	return newAuthorizers(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) Deployments(namespace string) DeploymentInterface {
	return newDeployments(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) DomainNames(namespace string) DomainNameInterface {
	return newDomainNames(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) Integrations(namespace string) IntegrationInterface {
	return newIntegrations(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) IntegrationResponses(namespace string) IntegrationResponseInterface {
	return newIntegrationResponses(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) Models(namespace string) ModelInterface {
	return newModels(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) Routes(namespace string) RouteInterface {
	return newRoutes(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) RouteResponses(namespace string) RouteResponseInterface {
	return newRouteResponses(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) Stages(namespace string) StageInterface {
	return newStages(c, namespace)
}

func (c *Apigatewayv2V1alpha1Client) VpcLinks(namespace string) VpcLinkInterface {
	return newVpcLinks(c, namespace)
}

// NewForConfig creates a new Apigatewayv2V1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*Apigatewayv2V1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &Apigatewayv2V1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new Apigatewayv2V1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Apigatewayv2V1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new Apigatewayv2V1alpha1Client for the given RESTClient.
func New(c rest.Interface) *Apigatewayv2V1alpha1Client {
	return &Apigatewayv2V1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *Apigatewayv2V1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
