/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"
	"kubeform.dev/provider-aws-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type IamV1alpha1Interface interface {
	RESTClient() rest.Interface
	AccessKeysGetter
	AccountAliasesGetter
	AccountPasswordPoliciesGetter
	GroupsGetter
	GroupMembershipsGetter
	GroupPoliciesGetter
	GroupPolicyAttachmentsGetter
	InstanceProfilesGetter
	OpenidConnectProvidersGetter
	PoliciesGetter
	PolicyAttachmentsGetter
	RolesGetter
	RolePoliciesGetter
	RolePolicyAttachmentsGetter
	SamlProvidersGetter
	ServerCertificatesGetter
	ServiceLinkedRolesGetter
	UsersGetter
	UserGroupMembershipsGetter
	UserLoginProfilesGetter
	UserPoliciesGetter
	UserPolicyAttachmentsGetter
	UserSSHKeysGetter
}

// IamV1alpha1Client is used to interact with features provided by the iam.aws.kubeform.com group.
type IamV1alpha1Client struct {
	restClient rest.Interface
}

func (c *IamV1alpha1Client) AccessKeys(namespace string) AccessKeyInterface {
	return newAccessKeys(c, namespace)
}

func (c *IamV1alpha1Client) AccountAliases(namespace string) AccountAliasInterface {
	return newAccountAliases(c, namespace)
}

func (c *IamV1alpha1Client) AccountPasswordPolicies(namespace string) AccountPasswordPolicyInterface {
	return newAccountPasswordPolicies(c, namespace)
}

func (c *IamV1alpha1Client) Groups(namespace string) GroupInterface {
	return newGroups(c, namespace)
}

func (c *IamV1alpha1Client) GroupMemberships(namespace string) GroupMembershipInterface {
	return newGroupMemberships(c, namespace)
}

func (c *IamV1alpha1Client) GroupPolicies(namespace string) GroupPolicyInterface {
	return newGroupPolicies(c, namespace)
}

func (c *IamV1alpha1Client) GroupPolicyAttachments(namespace string) GroupPolicyAttachmentInterface {
	return newGroupPolicyAttachments(c, namespace)
}

func (c *IamV1alpha1Client) InstanceProfiles(namespace string) InstanceProfileInterface {
	return newInstanceProfiles(c, namespace)
}

func (c *IamV1alpha1Client) OpenidConnectProviders(namespace string) OpenidConnectProviderInterface {
	return newOpenidConnectProviders(c, namespace)
}

func (c *IamV1alpha1Client) Policies(namespace string) PolicyInterface {
	return newPolicies(c, namespace)
}

func (c *IamV1alpha1Client) PolicyAttachments(namespace string) PolicyAttachmentInterface {
	return newPolicyAttachments(c, namespace)
}

func (c *IamV1alpha1Client) Roles(namespace string) RoleInterface {
	return newRoles(c, namespace)
}

func (c *IamV1alpha1Client) RolePolicies(namespace string) RolePolicyInterface {
	return newRolePolicies(c, namespace)
}

func (c *IamV1alpha1Client) RolePolicyAttachments(namespace string) RolePolicyAttachmentInterface {
	return newRolePolicyAttachments(c, namespace)
}

func (c *IamV1alpha1Client) SamlProviders(namespace string) SamlProviderInterface {
	return newSamlProviders(c, namespace)
}

func (c *IamV1alpha1Client) ServerCertificates(namespace string) ServerCertificateInterface {
	return newServerCertificates(c, namespace)
}

func (c *IamV1alpha1Client) ServiceLinkedRoles(namespace string) ServiceLinkedRoleInterface {
	return newServiceLinkedRoles(c, namespace)
}

func (c *IamV1alpha1Client) Users(namespace string) UserInterface {
	return newUsers(c, namespace)
}

func (c *IamV1alpha1Client) UserGroupMemberships(namespace string) UserGroupMembershipInterface {
	return newUserGroupMemberships(c, namespace)
}

func (c *IamV1alpha1Client) UserLoginProfiles(namespace string) UserLoginProfileInterface {
	return newUserLoginProfiles(c, namespace)
}

func (c *IamV1alpha1Client) UserPolicies(namespace string) UserPolicyInterface {
	return newUserPolicies(c, namespace)
}

func (c *IamV1alpha1Client) UserPolicyAttachments(namespace string) UserPolicyAttachmentInterface {
	return newUserPolicyAttachments(c, namespace)
}

func (c *IamV1alpha1Client) UserSSHKeys(namespace string) UserSSHKeyInterface {
	return newUserSSHKeys(c, namespace)
}

// NewForConfig creates a new IamV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*IamV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &IamV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new IamV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *IamV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new IamV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *IamV1alpha1Client {
	return &IamV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *IamV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
