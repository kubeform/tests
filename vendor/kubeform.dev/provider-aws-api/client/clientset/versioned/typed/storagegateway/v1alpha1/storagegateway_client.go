/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/storagegateway/v1alpha1"
	"kubeform.dev/provider-aws-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type StoragegatewayV1alpha1Interface interface {
	RESTClient() rest.Interface
	CachesGetter
	CachedIscsiVolumesGetter
	GatewaysGetter
	NfsFileSharesGetter
	SmbFileSharesGetter
	StoredIscsiVolumesGetter
	TapePoolsGetter
	UploadBuffersGetter
	WorkingStoragesGetter
}

// StoragegatewayV1alpha1Client is used to interact with features provided by the storagegateway.aws.kubeform.com group.
type StoragegatewayV1alpha1Client struct {
	restClient rest.Interface
}

func (c *StoragegatewayV1alpha1Client) Caches(namespace string) CacheInterface {
	return newCaches(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) CachedIscsiVolumes(namespace string) CachedIscsiVolumeInterface {
	return newCachedIscsiVolumes(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) Gateways(namespace string) GatewayInterface {
	return newGateways(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) NfsFileShares(namespace string) NfsFileShareInterface {
	return newNfsFileShares(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) SmbFileShares(namespace string) SmbFileShareInterface {
	return newSmbFileShares(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) StoredIscsiVolumes(namespace string) StoredIscsiVolumeInterface {
	return newStoredIscsiVolumes(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) TapePools(namespace string) TapePoolInterface {
	return newTapePools(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) UploadBuffers(namespace string) UploadBufferInterface {
	return newUploadBuffers(c, namespace)
}

func (c *StoragegatewayV1alpha1Client) WorkingStorages(namespace string) WorkingStorageInterface {
	return newWorkingStorages(c, namespace)
}

// NewForConfig creates a new StoragegatewayV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*StoragegatewayV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &StoragegatewayV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new StoragegatewayV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *StoragegatewayV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new StoragegatewayV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *StoragegatewayV1alpha1Client {
	return &StoragegatewayV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *StoragegatewayV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
