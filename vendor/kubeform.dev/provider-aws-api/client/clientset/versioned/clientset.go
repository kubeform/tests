/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	accessanalyzerv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/accessanalyzer/v1alpha1"
	acmv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/acm/v1alpha1"
	acmpcav1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/acmpca/v1alpha1"
	albv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/alb/v1alpha1"
	amiv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ami/v1alpha1"
	apigatewayv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/apigateway/v1alpha1"
	apigatewayv2v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/apigatewayv2/v1alpha1"
	appv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/app/v1alpha1"
	appautoscalingv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/appautoscaling/v1alpha1"
	appmeshv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/appmesh/v1alpha1"
	appsyncv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/appsync/v1alpha1"
	athenav1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/athena/v1alpha1"
	autoscalingv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/autoscaling/v1alpha1"
	autoscalingplansv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/autoscalingplans/v1alpha1"
	backupv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/backup/v1alpha1"
	batchv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/batch/v1alpha1"
	budgetsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/budgets/v1alpha1"
	cloud9v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cloud9/v1alpha1"
	cloudformationstackv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cloudformationstack/v1alpha1"
	cloudfrontv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cloudfront/v1alpha1"
	cloudhsmv2v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cloudhsmv2/v1alpha1"
	cloudtrailv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cloudtrail/v1alpha1"
	cloudwatchv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cloudwatch/v1alpha1"
	codeartifactv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/codeartifact/v1alpha1"
	codebuildv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/codebuild/v1alpha1"
	codecommitv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/codecommit/v1alpha1"
	codedeployv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/codedeploy/v1alpha1"
	codepipelinev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/codepipeline/v1alpha1"
	codestarconnectionsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/codestarconnections/v1alpha1"
	codestarnotificationsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/codestarnotifications/v1alpha1"
	cognitov1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cognito/v1alpha1"
	configv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/config/v1alpha1"
	curv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/cur/v1alpha1"
	customerv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/customer/v1alpha1"
	datapipelinev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/datapipeline/v1alpha1"
	datasyncv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/datasync/v1alpha1"
	daxv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/dax/v1alpha1"
	dbv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/db/v1alpha1"
	defaultv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/default/v1alpha1"
	devicefarmv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/devicefarm/v1alpha1"
	directoryservicev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/directoryservice/v1alpha1"
	dlmv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/dlm/v1alpha1"
	dmsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/dms/v1alpha1"
	docdbv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/docdb/v1alpha1"
	dxv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/dx/v1alpha1"
	dynamodbv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/dynamodb/v1alpha1"
	ebsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ebs/v1alpha1"
	ec2v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ec2/v1alpha1"
	ecrv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ecr/v1alpha1"
	ecrpublicv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ecrpublic/v1alpha1"
	ecsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ecs/v1alpha1"
	efsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/efs/v1alpha1"
	egressv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/egress/v1alpha1"
	eipv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/eip/v1alpha1"
	eksv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/eks/v1alpha1"
	elasticachev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/elasticache/v1alpha1"
	elasticbeanstalkv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/elasticbeanstalk/v1alpha1"
	elasticsearchdomainv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/elasticsearchdomain/v1alpha1"
	elastictranscoderv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/elastictranscoder/v1alpha1"
	elbv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/elb/v1alpha1"
	emrv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/emr/v1alpha1"
	flowv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/flow/v1alpha1"
	fmsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/fms/v1alpha1"
	fsxv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/fsx/v1alpha1"
	gameliftv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/gamelift/v1alpha1"
	glaciervaultv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/glaciervault/v1alpha1"
	globalacceleratorv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/globalaccelerator/v1alpha1"
	gluev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/glue/v1alpha1"
	guarddutyv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/guardduty/v1alpha1"
	iamv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/iam/v1alpha1"
	imagebuilderv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/imagebuilder/v1alpha1"
	inspectorv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/inspector/v1alpha1"
	instancev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/instance/v1alpha1"
	internetv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/internet/v1alpha1"
	iotv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/iot/v1alpha1"
	keyv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/key/v1alpha1"
	kinesisv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/kinesis/v1alpha1"
	kinesisanalyticsv2v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/kinesisanalyticsv2/v1alpha1"
	kmsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/kms/v1alpha1"
	lakeformationv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/lakeformation/v1alpha1"
	lambdav1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/lambda/v1alpha1"
	launchv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/launch/v1alpha1"
	lbv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/lb/v1alpha1"
	lexv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/lex/v1alpha1"
	licensemanagerv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/licensemanager/v1alpha1"
	lightsailv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/lightsail/v1alpha1"
	loadbalancerv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/loadbalancer/v1alpha1"
	maciev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/macie/v1alpha1"
	mainv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/main/v1alpha1"
	mediav1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/media/v1alpha1"
	mqv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/mq/v1alpha1"
	mskv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/msk/v1alpha1"
	mwaav1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/mwaa/v1alpha1"
	natv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/nat/v1alpha1"
	neptunev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/neptune/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/network/v1alpha1"
	networkfirewallv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/networkfirewall/v1alpha1"
	opsworksv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/opsworks/v1alpha1"
	organizationsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/organizations/v1alpha1"
	pinpointv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/pinpoint/v1alpha1"
	placementv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/placement/v1alpha1"
	prometheusv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/prometheus/v1alpha1"
	proxyv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/proxy/v1alpha1"
	qldbv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/qldb/v1alpha1"
	quicksightv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/quicksight/v1alpha1"
	ramv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ram/v1alpha1"
	rdsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/rds/v1alpha1"
	redshiftv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/redshift/v1alpha1"
	resourcegroupsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/resourcegroups/v1alpha1"
	routev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/route/v1alpha1"
	route53v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/route53/v1alpha1"
	s3v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/s3/v1alpha1"
	s3controlv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/s3control/v1alpha1"
	s3outpostsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/s3outposts/v1alpha1"
	sagemakerv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/sagemaker/v1alpha1"
	secretsmanagerv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/secretsmanager/v1alpha1"
	securityv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/security/v1alpha1"
	securityhubv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/securityhub/v1alpha1"
	serverlessapplicationrepositoryv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/serverlessapplicationrepository/v1alpha1"
	servicecatalogv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/servicecatalog/v1alpha1"
	servicediscoveryv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/servicediscovery/v1alpha1"
	servicequotasv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/servicequotas/v1alpha1"
	sesv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ses/v1alpha1"
	sfnv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/sfn/v1alpha1"
	shieldv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/shield/v1alpha1"
	signerv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/signer/v1alpha1"
	simpledbv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/simpledb/v1alpha1"
	snapshotv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/snapshot/v1alpha1"
	snsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/sns/v1alpha1"
	spotv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/spot/v1alpha1"
	sqsqueuev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/sqsqueue/v1alpha1"
	ssmv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ssm/v1alpha1"
	ssoadminv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/ssoadmin/v1alpha1"
	storagegatewayv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/storagegateway/v1alpha1"
	subnetv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/subnet/v1alpha1"
	swfv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/swf/v1alpha1"
	syntheticsv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/synthetics/v1alpha1"
	transferv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/transfer/v1alpha1"
	volumev1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/volume/v1alpha1"
	vpcv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/vpc/v1alpha1"
	vpnv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/vpn/v1alpha1"
	wafv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/waf/v1alpha1"
	wafregionalv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/wafregional/v1alpha1"
	wafv2v1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/wafv2/v1alpha1"
	worklinkv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/worklink/v1alpha1"
	workspacesv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/workspaces/v1alpha1"
	xrayv1alpha1 "kubeform.dev/provider-aws-api/client/clientset/versioned/typed/xray/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AccessanalyzerV1alpha1() accessanalyzerv1alpha1.AccessanalyzerV1alpha1Interface
	AcmV1alpha1() acmv1alpha1.AcmV1alpha1Interface
	AcmpcaV1alpha1() acmpcav1alpha1.AcmpcaV1alpha1Interface
	AlbV1alpha1() albv1alpha1.AlbV1alpha1Interface
	AmiV1alpha1() amiv1alpha1.AmiV1alpha1Interface
	ApigatewayV1alpha1() apigatewayv1alpha1.ApigatewayV1alpha1Interface
	Apigatewayv2V1alpha1() apigatewayv2v1alpha1.Apigatewayv2V1alpha1Interface
	AppV1alpha1() appv1alpha1.AppV1alpha1Interface
	AppautoscalingV1alpha1() appautoscalingv1alpha1.AppautoscalingV1alpha1Interface
	AppmeshV1alpha1() appmeshv1alpha1.AppmeshV1alpha1Interface
	AppsyncV1alpha1() appsyncv1alpha1.AppsyncV1alpha1Interface
	AthenaV1alpha1() athenav1alpha1.AthenaV1alpha1Interface
	AutoscalingV1alpha1() autoscalingv1alpha1.AutoscalingV1alpha1Interface
	AutoscalingplansV1alpha1() autoscalingplansv1alpha1.AutoscalingplansV1alpha1Interface
	BackupV1alpha1() backupv1alpha1.BackupV1alpha1Interface
	BatchV1alpha1() batchv1alpha1.BatchV1alpha1Interface
	BudgetsV1alpha1() budgetsv1alpha1.BudgetsV1alpha1Interface
	Cloud9V1alpha1() cloud9v1alpha1.Cloud9V1alpha1Interface
	CloudformationstackV1alpha1() cloudformationstackv1alpha1.CloudformationstackV1alpha1Interface
	CloudfrontV1alpha1() cloudfrontv1alpha1.CloudfrontV1alpha1Interface
	Cloudhsmv2V1alpha1() cloudhsmv2v1alpha1.Cloudhsmv2V1alpha1Interface
	CloudtrailV1alpha1() cloudtrailv1alpha1.CloudtrailV1alpha1Interface
	CloudwatchV1alpha1() cloudwatchv1alpha1.CloudwatchV1alpha1Interface
	CodeartifactV1alpha1() codeartifactv1alpha1.CodeartifactV1alpha1Interface
	CodebuildV1alpha1() codebuildv1alpha1.CodebuildV1alpha1Interface
	CodecommitV1alpha1() codecommitv1alpha1.CodecommitV1alpha1Interface
	CodedeployV1alpha1() codedeployv1alpha1.CodedeployV1alpha1Interface
	CodepipelineV1alpha1() codepipelinev1alpha1.CodepipelineV1alpha1Interface
	CodestarconnectionsV1alpha1() codestarconnectionsv1alpha1.CodestarconnectionsV1alpha1Interface
	CodestarnotificationsV1alpha1() codestarnotificationsv1alpha1.CodestarnotificationsV1alpha1Interface
	CognitoV1alpha1() cognitov1alpha1.CognitoV1alpha1Interface
	ConfigV1alpha1() configv1alpha1.ConfigV1alpha1Interface
	CurV1alpha1() curv1alpha1.CurV1alpha1Interface
	CustomerV1alpha1() customerv1alpha1.CustomerV1alpha1Interface
	DatapipelineV1alpha1() datapipelinev1alpha1.DatapipelineV1alpha1Interface
	DatasyncV1alpha1() datasyncv1alpha1.DatasyncV1alpha1Interface
	DaxV1alpha1() daxv1alpha1.DaxV1alpha1Interface
	DbV1alpha1() dbv1alpha1.DbV1alpha1Interface
	DefaultV1alpha1() defaultv1alpha1.DefaultV1alpha1Interface
	DevicefarmV1alpha1() devicefarmv1alpha1.DevicefarmV1alpha1Interface
	DirectoryserviceV1alpha1() directoryservicev1alpha1.DirectoryserviceV1alpha1Interface
	DlmV1alpha1() dlmv1alpha1.DlmV1alpha1Interface
	DmsV1alpha1() dmsv1alpha1.DmsV1alpha1Interface
	DocdbV1alpha1() docdbv1alpha1.DocdbV1alpha1Interface
	DxV1alpha1() dxv1alpha1.DxV1alpha1Interface
	DynamodbV1alpha1() dynamodbv1alpha1.DynamodbV1alpha1Interface
	EbsV1alpha1() ebsv1alpha1.EbsV1alpha1Interface
	Ec2V1alpha1() ec2v1alpha1.Ec2V1alpha1Interface
	EcrV1alpha1() ecrv1alpha1.EcrV1alpha1Interface
	EcrpublicV1alpha1() ecrpublicv1alpha1.EcrpublicV1alpha1Interface
	EcsV1alpha1() ecsv1alpha1.EcsV1alpha1Interface
	EfsV1alpha1() efsv1alpha1.EfsV1alpha1Interface
	EgressV1alpha1() egressv1alpha1.EgressV1alpha1Interface
	EipV1alpha1() eipv1alpha1.EipV1alpha1Interface
	EksV1alpha1() eksv1alpha1.EksV1alpha1Interface
	ElasticacheV1alpha1() elasticachev1alpha1.ElasticacheV1alpha1Interface
	ElasticbeanstalkV1alpha1() elasticbeanstalkv1alpha1.ElasticbeanstalkV1alpha1Interface
	ElasticsearchdomainV1alpha1() elasticsearchdomainv1alpha1.ElasticsearchdomainV1alpha1Interface
	ElastictranscoderV1alpha1() elastictranscoderv1alpha1.ElastictranscoderV1alpha1Interface
	ElbV1alpha1() elbv1alpha1.ElbV1alpha1Interface
	EmrV1alpha1() emrv1alpha1.EmrV1alpha1Interface
	FlowV1alpha1() flowv1alpha1.FlowV1alpha1Interface
	FmsV1alpha1() fmsv1alpha1.FmsV1alpha1Interface
	FsxV1alpha1() fsxv1alpha1.FsxV1alpha1Interface
	GameliftV1alpha1() gameliftv1alpha1.GameliftV1alpha1Interface
	GlaciervaultV1alpha1() glaciervaultv1alpha1.GlaciervaultV1alpha1Interface
	GlobalacceleratorV1alpha1() globalacceleratorv1alpha1.GlobalacceleratorV1alpha1Interface
	GlueV1alpha1() gluev1alpha1.GlueV1alpha1Interface
	GuarddutyV1alpha1() guarddutyv1alpha1.GuarddutyV1alpha1Interface
	IamV1alpha1() iamv1alpha1.IamV1alpha1Interface
	ImagebuilderV1alpha1() imagebuilderv1alpha1.ImagebuilderV1alpha1Interface
	InspectorV1alpha1() inspectorv1alpha1.InspectorV1alpha1Interface
	InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface
	InternetV1alpha1() internetv1alpha1.InternetV1alpha1Interface
	IotV1alpha1() iotv1alpha1.IotV1alpha1Interface
	KeyV1alpha1() keyv1alpha1.KeyV1alpha1Interface
	KinesisV1alpha1() kinesisv1alpha1.KinesisV1alpha1Interface
	Kinesisanalyticsv2V1alpha1() kinesisanalyticsv2v1alpha1.Kinesisanalyticsv2V1alpha1Interface
	KmsV1alpha1() kmsv1alpha1.KmsV1alpha1Interface
	LakeformationV1alpha1() lakeformationv1alpha1.LakeformationV1alpha1Interface
	LambdaV1alpha1() lambdav1alpha1.LambdaV1alpha1Interface
	LaunchV1alpha1() launchv1alpha1.LaunchV1alpha1Interface
	LbV1alpha1() lbv1alpha1.LbV1alpha1Interface
	LexV1alpha1() lexv1alpha1.LexV1alpha1Interface
	LicensemanagerV1alpha1() licensemanagerv1alpha1.LicensemanagerV1alpha1Interface
	LightsailV1alpha1() lightsailv1alpha1.LightsailV1alpha1Interface
	LoadbalancerV1alpha1() loadbalancerv1alpha1.LoadbalancerV1alpha1Interface
	MacieV1alpha1() maciev1alpha1.MacieV1alpha1Interface
	MainV1alpha1() mainv1alpha1.MainV1alpha1Interface
	MediaV1alpha1() mediav1alpha1.MediaV1alpha1Interface
	MqV1alpha1() mqv1alpha1.MqV1alpha1Interface
	MskV1alpha1() mskv1alpha1.MskV1alpha1Interface
	MwaaV1alpha1() mwaav1alpha1.MwaaV1alpha1Interface
	NatV1alpha1() natv1alpha1.NatV1alpha1Interface
	NeptuneV1alpha1() neptunev1alpha1.NeptuneV1alpha1Interface
	NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface
	NetworkfirewallV1alpha1() networkfirewallv1alpha1.NetworkfirewallV1alpha1Interface
	OpsworksV1alpha1() opsworksv1alpha1.OpsworksV1alpha1Interface
	OrganizationsV1alpha1() organizationsv1alpha1.OrganizationsV1alpha1Interface
	PinpointV1alpha1() pinpointv1alpha1.PinpointV1alpha1Interface
	PlacementV1alpha1() placementv1alpha1.PlacementV1alpha1Interface
	PrometheusV1alpha1() prometheusv1alpha1.PrometheusV1alpha1Interface
	ProxyV1alpha1() proxyv1alpha1.ProxyV1alpha1Interface
	QldbV1alpha1() qldbv1alpha1.QldbV1alpha1Interface
	QuicksightV1alpha1() quicksightv1alpha1.QuicksightV1alpha1Interface
	RamV1alpha1() ramv1alpha1.RamV1alpha1Interface
	RdsV1alpha1() rdsv1alpha1.RdsV1alpha1Interface
	RedshiftV1alpha1() redshiftv1alpha1.RedshiftV1alpha1Interface
	ResourcegroupsV1alpha1() resourcegroupsv1alpha1.ResourcegroupsV1alpha1Interface
	RouteV1alpha1() routev1alpha1.RouteV1alpha1Interface
	Route53V1alpha1() route53v1alpha1.Route53V1alpha1Interface
	S3V1alpha1() s3v1alpha1.S3V1alpha1Interface
	S3controlV1alpha1() s3controlv1alpha1.S3controlV1alpha1Interface
	S3outpostsV1alpha1() s3outpostsv1alpha1.S3outpostsV1alpha1Interface
	SagemakerV1alpha1() sagemakerv1alpha1.SagemakerV1alpha1Interface
	SecretsmanagerV1alpha1() secretsmanagerv1alpha1.SecretsmanagerV1alpha1Interface
	SecurityV1alpha1() securityv1alpha1.SecurityV1alpha1Interface
	SecurityhubV1alpha1() securityhubv1alpha1.SecurityhubV1alpha1Interface
	ServerlessapplicationrepositoryV1alpha1() serverlessapplicationrepositoryv1alpha1.ServerlessapplicationrepositoryV1alpha1Interface
	ServicecatalogV1alpha1() servicecatalogv1alpha1.ServicecatalogV1alpha1Interface
	ServicediscoveryV1alpha1() servicediscoveryv1alpha1.ServicediscoveryV1alpha1Interface
	ServicequotasV1alpha1() servicequotasv1alpha1.ServicequotasV1alpha1Interface
	SesV1alpha1() sesv1alpha1.SesV1alpha1Interface
	SfnV1alpha1() sfnv1alpha1.SfnV1alpha1Interface
	ShieldV1alpha1() shieldv1alpha1.ShieldV1alpha1Interface
	SignerV1alpha1() signerv1alpha1.SignerV1alpha1Interface
	SimpledbV1alpha1() simpledbv1alpha1.SimpledbV1alpha1Interface
	SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface
	SnsV1alpha1() snsv1alpha1.SnsV1alpha1Interface
	SpotV1alpha1() spotv1alpha1.SpotV1alpha1Interface
	SqsqueueV1alpha1() sqsqueuev1alpha1.SqsqueueV1alpha1Interface
	SsmV1alpha1() ssmv1alpha1.SsmV1alpha1Interface
	SsoadminV1alpha1() ssoadminv1alpha1.SsoadminV1alpha1Interface
	StoragegatewayV1alpha1() storagegatewayv1alpha1.StoragegatewayV1alpha1Interface
	SubnetV1alpha1() subnetv1alpha1.SubnetV1alpha1Interface
	SwfV1alpha1() swfv1alpha1.SwfV1alpha1Interface
	SyntheticsV1alpha1() syntheticsv1alpha1.SyntheticsV1alpha1Interface
	TransferV1alpha1() transferv1alpha1.TransferV1alpha1Interface
	VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface
	VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface
	VpnV1alpha1() vpnv1alpha1.VpnV1alpha1Interface
	WafV1alpha1() wafv1alpha1.WafV1alpha1Interface
	WafregionalV1alpha1() wafregionalv1alpha1.WafregionalV1alpha1Interface
	Wafv2V1alpha1() wafv2v1alpha1.Wafv2V1alpha1Interface
	WorklinkV1alpha1() worklinkv1alpha1.WorklinkV1alpha1Interface
	WorkspacesV1alpha1() workspacesv1alpha1.WorkspacesV1alpha1Interface
	XrayV1alpha1() xrayv1alpha1.XrayV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	accessanalyzerV1alpha1                  *accessanalyzerv1alpha1.AccessanalyzerV1alpha1Client
	acmV1alpha1                             *acmv1alpha1.AcmV1alpha1Client
	acmpcaV1alpha1                          *acmpcav1alpha1.AcmpcaV1alpha1Client
	albV1alpha1                             *albv1alpha1.AlbV1alpha1Client
	amiV1alpha1                             *amiv1alpha1.AmiV1alpha1Client
	apigatewayV1alpha1                      *apigatewayv1alpha1.ApigatewayV1alpha1Client
	apigatewayv2V1alpha1                    *apigatewayv2v1alpha1.Apigatewayv2V1alpha1Client
	appV1alpha1                             *appv1alpha1.AppV1alpha1Client
	appautoscalingV1alpha1                  *appautoscalingv1alpha1.AppautoscalingV1alpha1Client
	appmeshV1alpha1                         *appmeshv1alpha1.AppmeshV1alpha1Client
	appsyncV1alpha1                         *appsyncv1alpha1.AppsyncV1alpha1Client
	athenaV1alpha1                          *athenav1alpha1.AthenaV1alpha1Client
	autoscalingV1alpha1                     *autoscalingv1alpha1.AutoscalingV1alpha1Client
	autoscalingplansV1alpha1                *autoscalingplansv1alpha1.AutoscalingplansV1alpha1Client
	backupV1alpha1                          *backupv1alpha1.BackupV1alpha1Client
	batchV1alpha1                           *batchv1alpha1.BatchV1alpha1Client
	budgetsV1alpha1                         *budgetsv1alpha1.BudgetsV1alpha1Client
	cloud9V1alpha1                          *cloud9v1alpha1.Cloud9V1alpha1Client
	cloudformationstackV1alpha1             *cloudformationstackv1alpha1.CloudformationstackV1alpha1Client
	cloudfrontV1alpha1                      *cloudfrontv1alpha1.CloudfrontV1alpha1Client
	cloudhsmv2V1alpha1                      *cloudhsmv2v1alpha1.Cloudhsmv2V1alpha1Client
	cloudtrailV1alpha1                      *cloudtrailv1alpha1.CloudtrailV1alpha1Client
	cloudwatchV1alpha1                      *cloudwatchv1alpha1.CloudwatchV1alpha1Client
	codeartifactV1alpha1                    *codeartifactv1alpha1.CodeartifactV1alpha1Client
	codebuildV1alpha1                       *codebuildv1alpha1.CodebuildV1alpha1Client
	codecommitV1alpha1                      *codecommitv1alpha1.CodecommitV1alpha1Client
	codedeployV1alpha1                      *codedeployv1alpha1.CodedeployV1alpha1Client
	codepipelineV1alpha1                    *codepipelinev1alpha1.CodepipelineV1alpha1Client
	codestarconnectionsV1alpha1             *codestarconnectionsv1alpha1.CodestarconnectionsV1alpha1Client
	codestarnotificationsV1alpha1           *codestarnotificationsv1alpha1.CodestarnotificationsV1alpha1Client
	cognitoV1alpha1                         *cognitov1alpha1.CognitoV1alpha1Client
	configV1alpha1                          *configv1alpha1.ConfigV1alpha1Client
	curV1alpha1                             *curv1alpha1.CurV1alpha1Client
	customerV1alpha1                        *customerv1alpha1.CustomerV1alpha1Client
	datapipelineV1alpha1                    *datapipelinev1alpha1.DatapipelineV1alpha1Client
	datasyncV1alpha1                        *datasyncv1alpha1.DatasyncV1alpha1Client
	daxV1alpha1                             *daxv1alpha1.DaxV1alpha1Client
	dbV1alpha1                              *dbv1alpha1.DbV1alpha1Client
	defaultV1alpha1                         *defaultv1alpha1.DefaultV1alpha1Client
	devicefarmV1alpha1                      *devicefarmv1alpha1.DevicefarmV1alpha1Client
	directoryserviceV1alpha1                *directoryservicev1alpha1.DirectoryserviceV1alpha1Client
	dlmV1alpha1                             *dlmv1alpha1.DlmV1alpha1Client
	dmsV1alpha1                             *dmsv1alpha1.DmsV1alpha1Client
	docdbV1alpha1                           *docdbv1alpha1.DocdbV1alpha1Client
	dxV1alpha1                              *dxv1alpha1.DxV1alpha1Client
	dynamodbV1alpha1                        *dynamodbv1alpha1.DynamodbV1alpha1Client
	ebsV1alpha1                             *ebsv1alpha1.EbsV1alpha1Client
	ec2V1alpha1                             *ec2v1alpha1.Ec2V1alpha1Client
	ecrV1alpha1                             *ecrv1alpha1.EcrV1alpha1Client
	ecrpublicV1alpha1                       *ecrpublicv1alpha1.EcrpublicV1alpha1Client
	ecsV1alpha1                             *ecsv1alpha1.EcsV1alpha1Client
	efsV1alpha1                             *efsv1alpha1.EfsV1alpha1Client
	egressV1alpha1                          *egressv1alpha1.EgressV1alpha1Client
	eipV1alpha1                             *eipv1alpha1.EipV1alpha1Client
	eksV1alpha1                             *eksv1alpha1.EksV1alpha1Client
	elasticacheV1alpha1                     *elasticachev1alpha1.ElasticacheV1alpha1Client
	elasticbeanstalkV1alpha1                *elasticbeanstalkv1alpha1.ElasticbeanstalkV1alpha1Client
	elasticsearchdomainV1alpha1             *elasticsearchdomainv1alpha1.ElasticsearchdomainV1alpha1Client
	elastictranscoderV1alpha1               *elastictranscoderv1alpha1.ElastictranscoderV1alpha1Client
	elbV1alpha1                             *elbv1alpha1.ElbV1alpha1Client
	emrV1alpha1                             *emrv1alpha1.EmrV1alpha1Client
	flowV1alpha1                            *flowv1alpha1.FlowV1alpha1Client
	fmsV1alpha1                             *fmsv1alpha1.FmsV1alpha1Client
	fsxV1alpha1                             *fsxv1alpha1.FsxV1alpha1Client
	gameliftV1alpha1                        *gameliftv1alpha1.GameliftV1alpha1Client
	glaciervaultV1alpha1                    *glaciervaultv1alpha1.GlaciervaultV1alpha1Client
	globalacceleratorV1alpha1               *globalacceleratorv1alpha1.GlobalacceleratorV1alpha1Client
	glueV1alpha1                            *gluev1alpha1.GlueV1alpha1Client
	guarddutyV1alpha1                       *guarddutyv1alpha1.GuarddutyV1alpha1Client
	iamV1alpha1                             *iamv1alpha1.IamV1alpha1Client
	imagebuilderV1alpha1                    *imagebuilderv1alpha1.ImagebuilderV1alpha1Client
	inspectorV1alpha1                       *inspectorv1alpha1.InspectorV1alpha1Client
	instanceV1alpha1                        *instancev1alpha1.InstanceV1alpha1Client
	internetV1alpha1                        *internetv1alpha1.InternetV1alpha1Client
	iotV1alpha1                             *iotv1alpha1.IotV1alpha1Client
	keyV1alpha1                             *keyv1alpha1.KeyV1alpha1Client
	kinesisV1alpha1                         *kinesisv1alpha1.KinesisV1alpha1Client
	kinesisanalyticsv2V1alpha1              *kinesisanalyticsv2v1alpha1.Kinesisanalyticsv2V1alpha1Client
	kmsV1alpha1                             *kmsv1alpha1.KmsV1alpha1Client
	lakeformationV1alpha1                   *lakeformationv1alpha1.LakeformationV1alpha1Client
	lambdaV1alpha1                          *lambdav1alpha1.LambdaV1alpha1Client
	launchV1alpha1                          *launchv1alpha1.LaunchV1alpha1Client
	lbV1alpha1                              *lbv1alpha1.LbV1alpha1Client
	lexV1alpha1                             *lexv1alpha1.LexV1alpha1Client
	licensemanagerV1alpha1                  *licensemanagerv1alpha1.LicensemanagerV1alpha1Client
	lightsailV1alpha1                       *lightsailv1alpha1.LightsailV1alpha1Client
	loadbalancerV1alpha1                    *loadbalancerv1alpha1.LoadbalancerV1alpha1Client
	macieV1alpha1                           *maciev1alpha1.MacieV1alpha1Client
	mainV1alpha1                            *mainv1alpha1.MainV1alpha1Client
	mediaV1alpha1                           *mediav1alpha1.MediaV1alpha1Client
	mqV1alpha1                              *mqv1alpha1.MqV1alpha1Client
	mskV1alpha1                             *mskv1alpha1.MskV1alpha1Client
	mwaaV1alpha1                            *mwaav1alpha1.MwaaV1alpha1Client
	natV1alpha1                             *natv1alpha1.NatV1alpha1Client
	neptuneV1alpha1                         *neptunev1alpha1.NeptuneV1alpha1Client
	networkV1alpha1                         *networkv1alpha1.NetworkV1alpha1Client
	networkfirewallV1alpha1                 *networkfirewallv1alpha1.NetworkfirewallV1alpha1Client
	opsworksV1alpha1                        *opsworksv1alpha1.OpsworksV1alpha1Client
	organizationsV1alpha1                   *organizationsv1alpha1.OrganizationsV1alpha1Client
	pinpointV1alpha1                        *pinpointv1alpha1.PinpointV1alpha1Client
	placementV1alpha1                       *placementv1alpha1.PlacementV1alpha1Client
	prometheusV1alpha1                      *prometheusv1alpha1.PrometheusV1alpha1Client
	proxyV1alpha1                           *proxyv1alpha1.ProxyV1alpha1Client
	qldbV1alpha1                            *qldbv1alpha1.QldbV1alpha1Client
	quicksightV1alpha1                      *quicksightv1alpha1.QuicksightV1alpha1Client
	ramV1alpha1                             *ramv1alpha1.RamV1alpha1Client
	rdsV1alpha1                             *rdsv1alpha1.RdsV1alpha1Client
	redshiftV1alpha1                        *redshiftv1alpha1.RedshiftV1alpha1Client
	resourcegroupsV1alpha1                  *resourcegroupsv1alpha1.ResourcegroupsV1alpha1Client
	routeV1alpha1                           *routev1alpha1.RouteV1alpha1Client
	route53V1alpha1                         *route53v1alpha1.Route53V1alpha1Client
	s3V1alpha1                              *s3v1alpha1.S3V1alpha1Client
	s3controlV1alpha1                       *s3controlv1alpha1.S3controlV1alpha1Client
	s3outpostsV1alpha1                      *s3outpostsv1alpha1.S3outpostsV1alpha1Client
	sagemakerV1alpha1                       *sagemakerv1alpha1.SagemakerV1alpha1Client
	secretsmanagerV1alpha1                  *secretsmanagerv1alpha1.SecretsmanagerV1alpha1Client
	securityV1alpha1                        *securityv1alpha1.SecurityV1alpha1Client
	securityhubV1alpha1                     *securityhubv1alpha1.SecurityhubV1alpha1Client
	serverlessapplicationrepositoryV1alpha1 *serverlessapplicationrepositoryv1alpha1.ServerlessapplicationrepositoryV1alpha1Client
	servicecatalogV1alpha1                  *servicecatalogv1alpha1.ServicecatalogV1alpha1Client
	servicediscoveryV1alpha1                *servicediscoveryv1alpha1.ServicediscoveryV1alpha1Client
	servicequotasV1alpha1                   *servicequotasv1alpha1.ServicequotasV1alpha1Client
	sesV1alpha1                             *sesv1alpha1.SesV1alpha1Client
	sfnV1alpha1                             *sfnv1alpha1.SfnV1alpha1Client
	shieldV1alpha1                          *shieldv1alpha1.ShieldV1alpha1Client
	signerV1alpha1                          *signerv1alpha1.SignerV1alpha1Client
	simpledbV1alpha1                        *simpledbv1alpha1.SimpledbV1alpha1Client
	snapshotV1alpha1                        *snapshotv1alpha1.SnapshotV1alpha1Client
	snsV1alpha1                             *snsv1alpha1.SnsV1alpha1Client
	spotV1alpha1                            *spotv1alpha1.SpotV1alpha1Client
	sqsqueueV1alpha1                        *sqsqueuev1alpha1.SqsqueueV1alpha1Client
	ssmV1alpha1                             *ssmv1alpha1.SsmV1alpha1Client
	ssoadminV1alpha1                        *ssoadminv1alpha1.SsoadminV1alpha1Client
	storagegatewayV1alpha1                  *storagegatewayv1alpha1.StoragegatewayV1alpha1Client
	subnetV1alpha1                          *subnetv1alpha1.SubnetV1alpha1Client
	swfV1alpha1                             *swfv1alpha1.SwfV1alpha1Client
	syntheticsV1alpha1                      *syntheticsv1alpha1.SyntheticsV1alpha1Client
	transferV1alpha1                        *transferv1alpha1.TransferV1alpha1Client
	volumeV1alpha1                          *volumev1alpha1.VolumeV1alpha1Client
	vpcV1alpha1                             *vpcv1alpha1.VpcV1alpha1Client
	vpnV1alpha1                             *vpnv1alpha1.VpnV1alpha1Client
	wafV1alpha1                             *wafv1alpha1.WafV1alpha1Client
	wafregionalV1alpha1                     *wafregionalv1alpha1.WafregionalV1alpha1Client
	wafv2V1alpha1                           *wafv2v1alpha1.Wafv2V1alpha1Client
	worklinkV1alpha1                        *worklinkv1alpha1.WorklinkV1alpha1Client
	workspacesV1alpha1                      *workspacesv1alpha1.WorkspacesV1alpha1Client
	xrayV1alpha1                            *xrayv1alpha1.XrayV1alpha1Client
}

// AccessanalyzerV1alpha1 retrieves the AccessanalyzerV1alpha1Client
func (c *Clientset) AccessanalyzerV1alpha1() accessanalyzerv1alpha1.AccessanalyzerV1alpha1Interface {
	return c.accessanalyzerV1alpha1
}

// AcmV1alpha1 retrieves the AcmV1alpha1Client
func (c *Clientset) AcmV1alpha1() acmv1alpha1.AcmV1alpha1Interface {
	return c.acmV1alpha1
}

// AcmpcaV1alpha1 retrieves the AcmpcaV1alpha1Client
func (c *Clientset) AcmpcaV1alpha1() acmpcav1alpha1.AcmpcaV1alpha1Interface {
	return c.acmpcaV1alpha1
}

// AlbV1alpha1 retrieves the AlbV1alpha1Client
func (c *Clientset) AlbV1alpha1() albv1alpha1.AlbV1alpha1Interface {
	return c.albV1alpha1
}

// AmiV1alpha1 retrieves the AmiV1alpha1Client
func (c *Clientset) AmiV1alpha1() amiv1alpha1.AmiV1alpha1Interface {
	return c.amiV1alpha1
}

// ApigatewayV1alpha1 retrieves the ApigatewayV1alpha1Client
func (c *Clientset) ApigatewayV1alpha1() apigatewayv1alpha1.ApigatewayV1alpha1Interface {
	return c.apigatewayV1alpha1
}

// Apigatewayv2V1alpha1 retrieves the Apigatewayv2V1alpha1Client
func (c *Clientset) Apigatewayv2V1alpha1() apigatewayv2v1alpha1.Apigatewayv2V1alpha1Interface {
	return c.apigatewayv2V1alpha1
}

// AppV1alpha1 retrieves the AppV1alpha1Client
func (c *Clientset) AppV1alpha1() appv1alpha1.AppV1alpha1Interface {
	return c.appV1alpha1
}

// AppautoscalingV1alpha1 retrieves the AppautoscalingV1alpha1Client
func (c *Clientset) AppautoscalingV1alpha1() appautoscalingv1alpha1.AppautoscalingV1alpha1Interface {
	return c.appautoscalingV1alpha1
}

// AppmeshV1alpha1 retrieves the AppmeshV1alpha1Client
func (c *Clientset) AppmeshV1alpha1() appmeshv1alpha1.AppmeshV1alpha1Interface {
	return c.appmeshV1alpha1
}

// AppsyncV1alpha1 retrieves the AppsyncV1alpha1Client
func (c *Clientset) AppsyncV1alpha1() appsyncv1alpha1.AppsyncV1alpha1Interface {
	return c.appsyncV1alpha1
}

// AthenaV1alpha1 retrieves the AthenaV1alpha1Client
func (c *Clientset) AthenaV1alpha1() athenav1alpha1.AthenaV1alpha1Interface {
	return c.athenaV1alpha1
}

// AutoscalingV1alpha1 retrieves the AutoscalingV1alpha1Client
func (c *Clientset) AutoscalingV1alpha1() autoscalingv1alpha1.AutoscalingV1alpha1Interface {
	return c.autoscalingV1alpha1
}

// AutoscalingplansV1alpha1 retrieves the AutoscalingplansV1alpha1Client
func (c *Clientset) AutoscalingplansV1alpha1() autoscalingplansv1alpha1.AutoscalingplansV1alpha1Interface {
	return c.autoscalingplansV1alpha1
}

// BackupV1alpha1 retrieves the BackupV1alpha1Client
func (c *Clientset) BackupV1alpha1() backupv1alpha1.BackupV1alpha1Interface {
	return c.backupV1alpha1
}

// BatchV1alpha1 retrieves the BatchV1alpha1Client
func (c *Clientset) BatchV1alpha1() batchv1alpha1.BatchV1alpha1Interface {
	return c.batchV1alpha1
}

// BudgetsV1alpha1 retrieves the BudgetsV1alpha1Client
func (c *Clientset) BudgetsV1alpha1() budgetsv1alpha1.BudgetsV1alpha1Interface {
	return c.budgetsV1alpha1
}

// Cloud9V1alpha1 retrieves the Cloud9V1alpha1Client
func (c *Clientset) Cloud9V1alpha1() cloud9v1alpha1.Cloud9V1alpha1Interface {
	return c.cloud9V1alpha1
}

// CloudformationstackV1alpha1 retrieves the CloudformationstackV1alpha1Client
func (c *Clientset) CloudformationstackV1alpha1() cloudformationstackv1alpha1.CloudformationstackV1alpha1Interface {
	return c.cloudformationstackV1alpha1
}

// CloudfrontV1alpha1 retrieves the CloudfrontV1alpha1Client
func (c *Clientset) CloudfrontV1alpha1() cloudfrontv1alpha1.CloudfrontV1alpha1Interface {
	return c.cloudfrontV1alpha1
}

// Cloudhsmv2V1alpha1 retrieves the Cloudhsmv2V1alpha1Client
func (c *Clientset) Cloudhsmv2V1alpha1() cloudhsmv2v1alpha1.Cloudhsmv2V1alpha1Interface {
	return c.cloudhsmv2V1alpha1
}

// CloudtrailV1alpha1 retrieves the CloudtrailV1alpha1Client
func (c *Clientset) CloudtrailV1alpha1() cloudtrailv1alpha1.CloudtrailV1alpha1Interface {
	return c.cloudtrailV1alpha1
}

// CloudwatchV1alpha1 retrieves the CloudwatchV1alpha1Client
func (c *Clientset) CloudwatchV1alpha1() cloudwatchv1alpha1.CloudwatchV1alpha1Interface {
	return c.cloudwatchV1alpha1
}

// CodeartifactV1alpha1 retrieves the CodeartifactV1alpha1Client
func (c *Clientset) CodeartifactV1alpha1() codeartifactv1alpha1.CodeartifactV1alpha1Interface {
	return c.codeartifactV1alpha1
}

// CodebuildV1alpha1 retrieves the CodebuildV1alpha1Client
func (c *Clientset) CodebuildV1alpha1() codebuildv1alpha1.CodebuildV1alpha1Interface {
	return c.codebuildV1alpha1
}

// CodecommitV1alpha1 retrieves the CodecommitV1alpha1Client
func (c *Clientset) CodecommitV1alpha1() codecommitv1alpha1.CodecommitV1alpha1Interface {
	return c.codecommitV1alpha1
}

// CodedeployV1alpha1 retrieves the CodedeployV1alpha1Client
func (c *Clientset) CodedeployV1alpha1() codedeployv1alpha1.CodedeployV1alpha1Interface {
	return c.codedeployV1alpha1
}

// CodepipelineV1alpha1 retrieves the CodepipelineV1alpha1Client
func (c *Clientset) CodepipelineV1alpha1() codepipelinev1alpha1.CodepipelineV1alpha1Interface {
	return c.codepipelineV1alpha1
}

// CodestarconnectionsV1alpha1 retrieves the CodestarconnectionsV1alpha1Client
func (c *Clientset) CodestarconnectionsV1alpha1() codestarconnectionsv1alpha1.CodestarconnectionsV1alpha1Interface {
	return c.codestarconnectionsV1alpha1
}

// CodestarnotificationsV1alpha1 retrieves the CodestarnotificationsV1alpha1Client
func (c *Clientset) CodestarnotificationsV1alpha1() codestarnotificationsv1alpha1.CodestarnotificationsV1alpha1Interface {
	return c.codestarnotificationsV1alpha1
}

// CognitoV1alpha1 retrieves the CognitoV1alpha1Client
func (c *Clientset) CognitoV1alpha1() cognitov1alpha1.CognitoV1alpha1Interface {
	return c.cognitoV1alpha1
}

// ConfigV1alpha1 retrieves the ConfigV1alpha1Client
func (c *Clientset) ConfigV1alpha1() configv1alpha1.ConfigV1alpha1Interface {
	return c.configV1alpha1
}

// CurV1alpha1 retrieves the CurV1alpha1Client
func (c *Clientset) CurV1alpha1() curv1alpha1.CurV1alpha1Interface {
	return c.curV1alpha1
}

// CustomerV1alpha1 retrieves the CustomerV1alpha1Client
func (c *Clientset) CustomerV1alpha1() customerv1alpha1.CustomerV1alpha1Interface {
	return c.customerV1alpha1
}

// DatapipelineV1alpha1 retrieves the DatapipelineV1alpha1Client
func (c *Clientset) DatapipelineV1alpha1() datapipelinev1alpha1.DatapipelineV1alpha1Interface {
	return c.datapipelineV1alpha1
}

// DatasyncV1alpha1 retrieves the DatasyncV1alpha1Client
func (c *Clientset) DatasyncV1alpha1() datasyncv1alpha1.DatasyncV1alpha1Interface {
	return c.datasyncV1alpha1
}

// DaxV1alpha1 retrieves the DaxV1alpha1Client
func (c *Clientset) DaxV1alpha1() daxv1alpha1.DaxV1alpha1Interface {
	return c.daxV1alpha1
}

// DbV1alpha1 retrieves the DbV1alpha1Client
func (c *Clientset) DbV1alpha1() dbv1alpha1.DbV1alpha1Interface {
	return c.dbV1alpha1
}

// DefaultV1alpha1 retrieves the DefaultV1alpha1Client
func (c *Clientset) DefaultV1alpha1() defaultv1alpha1.DefaultV1alpha1Interface {
	return c.defaultV1alpha1
}

// DevicefarmV1alpha1 retrieves the DevicefarmV1alpha1Client
func (c *Clientset) DevicefarmV1alpha1() devicefarmv1alpha1.DevicefarmV1alpha1Interface {
	return c.devicefarmV1alpha1
}

// DirectoryserviceV1alpha1 retrieves the DirectoryserviceV1alpha1Client
func (c *Clientset) DirectoryserviceV1alpha1() directoryservicev1alpha1.DirectoryserviceV1alpha1Interface {
	return c.directoryserviceV1alpha1
}

// DlmV1alpha1 retrieves the DlmV1alpha1Client
func (c *Clientset) DlmV1alpha1() dlmv1alpha1.DlmV1alpha1Interface {
	return c.dlmV1alpha1
}

// DmsV1alpha1 retrieves the DmsV1alpha1Client
func (c *Clientset) DmsV1alpha1() dmsv1alpha1.DmsV1alpha1Interface {
	return c.dmsV1alpha1
}

// DocdbV1alpha1 retrieves the DocdbV1alpha1Client
func (c *Clientset) DocdbV1alpha1() docdbv1alpha1.DocdbV1alpha1Interface {
	return c.docdbV1alpha1
}

// DxV1alpha1 retrieves the DxV1alpha1Client
func (c *Clientset) DxV1alpha1() dxv1alpha1.DxV1alpha1Interface {
	return c.dxV1alpha1
}

// DynamodbV1alpha1 retrieves the DynamodbV1alpha1Client
func (c *Clientset) DynamodbV1alpha1() dynamodbv1alpha1.DynamodbV1alpha1Interface {
	return c.dynamodbV1alpha1
}

// EbsV1alpha1 retrieves the EbsV1alpha1Client
func (c *Clientset) EbsV1alpha1() ebsv1alpha1.EbsV1alpha1Interface {
	return c.ebsV1alpha1
}

// Ec2V1alpha1 retrieves the Ec2V1alpha1Client
func (c *Clientset) Ec2V1alpha1() ec2v1alpha1.Ec2V1alpha1Interface {
	return c.ec2V1alpha1
}

// EcrV1alpha1 retrieves the EcrV1alpha1Client
func (c *Clientset) EcrV1alpha1() ecrv1alpha1.EcrV1alpha1Interface {
	return c.ecrV1alpha1
}

// EcrpublicV1alpha1 retrieves the EcrpublicV1alpha1Client
func (c *Clientset) EcrpublicV1alpha1() ecrpublicv1alpha1.EcrpublicV1alpha1Interface {
	return c.ecrpublicV1alpha1
}

// EcsV1alpha1 retrieves the EcsV1alpha1Client
func (c *Clientset) EcsV1alpha1() ecsv1alpha1.EcsV1alpha1Interface {
	return c.ecsV1alpha1
}

// EfsV1alpha1 retrieves the EfsV1alpha1Client
func (c *Clientset) EfsV1alpha1() efsv1alpha1.EfsV1alpha1Interface {
	return c.efsV1alpha1
}

// EgressV1alpha1 retrieves the EgressV1alpha1Client
func (c *Clientset) EgressV1alpha1() egressv1alpha1.EgressV1alpha1Interface {
	return c.egressV1alpha1
}

// EipV1alpha1 retrieves the EipV1alpha1Client
func (c *Clientset) EipV1alpha1() eipv1alpha1.EipV1alpha1Interface {
	return c.eipV1alpha1
}

// EksV1alpha1 retrieves the EksV1alpha1Client
func (c *Clientset) EksV1alpha1() eksv1alpha1.EksV1alpha1Interface {
	return c.eksV1alpha1
}

// ElasticacheV1alpha1 retrieves the ElasticacheV1alpha1Client
func (c *Clientset) ElasticacheV1alpha1() elasticachev1alpha1.ElasticacheV1alpha1Interface {
	return c.elasticacheV1alpha1
}

// ElasticbeanstalkV1alpha1 retrieves the ElasticbeanstalkV1alpha1Client
func (c *Clientset) ElasticbeanstalkV1alpha1() elasticbeanstalkv1alpha1.ElasticbeanstalkV1alpha1Interface {
	return c.elasticbeanstalkV1alpha1
}

// ElasticsearchdomainV1alpha1 retrieves the ElasticsearchdomainV1alpha1Client
func (c *Clientset) ElasticsearchdomainV1alpha1() elasticsearchdomainv1alpha1.ElasticsearchdomainV1alpha1Interface {
	return c.elasticsearchdomainV1alpha1
}

// ElastictranscoderV1alpha1 retrieves the ElastictranscoderV1alpha1Client
func (c *Clientset) ElastictranscoderV1alpha1() elastictranscoderv1alpha1.ElastictranscoderV1alpha1Interface {
	return c.elastictranscoderV1alpha1
}

// ElbV1alpha1 retrieves the ElbV1alpha1Client
func (c *Clientset) ElbV1alpha1() elbv1alpha1.ElbV1alpha1Interface {
	return c.elbV1alpha1
}

// EmrV1alpha1 retrieves the EmrV1alpha1Client
func (c *Clientset) EmrV1alpha1() emrv1alpha1.EmrV1alpha1Interface {
	return c.emrV1alpha1
}

// FlowV1alpha1 retrieves the FlowV1alpha1Client
func (c *Clientset) FlowV1alpha1() flowv1alpha1.FlowV1alpha1Interface {
	return c.flowV1alpha1
}

// FmsV1alpha1 retrieves the FmsV1alpha1Client
func (c *Clientset) FmsV1alpha1() fmsv1alpha1.FmsV1alpha1Interface {
	return c.fmsV1alpha1
}

// FsxV1alpha1 retrieves the FsxV1alpha1Client
func (c *Clientset) FsxV1alpha1() fsxv1alpha1.FsxV1alpha1Interface {
	return c.fsxV1alpha1
}

// GameliftV1alpha1 retrieves the GameliftV1alpha1Client
func (c *Clientset) GameliftV1alpha1() gameliftv1alpha1.GameliftV1alpha1Interface {
	return c.gameliftV1alpha1
}

// GlaciervaultV1alpha1 retrieves the GlaciervaultV1alpha1Client
func (c *Clientset) GlaciervaultV1alpha1() glaciervaultv1alpha1.GlaciervaultV1alpha1Interface {
	return c.glaciervaultV1alpha1
}

// GlobalacceleratorV1alpha1 retrieves the GlobalacceleratorV1alpha1Client
func (c *Clientset) GlobalacceleratorV1alpha1() globalacceleratorv1alpha1.GlobalacceleratorV1alpha1Interface {
	return c.globalacceleratorV1alpha1
}

// GlueV1alpha1 retrieves the GlueV1alpha1Client
func (c *Clientset) GlueV1alpha1() gluev1alpha1.GlueV1alpha1Interface {
	return c.glueV1alpha1
}

// GuarddutyV1alpha1 retrieves the GuarddutyV1alpha1Client
func (c *Clientset) GuarddutyV1alpha1() guarddutyv1alpha1.GuarddutyV1alpha1Interface {
	return c.guarddutyV1alpha1
}

// IamV1alpha1 retrieves the IamV1alpha1Client
func (c *Clientset) IamV1alpha1() iamv1alpha1.IamV1alpha1Interface {
	return c.iamV1alpha1
}

// ImagebuilderV1alpha1 retrieves the ImagebuilderV1alpha1Client
func (c *Clientset) ImagebuilderV1alpha1() imagebuilderv1alpha1.ImagebuilderV1alpha1Interface {
	return c.imagebuilderV1alpha1
}

// InspectorV1alpha1 retrieves the InspectorV1alpha1Client
func (c *Clientset) InspectorV1alpha1() inspectorv1alpha1.InspectorV1alpha1Interface {
	return c.inspectorV1alpha1
}

// InstanceV1alpha1 retrieves the InstanceV1alpha1Client
func (c *Clientset) InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface {
	return c.instanceV1alpha1
}

// InternetV1alpha1 retrieves the InternetV1alpha1Client
func (c *Clientset) InternetV1alpha1() internetv1alpha1.InternetV1alpha1Interface {
	return c.internetV1alpha1
}

// IotV1alpha1 retrieves the IotV1alpha1Client
func (c *Clientset) IotV1alpha1() iotv1alpha1.IotV1alpha1Interface {
	return c.iotV1alpha1
}

// KeyV1alpha1 retrieves the KeyV1alpha1Client
func (c *Clientset) KeyV1alpha1() keyv1alpha1.KeyV1alpha1Interface {
	return c.keyV1alpha1
}

// KinesisV1alpha1 retrieves the KinesisV1alpha1Client
func (c *Clientset) KinesisV1alpha1() kinesisv1alpha1.KinesisV1alpha1Interface {
	return c.kinesisV1alpha1
}

// Kinesisanalyticsv2V1alpha1 retrieves the Kinesisanalyticsv2V1alpha1Client
func (c *Clientset) Kinesisanalyticsv2V1alpha1() kinesisanalyticsv2v1alpha1.Kinesisanalyticsv2V1alpha1Interface {
	return c.kinesisanalyticsv2V1alpha1
}

// KmsV1alpha1 retrieves the KmsV1alpha1Client
func (c *Clientset) KmsV1alpha1() kmsv1alpha1.KmsV1alpha1Interface {
	return c.kmsV1alpha1
}

// LakeformationV1alpha1 retrieves the LakeformationV1alpha1Client
func (c *Clientset) LakeformationV1alpha1() lakeformationv1alpha1.LakeformationV1alpha1Interface {
	return c.lakeformationV1alpha1
}

// LambdaV1alpha1 retrieves the LambdaV1alpha1Client
func (c *Clientset) LambdaV1alpha1() lambdav1alpha1.LambdaV1alpha1Interface {
	return c.lambdaV1alpha1
}

// LaunchV1alpha1 retrieves the LaunchV1alpha1Client
func (c *Clientset) LaunchV1alpha1() launchv1alpha1.LaunchV1alpha1Interface {
	return c.launchV1alpha1
}

// LbV1alpha1 retrieves the LbV1alpha1Client
func (c *Clientset) LbV1alpha1() lbv1alpha1.LbV1alpha1Interface {
	return c.lbV1alpha1
}

// LexV1alpha1 retrieves the LexV1alpha1Client
func (c *Clientset) LexV1alpha1() lexv1alpha1.LexV1alpha1Interface {
	return c.lexV1alpha1
}

// LicensemanagerV1alpha1 retrieves the LicensemanagerV1alpha1Client
func (c *Clientset) LicensemanagerV1alpha1() licensemanagerv1alpha1.LicensemanagerV1alpha1Interface {
	return c.licensemanagerV1alpha1
}

// LightsailV1alpha1 retrieves the LightsailV1alpha1Client
func (c *Clientset) LightsailV1alpha1() lightsailv1alpha1.LightsailV1alpha1Interface {
	return c.lightsailV1alpha1
}

// LoadbalancerV1alpha1 retrieves the LoadbalancerV1alpha1Client
func (c *Clientset) LoadbalancerV1alpha1() loadbalancerv1alpha1.LoadbalancerV1alpha1Interface {
	return c.loadbalancerV1alpha1
}

// MacieV1alpha1 retrieves the MacieV1alpha1Client
func (c *Clientset) MacieV1alpha1() maciev1alpha1.MacieV1alpha1Interface {
	return c.macieV1alpha1
}

// MainV1alpha1 retrieves the MainV1alpha1Client
func (c *Clientset) MainV1alpha1() mainv1alpha1.MainV1alpha1Interface {
	return c.mainV1alpha1
}

// MediaV1alpha1 retrieves the MediaV1alpha1Client
func (c *Clientset) MediaV1alpha1() mediav1alpha1.MediaV1alpha1Interface {
	return c.mediaV1alpha1
}

// MqV1alpha1 retrieves the MqV1alpha1Client
func (c *Clientset) MqV1alpha1() mqv1alpha1.MqV1alpha1Interface {
	return c.mqV1alpha1
}

// MskV1alpha1 retrieves the MskV1alpha1Client
func (c *Clientset) MskV1alpha1() mskv1alpha1.MskV1alpha1Interface {
	return c.mskV1alpha1
}

// MwaaV1alpha1 retrieves the MwaaV1alpha1Client
func (c *Clientset) MwaaV1alpha1() mwaav1alpha1.MwaaV1alpha1Interface {
	return c.mwaaV1alpha1
}

// NatV1alpha1 retrieves the NatV1alpha1Client
func (c *Clientset) NatV1alpha1() natv1alpha1.NatV1alpha1Interface {
	return c.natV1alpha1
}

// NeptuneV1alpha1 retrieves the NeptuneV1alpha1Client
func (c *Clientset) NeptuneV1alpha1() neptunev1alpha1.NeptuneV1alpha1Interface {
	return c.neptuneV1alpha1
}

// NetworkV1alpha1 retrieves the NetworkV1alpha1Client
func (c *Clientset) NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface {
	return c.networkV1alpha1
}

// NetworkfirewallV1alpha1 retrieves the NetworkfirewallV1alpha1Client
func (c *Clientset) NetworkfirewallV1alpha1() networkfirewallv1alpha1.NetworkfirewallV1alpha1Interface {
	return c.networkfirewallV1alpha1
}

// OpsworksV1alpha1 retrieves the OpsworksV1alpha1Client
func (c *Clientset) OpsworksV1alpha1() opsworksv1alpha1.OpsworksV1alpha1Interface {
	return c.opsworksV1alpha1
}

// OrganizationsV1alpha1 retrieves the OrganizationsV1alpha1Client
func (c *Clientset) OrganizationsV1alpha1() organizationsv1alpha1.OrganizationsV1alpha1Interface {
	return c.organizationsV1alpha1
}

// PinpointV1alpha1 retrieves the PinpointV1alpha1Client
func (c *Clientset) PinpointV1alpha1() pinpointv1alpha1.PinpointV1alpha1Interface {
	return c.pinpointV1alpha1
}

// PlacementV1alpha1 retrieves the PlacementV1alpha1Client
func (c *Clientset) PlacementV1alpha1() placementv1alpha1.PlacementV1alpha1Interface {
	return c.placementV1alpha1
}

// PrometheusV1alpha1 retrieves the PrometheusV1alpha1Client
func (c *Clientset) PrometheusV1alpha1() prometheusv1alpha1.PrometheusV1alpha1Interface {
	return c.prometheusV1alpha1
}

// ProxyV1alpha1 retrieves the ProxyV1alpha1Client
func (c *Clientset) ProxyV1alpha1() proxyv1alpha1.ProxyV1alpha1Interface {
	return c.proxyV1alpha1
}

// QldbV1alpha1 retrieves the QldbV1alpha1Client
func (c *Clientset) QldbV1alpha1() qldbv1alpha1.QldbV1alpha1Interface {
	return c.qldbV1alpha1
}

// QuicksightV1alpha1 retrieves the QuicksightV1alpha1Client
func (c *Clientset) QuicksightV1alpha1() quicksightv1alpha1.QuicksightV1alpha1Interface {
	return c.quicksightV1alpha1
}

// RamV1alpha1 retrieves the RamV1alpha1Client
func (c *Clientset) RamV1alpha1() ramv1alpha1.RamV1alpha1Interface {
	return c.ramV1alpha1
}

// RdsV1alpha1 retrieves the RdsV1alpha1Client
func (c *Clientset) RdsV1alpha1() rdsv1alpha1.RdsV1alpha1Interface {
	return c.rdsV1alpha1
}

// RedshiftV1alpha1 retrieves the RedshiftV1alpha1Client
func (c *Clientset) RedshiftV1alpha1() redshiftv1alpha1.RedshiftV1alpha1Interface {
	return c.redshiftV1alpha1
}

// ResourcegroupsV1alpha1 retrieves the ResourcegroupsV1alpha1Client
func (c *Clientset) ResourcegroupsV1alpha1() resourcegroupsv1alpha1.ResourcegroupsV1alpha1Interface {
	return c.resourcegroupsV1alpha1
}

// RouteV1alpha1 retrieves the RouteV1alpha1Client
func (c *Clientset) RouteV1alpha1() routev1alpha1.RouteV1alpha1Interface {
	return c.routeV1alpha1
}

// Route53V1alpha1 retrieves the Route53V1alpha1Client
func (c *Clientset) Route53V1alpha1() route53v1alpha1.Route53V1alpha1Interface {
	return c.route53V1alpha1
}

// S3V1alpha1 retrieves the S3V1alpha1Client
func (c *Clientset) S3V1alpha1() s3v1alpha1.S3V1alpha1Interface {
	return c.s3V1alpha1
}

// S3controlV1alpha1 retrieves the S3controlV1alpha1Client
func (c *Clientset) S3controlV1alpha1() s3controlv1alpha1.S3controlV1alpha1Interface {
	return c.s3controlV1alpha1
}

// S3outpostsV1alpha1 retrieves the S3outpostsV1alpha1Client
func (c *Clientset) S3outpostsV1alpha1() s3outpostsv1alpha1.S3outpostsV1alpha1Interface {
	return c.s3outpostsV1alpha1
}

// SagemakerV1alpha1 retrieves the SagemakerV1alpha1Client
func (c *Clientset) SagemakerV1alpha1() sagemakerv1alpha1.SagemakerV1alpha1Interface {
	return c.sagemakerV1alpha1
}

// SecretsmanagerV1alpha1 retrieves the SecretsmanagerV1alpha1Client
func (c *Clientset) SecretsmanagerV1alpha1() secretsmanagerv1alpha1.SecretsmanagerV1alpha1Interface {
	return c.secretsmanagerV1alpha1
}

// SecurityV1alpha1 retrieves the SecurityV1alpha1Client
func (c *Clientset) SecurityV1alpha1() securityv1alpha1.SecurityV1alpha1Interface {
	return c.securityV1alpha1
}

// SecurityhubV1alpha1 retrieves the SecurityhubV1alpha1Client
func (c *Clientset) SecurityhubV1alpha1() securityhubv1alpha1.SecurityhubV1alpha1Interface {
	return c.securityhubV1alpha1
}

// ServerlessapplicationrepositoryV1alpha1 retrieves the ServerlessapplicationrepositoryV1alpha1Client
func (c *Clientset) ServerlessapplicationrepositoryV1alpha1() serverlessapplicationrepositoryv1alpha1.ServerlessapplicationrepositoryV1alpha1Interface {
	return c.serverlessapplicationrepositoryV1alpha1
}

// ServicecatalogV1alpha1 retrieves the ServicecatalogV1alpha1Client
func (c *Clientset) ServicecatalogV1alpha1() servicecatalogv1alpha1.ServicecatalogV1alpha1Interface {
	return c.servicecatalogV1alpha1
}

// ServicediscoveryV1alpha1 retrieves the ServicediscoveryV1alpha1Client
func (c *Clientset) ServicediscoveryV1alpha1() servicediscoveryv1alpha1.ServicediscoveryV1alpha1Interface {
	return c.servicediscoveryV1alpha1
}

// ServicequotasV1alpha1 retrieves the ServicequotasV1alpha1Client
func (c *Clientset) ServicequotasV1alpha1() servicequotasv1alpha1.ServicequotasV1alpha1Interface {
	return c.servicequotasV1alpha1
}

// SesV1alpha1 retrieves the SesV1alpha1Client
func (c *Clientset) SesV1alpha1() sesv1alpha1.SesV1alpha1Interface {
	return c.sesV1alpha1
}

// SfnV1alpha1 retrieves the SfnV1alpha1Client
func (c *Clientset) SfnV1alpha1() sfnv1alpha1.SfnV1alpha1Interface {
	return c.sfnV1alpha1
}

// ShieldV1alpha1 retrieves the ShieldV1alpha1Client
func (c *Clientset) ShieldV1alpha1() shieldv1alpha1.ShieldV1alpha1Interface {
	return c.shieldV1alpha1
}

// SignerV1alpha1 retrieves the SignerV1alpha1Client
func (c *Clientset) SignerV1alpha1() signerv1alpha1.SignerV1alpha1Interface {
	return c.signerV1alpha1
}

// SimpledbV1alpha1 retrieves the SimpledbV1alpha1Client
func (c *Clientset) SimpledbV1alpha1() simpledbv1alpha1.SimpledbV1alpha1Interface {
	return c.simpledbV1alpha1
}

// SnapshotV1alpha1 retrieves the SnapshotV1alpha1Client
func (c *Clientset) SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface {
	return c.snapshotV1alpha1
}

// SnsV1alpha1 retrieves the SnsV1alpha1Client
func (c *Clientset) SnsV1alpha1() snsv1alpha1.SnsV1alpha1Interface {
	return c.snsV1alpha1
}

// SpotV1alpha1 retrieves the SpotV1alpha1Client
func (c *Clientset) SpotV1alpha1() spotv1alpha1.SpotV1alpha1Interface {
	return c.spotV1alpha1
}

// SqsqueueV1alpha1 retrieves the SqsqueueV1alpha1Client
func (c *Clientset) SqsqueueV1alpha1() sqsqueuev1alpha1.SqsqueueV1alpha1Interface {
	return c.sqsqueueV1alpha1
}

// SsmV1alpha1 retrieves the SsmV1alpha1Client
func (c *Clientset) SsmV1alpha1() ssmv1alpha1.SsmV1alpha1Interface {
	return c.ssmV1alpha1
}

// SsoadminV1alpha1 retrieves the SsoadminV1alpha1Client
func (c *Clientset) SsoadminV1alpha1() ssoadminv1alpha1.SsoadminV1alpha1Interface {
	return c.ssoadminV1alpha1
}

// StoragegatewayV1alpha1 retrieves the StoragegatewayV1alpha1Client
func (c *Clientset) StoragegatewayV1alpha1() storagegatewayv1alpha1.StoragegatewayV1alpha1Interface {
	return c.storagegatewayV1alpha1
}

// SubnetV1alpha1 retrieves the SubnetV1alpha1Client
func (c *Clientset) SubnetV1alpha1() subnetv1alpha1.SubnetV1alpha1Interface {
	return c.subnetV1alpha1
}

// SwfV1alpha1 retrieves the SwfV1alpha1Client
func (c *Clientset) SwfV1alpha1() swfv1alpha1.SwfV1alpha1Interface {
	return c.swfV1alpha1
}

// SyntheticsV1alpha1 retrieves the SyntheticsV1alpha1Client
func (c *Clientset) SyntheticsV1alpha1() syntheticsv1alpha1.SyntheticsV1alpha1Interface {
	return c.syntheticsV1alpha1
}

// TransferV1alpha1 retrieves the TransferV1alpha1Client
func (c *Clientset) TransferV1alpha1() transferv1alpha1.TransferV1alpha1Interface {
	return c.transferV1alpha1
}

// VolumeV1alpha1 retrieves the VolumeV1alpha1Client
func (c *Clientset) VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface {
	return c.volumeV1alpha1
}

// VpcV1alpha1 retrieves the VpcV1alpha1Client
func (c *Clientset) VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface {
	return c.vpcV1alpha1
}

// VpnV1alpha1 retrieves the VpnV1alpha1Client
func (c *Clientset) VpnV1alpha1() vpnv1alpha1.VpnV1alpha1Interface {
	return c.vpnV1alpha1
}

// WafV1alpha1 retrieves the WafV1alpha1Client
func (c *Clientset) WafV1alpha1() wafv1alpha1.WafV1alpha1Interface {
	return c.wafV1alpha1
}

// WafregionalV1alpha1 retrieves the WafregionalV1alpha1Client
func (c *Clientset) WafregionalV1alpha1() wafregionalv1alpha1.WafregionalV1alpha1Interface {
	return c.wafregionalV1alpha1
}

// Wafv2V1alpha1 retrieves the Wafv2V1alpha1Client
func (c *Clientset) Wafv2V1alpha1() wafv2v1alpha1.Wafv2V1alpha1Interface {
	return c.wafv2V1alpha1
}

// WorklinkV1alpha1 retrieves the WorklinkV1alpha1Client
func (c *Clientset) WorklinkV1alpha1() worklinkv1alpha1.WorklinkV1alpha1Interface {
	return c.worklinkV1alpha1
}

// WorkspacesV1alpha1 retrieves the WorkspacesV1alpha1Client
func (c *Clientset) WorkspacesV1alpha1() workspacesv1alpha1.WorkspacesV1alpha1Interface {
	return c.workspacesV1alpha1
}

// XrayV1alpha1 retrieves the XrayV1alpha1Client
func (c *Clientset) XrayV1alpha1() xrayv1alpha1.XrayV1alpha1Interface {
	return c.xrayV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.accessanalyzerV1alpha1, err = accessanalyzerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.acmV1alpha1, err = acmv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.acmpcaV1alpha1, err = acmpcav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.albV1alpha1, err = albv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.amiV1alpha1, err = amiv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.apigatewayV1alpha1, err = apigatewayv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.apigatewayv2V1alpha1, err = apigatewayv2v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.appV1alpha1, err = appv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.appautoscalingV1alpha1, err = appautoscalingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.appmeshV1alpha1, err = appmeshv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.appsyncV1alpha1, err = appsyncv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.athenaV1alpha1, err = athenav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.autoscalingV1alpha1, err = autoscalingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.autoscalingplansV1alpha1, err = autoscalingplansv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.backupV1alpha1, err = backupv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.batchV1alpha1, err = batchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.budgetsV1alpha1, err = budgetsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloud9V1alpha1, err = cloud9v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudformationstackV1alpha1, err = cloudformationstackv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudfrontV1alpha1, err = cloudfrontv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudhsmv2V1alpha1, err = cloudhsmv2v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudtrailV1alpha1, err = cloudtrailv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudwatchV1alpha1, err = cloudwatchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.codeartifactV1alpha1, err = codeartifactv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.codebuildV1alpha1, err = codebuildv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.codecommitV1alpha1, err = codecommitv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.codedeployV1alpha1, err = codedeployv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.codepipelineV1alpha1, err = codepipelinev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.codestarconnectionsV1alpha1, err = codestarconnectionsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.codestarnotificationsV1alpha1, err = codestarnotificationsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cognitoV1alpha1, err = cognitov1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.configV1alpha1, err = configv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.curV1alpha1, err = curv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.customerV1alpha1, err = customerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.datapipelineV1alpha1, err = datapipelinev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.datasyncV1alpha1, err = datasyncv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.daxV1alpha1, err = daxv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dbV1alpha1, err = dbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.defaultV1alpha1, err = defaultv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.devicefarmV1alpha1, err = devicefarmv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.directoryserviceV1alpha1, err = directoryservicev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dlmV1alpha1, err = dlmv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dmsV1alpha1, err = dmsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.docdbV1alpha1, err = docdbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dxV1alpha1, err = dxv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dynamodbV1alpha1, err = dynamodbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ebsV1alpha1, err = ebsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ec2V1alpha1, err = ec2v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ecrV1alpha1, err = ecrv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ecrpublicV1alpha1, err = ecrpublicv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ecsV1alpha1, err = ecsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.efsV1alpha1, err = efsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.egressV1alpha1, err = egressv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eipV1alpha1, err = eipv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eksV1alpha1, err = eksv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.elasticacheV1alpha1, err = elasticachev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.elasticbeanstalkV1alpha1, err = elasticbeanstalkv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.elasticsearchdomainV1alpha1, err = elasticsearchdomainv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.elastictranscoderV1alpha1, err = elastictranscoderv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.elbV1alpha1, err = elbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.emrV1alpha1, err = emrv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.flowV1alpha1, err = flowv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.fmsV1alpha1, err = fmsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.fsxV1alpha1, err = fsxv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.gameliftV1alpha1, err = gameliftv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.glaciervaultV1alpha1, err = glaciervaultv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.globalacceleratorV1alpha1, err = globalacceleratorv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.glueV1alpha1, err = gluev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.guarddutyV1alpha1, err = guarddutyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iamV1alpha1, err = iamv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.imagebuilderV1alpha1, err = imagebuilderv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.inspectorV1alpha1, err = inspectorv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.instanceV1alpha1, err = instancev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.internetV1alpha1, err = internetv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iotV1alpha1, err = iotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.keyV1alpha1, err = keyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kinesisV1alpha1, err = kinesisv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kinesisanalyticsv2V1alpha1, err = kinesisanalyticsv2v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kmsV1alpha1, err = kmsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lakeformationV1alpha1, err = lakeformationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lambdaV1alpha1, err = lambdav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.launchV1alpha1, err = launchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lbV1alpha1, err = lbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lexV1alpha1, err = lexv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.licensemanagerV1alpha1, err = licensemanagerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lightsailV1alpha1, err = lightsailv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.loadbalancerV1alpha1, err = loadbalancerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.macieV1alpha1, err = maciev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mainV1alpha1, err = mainv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mediaV1alpha1, err = mediav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mqV1alpha1, err = mqv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mskV1alpha1, err = mskv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mwaaV1alpha1, err = mwaav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.natV1alpha1, err = natv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.neptuneV1alpha1, err = neptunev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.networkV1alpha1, err = networkv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.networkfirewallV1alpha1, err = networkfirewallv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.opsworksV1alpha1, err = opsworksv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.organizationsV1alpha1, err = organizationsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.pinpointV1alpha1, err = pinpointv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.placementV1alpha1, err = placementv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.prometheusV1alpha1, err = prometheusv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.proxyV1alpha1, err = proxyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.qldbV1alpha1, err = qldbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.quicksightV1alpha1, err = quicksightv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ramV1alpha1, err = ramv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.rdsV1alpha1, err = rdsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.redshiftV1alpha1, err = redshiftv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.resourcegroupsV1alpha1, err = resourcegroupsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.routeV1alpha1, err = routev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.route53V1alpha1, err = route53v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.s3V1alpha1, err = s3v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.s3controlV1alpha1, err = s3controlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.s3outpostsV1alpha1, err = s3outpostsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sagemakerV1alpha1, err = sagemakerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.secretsmanagerV1alpha1, err = secretsmanagerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.securityV1alpha1, err = securityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.securityhubV1alpha1, err = securityhubv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.serverlessapplicationrepositoryV1alpha1, err = serverlessapplicationrepositoryv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.servicecatalogV1alpha1, err = servicecatalogv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.servicediscoveryV1alpha1, err = servicediscoveryv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.servicequotasV1alpha1, err = servicequotasv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sesV1alpha1, err = sesv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sfnV1alpha1, err = sfnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.shieldV1alpha1, err = shieldv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.signerV1alpha1, err = signerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.simpledbV1alpha1, err = simpledbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.snapshotV1alpha1, err = snapshotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.snsV1alpha1, err = snsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.spotV1alpha1, err = spotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sqsqueueV1alpha1, err = sqsqueuev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ssmV1alpha1, err = ssmv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ssoadminV1alpha1, err = ssoadminv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.storagegatewayV1alpha1, err = storagegatewayv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.subnetV1alpha1, err = subnetv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.swfV1alpha1, err = swfv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.syntheticsV1alpha1, err = syntheticsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.transferV1alpha1, err = transferv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.volumeV1alpha1, err = volumev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vpcV1alpha1, err = vpcv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vpnV1alpha1, err = vpnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.wafV1alpha1, err = wafv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.wafregionalV1alpha1, err = wafregionalv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.wafv2V1alpha1, err = wafv2v1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.worklinkV1alpha1, err = worklinkv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.workspacesV1alpha1, err = workspacesv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.xrayV1alpha1, err = xrayv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.accessanalyzerV1alpha1 = accessanalyzerv1alpha1.NewForConfigOrDie(c)
	cs.acmV1alpha1 = acmv1alpha1.NewForConfigOrDie(c)
	cs.acmpcaV1alpha1 = acmpcav1alpha1.NewForConfigOrDie(c)
	cs.albV1alpha1 = albv1alpha1.NewForConfigOrDie(c)
	cs.amiV1alpha1 = amiv1alpha1.NewForConfigOrDie(c)
	cs.apigatewayV1alpha1 = apigatewayv1alpha1.NewForConfigOrDie(c)
	cs.apigatewayv2V1alpha1 = apigatewayv2v1alpha1.NewForConfigOrDie(c)
	cs.appV1alpha1 = appv1alpha1.NewForConfigOrDie(c)
	cs.appautoscalingV1alpha1 = appautoscalingv1alpha1.NewForConfigOrDie(c)
	cs.appmeshV1alpha1 = appmeshv1alpha1.NewForConfigOrDie(c)
	cs.appsyncV1alpha1 = appsyncv1alpha1.NewForConfigOrDie(c)
	cs.athenaV1alpha1 = athenav1alpha1.NewForConfigOrDie(c)
	cs.autoscalingV1alpha1 = autoscalingv1alpha1.NewForConfigOrDie(c)
	cs.autoscalingplansV1alpha1 = autoscalingplansv1alpha1.NewForConfigOrDie(c)
	cs.backupV1alpha1 = backupv1alpha1.NewForConfigOrDie(c)
	cs.batchV1alpha1 = batchv1alpha1.NewForConfigOrDie(c)
	cs.budgetsV1alpha1 = budgetsv1alpha1.NewForConfigOrDie(c)
	cs.cloud9V1alpha1 = cloud9v1alpha1.NewForConfigOrDie(c)
	cs.cloudformationstackV1alpha1 = cloudformationstackv1alpha1.NewForConfigOrDie(c)
	cs.cloudfrontV1alpha1 = cloudfrontv1alpha1.NewForConfigOrDie(c)
	cs.cloudhsmv2V1alpha1 = cloudhsmv2v1alpha1.NewForConfigOrDie(c)
	cs.cloudtrailV1alpha1 = cloudtrailv1alpha1.NewForConfigOrDie(c)
	cs.cloudwatchV1alpha1 = cloudwatchv1alpha1.NewForConfigOrDie(c)
	cs.codeartifactV1alpha1 = codeartifactv1alpha1.NewForConfigOrDie(c)
	cs.codebuildV1alpha1 = codebuildv1alpha1.NewForConfigOrDie(c)
	cs.codecommitV1alpha1 = codecommitv1alpha1.NewForConfigOrDie(c)
	cs.codedeployV1alpha1 = codedeployv1alpha1.NewForConfigOrDie(c)
	cs.codepipelineV1alpha1 = codepipelinev1alpha1.NewForConfigOrDie(c)
	cs.codestarconnectionsV1alpha1 = codestarconnectionsv1alpha1.NewForConfigOrDie(c)
	cs.codestarnotificationsV1alpha1 = codestarnotificationsv1alpha1.NewForConfigOrDie(c)
	cs.cognitoV1alpha1 = cognitov1alpha1.NewForConfigOrDie(c)
	cs.configV1alpha1 = configv1alpha1.NewForConfigOrDie(c)
	cs.curV1alpha1 = curv1alpha1.NewForConfigOrDie(c)
	cs.customerV1alpha1 = customerv1alpha1.NewForConfigOrDie(c)
	cs.datapipelineV1alpha1 = datapipelinev1alpha1.NewForConfigOrDie(c)
	cs.datasyncV1alpha1 = datasyncv1alpha1.NewForConfigOrDie(c)
	cs.daxV1alpha1 = daxv1alpha1.NewForConfigOrDie(c)
	cs.dbV1alpha1 = dbv1alpha1.NewForConfigOrDie(c)
	cs.defaultV1alpha1 = defaultv1alpha1.NewForConfigOrDie(c)
	cs.devicefarmV1alpha1 = devicefarmv1alpha1.NewForConfigOrDie(c)
	cs.directoryserviceV1alpha1 = directoryservicev1alpha1.NewForConfigOrDie(c)
	cs.dlmV1alpha1 = dlmv1alpha1.NewForConfigOrDie(c)
	cs.dmsV1alpha1 = dmsv1alpha1.NewForConfigOrDie(c)
	cs.docdbV1alpha1 = docdbv1alpha1.NewForConfigOrDie(c)
	cs.dxV1alpha1 = dxv1alpha1.NewForConfigOrDie(c)
	cs.dynamodbV1alpha1 = dynamodbv1alpha1.NewForConfigOrDie(c)
	cs.ebsV1alpha1 = ebsv1alpha1.NewForConfigOrDie(c)
	cs.ec2V1alpha1 = ec2v1alpha1.NewForConfigOrDie(c)
	cs.ecrV1alpha1 = ecrv1alpha1.NewForConfigOrDie(c)
	cs.ecrpublicV1alpha1 = ecrpublicv1alpha1.NewForConfigOrDie(c)
	cs.ecsV1alpha1 = ecsv1alpha1.NewForConfigOrDie(c)
	cs.efsV1alpha1 = efsv1alpha1.NewForConfigOrDie(c)
	cs.egressV1alpha1 = egressv1alpha1.NewForConfigOrDie(c)
	cs.eipV1alpha1 = eipv1alpha1.NewForConfigOrDie(c)
	cs.eksV1alpha1 = eksv1alpha1.NewForConfigOrDie(c)
	cs.elasticacheV1alpha1 = elasticachev1alpha1.NewForConfigOrDie(c)
	cs.elasticbeanstalkV1alpha1 = elasticbeanstalkv1alpha1.NewForConfigOrDie(c)
	cs.elasticsearchdomainV1alpha1 = elasticsearchdomainv1alpha1.NewForConfigOrDie(c)
	cs.elastictranscoderV1alpha1 = elastictranscoderv1alpha1.NewForConfigOrDie(c)
	cs.elbV1alpha1 = elbv1alpha1.NewForConfigOrDie(c)
	cs.emrV1alpha1 = emrv1alpha1.NewForConfigOrDie(c)
	cs.flowV1alpha1 = flowv1alpha1.NewForConfigOrDie(c)
	cs.fmsV1alpha1 = fmsv1alpha1.NewForConfigOrDie(c)
	cs.fsxV1alpha1 = fsxv1alpha1.NewForConfigOrDie(c)
	cs.gameliftV1alpha1 = gameliftv1alpha1.NewForConfigOrDie(c)
	cs.glaciervaultV1alpha1 = glaciervaultv1alpha1.NewForConfigOrDie(c)
	cs.globalacceleratorV1alpha1 = globalacceleratorv1alpha1.NewForConfigOrDie(c)
	cs.glueV1alpha1 = gluev1alpha1.NewForConfigOrDie(c)
	cs.guarddutyV1alpha1 = guarddutyv1alpha1.NewForConfigOrDie(c)
	cs.iamV1alpha1 = iamv1alpha1.NewForConfigOrDie(c)
	cs.imagebuilderV1alpha1 = imagebuilderv1alpha1.NewForConfigOrDie(c)
	cs.inspectorV1alpha1 = inspectorv1alpha1.NewForConfigOrDie(c)
	cs.instanceV1alpha1 = instancev1alpha1.NewForConfigOrDie(c)
	cs.internetV1alpha1 = internetv1alpha1.NewForConfigOrDie(c)
	cs.iotV1alpha1 = iotv1alpha1.NewForConfigOrDie(c)
	cs.keyV1alpha1 = keyv1alpha1.NewForConfigOrDie(c)
	cs.kinesisV1alpha1 = kinesisv1alpha1.NewForConfigOrDie(c)
	cs.kinesisanalyticsv2V1alpha1 = kinesisanalyticsv2v1alpha1.NewForConfigOrDie(c)
	cs.kmsV1alpha1 = kmsv1alpha1.NewForConfigOrDie(c)
	cs.lakeformationV1alpha1 = lakeformationv1alpha1.NewForConfigOrDie(c)
	cs.lambdaV1alpha1 = lambdav1alpha1.NewForConfigOrDie(c)
	cs.launchV1alpha1 = launchv1alpha1.NewForConfigOrDie(c)
	cs.lbV1alpha1 = lbv1alpha1.NewForConfigOrDie(c)
	cs.lexV1alpha1 = lexv1alpha1.NewForConfigOrDie(c)
	cs.licensemanagerV1alpha1 = licensemanagerv1alpha1.NewForConfigOrDie(c)
	cs.lightsailV1alpha1 = lightsailv1alpha1.NewForConfigOrDie(c)
	cs.loadbalancerV1alpha1 = loadbalancerv1alpha1.NewForConfigOrDie(c)
	cs.macieV1alpha1 = maciev1alpha1.NewForConfigOrDie(c)
	cs.mainV1alpha1 = mainv1alpha1.NewForConfigOrDie(c)
	cs.mediaV1alpha1 = mediav1alpha1.NewForConfigOrDie(c)
	cs.mqV1alpha1 = mqv1alpha1.NewForConfigOrDie(c)
	cs.mskV1alpha1 = mskv1alpha1.NewForConfigOrDie(c)
	cs.mwaaV1alpha1 = mwaav1alpha1.NewForConfigOrDie(c)
	cs.natV1alpha1 = natv1alpha1.NewForConfigOrDie(c)
	cs.neptuneV1alpha1 = neptunev1alpha1.NewForConfigOrDie(c)
	cs.networkV1alpha1 = networkv1alpha1.NewForConfigOrDie(c)
	cs.networkfirewallV1alpha1 = networkfirewallv1alpha1.NewForConfigOrDie(c)
	cs.opsworksV1alpha1 = opsworksv1alpha1.NewForConfigOrDie(c)
	cs.organizationsV1alpha1 = organizationsv1alpha1.NewForConfigOrDie(c)
	cs.pinpointV1alpha1 = pinpointv1alpha1.NewForConfigOrDie(c)
	cs.placementV1alpha1 = placementv1alpha1.NewForConfigOrDie(c)
	cs.prometheusV1alpha1 = prometheusv1alpha1.NewForConfigOrDie(c)
	cs.proxyV1alpha1 = proxyv1alpha1.NewForConfigOrDie(c)
	cs.qldbV1alpha1 = qldbv1alpha1.NewForConfigOrDie(c)
	cs.quicksightV1alpha1 = quicksightv1alpha1.NewForConfigOrDie(c)
	cs.ramV1alpha1 = ramv1alpha1.NewForConfigOrDie(c)
	cs.rdsV1alpha1 = rdsv1alpha1.NewForConfigOrDie(c)
	cs.redshiftV1alpha1 = redshiftv1alpha1.NewForConfigOrDie(c)
	cs.resourcegroupsV1alpha1 = resourcegroupsv1alpha1.NewForConfigOrDie(c)
	cs.routeV1alpha1 = routev1alpha1.NewForConfigOrDie(c)
	cs.route53V1alpha1 = route53v1alpha1.NewForConfigOrDie(c)
	cs.s3V1alpha1 = s3v1alpha1.NewForConfigOrDie(c)
	cs.s3controlV1alpha1 = s3controlv1alpha1.NewForConfigOrDie(c)
	cs.s3outpostsV1alpha1 = s3outpostsv1alpha1.NewForConfigOrDie(c)
	cs.sagemakerV1alpha1 = sagemakerv1alpha1.NewForConfigOrDie(c)
	cs.secretsmanagerV1alpha1 = secretsmanagerv1alpha1.NewForConfigOrDie(c)
	cs.securityV1alpha1 = securityv1alpha1.NewForConfigOrDie(c)
	cs.securityhubV1alpha1 = securityhubv1alpha1.NewForConfigOrDie(c)
	cs.serverlessapplicationrepositoryV1alpha1 = serverlessapplicationrepositoryv1alpha1.NewForConfigOrDie(c)
	cs.servicecatalogV1alpha1 = servicecatalogv1alpha1.NewForConfigOrDie(c)
	cs.servicediscoveryV1alpha1 = servicediscoveryv1alpha1.NewForConfigOrDie(c)
	cs.servicequotasV1alpha1 = servicequotasv1alpha1.NewForConfigOrDie(c)
	cs.sesV1alpha1 = sesv1alpha1.NewForConfigOrDie(c)
	cs.sfnV1alpha1 = sfnv1alpha1.NewForConfigOrDie(c)
	cs.shieldV1alpha1 = shieldv1alpha1.NewForConfigOrDie(c)
	cs.signerV1alpha1 = signerv1alpha1.NewForConfigOrDie(c)
	cs.simpledbV1alpha1 = simpledbv1alpha1.NewForConfigOrDie(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.NewForConfigOrDie(c)
	cs.snsV1alpha1 = snsv1alpha1.NewForConfigOrDie(c)
	cs.spotV1alpha1 = spotv1alpha1.NewForConfigOrDie(c)
	cs.sqsqueueV1alpha1 = sqsqueuev1alpha1.NewForConfigOrDie(c)
	cs.ssmV1alpha1 = ssmv1alpha1.NewForConfigOrDie(c)
	cs.ssoadminV1alpha1 = ssoadminv1alpha1.NewForConfigOrDie(c)
	cs.storagegatewayV1alpha1 = storagegatewayv1alpha1.NewForConfigOrDie(c)
	cs.subnetV1alpha1 = subnetv1alpha1.NewForConfigOrDie(c)
	cs.swfV1alpha1 = swfv1alpha1.NewForConfigOrDie(c)
	cs.syntheticsV1alpha1 = syntheticsv1alpha1.NewForConfigOrDie(c)
	cs.transferV1alpha1 = transferv1alpha1.NewForConfigOrDie(c)
	cs.volumeV1alpha1 = volumev1alpha1.NewForConfigOrDie(c)
	cs.vpcV1alpha1 = vpcv1alpha1.NewForConfigOrDie(c)
	cs.vpnV1alpha1 = vpnv1alpha1.NewForConfigOrDie(c)
	cs.wafV1alpha1 = wafv1alpha1.NewForConfigOrDie(c)
	cs.wafregionalV1alpha1 = wafregionalv1alpha1.NewForConfigOrDie(c)
	cs.wafv2V1alpha1 = wafv2v1alpha1.NewForConfigOrDie(c)
	cs.worklinkV1alpha1 = worklinkv1alpha1.NewForConfigOrDie(c)
	cs.workspacesV1alpha1 = workspacesv1alpha1.NewForConfigOrDie(c)
	cs.xrayV1alpha1 = xrayv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.accessanalyzerV1alpha1 = accessanalyzerv1alpha1.New(c)
	cs.acmV1alpha1 = acmv1alpha1.New(c)
	cs.acmpcaV1alpha1 = acmpcav1alpha1.New(c)
	cs.albV1alpha1 = albv1alpha1.New(c)
	cs.amiV1alpha1 = amiv1alpha1.New(c)
	cs.apigatewayV1alpha1 = apigatewayv1alpha1.New(c)
	cs.apigatewayv2V1alpha1 = apigatewayv2v1alpha1.New(c)
	cs.appV1alpha1 = appv1alpha1.New(c)
	cs.appautoscalingV1alpha1 = appautoscalingv1alpha1.New(c)
	cs.appmeshV1alpha1 = appmeshv1alpha1.New(c)
	cs.appsyncV1alpha1 = appsyncv1alpha1.New(c)
	cs.athenaV1alpha1 = athenav1alpha1.New(c)
	cs.autoscalingV1alpha1 = autoscalingv1alpha1.New(c)
	cs.autoscalingplansV1alpha1 = autoscalingplansv1alpha1.New(c)
	cs.backupV1alpha1 = backupv1alpha1.New(c)
	cs.batchV1alpha1 = batchv1alpha1.New(c)
	cs.budgetsV1alpha1 = budgetsv1alpha1.New(c)
	cs.cloud9V1alpha1 = cloud9v1alpha1.New(c)
	cs.cloudformationstackV1alpha1 = cloudformationstackv1alpha1.New(c)
	cs.cloudfrontV1alpha1 = cloudfrontv1alpha1.New(c)
	cs.cloudhsmv2V1alpha1 = cloudhsmv2v1alpha1.New(c)
	cs.cloudtrailV1alpha1 = cloudtrailv1alpha1.New(c)
	cs.cloudwatchV1alpha1 = cloudwatchv1alpha1.New(c)
	cs.codeartifactV1alpha1 = codeartifactv1alpha1.New(c)
	cs.codebuildV1alpha1 = codebuildv1alpha1.New(c)
	cs.codecommitV1alpha1 = codecommitv1alpha1.New(c)
	cs.codedeployV1alpha1 = codedeployv1alpha1.New(c)
	cs.codepipelineV1alpha1 = codepipelinev1alpha1.New(c)
	cs.codestarconnectionsV1alpha1 = codestarconnectionsv1alpha1.New(c)
	cs.codestarnotificationsV1alpha1 = codestarnotificationsv1alpha1.New(c)
	cs.cognitoV1alpha1 = cognitov1alpha1.New(c)
	cs.configV1alpha1 = configv1alpha1.New(c)
	cs.curV1alpha1 = curv1alpha1.New(c)
	cs.customerV1alpha1 = customerv1alpha1.New(c)
	cs.datapipelineV1alpha1 = datapipelinev1alpha1.New(c)
	cs.datasyncV1alpha1 = datasyncv1alpha1.New(c)
	cs.daxV1alpha1 = daxv1alpha1.New(c)
	cs.dbV1alpha1 = dbv1alpha1.New(c)
	cs.defaultV1alpha1 = defaultv1alpha1.New(c)
	cs.devicefarmV1alpha1 = devicefarmv1alpha1.New(c)
	cs.directoryserviceV1alpha1 = directoryservicev1alpha1.New(c)
	cs.dlmV1alpha1 = dlmv1alpha1.New(c)
	cs.dmsV1alpha1 = dmsv1alpha1.New(c)
	cs.docdbV1alpha1 = docdbv1alpha1.New(c)
	cs.dxV1alpha1 = dxv1alpha1.New(c)
	cs.dynamodbV1alpha1 = dynamodbv1alpha1.New(c)
	cs.ebsV1alpha1 = ebsv1alpha1.New(c)
	cs.ec2V1alpha1 = ec2v1alpha1.New(c)
	cs.ecrV1alpha1 = ecrv1alpha1.New(c)
	cs.ecrpublicV1alpha1 = ecrpublicv1alpha1.New(c)
	cs.ecsV1alpha1 = ecsv1alpha1.New(c)
	cs.efsV1alpha1 = efsv1alpha1.New(c)
	cs.egressV1alpha1 = egressv1alpha1.New(c)
	cs.eipV1alpha1 = eipv1alpha1.New(c)
	cs.eksV1alpha1 = eksv1alpha1.New(c)
	cs.elasticacheV1alpha1 = elasticachev1alpha1.New(c)
	cs.elasticbeanstalkV1alpha1 = elasticbeanstalkv1alpha1.New(c)
	cs.elasticsearchdomainV1alpha1 = elasticsearchdomainv1alpha1.New(c)
	cs.elastictranscoderV1alpha1 = elastictranscoderv1alpha1.New(c)
	cs.elbV1alpha1 = elbv1alpha1.New(c)
	cs.emrV1alpha1 = emrv1alpha1.New(c)
	cs.flowV1alpha1 = flowv1alpha1.New(c)
	cs.fmsV1alpha1 = fmsv1alpha1.New(c)
	cs.fsxV1alpha1 = fsxv1alpha1.New(c)
	cs.gameliftV1alpha1 = gameliftv1alpha1.New(c)
	cs.glaciervaultV1alpha1 = glaciervaultv1alpha1.New(c)
	cs.globalacceleratorV1alpha1 = globalacceleratorv1alpha1.New(c)
	cs.glueV1alpha1 = gluev1alpha1.New(c)
	cs.guarddutyV1alpha1 = guarddutyv1alpha1.New(c)
	cs.iamV1alpha1 = iamv1alpha1.New(c)
	cs.imagebuilderV1alpha1 = imagebuilderv1alpha1.New(c)
	cs.inspectorV1alpha1 = inspectorv1alpha1.New(c)
	cs.instanceV1alpha1 = instancev1alpha1.New(c)
	cs.internetV1alpha1 = internetv1alpha1.New(c)
	cs.iotV1alpha1 = iotv1alpha1.New(c)
	cs.keyV1alpha1 = keyv1alpha1.New(c)
	cs.kinesisV1alpha1 = kinesisv1alpha1.New(c)
	cs.kinesisanalyticsv2V1alpha1 = kinesisanalyticsv2v1alpha1.New(c)
	cs.kmsV1alpha1 = kmsv1alpha1.New(c)
	cs.lakeformationV1alpha1 = lakeformationv1alpha1.New(c)
	cs.lambdaV1alpha1 = lambdav1alpha1.New(c)
	cs.launchV1alpha1 = launchv1alpha1.New(c)
	cs.lbV1alpha1 = lbv1alpha1.New(c)
	cs.lexV1alpha1 = lexv1alpha1.New(c)
	cs.licensemanagerV1alpha1 = licensemanagerv1alpha1.New(c)
	cs.lightsailV1alpha1 = lightsailv1alpha1.New(c)
	cs.loadbalancerV1alpha1 = loadbalancerv1alpha1.New(c)
	cs.macieV1alpha1 = maciev1alpha1.New(c)
	cs.mainV1alpha1 = mainv1alpha1.New(c)
	cs.mediaV1alpha1 = mediav1alpha1.New(c)
	cs.mqV1alpha1 = mqv1alpha1.New(c)
	cs.mskV1alpha1 = mskv1alpha1.New(c)
	cs.mwaaV1alpha1 = mwaav1alpha1.New(c)
	cs.natV1alpha1 = natv1alpha1.New(c)
	cs.neptuneV1alpha1 = neptunev1alpha1.New(c)
	cs.networkV1alpha1 = networkv1alpha1.New(c)
	cs.networkfirewallV1alpha1 = networkfirewallv1alpha1.New(c)
	cs.opsworksV1alpha1 = opsworksv1alpha1.New(c)
	cs.organizationsV1alpha1 = organizationsv1alpha1.New(c)
	cs.pinpointV1alpha1 = pinpointv1alpha1.New(c)
	cs.placementV1alpha1 = placementv1alpha1.New(c)
	cs.prometheusV1alpha1 = prometheusv1alpha1.New(c)
	cs.proxyV1alpha1 = proxyv1alpha1.New(c)
	cs.qldbV1alpha1 = qldbv1alpha1.New(c)
	cs.quicksightV1alpha1 = quicksightv1alpha1.New(c)
	cs.ramV1alpha1 = ramv1alpha1.New(c)
	cs.rdsV1alpha1 = rdsv1alpha1.New(c)
	cs.redshiftV1alpha1 = redshiftv1alpha1.New(c)
	cs.resourcegroupsV1alpha1 = resourcegroupsv1alpha1.New(c)
	cs.routeV1alpha1 = routev1alpha1.New(c)
	cs.route53V1alpha1 = route53v1alpha1.New(c)
	cs.s3V1alpha1 = s3v1alpha1.New(c)
	cs.s3controlV1alpha1 = s3controlv1alpha1.New(c)
	cs.s3outpostsV1alpha1 = s3outpostsv1alpha1.New(c)
	cs.sagemakerV1alpha1 = sagemakerv1alpha1.New(c)
	cs.secretsmanagerV1alpha1 = secretsmanagerv1alpha1.New(c)
	cs.securityV1alpha1 = securityv1alpha1.New(c)
	cs.securityhubV1alpha1 = securityhubv1alpha1.New(c)
	cs.serverlessapplicationrepositoryV1alpha1 = serverlessapplicationrepositoryv1alpha1.New(c)
	cs.servicecatalogV1alpha1 = servicecatalogv1alpha1.New(c)
	cs.servicediscoveryV1alpha1 = servicediscoveryv1alpha1.New(c)
	cs.servicequotasV1alpha1 = servicequotasv1alpha1.New(c)
	cs.sesV1alpha1 = sesv1alpha1.New(c)
	cs.sfnV1alpha1 = sfnv1alpha1.New(c)
	cs.shieldV1alpha1 = shieldv1alpha1.New(c)
	cs.signerV1alpha1 = signerv1alpha1.New(c)
	cs.simpledbV1alpha1 = simpledbv1alpha1.New(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.New(c)
	cs.snsV1alpha1 = snsv1alpha1.New(c)
	cs.spotV1alpha1 = spotv1alpha1.New(c)
	cs.sqsqueueV1alpha1 = sqsqueuev1alpha1.New(c)
	cs.ssmV1alpha1 = ssmv1alpha1.New(c)
	cs.ssoadminV1alpha1 = ssoadminv1alpha1.New(c)
	cs.storagegatewayV1alpha1 = storagegatewayv1alpha1.New(c)
	cs.subnetV1alpha1 = subnetv1alpha1.New(c)
	cs.swfV1alpha1 = swfv1alpha1.New(c)
	cs.syntheticsV1alpha1 = syntheticsv1alpha1.New(c)
	cs.transferV1alpha1 = transferv1alpha1.New(c)
	cs.volumeV1alpha1 = volumev1alpha1.New(c)
	cs.vpcV1alpha1 = vpcv1alpha1.New(c)
	cs.vpnV1alpha1 = vpnv1alpha1.New(c)
	cs.wafV1alpha1 = wafv1alpha1.New(c)
	cs.wafregionalV1alpha1 = wafregionalv1alpha1.New(c)
	cs.wafv2V1alpha1 = wafv2v1alpha1.New(c)
	cs.worklinkV1alpha1 = worklinkv1alpha1.New(c)
	cs.workspacesV1alpha1 = workspacesv1alpha1.New(c)
	cs.xrayV1alpha1 = xrayv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
