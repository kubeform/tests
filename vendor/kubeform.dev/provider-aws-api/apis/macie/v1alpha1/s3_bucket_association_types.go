/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type S3BucketAssociation struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketAssociationSpec   `json:"spec,omitempty"`
	Status            S3BucketAssociationStatus `json:"status,omitempty"`
}

type S3BucketAssociationSpec struct {
	S3BucketAssociationSpec2 `json:",inline"`
	// +optional
	KubeformOutput S3BucketAssociationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type S3BucketAssociationSpecClassificationType struct {
	// +optional
	Continuous *string `json:"continuous,omitempty" tf:"continuous"`
	// +optional
	OneTime *string `json:"oneTime,omitempty" tf:"one_time"`
}

type S3BucketAssociationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	BucketName *string `json:"bucketName" tf:"bucket_name"`
	// +optional
	ClassificationType *S3BucketAssociationSpecClassificationType `json:"classificationType,omitempty" tf:"classification_type"`
	// +optional
	MemberAccountID *string `json:"memberAccountID,omitempty" tf:"member_account_id"`
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
}

type S3BucketAssociationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// S3BucketAssociationList is a list of S3BucketAssociations
type S3BucketAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of S3BucketAssociation CRD objects
	Items []S3BucketAssociation `json:"items,omitempty"`
}
