/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecSelfServicePermissions{}).Type1()):      DirectorySpecSelfServicePermissionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceAccessProperties{}).Type1()):   DirectorySpecWorkspaceAccessPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceCreationProperties{}).Type1()): DirectorySpecWorkspaceCreationPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkspaceSpecWorkspaceProperties{}).Type1()):         WorkspaceSpecWorkspacePropertiesCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecSelfServicePermissions{}).Type1()):      DirectorySpecSelfServicePermissionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceAccessProperties{}).Type1()):   DirectorySpecWorkspaceAccessPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceCreationProperties{}).Type1()): DirectorySpecWorkspaceCreationPropertiesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkspaceSpecWorkspaceProperties{}).Type1()):         WorkspaceSpecWorkspacePropertiesCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DirectorySpecSelfServicePermissionsCodec struct {
}

func (DirectorySpecSelfServicePermissionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DirectorySpecSelfServicePermissions)(ptr) == nil
}

func (DirectorySpecSelfServicePermissionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DirectorySpecSelfServicePermissions)(ptr)
	var objs []DirectorySpecSelfServicePermissions
	if obj != nil {
		objs = []DirectorySpecSelfServicePermissions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecSelfServicePermissions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DirectorySpecSelfServicePermissionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DirectorySpecSelfServicePermissions)(ptr) = DirectorySpecSelfServicePermissions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DirectorySpecSelfServicePermissions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecSelfServicePermissions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DirectorySpecSelfServicePermissions)(ptr) = objs[0]
			} else {
				*(*DirectorySpecSelfServicePermissions)(ptr) = DirectorySpecSelfServicePermissions{}
			}
		} else {
			*(*DirectorySpecSelfServicePermissions)(ptr) = DirectorySpecSelfServicePermissions{}
		}
	default:
		iter.ReportError("decode DirectorySpecSelfServicePermissions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DirectorySpecWorkspaceAccessPropertiesCodec struct {
}

func (DirectorySpecWorkspaceAccessPropertiesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DirectorySpecWorkspaceAccessProperties)(ptr) == nil
}

func (DirectorySpecWorkspaceAccessPropertiesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DirectorySpecWorkspaceAccessProperties)(ptr)
	var objs []DirectorySpecWorkspaceAccessProperties
	if obj != nil {
		objs = []DirectorySpecWorkspaceAccessProperties{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceAccessProperties{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DirectorySpecWorkspaceAccessPropertiesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DirectorySpecWorkspaceAccessProperties)(ptr) = DirectorySpecWorkspaceAccessProperties{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DirectorySpecWorkspaceAccessProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceAccessProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DirectorySpecWorkspaceAccessProperties)(ptr) = objs[0]
			} else {
				*(*DirectorySpecWorkspaceAccessProperties)(ptr) = DirectorySpecWorkspaceAccessProperties{}
			}
		} else {
			*(*DirectorySpecWorkspaceAccessProperties)(ptr) = DirectorySpecWorkspaceAccessProperties{}
		}
	default:
		iter.ReportError("decode DirectorySpecWorkspaceAccessProperties", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DirectorySpecWorkspaceCreationPropertiesCodec struct {
}

func (DirectorySpecWorkspaceCreationPropertiesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DirectorySpecWorkspaceCreationProperties)(ptr) == nil
}

func (DirectorySpecWorkspaceCreationPropertiesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DirectorySpecWorkspaceCreationProperties)(ptr)
	var objs []DirectorySpecWorkspaceCreationProperties
	if obj != nil {
		objs = []DirectorySpecWorkspaceCreationProperties{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceCreationProperties{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DirectorySpecWorkspaceCreationPropertiesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DirectorySpecWorkspaceCreationProperties)(ptr) = DirectorySpecWorkspaceCreationProperties{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DirectorySpecWorkspaceCreationProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DirectorySpecWorkspaceCreationProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DirectorySpecWorkspaceCreationProperties)(ptr) = objs[0]
			} else {
				*(*DirectorySpecWorkspaceCreationProperties)(ptr) = DirectorySpecWorkspaceCreationProperties{}
			}
		} else {
			*(*DirectorySpecWorkspaceCreationProperties)(ptr) = DirectorySpecWorkspaceCreationProperties{}
		}
	default:
		iter.ReportError("decode DirectorySpecWorkspaceCreationProperties", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WorkspaceSpecWorkspacePropertiesCodec struct {
}

func (WorkspaceSpecWorkspacePropertiesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WorkspaceSpecWorkspaceProperties)(ptr) == nil
}

func (WorkspaceSpecWorkspacePropertiesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WorkspaceSpecWorkspaceProperties)(ptr)
	var objs []WorkspaceSpecWorkspaceProperties
	if obj != nil {
		objs = []WorkspaceSpecWorkspaceProperties{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkspaceSpecWorkspaceProperties{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WorkspaceSpecWorkspacePropertiesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WorkspaceSpecWorkspaceProperties)(ptr) = WorkspaceSpecWorkspaceProperties{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WorkspaceSpecWorkspaceProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkspaceSpecWorkspaceProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WorkspaceSpecWorkspaceProperties)(ptr) = objs[0]
			} else {
				*(*WorkspaceSpecWorkspaceProperties)(ptr) = WorkspaceSpecWorkspaceProperties{}
			}
		} else {
			*(*WorkspaceSpecWorkspaceProperties)(ptr) = WorkspaceSpecWorkspaceProperties{}
		}
	default:
		iter.ReportError("decode WorkspaceSpecWorkspaceProperties", "unexpected JSON type")
	}
}
