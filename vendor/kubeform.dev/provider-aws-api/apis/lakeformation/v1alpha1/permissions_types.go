/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Permissions struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PermissionsSpec   `json:"spec,omitempty"`
	Status            PermissionsStatus `json:"status,omitempty"`
}

type PermissionsSpec struct {
	PermissionsSpec2 `json:",inline"`
	// +optional
	KubeformOutput PermissionsSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PermissionsSpecDataLocation struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	CatalogID *string `json:"catalogID,omitempty" tf:"catalog_id"`
}

type PermissionsSpecDatabase struct {
	// +optional
	CatalogID *string `json:"catalogID,omitempty" tf:"catalog_id"`
	Name      *string `json:"name" tf:"name"`
}

type PermissionsSpecTable struct {
	// +optional
	CatalogID    *string `json:"catalogID,omitempty" tf:"catalog_id"`
	DatabaseName *string `json:"databaseName" tf:"database_name"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Wildcard *bool `json:"wildcard,omitempty" tf:"wildcard"`
}

type PermissionsSpecTableWithColumns struct {
	// +optional
	CatalogID *string `json:"catalogID,omitempty" tf:"catalog_id"`
	// +optional
	ColumnNames  []string `json:"columnNames,omitempty" tf:"column_names"`
	DatabaseName *string  `json:"databaseName" tf:"database_name"`
	// +optional
	ExcludedColumnNames []string `json:"excludedColumnNames,omitempty" tf:"excluded_column_names"`
	Name                *string  `json:"name" tf:"name"`
}

type PermissionsSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CatalogID *string `json:"catalogID,omitempty" tf:"catalog_id"`
	// +optional
	CatalogResource *bool `json:"catalogResource,omitempty" tf:"catalog_resource"`
	// +optional
	DataLocation *PermissionsSpecDataLocation `json:"dataLocation,omitempty" tf:"data_location"`
	// +optional
	Database *PermissionsSpecDatabase `json:"database,omitempty" tf:"database"`
	// +kubebuilder:validation:MinItems=1
	Permissions []string `json:"permissions" tf:"permissions"`
	// +optional
	PermissionsWithGrantOption []string `json:"permissionsWithGrantOption,omitempty" tf:"permissions_with_grant_option"`
	Principal                  *string  `json:"principal" tf:"principal"`
	// +optional
	Table *PermissionsSpecTable `json:"table,omitempty" tf:"table"`
	// +optional
	TableWithColumns *PermissionsSpecTableWithColumns `json:"tableWithColumns,omitempty" tf:"table_with_columns"`
}

type PermissionsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PermissionsList is a list of Permissionss
type PermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Permissions CRD objects
	Items []Permissions `json:"items,omitempty"`
}
