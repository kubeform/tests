/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type GatewayRoute struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayRouteSpec   `json:"spec,omitempty"`
	Status            GatewayRouteStatus `json:"status,omitempty"`
}

type GatewayRouteSpec struct {
	GatewayRouteSpec2 `json:",inline"`
	// +optional
	KubeformOutput GatewayRouteSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type GatewayRouteSpecSpecGrpcRouteActionTargetVirtualService struct {
	VirtualServiceName *string `json:"virtualServiceName" tf:"virtual_service_name"`
}

type GatewayRouteSpecSpecGrpcRouteActionTarget struct {
	VirtualService *GatewayRouteSpecSpecGrpcRouteActionTargetVirtualService `json:"virtualService" tf:"virtual_service"`
}

type GatewayRouteSpecSpecGrpcRouteAction struct {
	Target *GatewayRouteSpecSpecGrpcRouteActionTarget `json:"target" tf:"target"`
}

type GatewayRouteSpecSpecGrpcRouteMatch struct {
	ServiceName *string `json:"serviceName" tf:"service_name"`
}

type GatewayRouteSpecSpecGrpcRoute struct {
	Action *GatewayRouteSpecSpecGrpcRouteAction `json:"action" tf:"action"`
	Match  *GatewayRouteSpecSpecGrpcRouteMatch  `json:"match" tf:"match"`
}

type GatewayRouteSpecSpecHttp2RouteActionTargetVirtualService struct {
	VirtualServiceName *string `json:"virtualServiceName" tf:"virtual_service_name"`
}

type GatewayRouteSpecSpecHttp2RouteActionTarget struct {
	VirtualService *GatewayRouteSpecSpecHttp2RouteActionTargetVirtualService `json:"virtualService" tf:"virtual_service"`
}

type GatewayRouteSpecSpecHttp2RouteAction struct {
	Target *GatewayRouteSpecSpecHttp2RouteActionTarget `json:"target" tf:"target"`
}

type GatewayRouteSpecSpecHttp2RouteMatch struct {
	Prefix *string `json:"prefix" tf:"prefix"`
}

type GatewayRouteSpecSpecHttp2Route struct {
	Action *GatewayRouteSpecSpecHttp2RouteAction `json:"action" tf:"action"`
	Match  *GatewayRouteSpecSpecHttp2RouteMatch  `json:"match" tf:"match"`
}

type GatewayRouteSpecSpecHttpRouteActionTargetVirtualService struct {
	VirtualServiceName *string `json:"virtualServiceName" tf:"virtual_service_name"`
}

type GatewayRouteSpecSpecHttpRouteActionTarget struct {
	VirtualService *GatewayRouteSpecSpecHttpRouteActionTargetVirtualService `json:"virtualService" tf:"virtual_service"`
}

type GatewayRouteSpecSpecHttpRouteAction struct {
	Target *GatewayRouteSpecSpecHttpRouteActionTarget `json:"target" tf:"target"`
}

type GatewayRouteSpecSpecHttpRouteMatch struct {
	Prefix *string `json:"prefix" tf:"prefix"`
}

type GatewayRouteSpecSpecHttpRoute struct {
	Action *GatewayRouteSpecSpecHttpRouteAction `json:"action" tf:"action"`
	Match  *GatewayRouteSpecSpecHttpRouteMatch  `json:"match" tf:"match"`
}

type GatewayRouteSpecSpec struct {
	// +optional
	GrpcRoute *GatewayRouteSpecSpecGrpcRoute `json:"grpcRoute,omitempty" tf:"grpc_route"`
	// +optional
	Http2Route *GatewayRouteSpecSpecHttp2Route `json:"http2Route,omitempty" tf:"http2_route"`
	// +optional
	HttpRoute *GatewayRouteSpecSpecHttpRoute `json:"httpRoute,omitempty" tf:"http_route"`
}

type GatewayRouteSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date"`
	// +optional
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date"`
	MeshName        *string `json:"meshName" tf:"mesh_name"`
	// +optional
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	ResourceOwner *string               `json:"resourceOwner,omitempty" tf:"resource_owner"`
	Spec          *GatewayRouteSpecSpec `json:"spec" tf:"spec"`
	// +optional
	Tags               *map[string]string `json:"tags,omitempty" tf:"tags"`
	VirtualGatewayName *string            `json:"virtualGatewayName" tf:"virtual_gateway_name"`
}

type GatewayRouteStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GatewayRouteList is a list of GatewayRoutes
type GatewayRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of GatewayRoute CRD objects
	Items []GatewayRoute `json:"items,omitempty"`
}
