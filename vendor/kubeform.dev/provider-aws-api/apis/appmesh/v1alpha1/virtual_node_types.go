/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VirtualNode struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNodeSpec   `json:"spec,omitempty"`
	Status            VirtualNodeStatus `json:"status,omitempty"`
}

type VirtualNodeSpec struct {
	VirtualNodeSpec2 `json:",inline"`
	// +optional
	KubeformOutput VirtualNodeSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsCertificateFile struct {
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain"`
	PrivateKey       *string `json:"privateKey" tf:"private_key"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsCertificateSds struct {
	SecretName *string `json:"secretName" tf:"secret_name"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsCertificate struct {
	// +optional
	File *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsCertificateFile `json:"file,omitempty" tf:"file"`
	// +optional
	Sds *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsCertificateSds `json:"sds,omitempty" tf:"sds"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch struct {
	Exact []string `json:"exact" tf:"exact"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames struct {
	Match *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatch `json:"match" tf:"match"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm struct {
	CertificateAuthorityArns []string `json:"certificateAuthorityArns" tf:"certificate_authority_arns"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile struct {
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds struct {
	SecretName *string `json:"secretName" tf:"secret_name"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrust struct {
	// +optional
	Acm *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm `json:"acm,omitempty" tf:"acm"`
	// +optional
	File *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile `json:"file,omitempty" tf:"file"`
	// +optional
	Sds *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrustSds `json:"sds,omitempty" tf:"sds"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidation struct {
	// +optional
	SubjectAlternativeNames *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNames `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`
	Trust                   *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidationTrust                   `json:"trust" tf:"trust"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTls struct {
	// +optional
	Certificate *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsCertificate `json:"certificate,omitempty" tf:"certificate"`
	// +optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce"`
	// +optional
	Ports      []int64                                                            `json:"ports,omitempty" tf:"ports"`
	Validation *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTlsValidation `json:"validation" tf:"validation"`
}

type VirtualNodeSpecSpecBackendVirtualServiceClientPolicy struct {
	// +optional
	Tls *VirtualNodeSpecSpecBackendVirtualServiceClientPolicyTls `json:"tls,omitempty" tf:"tls"`
}

type VirtualNodeSpecSpecBackendVirtualService struct {
	// +optional
	ClientPolicy       *VirtualNodeSpecSpecBackendVirtualServiceClientPolicy `json:"clientPolicy,omitempty" tf:"client_policy"`
	VirtualServiceName *string                                               `json:"virtualServiceName" tf:"virtual_service_name"`
}

type VirtualNodeSpecSpecBackend struct {
	VirtualService *VirtualNodeSpecSpecBackendVirtualService `json:"virtualService" tf:"virtual_service"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsCertificateFile struct {
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain"`
	PrivateKey       *string `json:"privateKey" tf:"private_key"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsCertificateSds struct {
	SecretName *string `json:"secretName" tf:"secret_name"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsCertificate struct {
	// +optional
	File *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsCertificateFile `json:"file,omitempty" tf:"file"`
	// +optional
	Sds *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsCertificateSds `json:"sds,omitempty" tf:"sds"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch struct {
	Exact []string `json:"exact" tf:"exact"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames struct {
	Match *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch `json:"match" tf:"match"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrustAcm struct {
	CertificateAuthorityArns []string `json:"certificateAuthorityArns" tf:"certificate_authority_arns"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrustFile struct {
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrustSds struct {
	SecretName *string `json:"secretName" tf:"secret_name"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrust struct {
	// +optional
	Acm *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrustAcm `json:"acm,omitempty" tf:"acm"`
	// +optional
	File *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrustFile `json:"file,omitempty" tf:"file"`
	// +optional
	Sds *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrustSds `json:"sds,omitempty" tf:"sds"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidation struct {
	// +optional
	SubjectAlternativeNames *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`
	Trust                   *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidationTrust                   `json:"trust" tf:"trust"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicyTls struct {
	// +optional
	Certificate *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsCertificate `json:"certificate,omitempty" tf:"certificate"`
	// +optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce"`
	// +optional
	Ports      []int64                                                      `json:"ports,omitempty" tf:"ports"`
	Validation *VirtualNodeSpecSpecBackendDefaultsClientPolicyTlsValidation `json:"validation" tf:"validation"`
}

type VirtualNodeSpecSpecBackendDefaultsClientPolicy struct {
	// +optional
	Tls *VirtualNodeSpecSpecBackendDefaultsClientPolicyTls `json:"tls,omitempty" tf:"tls"`
}

type VirtualNodeSpecSpecBackendDefaults struct {
	// +optional
	ClientPolicy *VirtualNodeSpecSpecBackendDefaultsClientPolicy `json:"clientPolicy,omitempty" tf:"client_policy"`
}

type VirtualNodeSpecSpecListenerConnectionPoolGrpc struct {
	MaxRequests *int64 `json:"maxRequests" tf:"max_requests"`
}

type VirtualNodeSpecSpecListenerConnectionPoolHttp struct {
	MaxConnections *int64 `json:"maxConnections" tf:"max_connections"`
	// +optional
	MaxPendingRequests *int64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests"`
}

type VirtualNodeSpecSpecListenerConnectionPoolHttp2 struct {
	MaxRequests *int64 `json:"maxRequests" tf:"max_requests"`
}

type VirtualNodeSpecSpecListenerConnectionPoolTcp struct {
	MaxConnections *int64 `json:"maxConnections" tf:"max_connections"`
}

type VirtualNodeSpecSpecListenerConnectionPool struct {
	// +optional
	Grpc *VirtualNodeSpecSpecListenerConnectionPoolGrpc `json:"grpc,omitempty" tf:"grpc"`
	// +optional
	Http *VirtualNodeSpecSpecListenerConnectionPoolHttp `json:"http,omitempty" tf:"http"`
	// +optional
	Http2 *VirtualNodeSpecSpecListenerConnectionPoolHttp2 `json:"http2,omitempty" tf:"http2"`
	// +optional
	Tcp *VirtualNodeSpecSpecListenerConnectionPoolTcp `json:"tcp,omitempty" tf:"tcp"`
}

type VirtualNodeSpecSpecListenerHealthCheck struct {
	HealthyThreshold *int64 `json:"healthyThreshold" tf:"healthy_threshold"`
	IntervalMillis   *int64 `json:"intervalMillis" tf:"interval_millis"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Port               *int64  `json:"port,omitempty" tf:"port"`
	Protocol           *string `json:"protocol" tf:"protocol"`
	TimeoutMillis      *int64  `json:"timeoutMillis" tf:"timeout_millis"`
	UnhealthyThreshold *int64  `json:"unhealthyThreshold" tf:"unhealthy_threshold"`
}

type VirtualNodeSpecSpecListenerOutlierDetectionBaseEjectionDuration struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerOutlierDetectionInterval struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerOutlierDetection struct {
	BaseEjectionDuration *VirtualNodeSpecSpecListenerOutlierDetectionBaseEjectionDuration `json:"baseEjectionDuration" tf:"base_ejection_duration"`
	Interval             *VirtualNodeSpecSpecListenerOutlierDetectionInterval             `json:"interval" tf:"interval"`
	MaxEjectionPercent   *int64                                                           `json:"maxEjectionPercent" tf:"max_ejection_percent"`
	MaxServerErrors      *int64                                                           `json:"maxServerErrors" tf:"max_server_errors"`
}

type VirtualNodeSpecSpecListenerPortMapping struct {
	Port     *int64  `json:"port" tf:"port"`
	Protocol *string `json:"protocol" tf:"protocol"`
}

type VirtualNodeSpecSpecListenerTimeoutGrpcIdle struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerTimeoutGrpcPerRequest struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerTimeoutGrpc struct {
	// +optional
	Idle *VirtualNodeSpecSpecListenerTimeoutGrpcIdle `json:"idle,omitempty" tf:"idle"`
	// +optional
	PerRequest *VirtualNodeSpecSpecListenerTimeoutGrpcPerRequest `json:"perRequest,omitempty" tf:"per_request"`
}

type VirtualNodeSpecSpecListenerTimeoutHttpIdle struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerTimeoutHttpPerRequest struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerTimeoutHttp struct {
	// +optional
	Idle *VirtualNodeSpecSpecListenerTimeoutHttpIdle `json:"idle,omitempty" tf:"idle"`
	// +optional
	PerRequest *VirtualNodeSpecSpecListenerTimeoutHttpPerRequest `json:"perRequest,omitempty" tf:"per_request"`
}

type VirtualNodeSpecSpecListenerTimeoutHttp2Idle struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerTimeoutHttp2PerRequest struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerTimeoutHttp2 struct {
	// +optional
	Idle *VirtualNodeSpecSpecListenerTimeoutHttp2Idle `json:"idle,omitempty" tf:"idle"`
	// +optional
	PerRequest *VirtualNodeSpecSpecListenerTimeoutHttp2PerRequest `json:"perRequest,omitempty" tf:"per_request"`
}

type VirtualNodeSpecSpecListenerTimeoutTcpIdle struct {
	Unit  *string `json:"unit" tf:"unit"`
	Value *int64  `json:"value" tf:"value"`
}

type VirtualNodeSpecSpecListenerTimeoutTcp struct {
	// +optional
	Idle *VirtualNodeSpecSpecListenerTimeoutTcpIdle `json:"idle,omitempty" tf:"idle"`
}

type VirtualNodeSpecSpecListenerTimeout struct {
	// +optional
	Grpc *VirtualNodeSpecSpecListenerTimeoutGrpc `json:"grpc,omitempty" tf:"grpc"`
	// +optional
	Http *VirtualNodeSpecSpecListenerTimeoutHttp `json:"http,omitempty" tf:"http"`
	// +optional
	Http2 *VirtualNodeSpecSpecListenerTimeoutHttp2 `json:"http2,omitempty" tf:"http2"`
	// +optional
	Tcp *VirtualNodeSpecSpecListenerTimeoutTcp `json:"tcp,omitempty" tf:"tcp"`
}

type VirtualNodeSpecSpecListenerTlsCertificateAcm struct {
	CertificateArn *string `json:"certificateArn" tf:"certificate_arn"`
}

type VirtualNodeSpecSpecListenerTlsCertificateFile struct {
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain"`
	PrivateKey       *string `json:"privateKey" tf:"private_key"`
}

type VirtualNodeSpecSpecListenerTlsCertificateSds struct {
	SecretName *string `json:"secretName" tf:"secret_name"`
}

type VirtualNodeSpecSpecListenerTlsCertificate struct {
	// +optional
	Acm *VirtualNodeSpecSpecListenerTlsCertificateAcm `json:"acm,omitempty" tf:"acm"`
	// +optional
	File *VirtualNodeSpecSpecListenerTlsCertificateFile `json:"file,omitempty" tf:"file"`
	// +optional
	Sds *VirtualNodeSpecSpecListenerTlsCertificateSds `json:"sds,omitempty" tf:"sds"`
}

type VirtualNodeSpecSpecListenerTlsValidationSubjectAlternativeNamesMatch struct {
	Exact []string `json:"exact" tf:"exact"`
}

type VirtualNodeSpecSpecListenerTlsValidationSubjectAlternativeNames struct {
	Match *VirtualNodeSpecSpecListenerTlsValidationSubjectAlternativeNamesMatch `json:"match" tf:"match"`
}

type VirtualNodeSpecSpecListenerTlsValidationTrustFile struct {
	CertificateChain *string `json:"certificateChain" tf:"certificate_chain"`
}

type VirtualNodeSpecSpecListenerTlsValidationTrustSds struct {
	SecretName *string `json:"secretName" tf:"secret_name"`
}

type VirtualNodeSpecSpecListenerTlsValidationTrust struct {
	// +optional
	File *VirtualNodeSpecSpecListenerTlsValidationTrustFile `json:"file,omitempty" tf:"file"`
	// +optional
	Sds *VirtualNodeSpecSpecListenerTlsValidationTrustSds `json:"sds,omitempty" tf:"sds"`
}

type VirtualNodeSpecSpecListenerTlsValidation struct {
	// +optional
	SubjectAlternativeNames *VirtualNodeSpecSpecListenerTlsValidationSubjectAlternativeNames `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`
	Trust                   *VirtualNodeSpecSpecListenerTlsValidationTrust                   `json:"trust" tf:"trust"`
}

type VirtualNodeSpecSpecListenerTls struct {
	Certificate *VirtualNodeSpecSpecListenerTlsCertificate `json:"certificate" tf:"certificate"`
	Mode        *string                                    `json:"mode" tf:"mode"`
	// +optional
	Validation *VirtualNodeSpecSpecListenerTlsValidation `json:"validation,omitempty" tf:"validation"`
}

type VirtualNodeSpecSpecListener struct {
	// +optional
	ConnectionPool *VirtualNodeSpecSpecListenerConnectionPool `json:"connectionPool,omitempty" tf:"connection_pool"`
	// +optional
	HealthCheck *VirtualNodeSpecSpecListenerHealthCheck `json:"healthCheck,omitempty" tf:"health_check"`
	// +optional
	OutlierDetection *VirtualNodeSpecSpecListenerOutlierDetection `json:"outlierDetection,omitempty" tf:"outlier_detection"`
	PortMapping      *VirtualNodeSpecSpecListenerPortMapping      `json:"portMapping" tf:"port_mapping"`
	// +optional
	Timeout *VirtualNodeSpecSpecListenerTimeout `json:"timeout,omitempty" tf:"timeout"`
	// +optional
	Tls *VirtualNodeSpecSpecListenerTls `json:"tls,omitempty" tf:"tls"`
}

type VirtualNodeSpecSpecLoggingAccessLogFile struct {
	Path *string `json:"path" tf:"path"`
}

type VirtualNodeSpecSpecLoggingAccessLog struct {
	// +optional
	File *VirtualNodeSpecSpecLoggingAccessLogFile `json:"file,omitempty" tf:"file"`
}

type VirtualNodeSpecSpecLogging struct {
	// +optional
	AccessLog *VirtualNodeSpecSpecLoggingAccessLog `json:"accessLog,omitempty" tf:"access_log"`
}

type VirtualNodeSpecSpecServiceDiscoveryAwsCloudMap struct {
	// +optional
	Attributes    *map[string]string `json:"attributes,omitempty" tf:"attributes"`
	NamespaceName *string            `json:"namespaceName" tf:"namespace_name"`
	ServiceName   *string            `json:"serviceName" tf:"service_name"`
}

type VirtualNodeSpecSpecServiceDiscoveryDns struct {
	Hostname *string `json:"hostname" tf:"hostname"`
}

type VirtualNodeSpecSpecServiceDiscovery struct {
	// +optional
	AwsCloudMap *VirtualNodeSpecSpecServiceDiscoveryAwsCloudMap `json:"awsCloudMap,omitempty" tf:"aws_cloud_map"`
	// +optional
	Dns *VirtualNodeSpecSpecServiceDiscoveryDns `json:"dns,omitempty" tf:"dns"`
}

type VirtualNodeSpecSpec struct {
	// +optional
	// +kubebuilder:validation:MaxItems=25
	Backend []VirtualNodeSpecSpecBackend `json:"backend,omitempty" tf:"backend"`
	// +optional
	BackendDefaults *VirtualNodeSpecSpecBackendDefaults `json:"backendDefaults,omitempty" tf:"backend_defaults"`
	// +optional
	Listener *VirtualNodeSpecSpecListener `json:"listener,omitempty" tf:"listener"`
	// +optional
	Logging *VirtualNodeSpecSpecLogging `json:"logging,omitempty" tf:"logging"`
	// +optional
	ServiceDiscovery *VirtualNodeSpecSpecServiceDiscovery `json:"serviceDiscovery,omitempty" tf:"service_discovery"`
}

type VirtualNodeSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date"`
	// +optional
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date"`
	MeshName        *string `json:"meshName" tf:"mesh_name"`
	// +optional
	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	ResourceOwner *string              `json:"resourceOwner,omitempty" tf:"resource_owner"`
	Spec          *VirtualNodeSpecSpec `json:"spec" tf:"spec"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type VirtualNodeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VirtualNodeList is a list of VirtualNodes
type VirtualNodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VirtualNode CRD objects
	Items []VirtualNode `json:"items,omitempty"`
}
