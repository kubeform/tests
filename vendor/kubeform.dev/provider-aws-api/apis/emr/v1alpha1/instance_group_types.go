/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type InstanceGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceGroupSpec   `json:"spec,omitempty"`
	Status            InstanceGroupStatus `json:"status,omitempty"`
}

type InstanceGroupSpec struct {
	InstanceGroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput InstanceGroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type InstanceGroupSpecEbsConfig struct {
	// +optional
	Iops *int64  `json:"iops,omitempty" tf:"iops"`
	Size *int64  `json:"size" tf:"size"`
	Type *string `json:"type" tf:"type"`
	// +optional
	VolumesPerInstance *int64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance"`
}

type InstanceGroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy"`
	// +optional
	BidPrice  *string `json:"bidPrice,omitempty" tf:"bid_price"`
	ClusterID *string `json:"clusterID" tf:"cluster_id"`
	// +optional
	ConfigurationsJSON *string `json:"configurationsJSON,omitempty" tf:"configurations_json"`
	// +optional
	EbsConfig []InstanceGroupSpecEbsConfig `json:"ebsConfig,omitempty" tf:"ebs_config"`
	// +optional
	EbsOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized"`
	// +optional
	InstanceCount *int64  `json:"instanceCount,omitempty" tf:"instance_count"`
	InstanceType  *string `json:"instanceType" tf:"instance_type"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	RunningInstanceCount *int64 `json:"runningInstanceCount,omitempty" tf:"running_instance_count"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type InstanceGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceGroupList is a list of InstanceGroups
type InstanceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of InstanceGroup CRD objects
	Items []InstanceGroup `json:"items,omitempty"`
}
