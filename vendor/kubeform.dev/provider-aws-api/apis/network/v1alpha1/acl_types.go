/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Acl struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AclSpec   `json:"spec,omitempty"`
	Status            AclStatus `json:"status,omitempty"`
}

type AclSpec struct {
	AclSpec2 `json:",inline"`
	// +optional
	KubeformOutput AclSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type AclSpecEgress struct {
	Action *string `json:"action" tf:"action"`
	// +optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block"`
	FromPort  *int64  `json:"fromPort" tf:"from_port"`
	// +optional
	IcmpCode *int64 `json:"icmpCode,omitempty" tf:"icmp_code"`
	// +optional
	IcmpType *int64 `json:"icmpType,omitempty" tf:"icmp_type"`
	// +optional
	Ipv6CIDRBlock *string `json:"ipv6CIDRBlock,omitempty" tf:"ipv6_cidr_block"`
	Protocol      *string `json:"protocol" tf:"protocol"`
	RuleNo        *int64  `json:"ruleNo" tf:"rule_no"`
	ToPort        *int64  `json:"toPort" tf:"to_port"`
}

type AclSpecIngress struct {
	Action *string `json:"action" tf:"action"`
	// +optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block"`
	FromPort  *int64  `json:"fromPort" tf:"from_port"`
	// +optional
	IcmpCode *int64 `json:"icmpCode,omitempty" tf:"icmp_code"`
	// +optional
	IcmpType *int64 `json:"icmpType,omitempty" tf:"icmp_type"`
	// +optional
	Ipv6CIDRBlock *string `json:"ipv6CIDRBlock,omitempty" tf:"ipv6_cidr_block"`
	Protocol      *string `json:"protocol" tf:"protocol"`
	RuleNo        *int64  `json:"ruleNo" tf:"rule_no"`
	ToPort        *int64  `json:"toPort" tf:"to_port"`
}

type AclSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	Egress []AclSpecEgress `json:"egress,omitempty" tf:"egress"`
	// +optional
	Ingress []AclSpecIngress `json:"ingress,omitempty" tf:"ingress"`
	// +optional
	OwnerID *string `json:"ownerID,omitempty" tf:"owner_id"`
	// +optional
	SubnetIDS []string `json:"subnetIDS,omitempty" tf:"subnet_ids"`
	// +optional
	Tags  *map[string]string `json:"tags,omitempty" tf:"tags"`
	VpcID *string            `json:"vpcID" tf:"vpc_id"`
}

type AclStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AclList is a list of Acls
type AclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Acl CRD objects
	Items []Acl `json:"items,omitempty"`
}
