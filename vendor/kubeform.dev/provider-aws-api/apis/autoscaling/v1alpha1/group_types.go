/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Group struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupSpec   `json:"spec,omitempty"`
	Status            GroupStatus `json:"status,omitempty"`
}

type GroupSpec struct {
	GroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput GroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type GroupSpecInitialLifecycleHook struct {
	// +optional
	DefaultResult *string `json:"defaultResult,omitempty" tf:"default_result"`
	// +optional
	HeartbeatTimeout    *int64  `json:"heartbeatTimeout,omitempty" tf:"heartbeat_timeout"`
	LifecycleTransition *string `json:"lifecycleTransition" tf:"lifecycle_transition"`
	Name                *string `json:"name" tf:"name"`
	// +optional
	NotificationMetadata *string `json:"notificationMetadata,omitempty" tf:"notification_metadata"`
	// +optional
	NotificationTargetArn *string `json:"notificationTargetArn,omitempty" tf:"notification_target_arn"`
	// +optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn"`
}

type GroupSpecInstanceRefreshPreferences struct {
	// +optional
	InstanceWarmup *string `json:"instanceWarmup,omitempty" tf:"instance_warmup"`
	// +optional
	MinHealthyPercentage *int64 `json:"minHealthyPercentage,omitempty" tf:"min_healthy_percentage"`
}

type GroupSpecInstanceRefresh struct {
	// +optional
	Preferences *GroupSpecInstanceRefreshPreferences `json:"preferences,omitempty" tf:"preferences"`
	Strategy    *string                              `json:"strategy" tf:"strategy"`
	// +optional
	Triggers []string `json:"triggers,omitempty" tf:"triggers"`
}

type GroupSpecLaunchTemplate struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type GroupSpecMixedInstancesPolicyInstancesDistribution struct {
	// +optional
	OnDemandAllocationStrategy *string `json:"onDemandAllocationStrategy,omitempty" tf:"on_demand_allocation_strategy"`
	// +optional
	OnDemandBaseCapacity *int64 `json:"onDemandBaseCapacity,omitempty" tf:"on_demand_base_capacity"`
	// +optional
	OnDemandPercentageAboveBaseCapacity *int64 `json:"onDemandPercentageAboveBaseCapacity,omitempty" tf:"on_demand_percentage_above_base_capacity"`
	// +optional
	SpotAllocationStrategy *string `json:"spotAllocationStrategy,omitempty" tf:"spot_allocation_strategy"`
	// +optional
	SpotInstancePools *int64 `json:"spotInstancePools,omitempty" tf:"spot_instance_pools"`
	// +optional
	SpotMaxPrice *string `json:"spotMaxPrice,omitempty" tf:"spot_max_price"`
}

type GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification struct {
	// +optional
	LaunchTemplateID *string `json:"launchTemplateID,omitempty" tf:"launch_template_id"`
	// +optional
	LaunchTemplateName *string `json:"launchTemplateName,omitempty" tf:"launch_template_name"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification struct {
	// +optional
	LaunchTemplateID *string `json:"launchTemplateID,omitempty" tf:"launch_template_id"`
	// +optional
	LaunchTemplateName *string `json:"launchTemplateName,omitempty" tf:"launch_template_name"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type GroupSpecMixedInstancesPolicyLaunchTemplateOverride struct {
	// +optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`
	// +optional
	LaunchTemplateSpecification *GroupSpecMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification `json:"launchTemplateSpecification,omitempty" tf:"launch_template_specification"`
	// +optional
	WeightedCapacity *string `json:"weightedCapacity,omitempty" tf:"weighted_capacity"`
}

type GroupSpecMixedInstancesPolicyLaunchTemplate struct {
	LaunchTemplateSpecification *GroupSpecMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification `json:"launchTemplateSpecification" tf:"launch_template_specification"`
	// +optional
	Override []GroupSpecMixedInstancesPolicyLaunchTemplateOverride `json:"override,omitempty" tf:"override"`
}

type GroupSpecMixedInstancesPolicy struct {
	// +optional
	InstancesDistribution *GroupSpecMixedInstancesPolicyInstancesDistribution `json:"instancesDistribution,omitempty" tf:"instances_distribution"`
	LaunchTemplate        *GroupSpecMixedInstancesPolicyLaunchTemplate        `json:"launchTemplate" tf:"launch_template"`
}

type GroupSpecTag struct {
	Key               *string `json:"key" tf:"key"`
	PropagateAtLaunch *bool   `json:"propagateAtLaunch" tf:"propagate_at_launch"`
	Value             *string `json:"value" tf:"value"`
}

type GroupSpecWarmPool struct {
	// +optional
	MaxGroupPreparedCapacity *int64 `json:"maxGroupPreparedCapacity,omitempty" tf:"max_group_prepared_capacity"`
	// +optional
	MinSize *int64 `json:"minSize,omitempty" tf:"min_size"`
	// +optional
	PoolState *string `json:"poolState,omitempty" tf:"pool_state"`
}

type GroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`
	// +optional
	CapacityRebalance *bool `json:"capacityRebalance,omitempty" tf:"capacity_rebalance"`
	// +optional
	DefaultCooldown *int64 `json:"defaultCooldown,omitempty" tf:"default_cooldown"`
	// +optional
	DesiredCapacity *int64 `json:"desiredCapacity,omitempty" tf:"desired_capacity"`
	// +optional
	EnabledMetrics []string `json:"enabledMetrics,omitempty" tf:"enabled_metrics"`
	// +optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete"`
	// +optional
	ForceDeleteWarmPool *bool `json:"forceDeleteWarmPool,omitempty" tf:"force_delete_warm_pool"`
	// +optional
	HealthCheckGracePeriod *int64 `json:"healthCheckGracePeriod,omitempty" tf:"health_check_grace_period"`
	// +optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type"`
	// +optional
	InitialLifecycleHook []GroupSpecInitialLifecycleHook `json:"initialLifecycleHook,omitempty" tf:"initial_lifecycle_hook"`
	// +optional
	InstanceRefresh *GroupSpecInstanceRefresh `json:"instanceRefresh,omitempty" tf:"instance_refresh"`
	// +optional
	LaunchConfiguration *string `json:"launchConfiguration,omitempty" tf:"launch_configuration"`
	// +optional
	LaunchTemplate *GroupSpecLaunchTemplate `json:"launchTemplate,omitempty" tf:"launch_template"`
	// +optional
	LoadBalancers []string `json:"loadBalancers,omitempty" tf:"load_balancers"`
	// +optional
	MaxInstanceLifetime *int64 `json:"maxInstanceLifetime,omitempty" tf:"max_instance_lifetime"`
	MaxSize             *int64 `json:"maxSize" tf:"max_size"`
	// +optional
	MetricsGranularity *string `json:"metricsGranularity,omitempty" tf:"metrics_granularity"`
	// +optional
	MinElbCapacity *int64 `json:"minElbCapacity,omitempty" tf:"min_elb_capacity"`
	MinSize        *int64 `json:"minSize" tf:"min_size"`
	// +optional
	MixedInstancesPolicy *GroupSpecMixedInstancesPolicy `json:"mixedInstancesPolicy,omitempty" tf:"mixed_instances_policy"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`
	// +optional
	PlacementGroup *string `json:"placementGroup,omitempty" tf:"placement_group"`
	// +optional
	ProtectFromScaleIn *bool `json:"protectFromScaleIn,omitempty" tf:"protect_from_scale_in"`
	// +optional
	ServiceLinkedRoleArn *string `json:"serviceLinkedRoleArn,omitempty" tf:"service_linked_role_arn"`
	// +optional
	SuspendedProcesses []string `json:"suspendedProcesses,omitempty" tf:"suspended_processes"`
	// +optional
	Tag []GroupSpecTag `json:"tag,omitempty" tf:"tag"`
	// +optional
	// +optional
	TargetGroupArns []string `json:"targetGroupArns,omitempty" tf:"target_group_arns"`
	// +optional
	TerminationPolicies []string `json:"terminationPolicies,omitempty" tf:"termination_policies"`
	// +optional
	VpcZoneIdentifier []string `json:"vpcZoneIdentifier,omitempty" tf:"vpc_zone_identifier"`
	// +optional
	WaitForCapacityTimeout *string `json:"waitForCapacityTimeout,omitempty" tf:"wait_for_capacity_timeout"`
	// +optional
	WaitForElbCapacity *int64 `json:"waitForElbCapacity,omitempty" tf:"wait_for_elb_capacity"`
	// +optional
	WarmPool *GroupSpecWarmPool `json:"warmPool,omitempty" tf:"warm_pool"`
}

type GroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GroupList is a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Group CRD objects
	Items []Group `json:"items,omitempty"`
}
