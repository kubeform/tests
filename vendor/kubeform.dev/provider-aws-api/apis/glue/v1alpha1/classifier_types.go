/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Classifier struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClassifierSpec   `json:"spec,omitempty"`
	Status            ClassifierStatus `json:"status,omitempty"`
}

type ClassifierSpec struct {
	ClassifierSpec2 `json:",inline"`
	// +optional
	KubeformOutput ClassifierSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ClassifierSpecCsvClassifier struct {
	// +optional
	AllowSingleColumn *bool `json:"allowSingleColumn,omitempty" tf:"allow_single_column"`
	// +optional
	ContainsHeader *string `json:"containsHeader,omitempty" tf:"contains_header"`
	// +optional
	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter"`
	// +optional
	DisableValueTrimming *bool `json:"disableValueTrimming,omitempty" tf:"disable_value_trimming"`
	// +optional
	Header []string `json:"header,omitempty" tf:"header"`
	// +optional
	QuoteSymbol *string `json:"quoteSymbol,omitempty" tf:"quote_symbol"`
}

type ClassifierSpecGrokClassifier struct {
	Classification *string `json:"classification" tf:"classification"`
	// +optional
	CustomPatterns *string `json:"customPatterns,omitempty" tf:"custom_patterns"`
	GrokPattern    *string `json:"grokPattern" tf:"grok_pattern"`
}

type ClassifierSpecJsonClassifier struct {
	JsonPath *string `json:"jsonPath" tf:"json_path"`
}

type ClassifierSpecXmlClassifier struct {
	Classification *string `json:"classification" tf:"classification"`
	RowTag         *string `json:"rowTag" tf:"row_tag"`
}

type ClassifierSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CsvClassifier *ClassifierSpecCsvClassifier `json:"csvClassifier,omitempty" tf:"csv_classifier"`
	// +optional
	GrokClassifier *ClassifierSpecGrokClassifier `json:"grokClassifier,omitempty" tf:"grok_classifier"`
	// +optional
	JsonClassifier *ClassifierSpecJsonClassifier `json:"jsonClassifier,omitempty" tf:"json_classifier"`
	Name           *string                       `json:"name" tf:"name"`
	// +optional
	XmlClassifier *ClassifierSpecXmlClassifier `json:"xmlClassifier,omitempty" tf:"xml_classifier"`
}

type ClassifierStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClassifierList is a list of Classifiers
type ClassifierList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Classifier CRD objects
	Items []Classifier `json:"items,omitempty"`
}
