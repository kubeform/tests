/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Crawler struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CrawlerSpec   `json:"spec,omitempty"`
	Status            CrawlerStatus `json:"status,omitempty"`
}

type CrawlerSpec struct {
	CrawlerSpec2 `json:",inline"`
	// +optional
	KubeformOutput CrawlerSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CrawlerSpecCatalogTarget struct {
	DatabaseName *string  `json:"databaseName" tf:"database_name"`
	Tables       []string `json:"tables" tf:"tables"`
}

type CrawlerSpecDynamodbTarget struct {
	Path *string `json:"path" tf:"path"`
	// +optional
	ScanAll *bool `json:"scanAll,omitempty" tf:"scan_all"`
	// +optional
	ScanRate *float64 `json:"scanRate,omitempty" tf:"scan_rate"`
}

type CrawlerSpecJdbcTarget struct {
	ConnectionName *string `json:"connectionName" tf:"connection_name"`
	// +optional
	Exclusions []string `json:"exclusions,omitempty" tf:"exclusions"`
	Path       *string  `json:"path" tf:"path"`
}

type CrawlerSpecLineageConfiguration struct {
	// +optional
	CrawlerLineageSettings *string `json:"crawlerLineageSettings,omitempty" tf:"crawler_lineage_settings"`
}

type CrawlerSpecMongodbTarget struct {
	ConnectionName *string `json:"connectionName" tf:"connection_name"`
	Path           *string `json:"path" tf:"path"`
	// +optional
	ScanAll *bool `json:"scanAll,omitempty" tf:"scan_all"`
}

type CrawlerSpecRecrawlPolicy struct {
	// +optional
	RecrawlBehavior *string `json:"recrawlBehavior,omitempty" tf:"recrawl_behavior"`
}

type CrawlerSpecS3Target struct {
	// +optional
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name"`
	// +optional
	Exclusions []string `json:"exclusions,omitempty" tf:"exclusions"`
	Path       *string  `json:"path" tf:"path"`
}

type CrawlerSpecSchemaChangePolicy struct {
	// +optional
	DeleteBehavior *string `json:"deleteBehavior,omitempty" tf:"delete_behavior"`
	// +optional
	UpdateBehavior *string `json:"updateBehavior,omitempty" tf:"update_behavior"`
}

type CrawlerSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	CatalogTarget []CrawlerSpecCatalogTarget `json:"catalogTarget,omitempty" tf:"catalog_target"`
	// +optional
	Classifiers []string `json:"classifiers,omitempty" tf:"classifiers"`
	// +optional
	Configuration *string `json:"configuration,omitempty" tf:"configuration"`
	DatabaseName  *string `json:"databaseName" tf:"database_name"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	DynamodbTarget []CrawlerSpecDynamodbTarget `json:"dynamodbTarget,omitempty" tf:"dynamodb_target"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	JdbcTarget []CrawlerSpecJdbcTarget `json:"jdbcTarget,omitempty" tf:"jdbc_target"`
	// +optional
	LineageConfiguration *CrawlerSpecLineageConfiguration `json:"lineageConfiguration,omitempty" tf:"lineage_configuration"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	MongodbTarget []CrawlerSpecMongodbTarget `json:"mongodbTarget,omitempty" tf:"mongodb_target"`
	Name          *string                    `json:"name" tf:"name"`
	// +optional
	RecrawlPolicy *CrawlerSpecRecrawlPolicy `json:"recrawlPolicy,omitempty" tf:"recrawl_policy"`
	Role          *string                   `json:"role" tf:"role"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	S3Target []CrawlerSpecS3Target `json:"s3Target,omitempty" tf:"s3_target"`
	// +optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule"`
	// +optional
	SchemaChangePolicy *CrawlerSpecSchemaChangePolicy `json:"schemaChangePolicy,omitempty" tf:"schema_change_policy"`
	// +optional
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration"`
	// +optional
	TablePrefix *string `json:"tablePrefix,omitempty" tf:"table_prefix"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type CrawlerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CrawlerList is a list of Crawlers
type CrawlerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Crawler CRD objects
	Items []Crawler `json:"items,omitempty"`
}
