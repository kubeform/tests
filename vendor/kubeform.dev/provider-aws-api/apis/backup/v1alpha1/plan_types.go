/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Plan struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PlanSpec   `json:"spec,omitempty"`
	Status            PlanStatus `json:"status,omitempty"`
}

type PlanSpec struct {
	PlanSpec2 `json:",inline"`
	// +optional
	KubeformOutput PlanSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PlanSpecAdvancedBackupSetting struct {
	BackupOptions *map[string]string `json:"backupOptions" tf:"backup_options"`
	ResourceType  *string            `json:"resourceType" tf:"resource_type"`
}

type PlanSpecRuleCopyActionLifecycle struct {
	// +optional
	ColdStorageAfter *int64 `json:"coldStorageAfter,omitempty" tf:"cold_storage_after"`
	// +optional
	DeleteAfter *int64 `json:"deleteAfter,omitempty" tf:"delete_after"`
}

type PlanSpecRuleCopyAction struct {
	DestinationVaultArn *string `json:"destinationVaultArn" tf:"destination_vault_arn"`
	// +optional
	Lifecycle *PlanSpecRuleCopyActionLifecycle `json:"lifecycle,omitempty" tf:"lifecycle"`
}

type PlanSpecRuleLifecycle struct {
	// +optional
	ColdStorageAfter *int64 `json:"coldStorageAfter,omitempty" tf:"cold_storage_after"`
	// +optional
	DeleteAfter *int64 `json:"deleteAfter,omitempty" tf:"delete_after"`
}

type PlanSpecRule struct {
	// +optional
	CompletionWindow *int64 `json:"completionWindow,omitempty" tf:"completion_window"`
	// +optional
	CopyAction []PlanSpecRuleCopyAction `json:"copyAction,omitempty" tf:"copy_action"`
	// +optional
	EnableContinuousBackup *bool `json:"enableContinuousBackup,omitempty" tf:"enable_continuous_backup"`
	// +optional
	Lifecycle *PlanSpecRuleLifecycle `json:"lifecycle,omitempty" tf:"lifecycle"`
	// +optional
	RecoveryPointTags *map[string]string `json:"recoveryPointTags,omitempty" tf:"recovery_point_tags"`
	RuleName          *string            `json:"ruleName" tf:"rule_name"`
	// +optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule"`
	// +optional
	StartWindow     *int64  `json:"startWindow,omitempty" tf:"start_window"`
	TargetVaultName *string `json:"targetVaultName" tf:"target_vault_name"`
}

type PlanSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AdvancedBackupSetting []PlanSpecAdvancedBackupSetting `json:"advancedBackupSetting,omitempty" tf:"advanced_backup_setting"`
	// +optional
	Arn  *string        `json:"arn,omitempty" tf:"arn"`
	Name *string        `json:"name" tf:"name"`
	Rule []PlanSpecRule `json:"rule" tf:"rule"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type PlanStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PlanList is a list of Plans
type PlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Plan CRD objects
	Items []Plan `json:"items,omitempty"`
}
