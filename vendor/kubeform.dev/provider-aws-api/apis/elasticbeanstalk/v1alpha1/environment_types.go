/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Environment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvironmentSpec   `json:"spec,omitempty"`
	Status            EnvironmentStatus `json:"status,omitempty"`
}

type EnvironmentSpec struct {
	EnvironmentSpec2 `json:",inline"`
	// +optional
	KubeformOutput EnvironmentSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type EnvironmentSpecAllSettings struct {
	Name      *string `json:"name" tf:"name"`
	Namespace *string `json:"namespace" tf:"namespace"`
	// +optional
	Resource *string `json:"resource,omitempty" tf:"resource"`
	Value    *string `json:"value" tf:"value"`
}

type EnvironmentSpecSetting struct {
	Name      *string `json:"name" tf:"name"`
	Namespace *string `json:"namespace" tf:"namespace"`
	// +optional
	Resource *string `json:"resource,omitempty" tf:"resource"`
	Value    *string `json:"value" tf:"value"`
}

type EnvironmentSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AllSettings []EnvironmentSpecAllSettings `json:"allSettings,omitempty" tf:"all_settings"`
	Application *string                      `json:"application" tf:"application"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AutoscalingGroups []string `json:"autoscalingGroups,omitempty" tf:"autoscaling_groups"`
	// +optional
	Cname *string `json:"cname,omitempty" tf:"cname"`
	// +optional
	CnamePrefix *string `json:"cnamePrefix,omitempty" tf:"cname_prefix"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	EndpointURL *string `json:"endpointURL,omitempty" tf:"endpoint_url"`
	// +optional
	Instances []string `json:"instances,omitempty" tf:"instances"`
	// +optional
	LaunchConfigurations []string `json:"launchConfigurations,omitempty" tf:"launch_configurations"`
	// +optional
	LoadBalancers []string `json:"loadBalancers,omitempty" tf:"load_balancers"`
	Name          *string  `json:"name" tf:"name"`
	// +optional
	PlatformArn *string `json:"platformArn,omitempty" tf:"platform_arn"`
	// +optional
	PollInterval *string `json:"pollInterval,omitempty" tf:"poll_interval"`
	// +optional
	Queues []string `json:"queues,omitempty" tf:"queues"`
	// +optional
	Setting []EnvironmentSpecSetting `json:"setting,omitempty" tf:"setting"`
	// +optional
	SolutionStackName *string `json:"solutionStackName,omitempty" tf:"solution_stack_name"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name"`
	// +optional
	Tier *string `json:"tier,omitempty" tf:"tier"`
	// +optional
	Triggers []string `json:"triggers,omitempty" tf:"triggers"`
	// +optional
	VersionLabel *string `json:"versionLabel,omitempty" tf:"version_label"`
	// +optional
	WaitForReadyTimeout *string `json:"waitForReadyTimeout,omitempty" tf:"wait_for_ready_timeout"`
}

type EnvironmentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EnvironmentList is a list of Environments
type EnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Environment CRD objects
	Items []Environment `json:"items,omitempty"`
}
