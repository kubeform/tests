/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AccessPoint struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessPointSpec   `json:"spec,omitempty"`
	Status            AccessPointStatus `json:"status,omitempty"`
}

type AccessPointSpec struct {
	AccessPointSpec2 `json:",inline"`
	// +optional
	KubeformOutput AccessPointSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type AccessPointSpecPosixUser struct {
	Gid *int64 `json:"gid" tf:"gid"`
	// +optional
	SecondaryGids []int64 `json:"secondaryGids,omitempty" tf:"secondary_gids"`
	Uid           *int64  `json:"uid" tf:"uid"`
}

type AccessPointSpecRootDirectoryCreationInfo struct {
	OwnerGid    *int64  `json:"ownerGid" tf:"owner_gid"`
	OwnerUid    *int64  `json:"ownerUid" tf:"owner_uid"`
	Permissions *string `json:"permissions" tf:"permissions"`
}

type AccessPointSpecRootDirectory struct {
	// +optional
	CreationInfo *AccessPointSpecRootDirectoryCreationInfo `json:"creationInfo,omitempty" tf:"creation_info"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
}

type AccessPointSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	FileSystemArn *string `json:"fileSystemArn,omitempty" tf:"file_system_arn"`
	FileSystemID  *string `json:"fileSystemID" tf:"file_system_id"`
	// +optional
	OwnerID *string `json:"ownerID,omitempty" tf:"owner_id"`
	// +optional
	PosixUser *AccessPointSpecPosixUser `json:"posixUser,omitempty" tf:"posix_user"`
	// +optional
	RootDirectory *AccessPointSpecRootDirectory `json:"rootDirectory,omitempty" tf:"root_directory"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type AccessPointStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AccessPointList is a list of AccessPoints
type AccessPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AccessPoint CRD objects
	Items []AccessPoint `json:"items,omitempty"`
}
