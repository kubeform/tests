/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type FileSystem struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FileSystemSpec   `json:"spec,omitempty"`
	Status            FileSystemStatus `json:"status,omitempty"`
}

type FileSystemSpec struct {
	FileSystemSpec2 `json:",inline"`
	// +optional
	KubeformOutput FileSystemSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type FileSystemSpecLifecyclePolicy struct {
	TransitionToIa *string `json:"transitionToIa" tf:"transition_to_ia"`
}

type FileSystemSpecSizeInBytes struct {
	// +optional
	Value *int64 `json:"value,omitempty" tf:"value"`
	// +optional
	ValueInIa *int64 `json:"valueInIa,omitempty" tf:"value_in_ia"`
	// +optional
	ValueInStandard *int64 `json:"valueInStandard,omitempty" tf:"value_in_standard"`
}

type FileSystemSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty" tf:"availability_zone_id"`
	// +optional
	AvailabilityZoneName *string `json:"availabilityZoneName,omitempty" tf:"availability_zone_name"`
	// +optional
	CreationToken *string `json:"creationToken,omitempty" tf:"creation_token"`
	// +optional
	DnsName *string `json:"dnsName,omitempty" tf:"dns_name"`
	// +optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	LifecyclePolicy *FileSystemSpecLifecyclePolicy `json:"lifecyclePolicy,omitempty" tf:"lifecycle_policy"`
	// +optional
	NumberOfMountTargets *int64 `json:"numberOfMountTargets,omitempty" tf:"number_of_mount_targets"`
	// +optional
	OwnerID *string `json:"ownerID,omitempty" tf:"owner_id"`
	// +optional
	PerformanceMode *string `json:"performanceMode,omitempty" tf:"performance_mode"`
	// +optional
	ProvisionedThroughputInMibps *float64 `json:"provisionedThroughputInMibps,omitempty" tf:"provisioned_throughput_in_mibps"`
	// +optional
	SizeInBytes []FileSystemSpecSizeInBytes `json:"sizeInBytes,omitempty" tf:"size_in_bytes"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	ThroughputMode *string `json:"throughputMode,omitempty" tf:"throughput_mode"`
}

type FileSystemStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FileSystemList is a list of FileSystems
type FileSystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of FileSystem CRD objects
	Items []FileSystem `json:"items,omitempty"`
}
