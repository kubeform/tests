/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type EventSourceMapping struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSourceMappingSpec   `json:"spec,omitempty"`
	Status            EventSourceMappingStatus `json:"status,omitempty"`
}

type EventSourceMappingSpec struct {
	EventSourceMappingSpec2 `json:",inline"`
	// +optional
	KubeformOutput EventSourceMappingSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type EventSourceMappingSpecDestinationConfigOnFailure struct {
	DestinationArn *string `json:"destinationArn" tf:"destination_arn"`
}

type EventSourceMappingSpecDestinationConfig struct {
	// +optional
	OnFailure *EventSourceMappingSpecDestinationConfigOnFailure `json:"onFailure,omitempty" tf:"on_failure"`
}

type EventSourceMappingSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	BatchSize *int64 `json:"batchSize,omitempty" tf:"batch_size"`
	// +optional
	BisectBatchOnFunctionError *bool `json:"bisectBatchOnFunctionError,omitempty" tf:"bisect_batch_on_function_error"`
	// +optional
	DestinationConfig *EventSourceMappingSpecDestinationConfig `json:"destinationConfig,omitempty" tf:"destination_config"`
	// +optional
	Enabled        *bool   `json:"enabled,omitempty" tf:"enabled"`
	EventSourceArn *string `json:"eventSourceArn" tf:"event_source_arn"`
	// +optional
	FunctionArn  *string `json:"functionArn,omitempty" tf:"function_arn"`
	FunctionName *string `json:"functionName" tf:"function_name"`
	// +optional
	LastModified *string `json:"lastModified,omitempty" tf:"last_modified"`
	// +optional
	LastProcessingResult *string `json:"lastProcessingResult,omitempty" tf:"last_processing_result"`
	// +optional
	MaximumBatchingWindowInSeconds *int64 `json:"maximumBatchingWindowInSeconds,omitempty" tf:"maximum_batching_window_in_seconds"`
	// +optional
	MaximumRecordAgeInSeconds *int64 `json:"maximumRecordAgeInSeconds,omitempty" tf:"maximum_record_age_in_seconds"`
	// +optional
	MaximumRetryAttempts *int64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts"`
	// +optional
	ParallelizationFactor *int64 `json:"parallelizationFactor,omitempty" tf:"parallelization_factor"`
	// +optional
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position"`
	// +optional
	StartingPositionTimestamp *string `json:"startingPositionTimestamp,omitempty" tf:"starting_position_timestamp"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	StateTransitionReason *string `json:"stateTransitionReason,omitempty" tf:"state_transition_reason"`
	// +optional
	Topics []string `json:"topics,omitempty" tf:"topics"`
	// +optional
	Uuid *string `json:"uuid,omitempty" tf:"uuid"`
}

type EventSourceMappingStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EventSourceMappingList is a list of EventSourceMappings
type EventSourceMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of EventSourceMapping CRD objects
	Items []EventSourceMapping `json:"items,omitempty"`
}
