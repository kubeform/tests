/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type LayerVersion struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LayerVersionSpec   `json:"spec,omitempty"`
	Status            LayerVersionStatus `json:"status,omitempty"`
}

type LayerVersionSpec struct {
	LayerVersionSpec2 `json:",inline"`
	// +optional
	KubeformOutput LayerVersionSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type LayerVersionSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	// +kubebuilder:validation:MaxItems=5
	CompatibleRuntimes []string `json:"compatibleRuntimes,omitempty" tf:"compatible_runtimes"`
	// +optional
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Filename *string `json:"filename,omitempty" tf:"filename"`
	// +optional
	LayerArn  *string `json:"layerArn,omitempty" tf:"layer_arn"`
	LayerName *string `json:"layerName" tf:"layer_name"`
	// +optional
	LicenseInfo *string `json:"licenseInfo,omitempty" tf:"license_info"`
	// +optional
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket"`
	// +optional
	S3Key *string `json:"s3Key,omitempty" tf:"s3_key"`
	// +optional
	S3ObjectVersion *string `json:"s3ObjectVersion,omitempty" tf:"s3_object_version"`
	// +optional
	SigningJobArn *string `json:"signingJobArn,omitempty" tf:"signing_job_arn"`
	// +optional
	SigningProfileVersionArn *string `json:"signingProfileVersionArn,omitempty" tf:"signing_profile_version_arn"`
	// +optional
	SourceCodeHash *string `json:"sourceCodeHash,omitempty" tf:"source_code_hash"`
	// +optional
	SourceCodeSize *int64 `json:"sourceCodeSize,omitempty" tf:"source_code_size"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type LayerVersionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LayerVersionList is a list of LayerVersions
type LayerVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of LayerVersion CRD objects
	Items []LayerVersion `json:"items,omitempty"`
}
