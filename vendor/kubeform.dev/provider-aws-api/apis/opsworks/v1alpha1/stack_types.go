/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Stack struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackSpec   `json:"spec,omitempty"`
	Status            StackStatus `json:"status,omitempty"`
}

type StackSpec struct {
	StackSpec2 `json:",inline"`
	// +optional
	KubeformOutput StackSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type StackSpecCustomCookbooksSource struct {
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	Revision *string `json:"revision,omitempty" tf:"revision"`
	// +optional
	SshKey *string `json:"-" sensitive:"true" tf:"ssh_key"`
	Type   *string `json:"type" tf:"type"`
	Url    *string `json:"url" tf:"url"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type StackSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AgentVersion *string `json:"agentVersion,omitempty" tf:"agent_version"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	BerkshelfVersion *string `json:"berkshelfVersion,omitempty" tf:"berkshelf_version"`
	// +optional
	Color *string `json:"color,omitempty" tf:"color"`
	// +optional
	ConfigurationManagerName *string `json:"configurationManagerName,omitempty" tf:"configuration_manager_name"`
	// +optional
	ConfigurationManagerVersion *string `json:"configurationManagerVersion,omitempty" tf:"configuration_manager_version"`
	// +optional
	CustomCookbooksSource []StackSpecCustomCookbooksSource `json:"customCookbooksSource,omitempty" tf:"custom_cookbooks_source"`
	// +optional
	CustomJSON *string `json:"customJSON,omitempty" tf:"custom_json"`
	// +optional
	DefaultAvailabilityZone   *string `json:"defaultAvailabilityZone,omitempty" tf:"default_availability_zone"`
	DefaultInstanceProfileArn *string `json:"defaultInstanceProfileArn" tf:"default_instance_profile_arn"`
	// +optional
	DefaultOs *string `json:"defaultOs,omitempty" tf:"default_os"`
	// +optional
	DefaultRootDeviceType *string `json:"defaultRootDeviceType,omitempty" tf:"default_root_device_type"`
	// +optional
	DefaultSSHKeyName *string `json:"defaultSSHKeyName,omitempty" tf:"default_ssh_key_name"`
	// +optional
	DefaultSubnetID *string `json:"defaultSubnetID,omitempty" tf:"default_subnet_id"`
	// +optional
	HostnameTheme *string `json:"hostnameTheme,omitempty" tf:"hostname_theme"`
	// +optional
	ManageBerkshelf *bool   `json:"manageBerkshelf,omitempty" tf:"manage_berkshelf"`
	Name            *string `json:"name" tf:"name"`
	Region          *string `json:"region" tf:"region"`
	ServiceRoleArn  *string `json:"serviceRoleArn" tf:"service_role_arn"`
	// +optional
	StackEndpoint *string `json:"stackEndpoint,omitempty" tf:"stack_endpoint"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UseCustomCookbooks *bool `json:"useCustomCookbooks,omitempty" tf:"use_custom_cookbooks"`
	// +optional
	UseOpsworksSecurityGroups *bool `json:"useOpsworksSecurityGroups,omitempty" tf:"use_opsworks_security_groups"`
	// +optional
	VpcID *string `json:"vpcID,omitempty" tf:"vpc_id"`
}

type StackStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StackList is a list of Stacks
type StackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Stack CRD objects
	Items []Stack `json:"items,omitempty"`
}
