/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Application struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationSpec   `json:"spec,omitempty"`
	Status            ApplicationStatus `json:"status,omitempty"`
}

type ApplicationSpec struct {
	ApplicationSpec2 `json:",inline"`
	// +optional
	KubeformOutput ApplicationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ApplicationSpecAppSource struct {
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	Revision *string `json:"revision,omitempty" tf:"revision"`
	// +optional
	SshKey *string `json:"-" sensitive:"true" tf:"ssh_key"`
	Type   *string `json:"type" tf:"type"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type ApplicationSpecEnvironment struct {
	Key *string `json:"key" tf:"key"`
	// +optional
	Secure *bool   `json:"secure,omitempty" tf:"secure"`
	Value  *string `json:"value" tf:"value"`
}

type ApplicationSpecSslConfiguration struct {
	Certificate *string `json:"certificate" tf:"certificate"`
	// +optional
	Chain      *string `json:"chain,omitempty" tf:"chain"`
	PrivateKey *string `json:"-" sensitive:"true" tf:"private_key"`
}

type ApplicationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AppSource []ApplicationSpecAppSource `json:"appSource,omitempty" tf:"app_source"`
	// +optional
	AutoBundleOnDeploy *string `json:"autoBundleOnDeploy,omitempty" tf:"auto_bundle_on_deploy"`
	// +optional
	AwsFlowRubySettings *string `json:"awsFlowRubySettings,omitempty" tf:"aws_flow_ruby_settings"`
	// +optional
	DataSourceArn *string `json:"dataSourceArn,omitempty" tf:"data_source_arn"`
	// +optional
	DataSourceDatabaseName *string `json:"dataSourceDatabaseName,omitempty" tf:"data_source_database_name"`
	// +optional
	DataSourceType *string `json:"dataSourceType,omitempty" tf:"data_source_type"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DocumentRoot *string `json:"documentRoot,omitempty" tf:"document_root"`
	// +optional
	Domains []string `json:"domains,omitempty" tf:"domains"`
	// +optional
	EnableSSL *bool `json:"enableSSL,omitempty" tf:"enable_ssl"`
	// +optional
	Environment []ApplicationSpecEnvironment `json:"environment,omitempty" tf:"environment"`
	Name        *string                      `json:"name" tf:"name"`
	// +optional
	RailsEnv *string `json:"railsEnv,omitempty" tf:"rails_env"`
	// +optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name"`
	// +optional
	SslConfiguration []ApplicationSpecSslConfiguration `json:"sslConfiguration,omitempty" tf:"ssl_configuration"`
	StackID          *string                           `json:"stackID" tf:"stack_id"`
	Type             *string                           `json:"type" tf:"type"`
}

type ApplicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ApplicationList is a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Application CRD objects
	Items []Application `json:"items,omitempty"`
}
