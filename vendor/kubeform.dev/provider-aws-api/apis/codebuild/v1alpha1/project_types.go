/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Project struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectSpec   `json:"spec,omitempty"`
	Status            ProjectStatus `json:"status,omitempty"`
}

type ProjectSpec struct {
	ProjectSpec2 `json:",inline"`
	// +optional
	KubeformOutput ProjectSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ProjectSpecArtifacts struct {
	// +optional
	ArtifactIdentifier *string `json:"artifactIdentifier,omitempty" tf:"artifact_identifier"`
	// +optional
	EncryptionDisabled *bool `json:"encryptionDisabled,omitempty" tf:"encryption_disabled"`
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NamespaceType *string `json:"namespaceType,omitempty" tf:"namespace_type"`
	// +optional
	OverrideArtifactName *bool `json:"overrideArtifactName,omitempty" tf:"override_artifact_name"`
	// +optional
	Packaging *string `json:"packaging,omitempty" tf:"packaging"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	Type *string `json:"type" tf:"type"`
}

type ProjectSpecCache struct {
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// +optional
	Modes []string `json:"modes,omitempty" tf:"modes"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ProjectSpecEnvironmentEnvironmentVariable struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Type  *string `json:"type,omitempty" tf:"type"`
	Value *string `json:"value" tf:"value"`
}

type ProjectSpecEnvironmentRegistryCredential struct {
	Credential         *string `json:"credential" tf:"credential"`
	CredentialProvider *string `json:"credentialProvider" tf:"credential_provider"`
}

type ProjectSpecEnvironment struct {
	// +optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`
	ComputeType *string `json:"computeType" tf:"compute_type"`
	// +optional
	EnvironmentVariable []ProjectSpecEnvironmentEnvironmentVariable `json:"environmentVariable,omitempty" tf:"environment_variable"`
	Image               *string                                     `json:"image" tf:"image"`
	// +optional
	ImagePullCredentialsType *string `json:"imagePullCredentialsType,omitempty" tf:"image_pull_credentials_type"`
	// +optional
	PrivilegedMode *bool `json:"privilegedMode,omitempty" tf:"privileged_mode"`
	// +optional
	RegistryCredential *ProjectSpecEnvironmentRegistryCredential `json:"registryCredential,omitempty" tf:"registry_credential"`
	Type               *string                                   `json:"type" tf:"type"`
}

type ProjectSpecLogsConfigCloudwatchLogs struct {
	// +optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	StreamName *string `json:"streamName,omitempty" tf:"stream_name"`
}

type ProjectSpecLogsConfigS3Logs struct {
	// +optional
	EncryptionDisabled *bool `json:"encryptionDisabled,omitempty" tf:"encryption_disabled"`
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type ProjectSpecLogsConfig struct {
	// +optional
	CloudwatchLogs *ProjectSpecLogsConfigCloudwatchLogs `json:"cloudwatchLogs,omitempty" tf:"cloudwatch_logs"`
	// +optional
	S3Logs *ProjectSpecLogsConfigS3Logs `json:"s3Logs,omitempty" tf:"s3_logs"`
}

type ProjectSpecSecondaryArtifacts struct {
	ArtifactIdentifier *string `json:"artifactIdentifier" tf:"artifact_identifier"`
	// +optional
	EncryptionDisabled *bool `json:"encryptionDisabled,omitempty" tf:"encryption_disabled"`
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NamespaceType *string `json:"namespaceType,omitempty" tf:"namespace_type"`
	// +optional
	OverrideArtifactName *bool `json:"overrideArtifactName,omitempty" tf:"override_artifact_name"`
	// +optional
	Packaging *string `json:"packaging,omitempty" tf:"packaging"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	Type *string `json:"type" tf:"type"`
}

type ProjectSpecSecondarySourcesAuth struct {
	// +optional
	Resource *string `json:"-" sensitive:"true" tf:"resource"`
	// Deprecated
	Type *string `json:"type" tf:"type"`
}

type ProjectSpecSecondarySourcesGitSubmodulesConfig struct {
	FetchSubmodules *bool `json:"fetchSubmodules" tf:"fetch_submodules"`
}

type ProjectSpecSecondarySources struct {
	// +optional
	// Deprecated
	Auth *ProjectSpecSecondarySourcesAuth `json:"auth,omitempty" tf:"auth"`
	// +optional
	Buildspec *string `json:"buildspec,omitempty" tf:"buildspec"`
	// +optional
	GitCloneDepth *int64 `json:"gitCloneDepth,omitempty" tf:"git_clone_depth"`
	// +optional
	GitSubmodulesConfig *ProjectSpecSecondarySourcesGitSubmodulesConfig `json:"gitSubmodulesConfig,omitempty" tf:"git_submodules_config"`
	// +optional
	InsecureSSL *bool `json:"insecureSSL,omitempty" tf:"insecure_ssl"`
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// +optional
	ReportBuildStatus *bool   `json:"reportBuildStatus,omitempty" tf:"report_build_status"`
	SourceIdentifier  *string `json:"sourceIdentifier" tf:"source_identifier"`
	Type              *string `json:"type" tf:"type"`
}

type ProjectSpecSourceAuth struct {
	// +optional
	Resource *string `json:"-" sensitive:"true" tf:"resource"`
	// Deprecated
	Type *string `json:"type" tf:"type"`
}

type ProjectSpecSourceGitSubmodulesConfig struct {
	FetchSubmodules *bool `json:"fetchSubmodules" tf:"fetch_submodules"`
}

type ProjectSpecSource struct {
	// +optional
	// Deprecated
	Auth *ProjectSpecSourceAuth `json:"auth,omitempty" tf:"auth"`
	// +optional
	Buildspec *string `json:"buildspec,omitempty" tf:"buildspec"`
	// +optional
	GitCloneDepth *int64 `json:"gitCloneDepth,omitempty" tf:"git_clone_depth"`
	// +optional
	GitSubmodulesConfig *ProjectSpecSourceGitSubmodulesConfig `json:"gitSubmodulesConfig,omitempty" tf:"git_submodules_config"`
	// +optional
	InsecureSSL *bool `json:"insecureSSL,omitempty" tf:"insecure_ssl"`
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// +optional
	ReportBuildStatus *bool   `json:"reportBuildStatus,omitempty" tf:"report_build_status"`
	Type              *string `json:"type" tf:"type"`
}

type ProjectSpecVpcConfig struct {
	// +kubebuilder:validation:MaxItems=5
	SecurityGroupIDS []string `json:"securityGroupIDS" tf:"security_group_ids"`
	// +kubebuilder:validation:MaxItems=16
	Subnets []string `json:"subnets" tf:"subnets"`
	VpcID   *string  `json:"vpcID" tf:"vpc_id"`
}

type ProjectSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	Arn       *string               `json:"arn,omitempty" tf:"arn"`
	Artifacts *ProjectSpecArtifacts `json:"artifacts" tf:"artifacts"`
	// +optional
	BadgeEnabled *bool `json:"badgeEnabled,omitempty" tf:"badge_enabled"`
	// +optional
	BadgeURL *string `json:"badgeURL,omitempty" tf:"badge_url"`
	// +optional
	BuildTimeout *int64 `json:"buildTimeout,omitempty" tf:"build_timeout"`
	// +optional
	Cache *ProjectSpecCache `json:"cache,omitempty" tf:"cache"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	EncryptionKey *string                 `json:"encryptionKey,omitempty" tf:"encryption_key"`
	Environment   *ProjectSpecEnvironment `json:"environment" tf:"environment"`
	// +optional
	LogsConfig *ProjectSpecLogsConfig `json:"logsConfig,omitempty" tf:"logs_config"`
	Name       *string                `json:"name" tf:"name"`
	// +optional
	QueuedTimeout *int64 `json:"queuedTimeout,omitempty" tf:"queued_timeout"`
	// +optional
	SecondaryArtifacts []ProjectSpecSecondaryArtifacts `json:"secondaryArtifacts,omitempty" tf:"secondary_artifacts"`
	// +optional
	SecondarySources []ProjectSpecSecondarySources `json:"secondarySources,omitempty" tf:"secondary_sources"`
	ServiceRole      *string                       `json:"serviceRole" tf:"service_role"`
	Source           *ProjectSpecSource            `json:"source" tf:"source"`
	// +optional
	SourceVersion *string `json:"sourceVersion,omitempty" tf:"source_version"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	VpcConfig *ProjectSpecVpcConfig `json:"vpcConfig,omitempty" tf:"vpc_config"`
}

type ProjectStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProjectList is a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Project CRD objects
	Items []Project `json:"items,omitempty"`
}
