/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ProxyTarget struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProxyTargetSpec   `json:"spec,omitempty"`
	Status            ProxyTargetStatus `json:"status,omitempty"`
}

type ProxyTargetSpec struct {
	ProxyTargetSpec2 `json:",inline"`
	// +optional
	KubeformOutput ProxyTargetSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ProxyTargetSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	DbClusterIdentifier *string `json:"dbClusterIdentifier,omitempty" tf:"db_cluster_identifier"`
	// +optional
	DbInstanceIdentifier *string `json:"dbInstanceIdentifier,omitempty" tf:"db_instance_identifier"`
	DbProxyName          *string `json:"dbProxyName" tf:"db_proxy_name"`
	// +optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	RdsResourceID *string `json:"rdsResourceID,omitempty" tf:"rds_resource_id"`
	// +optional
	TargetArn       *string `json:"targetArn,omitempty" tf:"target_arn"`
	TargetGroupName *string `json:"targetGroupName" tf:"target_group_name"`
	// +optional
	TrackedClusterID *string `json:"trackedClusterID,omitempty" tf:"tracked_cluster_id"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ProxyTargetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ProxyTargetList is a list of ProxyTargets
type ProxyTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ProxyTarget CRD objects
	Items []ProxyTarget `json:"items,omitempty"`
}
