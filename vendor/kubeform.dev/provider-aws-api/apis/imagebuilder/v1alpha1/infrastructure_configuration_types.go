/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type InfrastructureConfiguration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InfrastructureConfigurationSpec   `json:"spec,omitempty"`
	Status            InfrastructureConfigurationStatus `json:"status,omitempty"`
}

type InfrastructureConfigurationSpec struct {
	InfrastructureConfigurationSpec2 `json:",inline"`
	// +optional
	KubeformOutput InfrastructureConfigurationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type InfrastructureConfigurationSpecLoggingS3Logs struct {
	S3BucketName *string `json:"s3BucketName" tf:"s3_bucket_name"`
	// +optional
	S3KeyPrefix *string `json:"s3KeyPrefix,omitempty" tf:"s3_key_prefix"`
}

type InfrastructureConfigurationSpecLogging struct {
	S3Logs *InfrastructureConfigurationSpecLoggingS3Logs `json:"s3Logs" tf:"s3_logs"`
}

type InfrastructureConfigurationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	DateUpdated *string `json:"dateUpdated,omitempty" tf:"date_updated"`
	// +optional
	Description         *string `json:"description,omitempty" tf:"description"`
	InstanceProfileName *string `json:"instanceProfileName" tf:"instance_profile_name"`
	// +optional
	InstanceTypes []string `json:"instanceTypes,omitempty" tf:"instance_types"`
	// +optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair"`
	// +optional
	Logging *InfrastructureConfigurationSpecLogging `json:"logging,omitempty" tf:"logging"`
	Name    *string                                 `json:"name" tf:"name"`
	// +optional
	ResourceTags *map[string]string `json:"resourceTags,omitempty" tf:"resource_tags"`
	// +optional
	SecurityGroupIDS []string `json:"securityGroupIDS,omitempty" tf:"security_group_ids"`
	// +optional
	SnsTopicArn *string `json:"snsTopicArn,omitempty" tf:"sns_topic_arn"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TerminateInstanceOnFailure *bool `json:"terminateInstanceOnFailure,omitempty" tf:"terminate_instance_on_failure"`
}

type InfrastructureConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InfrastructureConfigurationList is a list of InfrastructureConfigurations
type InfrastructureConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of InfrastructureConfiguration CRD objects
	Items []InfrastructureConfiguration `json:"items,omitempty"`
}
