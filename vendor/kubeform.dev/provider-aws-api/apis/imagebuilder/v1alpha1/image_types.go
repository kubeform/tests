/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Image struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageSpec   `json:"spec,omitempty"`
	Status            ImageStatus `json:"status,omitempty"`
}

type ImageSpec struct {
	ImageSpec2 `json:",inline"`
	// +optional
	KubeformOutput ImageSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ImageSpecImageTestsConfiguration struct {
	// +optional
	ImageTestsEnabled *bool `json:"imageTestsEnabled,omitempty" tf:"image_tests_enabled"`
	// +optional
	TimeoutMinutes *int64 `json:"timeoutMinutes,omitempty" tf:"timeout_minutes"`
}

type ImageSpecOutputResourcesAmis struct {
	// +optional
	AccountID *string `json:"accountID,omitempty" tf:"account_id"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Image *string `json:"image,omitempty" tf:"image"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
}

type ImageSpecOutputResources struct {
	// +optional
	Amis []ImageSpecOutputResourcesAmis `json:"amis,omitempty" tf:"amis"`
}

type ImageSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created"`
	// +optional
	DistributionConfigurationArn *string `json:"distributionConfigurationArn,omitempty" tf:"distribution_configuration_arn"`
	// +optional
	EnhancedImageMetadataEnabled *bool   `json:"enhancedImageMetadataEnabled,omitempty" tf:"enhanced_image_metadata_enabled"`
	ImageRecipeArn               *string `json:"imageRecipeArn" tf:"image_recipe_arn"`
	// +optional
	ImageTestsConfiguration        *ImageSpecImageTestsConfiguration `json:"imageTestsConfiguration,omitempty" tf:"image_tests_configuration"`
	InfrastructureConfigurationArn *string                           `json:"infrastructureConfigurationArn" tf:"infrastructure_configuration_arn"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version"`
	// +optional
	OutputResources []ImageSpecOutputResources `json:"outputResources,omitempty" tf:"output_resources"`
	// +optional
	Platform *string `json:"platform,omitempty" tf:"platform"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type ImageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ImageList is a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Image CRD objects
	Items []Image `json:"items,omitempty"`
}
