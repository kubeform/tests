/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfiguration{}).Type1()):                 DistributionConfigurationSpecDistributionAmiDistributionConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{}).Type1()): DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermissionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageSpecImageTestsConfiguration{}).Type1()):                                                      ImageSpecImageTestsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecImageTestsConfiguration{}).Type1()):                                              ImagePipelineSpecImageTestsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecSchedule{}).Type1()):                                                             ImagePipelineSpecScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageRecipeSpecBlockDeviceMappingEbs{}).Type1()):                                                  ImageRecipeSpecBlockDeviceMappingEbsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLogging{}).Type1()):                                                InfrastructureConfigurationSpecLoggingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLoggingS3Logs{}).Type1()):                                          InfrastructureConfigurationSpecLoggingS3LogsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfiguration{}).Type1()):                 DistributionConfigurationSpecDistributionAmiDistributionConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{}).Type1()): DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermissionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageSpecImageTestsConfiguration{}).Type1()):                                                      ImageSpecImageTestsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecImageTestsConfiguration{}).Type1()):                                              ImagePipelineSpecImageTestsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecSchedule{}).Type1()):                                                             ImagePipelineSpecScheduleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ImageRecipeSpecBlockDeviceMappingEbs{}).Type1()):                                                  ImageRecipeSpecBlockDeviceMappingEbsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLogging{}).Type1()):                                                InfrastructureConfigurationSpecLoggingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLoggingS3Logs{}).Type1()):                                          InfrastructureConfigurationSpecLoggingS3LogsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DistributionConfigurationSpecDistributionAmiDistributionConfigurationCodec struct {
}

func (DistributionConfigurationSpecDistributionAmiDistributionConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DistributionConfigurationSpecDistributionAmiDistributionConfiguration)(ptr) == nil
}

func (DistributionConfigurationSpecDistributionAmiDistributionConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DistributionConfigurationSpecDistributionAmiDistributionConfiguration)(ptr)
	var objs []DistributionConfigurationSpecDistributionAmiDistributionConfiguration
	if obj != nil {
		objs = []DistributionConfigurationSpecDistributionAmiDistributionConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DistributionConfigurationSpecDistributionAmiDistributionConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DistributionConfigurationSpecDistributionAmiDistributionConfiguration)(ptr) = DistributionConfigurationSpecDistributionAmiDistributionConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DistributionConfigurationSpecDistributionAmiDistributionConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DistributionConfigurationSpecDistributionAmiDistributionConfiguration)(ptr) = objs[0]
			} else {
				*(*DistributionConfigurationSpecDistributionAmiDistributionConfiguration)(ptr) = DistributionConfigurationSpecDistributionAmiDistributionConfiguration{}
			}
		} else {
			*(*DistributionConfigurationSpecDistributionAmiDistributionConfiguration)(ptr) = DistributionConfigurationSpecDistributionAmiDistributionConfiguration{}
		}
	default:
		iter.ReportError("decode DistributionConfigurationSpecDistributionAmiDistributionConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermissionCodec struct {
}

func (DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermissionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission)(ptr) == nil
}

func (DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermissionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission)(ptr)
	var objs []DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission
	if obj != nil {
		objs = []DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermissionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission)(ptr) = DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission)(ptr) = objs[0]
			} else {
				*(*DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission)(ptr) = DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{}
			}
		} else {
			*(*DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission)(ptr) = DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission{}
		}
	default:
		iter.ReportError("decode DistributionConfigurationSpecDistributionAmiDistributionConfigurationLaunchPermission", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ImageSpecImageTestsConfigurationCodec struct {
}

func (ImageSpecImageTestsConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ImageSpecImageTestsConfiguration)(ptr) == nil
}

func (ImageSpecImageTestsConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ImageSpecImageTestsConfiguration)(ptr)
	var objs []ImageSpecImageTestsConfiguration
	if obj != nil {
		objs = []ImageSpecImageTestsConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageSpecImageTestsConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ImageSpecImageTestsConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ImageSpecImageTestsConfiguration)(ptr) = ImageSpecImageTestsConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ImageSpecImageTestsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageSpecImageTestsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ImageSpecImageTestsConfiguration)(ptr) = objs[0]
			} else {
				*(*ImageSpecImageTestsConfiguration)(ptr) = ImageSpecImageTestsConfiguration{}
			}
		} else {
			*(*ImageSpecImageTestsConfiguration)(ptr) = ImageSpecImageTestsConfiguration{}
		}
	default:
		iter.ReportError("decode ImageSpecImageTestsConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ImagePipelineSpecImageTestsConfigurationCodec struct {
}

func (ImagePipelineSpecImageTestsConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ImagePipelineSpecImageTestsConfiguration)(ptr) == nil
}

func (ImagePipelineSpecImageTestsConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ImagePipelineSpecImageTestsConfiguration)(ptr)
	var objs []ImagePipelineSpecImageTestsConfiguration
	if obj != nil {
		objs = []ImagePipelineSpecImageTestsConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecImageTestsConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ImagePipelineSpecImageTestsConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ImagePipelineSpecImageTestsConfiguration)(ptr) = ImagePipelineSpecImageTestsConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ImagePipelineSpecImageTestsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecImageTestsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ImagePipelineSpecImageTestsConfiguration)(ptr) = objs[0]
			} else {
				*(*ImagePipelineSpecImageTestsConfiguration)(ptr) = ImagePipelineSpecImageTestsConfiguration{}
			}
		} else {
			*(*ImagePipelineSpecImageTestsConfiguration)(ptr) = ImagePipelineSpecImageTestsConfiguration{}
		}
	default:
		iter.ReportError("decode ImagePipelineSpecImageTestsConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ImagePipelineSpecScheduleCodec struct {
}

func (ImagePipelineSpecScheduleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ImagePipelineSpecSchedule)(ptr) == nil
}

func (ImagePipelineSpecScheduleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ImagePipelineSpecSchedule)(ptr)
	var objs []ImagePipelineSpecSchedule
	if obj != nil {
		objs = []ImagePipelineSpecSchedule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecSchedule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ImagePipelineSpecScheduleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ImagePipelineSpecSchedule)(ptr) = ImagePipelineSpecSchedule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ImagePipelineSpecSchedule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImagePipelineSpecSchedule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ImagePipelineSpecSchedule)(ptr) = objs[0]
			} else {
				*(*ImagePipelineSpecSchedule)(ptr) = ImagePipelineSpecSchedule{}
			}
		} else {
			*(*ImagePipelineSpecSchedule)(ptr) = ImagePipelineSpecSchedule{}
		}
	default:
		iter.ReportError("decode ImagePipelineSpecSchedule", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ImageRecipeSpecBlockDeviceMappingEbsCodec struct {
}

func (ImageRecipeSpecBlockDeviceMappingEbsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ImageRecipeSpecBlockDeviceMappingEbs)(ptr) == nil
}

func (ImageRecipeSpecBlockDeviceMappingEbsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ImageRecipeSpecBlockDeviceMappingEbs)(ptr)
	var objs []ImageRecipeSpecBlockDeviceMappingEbs
	if obj != nil {
		objs = []ImageRecipeSpecBlockDeviceMappingEbs{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageRecipeSpecBlockDeviceMappingEbs{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ImageRecipeSpecBlockDeviceMappingEbsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ImageRecipeSpecBlockDeviceMappingEbs)(ptr) = ImageRecipeSpecBlockDeviceMappingEbs{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ImageRecipeSpecBlockDeviceMappingEbs

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ImageRecipeSpecBlockDeviceMappingEbs{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ImageRecipeSpecBlockDeviceMappingEbs)(ptr) = objs[0]
			} else {
				*(*ImageRecipeSpecBlockDeviceMappingEbs)(ptr) = ImageRecipeSpecBlockDeviceMappingEbs{}
			}
		} else {
			*(*ImageRecipeSpecBlockDeviceMappingEbs)(ptr) = ImageRecipeSpecBlockDeviceMappingEbs{}
		}
	default:
		iter.ReportError("decode ImageRecipeSpecBlockDeviceMappingEbs", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InfrastructureConfigurationSpecLoggingCodec struct {
}

func (InfrastructureConfigurationSpecLoggingCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InfrastructureConfigurationSpecLogging)(ptr) == nil
}

func (InfrastructureConfigurationSpecLoggingCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InfrastructureConfigurationSpecLogging)(ptr)
	var objs []InfrastructureConfigurationSpecLogging
	if obj != nil {
		objs = []InfrastructureConfigurationSpecLogging{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLogging{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InfrastructureConfigurationSpecLoggingCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InfrastructureConfigurationSpecLogging)(ptr) = InfrastructureConfigurationSpecLogging{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InfrastructureConfigurationSpecLogging

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLogging{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InfrastructureConfigurationSpecLogging)(ptr) = objs[0]
			} else {
				*(*InfrastructureConfigurationSpecLogging)(ptr) = InfrastructureConfigurationSpecLogging{}
			}
		} else {
			*(*InfrastructureConfigurationSpecLogging)(ptr) = InfrastructureConfigurationSpecLogging{}
		}
	default:
		iter.ReportError("decode InfrastructureConfigurationSpecLogging", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InfrastructureConfigurationSpecLoggingS3LogsCodec struct {
}

func (InfrastructureConfigurationSpecLoggingS3LogsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InfrastructureConfigurationSpecLoggingS3Logs)(ptr) == nil
}

func (InfrastructureConfigurationSpecLoggingS3LogsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InfrastructureConfigurationSpecLoggingS3Logs)(ptr)
	var objs []InfrastructureConfigurationSpecLoggingS3Logs
	if obj != nil {
		objs = []InfrastructureConfigurationSpecLoggingS3Logs{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLoggingS3Logs{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InfrastructureConfigurationSpecLoggingS3LogsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InfrastructureConfigurationSpecLoggingS3Logs)(ptr) = InfrastructureConfigurationSpecLoggingS3Logs{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InfrastructureConfigurationSpecLoggingS3Logs

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InfrastructureConfigurationSpecLoggingS3Logs{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InfrastructureConfigurationSpecLoggingS3Logs)(ptr) = objs[0]
			} else {
				*(*InfrastructureConfigurationSpecLoggingS3Logs)(ptr) = InfrastructureConfigurationSpecLoggingS3Logs{}
			}
		} else {
			*(*InfrastructureConfigurationSpecLoggingS3Logs)(ptr) = InfrastructureConfigurationSpecLoggingS3Logs{}
		}
	default:
		iter.ReportError("decode InfrastructureConfigurationSpecLoggingS3Logs", "unexpected JSON type")
	}
}
