/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RuleGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleGroupSpec   `json:"spec,omitempty"`
	Status            RuleGroupStatus `json:"status,omitempty"`
}

type RuleGroupSpec struct {
	RuleGroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput RuleGroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RuleGroupSpecRuleGroupRuleVariablesIpSetsIpSet struct {
	Definition []string `json:"definition" tf:"definition"`
}

type RuleGroupSpecRuleGroupRuleVariablesIpSets struct {
	IpSet *RuleGroupSpecRuleGroupRuleVariablesIpSetsIpSet `json:"ipSet" tf:"ip_set"`
	Key   *string                                         `json:"key" tf:"key"`
}

type RuleGroupSpecRuleGroupRuleVariablesPortSetsPortSet struct {
	Definition []string `json:"definition" tf:"definition"`
}

type RuleGroupSpecRuleGroupRuleVariablesPortSets struct {
	Key     *string                                             `json:"key" tf:"key"`
	PortSet *RuleGroupSpecRuleGroupRuleVariablesPortSetsPortSet `json:"portSet" tf:"port_set"`
}

type RuleGroupSpecRuleGroupRuleVariables struct {
	// +optional
	IpSets []RuleGroupSpecRuleGroupRuleVariablesIpSets `json:"ipSets,omitempty" tf:"ip_sets"`
	// +optional
	PortSets []RuleGroupSpecRuleGroupRuleVariablesPortSets `json:"portSets,omitempty" tf:"port_sets"`
}

type RuleGroupSpecRuleGroupRulesSourceRulesSourceList struct {
	GeneratedRulesType *string  `json:"generatedRulesType" tf:"generated_rules_type"`
	TargetTypes        []string `json:"targetTypes" tf:"target_types"`
	Targets            []string `json:"targets" tf:"targets"`
}

type RuleGroupSpecRuleGroupRulesSourceStatefulRuleHeader struct {
	Destination     *string `json:"destination" tf:"destination"`
	DestinationPort *string `json:"destinationPort" tf:"destination_port"`
	Direction       *string `json:"direction" tf:"direction"`
	Protocol        *string `json:"protocol" tf:"protocol"`
	Source          *string `json:"source" tf:"source"`
	SourcePort      *string `json:"sourcePort" tf:"source_port"`
}

type RuleGroupSpecRuleGroupRulesSourceStatefulRuleRuleOption struct {
	Keyword *string `json:"keyword" tf:"keyword"`
	// +optional
	Settings []string `json:"settings,omitempty" tf:"settings"`
}

type RuleGroupSpecRuleGroupRulesSourceStatefulRule struct {
	Action     *string                                                   `json:"action" tf:"action"`
	Header     *RuleGroupSpecRuleGroupRulesSourceStatefulRuleHeader      `json:"header" tf:"header"`
	RuleOption []RuleGroupSpecRuleGroupRulesSourceStatefulRuleRuleOption `json:"ruleOption" tf:"rule_option"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension struct {
	Value *string `json:"value" tf:"value"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction struct {
	Dimension []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension `json:"dimension" tf:"dimension"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition struct {
	PublishMetricAction *RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction `json:"publishMetricAction" tf:"publish_metric_action"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction struct {
	ActionDefinition *RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition `json:"actionDefinition" tf:"action_definition"`
	ActionName       *string                                                                                      `json:"actionName" tf:"action_name"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination struct {
	AddressDefinition *string `json:"addressDefinition" tf:"address_definition"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort struct {
	FromPort *int64 `json:"fromPort" tf:"from_port"`
	// +optional
	ToPort *int64 `json:"toPort,omitempty" tf:"to_port"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource struct {
	AddressDefinition *string `json:"addressDefinition" tf:"address_definition"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort struct {
	FromPort *int64 `json:"fromPort" tf:"from_port"`
	// +optional
	ToPort *int64 `json:"toPort,omitempty" tf:"to_port"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag struct {
	Flags []string `json:"flags" tf:"flags"`
	// +optional
	Masks []string `json:"masks,omitempty" tf:"masks"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes struct {
	// +optional
	Destination []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination `json:"destination,omitempty" tf:"destination"`
	// +optional
	DestinationPort []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort `json:"destinationPort,omitempty" tf:"destination_port"`
	// +optional
	Protocols []int64 `json:"protocols,omitempty" tf:"protocols"`
	// +optional
	Source []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource `json:"source,omitempty" tf:"source"`
	// +optional
	SourcePort []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort `json:"sourcePort,omitempty" tf:"source_port"`
	// +optional
	TcpFlag []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag `json:"tcpFlag,omitempty" tf:"tcp_flag"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition struct {
	Actions         []string                                                                                                   `json:"actions" tf:"actions"`
	MatchAttributes *RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes `json:"matchAttributes" tf:"match_attributes"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule struct {
	Priority       *int64                                                                                      `json:"priority" tf:"priority"`
	RuleDefinition *RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition `json:"ruleDefinition" tf:"rule_definition"`
}

type RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActions struct {
	// +optional
	CustomAction  []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction  `json:"customAction,omitempty" tf:"custom_action"`
	StatelessRule []RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule `json:"statelessRule" tf:"stateless_rule"`
}

type RuleGroupSpecRuleGroupRulesSource struct {
	// +optional
	RulesSourceList *RuleGroupSpecRuleGroupRulesSourceRulesSourceList `json:"rulesSourceList,omitempty" tf:"rules_source_list"`
	// +optional
	RulesString *string `json:"rulesString,omitempty" tf:"rules_string"`
	// +optional
	StatefulRule []RuleGroupSpecRuleGroupRulesSourceStatefulRule `json:"statefulRule,omitempty" tf:"stateful_rule"`
	// +optional
	StatelessRulesAndCustomActions *RuleGroupSpecRuleGroupRulesSourceStatelessRulesAndCustomActions `json:"statelessRulesAndCustomActions,omitempty" tf:"stateless_rules_and_custom_actions"`
}

type RuleGroupSpecRuleGroup struct {
	// +optional
	RuleVariables *RuleGroupSpecRuleGroupRuleVariables `json:"ruleVariables,omitempty" tf:"rule_variables"`
	RulesSource   *RuleGroupSpecRuleGroupRulesSource   `json:"rulesSource" tf:"rules_source"`
}

type RuleGroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn      *string `json:"arn,omitempty" tf:"arn"`
	Capacity *int64  `json:"capacity" tf:"capacity"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	Name        *string `json:"name" tf:"name"`
	// +optional
	RuleGroup *RuleGroupSpecRuleGroup `json:"ruleGroup,omitempty" tf:"rule_group"`
	// +optional
	Rules *string `json:"rules,omitempty" tf:"rules"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	Type *string            `json:"type" tf:"type"`
	// +optional
	UpdateToken *string `json:"updateToken,omitempty" tf:"update_token"`
}

type RuleGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RuleGroupList is a list of RuleGroups
type RuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RuleGroup CRD objects
	Items []RuleGroup `json:"items,omitempty"`
}
