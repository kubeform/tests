/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Cluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec,omitempty"`
	Status            ClusterStatus `json:"status,omitempty"`
}

type ClusterSpec struct {
	ClusterSpec2 `json:",inline"`
	// +optional
	KubeformOutput ClusterSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ClusterSpecLogging struct {
	// +optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name"`
	Enable     *bool   `json:"enable" tf:"enable"`
	// +optional
	S3KeyPrefix *string `json:"s3KeyPrefix,omitempty" tf:"s3_key_prefix"`
}

type ClusterSpecSnapshotCopy struct {
	DestinationRegion *string `json:"destinationRegion" tf:"destination_region"`
	// +optional
	GrantName *string `json:"grantName,omitempty" tf:"grant_name"`
	// +optional
	RetentionPeriod *int64 `json:"retentionPeriod,omitempty" tf:"retention_period"`
}

type ClusterSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AllowVersionUpgrade *bool `json:"allowVersionUpgrade,omitempty" tf:"allow_version_upgrade"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AutomatedSnapshotRetentionPeriod *int64 `json:"automatedSnapshotRetentionPeriod,omitempty" tf:"automated_snapshot_retention_period"`
	// +optional
	AvailabilityZone  *string `json:"availabilityZone,omitempty" tf:"availability_zone"`
	ClusterIdentifier *string `json:"clusterIdentifier" tf:"cluster_identifier"`
	// +optional
	ClusterParameterGroupName *string `json:"clusterParameterGroupName,omitempty" tf:"cluster_parameter_group_name"`
	// +optional
	ClusterPublicKey *string `json:"clusterPublicKey,omitempty" tf:"cluster_public_key"`
	// +optional
	ClusterRevisionNumber *string `json:"clusterRevisionNumber,omitempty" tf:"cluster_revision_number"`
	// +optional
	ClusterSecurityGroups []string `json:"clusterSecurityGroups,omitempty" tf:"cluster_security_groups"`
	// +optional
	ClusterSubnetGroupName *string `json:"clusterSubnetGroupName,omitempty" tf:"cluster_subnet_group_name"`
	// +optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type"`
	// +optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version"`
	// +optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name"`
	// +optional
	DnsName *string `json:"dnsName,omitempty" tf:"dns_name"`
	// +optional
	ElasticIP *string `json:"elasticIP,omitempty" tf:"elastic_ip"`
	// +optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`
	// +optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	EnhancedVpcRouting *bool `json:"enhancedVpcRouting,omitempty" tf:"enhanced_vpc_routing"`
	// +optional
	FinalSnapshotIdentifier *string `json:"finalSnapshotIdentifier,omitempty" tf:"final_snapshot_identifier"`
	// +optional
	IamRoles []string `json:"iamRoles,omitempty" tf:"iam_roles"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	Logging *ClusterSpecLogging `json:"logging,omitempty" tf:"logging"`
	// +optional
	MasterPassword *string `json:"-" sensitive:"true" tf:"master_password"`
	// +optional
	MasterUsername *string `json:"masterUsername,omitempty" tf:"master_username"`
	NodeType       *string `json:"nodeType" tf:"node_type"`
	// +optional
	NumberOfNodes *int64 `json:"numberOfNodes,omitempty" tf:"number_of_nodes"`
	// +optional
	OwnerAccount *string `json:"ownerAccount,omitempty" tf:"owner_account"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty" tf:"preferred_maintenance_window"`
	// +optional
	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty" tf:"publicly_accessible"`
	// +optional
	SkipFinalSnapshot *bool `json:"skipFinalSnapshot,omitempty" tf:"skip_final_snapshot"`
	// +optional
	SnapshotClusterIdentifier *string `json:"snapshotClusterIdentifier,omitempty" tf:"snapshot_cluster_identifier"`
	// +optional
	SnapshotCopy *ClusterSpecSnapshotCopy `json:"snapshotCopy,omitempty" tf:"snapshot_copy"`
	// +optional
	SnapshotIdentifier *string `json:"snapshotIdentifier,omitempty" tf:"snapshot_identifier"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	VpcSecurityGroupIDS []string `json:"vpcSecurityGroupIDS,omitempty" tf:"vpc_security_group_ids"`
}

type ClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClusterList is a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Cluster CRD objects
	Items []Cluster `json:"items,omitempty"`
}
