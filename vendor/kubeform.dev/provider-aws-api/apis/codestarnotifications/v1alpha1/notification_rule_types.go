/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NotificationRule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationRuleSpec   `json:"spec,omitempty"`
	Status            NotificationRuleStatus `json:"status,omitempty"`
}

type NotificationRuleSpec struct {
	NotificationRuleSpec2 `json:",inline"`
	// +optional
	KubeformOutput NotificationRuleSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NotificationRuleSpecTarget struct {
	Address *string `json:"address" tf:"address"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type NotificationRuleSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn        *string `json:"arn,omitempty" tf:"arn"`
	DetailType *string `json:"detailType" tf:"detail_type"`
	// +kubebuilder:validation:MaxItems=200
	// +kubebuilder:validation:MinItems=1
	EventTypeIDS []string `json:"eventTypeIDS" tf:"event_type_ids"`
	Name         *string  `json:"name" tf:"name"`
	Resource     *string  `json:"resource" tf:"resource"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	// +kubebuilder:validation:MaxItems=10
	Target []NotificationRuleSpecTarget `json:"target,omitempty" tf:"target"`
}

type NotificationRuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NotificationRuleList is a list of NotificationRules
type NotificationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NotificationRule CRD objects
	Items []NotificationRule `json:"items,omitempty"`
}
