/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RuleGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleGroupSpec   `json:"spec,omitempty"`
	Status            RuleGroupStatus `json:"status,omitempty"`
}

type RuleGroupSpec struct {
	RuleGroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput RuleGroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RuleGroupSpecRuleActionAllow struct{}

type RuleGroupSpecRuleActionBlock struct{}

type RuleGroupSpecRuleActionCount struct{}

type RuleGroupSpecRuleAction struct {
	// +optional
	Allow *RuleGroupSpecRuleActionAllow `json:"allow,omitempty" tf:"allow"`
	// +optional
	Block *RuleGroupSpecRuleActionBlock `json:"block,omitempty" tf:"block"`
	// +optional
	Count *RuleGroupSpecRuleActionCount `json:"count,omitempty" tf:"count"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                    `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                    `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                          `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementAndStatementStatementAndStatement struct {
	Statement []RuleGroupSpecRuleStatementAndStatementStatementAndStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                               `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                               `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementAndStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                    `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                    `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                          `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementAndStatementStatementNotStatement struct {
	Statement []RuleGroupSpecRuleStatementAndStatementStatementNotStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                   `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                   `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                         `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementAndStatementStatementOrStatement struct {
	Statement []RuleGroupSpecRuleStatementAndStatementStatementOrStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                     `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementAndStatementStatement struct {
	// +optional
	AndStatement *RuleGroupSpecRuleStatementAndStatementStatementAndStatement `json:"andStatement,omitempty" tf:"and_statement"`
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	NotStatement *RuleGroupSpecRuleStatementAndStatementStatementNotStatement `json:"notStatement,omitempty" tf:"not_statement"`
	// +optional
	OrStatement *RuleGroupSpecRuleStatementAndStatementStatementOrStatement `json:"orStatement,omitempty" tf:"or_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementAndStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementAndStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementAndStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementAndStatement struct {
	Statement []RuleGroupSpecRuleStatementAndStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                          `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                          `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                    `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                    `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                          `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementNotStatementStatementAndStatement struct {
	Statement []RuleGroupSpecRuleStatementNotStatementStatementAndStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                               `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                               `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementNotStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                    `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                    `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                          `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementNotStatementStatementNotStatement struct {
	Statement []RuleGroupSpecRuleStatementNotStatementStatementNotStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                   `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                   `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                         `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementNotStatementStatementOrStatement struct {
	Statement []RuleGroupSpecRuleStatementNotStatementStatementOrStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                     `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementNotStatementStatement struct {
	// +optional
	AndStatement *RuleGroupSpecRuleStatementNotStatementStatementAndStatement `json:"andStatement,omitempty" tf:"and_statement"`
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	NotStatement *RuleGroupSpecRuleStatementNotStatementStatementNotStatement `json:"notStatement,omitempty" tf:"not_statement"`
	// +optional
	OrStatement *RuleGroupSpecRuleStatementNotStatementStatementOrStatement `json:"orStatement,omitempty" tf:"or_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementNotStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementNotStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementNotStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementNotStatement struct {
	Statement []RuleGroupSpecRuleStatementNotStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                   `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                   `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                         `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementOrStatementStatementAndStatement struct {
	Statement []RuleGroupSpecRuleStatementOrStatementStatementAndStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                              `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                              `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementOrStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                   `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                   `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                         `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementOrStatementStatementNotStatement struct {
	Statement []RuleGroupSpecRuleStatementOrStatementStatementNotStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatement struct {
	// +optional
	FieldToMatch         *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	PositionalConstraint *string                                                                                                  `json:"positionalConstraint" tf:"positional_constraint"`
	SearchString         *string                                                                                                  `json:"searchString" tf:"search_string"`
	TextTransformation   []RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatement struct {
	// +kubebuilder:validation:MinItems=1
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`
	// +optional
	ForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIPConfig `json:"forwardedIPConfig,omitempty" tf:"forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig struct {
	FallbackBehavior *string `json:"fallbackBehavior" tf:"fallback_behavior"`
	HeaderName       *string `json:"headerName" tf:"header_name"`
	Position         *string `json:"position" tf:"position"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	IpSetForwardedIPConfig *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIPConfig `json:"ipSetForwardedIPConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                                        `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatement struct {
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementOrStatementStatementOrStatement struct {
	Statement []RuleGroupSpecRuleStatementOrStatementStatementOrStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                                    `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementOrStatementStatement struct {
	// +optional
	AndStatement *RuleGroupSpecRuleStatementOrStatementStatementAndStatement `json:"andStatement,omitempty" tf:"and_statement"`
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	NotStatement *RuleGroupSpecRuleStatementOrStatementStatementNotStatement `json:"notStatement,omitempty" tf:"not_statement"`
	// +optional
	OrStatement *RuleGroupSpecRuleStatementOrStatementStatementOrStatement `json:"orStatement,omitempty" tf:"or_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementOrStatementStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementOrStatementStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementOrStatementStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleStatementOrStatement struct {
	Statement []RuleGroupSpecRuleStatementOrStatementStatement `json:"statement" tf:"statement"`
}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementRegexPatternSetReferenceStatement struct {
	Arn *string `json:"arn" tf:"arn"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementRegexPatternSetReferenceStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementSizeConstraintStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementSizeConstraintStatement struct {
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator"`
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementSizeConstraintStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	Size               *int64                                                                `json:"size" tf:"size"`
	TextTransformation []RuleGroupSpecRuleStatementSizeConstraintStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementSqliMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementSqliMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementSqliMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementSqliMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchAllQueryArguments struct{}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchBody struct{}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchMethod struct{}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchQueryString struct{}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchSingleHeader struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument struct {
	Name *string `json:"name" tf:"name"`
}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchUriPath struct{}

type RuleGroupSpecRuleStatementXssMatchStatementFieldToMatch struct {
	// +optional
	AllQueryArguments *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchAllQueryArguments `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`
	// +optional
	Body *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchBody `json:"body,omitempty" tf:"body"`
	// +optional
	Method *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchMethod `json:"method,omitempty" tf:"method"`
	// +optional
	QueryString *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchQueryString `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	SingleHeader *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchSingleHeader `json:"singleHeader,omitempty" tf:"single_header"`
	// +optional
	SingleQueryArgument *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`
	// +optional
	UriPath *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatchUriPath `json:"uriPath,omitempty" tf:"uri_path"`
}

type RuleGroupSpecRuleStatementXssMatchStatementTextTransformation struct {
	Priority *int64  `json:"priority" tf:"priority"`
	Type     *string `json:"type" tf:"type"`
}

type RuleGroupSpecRuleStatementXssMatchStatement struct {
	// +optional
	FieldToMatch       *RuleGroupSpecRuleStatementXssMatchStatementFieldToMatch        `json:"fieldToMatch,omitempty" tf:"field_to_match"`
	TextTransformation []RuleGroupSpecRuleStatementXssMatchStatementTextTransformation `json:"textTransformation" tf:"text_transformation"`
}

type RuleGroupSpecRuleStatement struct {
	// +optional
	AndStatement *RuleGroupSpecRuleStatementAndStatement `json:"andStatement,omitempty" tf:"and_statement"`
	// +optional
	ByteMatchStatement *RuleGroupSpecRuleStatementByteMatchStatement `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`
	// +optional
	GeoMatchStatement *RuleGroupSpecRuleStatementGeoMatchStatement `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`
	// +optional
	IpSetReferenceStatement *RuleGroupSpecRuleStatementIpSetReferenceStatement `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`
	// +optional
	NotStatement *RuleGroupSpecRuleStatementNotStatement `json:"notStatement,omitempty" tf:"not_statement"`
	// +optional
	OrStatement *RuleGroupSpecRuleStatementOrStatement `json:"orStatement,omitempty" tf:"or_statement"`
	// +optional
	RegexPatternSetReferenceStatement *RuleGroupSpecRuleStatementRegexPatternSetReferenceStatement `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`
	// +optional
	SizeConstraintStatement *RuleGroupSpecRuleStatementSizeConstraintStatement `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`
	// +optional
	SqliMatchStatement *RuleGroupSpecRuleStatementSqliMatchStatement `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`
	// +optional
	XssMatchStatement *RuleGroupSpecRuleStatementXssMatchStatement `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type RuleGroupSpecRuleVisibilityConfig struct {
	CloudwatchMetricsEnabled *bool   `json:"cloudwatchMetricsEnabled" tf:"cloudwatch_metrics_enabled"`
	MetricName               *string `json:"metricName" tf:"metric_name"`
	SampledRequestsEnabled   *bool   `json:"sampledRequestsEnabled" tf:"sampled_requests_enabled"`
}

type RuleGroupSpecRule struct {
	Action           *RuleGroupSpecRuleAction           `json:"action" tf:"action"`
	Name             *string                            `json:"name" tf:"name"`
	Priority         *int64                             `json:"priority" tf:"priority"`
	Statement        *RuleGroupSpecRuleStatement        `json:"statement" tf:"statement"`
	VisibilityConfig *RuleGroupSpecRuleVisibilityConfig `json:"visibilityConfig" tf:"visibility_config"`
}

type RuleGroupSpecVisibilityConfig struct {
	CloudwatchMetricsEnabled *bool   `json:"cloudwatchMetricsEnabled" tf:"cloudwatch_metrics_enabled"`
	MetricName               *string `json:"metricName" tf:"metric_name"`
	SampledRequestsEnabled   *bool   `json:"sampledRequestsEnabled" tf:"sampled_requests_enabled"`
}

type RuleGroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn      *string `json:"arn,omitempty" tf:"arn"`
	Capacity *int64  `json:"capacity" tf:"capacity"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	LockToken *string `json:"lockToken,omitempty" tf:"lock_token"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	Rule  []RuleGroupSpecRule `json:"rule,omitempty" tf:"rule"`
	Scope *string             `json:"scope" tf:"scope"`
	// +optional
	Tags             *map[string]string             `json:"tags,omitempty" tf:"tags"`
	VisibilityConfig *RuleGroupSpecVisibilityConfig `json:"visibilityConfig" tf:"visibility_config"`
}

type RuleGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RuleGroupList is a list of RuleGroups
type RuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RuleGroup CRD objects
	Items []RuleGroup `json:"items,omitempty"`
}
