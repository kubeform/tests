/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Directory struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DirectorySpec   `json:"spec,omitempty"`
	Status            DirectoryStatus `json:"status,omitempty"`
}

type DirectorySpec struct {
	DirectorySpec2 `json:",inline"`
	// +optional
	KubeformOutput DirectorySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DirectorySpecConnectSettings struct {
	// +optional
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`
	// +optional
	ConnectIPS       []string `json:"connectIPS,omitempty" tf:"connect_ips"`
	CustomerDNSIPS   []string `json:"customerDNSIPS" tf:"customer_dns_ips"`
	CustomerUsername *string  `json:"customerUsername" tf:"customer_username"`
	SubnetIDS        []string `json:"subnetIDS" tf:"subnet_ids"`
	VpcID            *string  `json:"vpcID" tf:"vpc_id"`
}

type DirectorySpecVpcSettings struct {
	// +optional
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`
	SubnetIDS         []string `json:"subnetIDS" tf:"subnet_ids"`
	VpcID             *string  `json:"vpcID" tf:"vpc_id"`
}

type DirectorySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AccessURL *string `json:"accessURL,omitempty" tf:"access_url"`
	// +optional
	Alias *string `json:"alias,omitempty" tf:"alias"`
	// +optional
	ConnectSettings *DirectorySpecConnectSettings `json:"connectSettings,omitempty" tf:"connect_settings"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DnsIPAddresses []string `json:"dnsIPAddresses,omitempty" tf:"dns_ip_addresses"`
	// +optional
	Edition *string `json:"edition,omitempty" tf:"edition"`
	// +optional
	EnableSso *bool   `json:"enableSso,omitempty" tf:"enable_sso"`
	Name      *string `json:"name" tf:"name"`
	Password  *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	SecurityGroupID *string `json:"securityGroupID,omitempty" tf:"security_group_id"`
	// +optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name"`
	// +optional
	Size *string `json:"size,omitempty" tf:"size"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	VpcSettings *DirectorySpecVpcSettings `json:"vpcSettings,omitempty" tf:"vpc_settings"`
}

type DirectoryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DirectoryList is a list of Directorys
type DirectoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Directory CRD objects
	Items []Directory `json:"items,omitempty"`
}
