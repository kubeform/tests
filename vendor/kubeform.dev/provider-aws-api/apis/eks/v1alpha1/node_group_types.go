/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NodeGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodeGroupSpec   `json:"spec,omitempty"`
	Status            NodeGroupStatus `json:"status,omitempty"`
}

type NodeGroupSpec struct {
	NodeGroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput NodeGroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NodeGroupSpecLaunchTemplate struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Name    *string `json:"name,omitempty" tf:"name"`
	Version *string `json:"version" tf:"version"`
}

type NodeGroupSpecRemoteAccess struct {
	// +optional
	Ec2SSHKey *string `json:"ec2SSHKey,omitempty" tf:"ec2_ssh_key"`
	// +optional
	SourceSecurityGroupIDS []string `json:"sourceSecurityGroupIDS,omitempty" tf:"source_security_group_ids"`
}

type NodeGroupSpecResourcesAutoscalingGroups struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type NodeGroupSpecResources struct {
	// +optional
	AutoscalingGroups []NodeGroupSpecResourcesAutoscalingGroups `json:"autoscalingGroups,omitempty" tf:"autoscaling_groups"`
	// +optional
	RemoteAccessSecurityGroupID *string `json:"remoteAccessSecurityGroupID,omitempty" tf:"remote_access_security_group_id"`
}

type NodeGroupSpecScalingConfig struct {
	DesiredSize *int64 `json:"desiredSize" tf:"desired_size"`
	MaxSize     *int64 `json:"maxSize" tf:"max_size"`
	MinSize     *int64 `json:"minSize" tf:"min_size"`
}

type NodeGroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AmiType *string `json:"amiType,omitempty" tf:"ami_type"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CapacityType *string `json:"capacityType,omitempty" tf:"capacity_type"`
	ClusterName  *string `json:"clusterName" tf:"cluster_name"`
	// +optional
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size"`
	// +optional
	ForceUpdateVersion *bool `json:"forceUpdateVersion,omitempty" tf:"force_update_version"`
	// +optional
	InstanceTypes []string `json:"instanceTypes,omitempty" tf:"instance_types"`
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// +optional
	LaunchTemplate *NodeGroupSpecLaunchTemplate `json:"launchTemplate,omitempty" tf:"launch_template"`
	NodeGroupName  *string                      `json:"nodeGroupName" tf:"node_group_name"`
	NodeRoleArn    *string                      `json:"nodeRoleArn" tf:"node_role_arn"`
	// +optional
	ReleaseVersion *string `json:"releaseVersion,omitempty" tf:"release_version"`
	// +optional
	RemoteAccess *NodeGroupSpecRemoteAccess `json:"remoteAccess,omitempty" tf:"remote_access"`
	// +optional
	Resources     []NodeGroupSpecResources    `json:"resources,omitempty" tf:"resources"`
	ScalingConfig *NodeGroupSpecScalingConfig `json:"scalingConfig" tf:"scaling_config"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +kubebuilder:validation:MinItems=1
	SubnetIDS []string `json:"subnetIDS" tf:"subnet_ids"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type NodeGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NodeGroupList is a list of NodeGroups
type NodeGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NodeGroup CRD objects
	Items []NodeGroup `json:"items,omitempty"`
}
