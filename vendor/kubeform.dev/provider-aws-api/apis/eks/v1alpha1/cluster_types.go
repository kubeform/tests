/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Cluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec,omitempty"`
	Status            ClusterStatus `json:"status,omitempty"`
}

type ClusterSpec struct {
	ClusterSpec2 `json:",inline"`
	// +optional
	KubeformOutput ClusterSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ClusterSpecCertificateAuthority struct {
	// +optional
	Data *string `json:"data,omitempty" tf:"data"`
}

type ClusterSpecEncryptionConfigProvider struct {
	KeyArn *string `json:"keyArn" tf:"key_arn"`
}

type ClusterSpecEncryptionConfig struct {
	Provider *ClusterSpecEncryptionConfigProvider `json:"provider" tf:"provider"`
	// +kubebuilder:validation:MinItems=1
	Resources []string `json:"resources" tf:"resources"`
}

type ClusterSpecIdentityOidc struct {
	// +optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer"`
}

type ClusterSpecIdentity struct {
	// +optional
	Oidc []ClusterSpecIdentityOidc `json:"oidc,omitempty" tf:"oidc"`
}

type ClusterSpecKubernetesNetworkConfig struct {
	// +optional
	ServiceIpv4CIDR *string `json:"serviceIpv4CIDR,omitempty" tf:"service_ipv4_cidr"`
}

type ClusterSpecVpcConfig struct {
	// +optional
	ClusterSecurityGroupID *string `json:"clusterSecurityGroupID,omitempty" tf:"cluster_security_group_id"`
	// +optional
	EndpointPrivateAccess *bool `json:"endpointPrivateAccess,omitempty" tf:"endpoint_private_access"`
	// +optional
	EndpointPublicAccess *bool `json:"endpointPublicAccess,omitempty" tf:"endpoint_public_access"`
	// +optional
	PublicAccessCidrs []string `json:"publicAccessCidrs,omitempty" tf:"public_access_cidrs"`
	// +optional
	SecurityGroupIDS []string `json:"securityGroupIDS,omitempty" tf:"security_group_ids"`
	// +kubebuilder:validation:MinItems=1
	SubnetIDS []string `json:"subnetIDS" tf:"subnet_ids"`
	// +optional
	VpcID *string `json:"vpcID,omitempty" tf:"vpc_id"`
}

type ClusterSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CertificateAuthority []ClusterSpecCertificateAuthority `json:"certificateAuthority,omitempty" tf:"certificate_authority"`
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// +optional
	EnabledClusterLogTypes []string `json:"enabledClusterLogTypes,omitempty" tf:"enabled_cluster_log_types"`
	// +optional
	EncryptionConfig *ClusterSpecEncryptionConfig `json:"encryptionConfig,omitempty" tf:"encryption_config"`
	// +optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	Identity []ClusterSpecIdentity `json:"identity,omitempty" tf:"identity"`
	// +optional
	KubernetesNetworkConfig *ClusterSpecKubernetesNetworkConfig `json:"kubernetesNetworkConfig,omitempty" tf:"kubernetes_network_config"`
	Name                    *string                             `json:"name" tf:"name"`
	// +optional
	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version"`
	RoleArn         *string `json:"roleArn" tf:"role_arn"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Version   *string               `json:"version,omitempty" tf:"version"`
	VpcConfig *ClusterSpecVpcConfig `json:"vpcConfig" tf:"vpc_config"`
}

type ClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ClusterList is a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Cluster CRD objects
	Items []Cluster `json:"items,omitempty"`
}
