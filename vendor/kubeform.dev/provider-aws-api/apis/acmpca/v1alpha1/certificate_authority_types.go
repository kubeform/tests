/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CertificateAuthority struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateAuthoritySpec   `json:"spec,omitempty"`
	Status            CertificateAuthorityStatus `json:"status,omitempty"`
}

type CertificateAuthoritySpec struct {
	CertificateAuthoritySpec2 `json:",inline"`
	// +optional
	KubeformOutput CertificateAuthoritySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CertificateAuthoritySpecCertificateAuthorityConfigurationSubject struct {
	// +optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name"`
	// +optional
	Country *string `json:"country,omitempty" tf:"country"`
	// +optional
	DistinguishedNameQualifier *string `json:"distinguishedNameQualifier,omitempty" tf:"distinguished_name_qualifier"`
	// +optional
	GenerationQualifier *string `json:"generationQualifier,omitempty" tf:"generation_qualifier"`
	// +optional
	GivenName *string `json:"givenName,omitempty" tf:"given_name"`
	// +optional
	Initials *string `json:"initials,omitempty" tf:"initials"`
	// +optional
	Locality *string `json:"locality,omitempty" tf:"locality"`
	// +optional
	Organization *string `json:"organization,omitempty" tf:"organization"`
	// +optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit"`
	// +optional
	Pseudonym *string `json:"pseudonym,omitempty" tf:"pseudonym"`
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// +optional
	Surname *string `json:"surname,omitempty" tf:"surname"`
	// +optional
	Title *string `json:"title,omitempty" tf:"title"`
}

type CertificateAuthoritySpecCertificateAuthorityConfiguration struct {
	KeyAlgorithm     *string                                                           `json:"keyAlgorithm" tf:"key_algorithm"`
	SigningAlgorithm *string                                                           `json:"signingAlgorithm" tf:"signing_algorithm"`
	Subject          *CertificateAuthoritySpecCertificateAuthorityConfigurationSubject `json:"subject" tf:"subject"`
}

type CertificateAuthoritySpecRevocationConfigurationCrlConfiguration struct {
	// +optional
	CustomCname *string `json:"customCname,omitempty" tf:"custom_cname"`
	// +optional
	Enabled          *bool  `json:"enabled,omitempty" tf:"enabled"`
	ExpirationInDays *int64 `json:"expirationInDays" tf:"expiration_in_days"`
	// +optional
	S3BucketName *string `json:"s3BucketName,omitempty" tf:"s3_bucket_name"`
}

type CertificateAuthoritySpecRevocationConfiguration struct {
	// +optional
	CrlConfiguration *CertificateAuthoritySpecRevocationConfigurationCrlConfiguration `json:"crlConfiguration,omitempty" tf:"crl_configuration"`
}

type CertificateAuthoritySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	Certificate                       *string                                                    `json:"certificate,omitempty" tf:"certificate"`
	CertificateAuthorityConfiguration *CertificateAuthoritySpecCertificateAuthorityConfiguration `json:"certificateAuthorityConfiguration" tf:"certificate_authority_configuration"`
	// +optional
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain"`
	// +optional
	CertificateSigningRequest *string `json:"certificateSigningRequest,omitempty" tf:"certificate_signing_request"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	NotAfter *string `json:"notAfter,omitempty" tf:"not_after"`
	// +optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before"`
	// +optional
	PermanentDeletionTimeInDays *int64 `json:"permanentDeletionTimeInDays,omitempty" tf:"permanent_deletion_time_in_days"`
	// +optional
	RevocationConfiguration *CertificateAuthoritySpecRevocationConfiguration `json:"revocationConfiguration,omitempty" tf:"revocation_configuration"`
	// +optional
	Serial *string `json:"serial,omitempty" tf:"serial"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type CertificateAuthorityStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CertificateAuthorityList is a list of CertificateAuthoritys
type CertificateAuthorityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CertificateAuthority CRD objects
	Items []CertificateAuthority `json:"items,omitempty"`
}
