/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ResolverRule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverRuleSpec   `json:"spec,omitempty"`
	Status            ResolverRuleStatus `json:"status,omitempty"`
}

type ResolverRuleSpec struct {
	ResolverRuleSpec2 `json:",inline"`
	// +optional
	KubeformOutput ResolverRuleSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ResolverRuleSpecTargetIP struct {
	Ip *string `json:"ip" tf:"ip"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
}

type ResolverRuleSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn        *string `json:"arn,omitempty" tf:"arn"`
	DomainName *string `json:"domainName" tf:"domain_name"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	OwnerID *string `json:"ownerID,omitempty" tf:"owner_id"`
	// +optional
	ResolverEndpointID *string `json:"resolverEndpointID,omitempty" tf:"resolver_endpoint_id"`
	RuleType           *string `json:"ruleType" tf:"rule_type"`
	// +optional
	ShareStatus *string `json:"shareStatus,omitempty" tf:"share_status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TargetIP []ResolverRuleSpecTargetIP `json:"targetIP,omitempty" tf:"target_ip"`
}

type ResolverRuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ResolverRuleList is a list of ResolverRules
type ResolverRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ResolverRule CRD objects
	Items []ResolverRule `json:"items,omitempty"`
}
