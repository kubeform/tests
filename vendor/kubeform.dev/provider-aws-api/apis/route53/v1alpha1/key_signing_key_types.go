/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type KeySigningKey struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeySigningKeySpec   `json:"spec,omitempty"`
	Status            KeySigningKeyStatus `json:"status,omitempty"`
}

type KeySigningKeySpec struct {
	KeySigningKeySpec2 `json:",inline"`
	// +optional
	KubeformOutput KeySigningKeySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type KeySigningKeySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	DigestAlgorithmMnemonic *string `json:"digestAlgorithmMnemonic,omitempty" tf:"digest_algorithm_mnemonic"`
	// +optional
	DigestAlgorithmType *int64 `json:"digestAlgorithmType,omitempty" tf:"digest_algorithm_type"`
	// +optional
	DigestValue *string `json:"digestValue,omitempty" tf:"digest_value"`
	// +optional
	DnskeyRecord *string `json:"dnskeyRecord,omitempty" tf:"dnskey_record"`
	// +optional
	DsRecord *string `json:"dsRecord,omitempty" tf:"ds_record"`
	// +optional
	Flag                    *int64  `json:"flag,omitempty" tf:"flag"`
	HostedZoneID            *string `json:"hostedZoneID" tf:"hosted_zone_id"`
	KeyManagementServiceArn *string `json:"keyManagementServiceArn" tf:"key_management_service_arn"`
	// +optional
	KeyTag *int64  `json:"keyTag,omitempty" tf:"key_tag"`
	Name   *string `json:"name" tf:"name"`
	// +optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key"`
	// +optional
	SigningAlgorithmMnemonic *string `json:"signingAlgorithmMnemonic,omitempty" tf:"signing_algorithm_mnemonic"`
	// +optional
	SigningAlgorithmType *int64 `json:"signingAlgorithmType,omitempty" tf:"signing_algorithm_type"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type KeySigningKeyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KeySigningKeyList is a list of KeySigningKeys
type KeySigningKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of KeySigningKey CRD objects
	Items []KeySigningKey `json:"items,omitempty"`
}
