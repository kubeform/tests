/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(LocationEfsSpecEc2Config{}).Type1()):    LocationEfsSpecEc2ConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LocationNfsSpecOnPremConfig{}).Type1()): LocationNfsSpecOnPremConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LocationS3SpecS3Config{}).Type1()):      LocationS3SpecS3ConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LocationSmbSpecMountOptions{}).Type1()): LocationSmbSpecMountOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TaskSpecOptions{}).Type1()):             TaskSpecOptionsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(LocationEfsSpecEc2Config{}).Type1()):    LocationEfsSpecEc2ConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LocationNfsSpecOnPremConfig{}).Type1()): LocationNfsSpecOnPremConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LocationS3SpecS3Config{}).Type1()):      LocationS3SpecS3ConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LocationSmbSpecMountOptions{}).Type1()): LocationSmbSpecMountOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TaskSpecOptions{}).Type1()):             TaskSpecOptionsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type LocationEfsSpecEc2ConfigCodec struct {
}

func (LocationEfsSpecEc2ConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LocationEfsSpecEc2Config)(ptr) == nil
}

func (LocationEfsSpecEc2ConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LocationEfsSpecEc2Config)(ptr)
	var objs []LocationEfsSpecEc2Config
	if obj != nil {
		objs = []LocationEfsSpecEc2Config{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationEfsSpecEc2Config{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LocationEfsSpecEc2ConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LocationEfsSpecEc2Config)(ptr) = LocationEfsSpecEc2Config{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LocationEfsSpecEc2Config

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationEfsSpecEc2Config{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LocationEfsSpecEc2Config)(ptr) = objs[0]
			} else {
				*(*LocationEfsSpecEc2Config)(ptr) = LocationEfsSpecEc2Config{}
			}
		} else {
			*(*LocationEfsSpecEc2Config)(ptr) = LocationEfsSpecEc2Config{}
		}
	default:
		iter.ReportError("decode LocationEfsSpecEc2Config", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type LocationNfsSpecOnPremConfigCodec struct {
}

func (LocationNfsSpecOnPremConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LocationNfsSpecOnPremConfig)(ptr) == nil
}

func (LocationNfsSpecOnPremConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LocationNfsSpecOnPremConfig)(ptr)
	var objs []LocationNfsSpecOnPremConfig
	if obj != nil {
		objs = []LocationNfsSpecOnPremConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationNfsSpecOnPremConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LocationNfsSpecOnPremConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LocationNfsSpecOnPremConfig)(ptr) = LocationNfsSpecOnPremConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LocationNfsSpecOnPremConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationNfsSpecOnPremConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LocationNfsSpecOnPremConfig)(ptr) = objs[0]
			} else {
				*(*LocationNfsSpecOnPremConfig)(ptr) = LocationNfsSpecOnPremConfig{}
			}
		} else {
			*(*LocationNfsSpecOnPremConfig)(ptr) = LocationNfsSpecOnPremConfig{}
		}
	default:
		iter.ReportError("decode LocationNfsSpecOnPremConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type LocationS3SpecS3ConfigCodec struct {
}

func (LocationS3SpecS3ConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LocationS3SpecS3Config)(ptr) == nil
}

func (LocationS3SpecS3ConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LocationS3SpecS3Config)(ptr)
	var objs []LocationS3SpecS3Config
	if obj != nil {
		objs = []LocationS3SpecS3Config{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationS3SpecS3Config{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LocationS3SpecS3ConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LocationS3SpecS3Config)(ptr) = LocationS3SpecS3Config{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LocationS3SpecS3Config

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationS3SpecS3Config{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LocationS3SpecS3Config)(ptr) = objs[0]
			} else {
				*(*LocationS3SpecS3Config)(ptr) = LocationS3SpecS3Config{}
			}
		} else {
			*(*LocationS3SpecS3Config)(ptr) = LocationS3SpecS3Config{}
		}
	default:
		iter.ReportError("decode LocationS3SpecS3Config", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type LocationSmbSpecMountOptionsCodec struct {
}

func (LocationSmbSpecMountOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LocationSmbSpecMountOptions)(ptr) == nil
}

func (LocationSmbSpecMountOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LocationSmbSpecMountOptions)(ptr)
	var objs []LocationSmbSpecMountOptions
	if obj != nil {
		objs = []LocationSmbSpecMountOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationSmbSpecMountOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LocationSmbSpecMountOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LocationSmbSpecMountOptions)(ptr) = LocationSmbSpecMountOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LocationSmbSpecMountOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LocationSmbSpecMountOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LocationSmbSpecMountOptions)(ptr) = objs[0]
			} else {
				*(*LocationSmbSpecMountOptions)(ptr) = LocationSmbSpecMountOptions{}
			}
		} else {
			*(*LocationSmbSpecMountOptions)(ptr) = LocationSmbSpecMountOptions{}
		}
	default:
		iter.ReportError("decode LocationSmbSpecMountOptions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type TaskSpecOptionsCodec struct {
}

func (TaskSpecOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*TaskSpecOptions)(ptr) == nil
}

func (TaskSpecOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*TaskSpecOptions)(ptr)
	var objs []TaskSpecOptions
	if obj != nil {
		objs = []TaskSpecOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TaskSpecOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (TaskSpecOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*TaskSpecOptions)(ptr) = TaskSpecOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []TaskSpecOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TaskSpecOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*TaskSpecOptions)(ptr) = objs[0]
			} else {
				*(*TaskSpecOptions)(ptr) = TaskSpecOptions{}
			}
		} else {
			*(*TaskSpecOptions)(ptr) = TaskSpecOptions{}
		}
	default:
		iter.ReportError("decode TaskSpecOptions", "unexpected JSON type")
	}
}
