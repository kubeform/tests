/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type FleetRequest struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FleetRequestSpec   `json:"spec,omitempty"`
	Status            FleetRequestStatus `json:"status,omitempty"`
}

type FleetRequestSpec struct {
	FleetRequestSpec2 `json:",inline"`
	// +optional
	KubeformOutput FleetRequestSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type FleetRequestSpecLaunchSpecificationEbsBlockDevice struct {
	// +optional
	DeleteOnTermination *bool   `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`
	DeviceName          *string `json:"deviceName" tf:"device_name"`
	// +optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`
	// +optional
	Iops *int64 `json:"iops,omitempty" tf:"iops"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	SnapshotID *string `json:"snapshotID,omitempty" tf:"snapshot_id"`
	// +optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`
	// +optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`
	// +optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type FleetRequestSpecLaunchSpecificationEphemeralBlockDevice struct {
	DeviceName  *string `json:"deviceName" tf:"device_name"`
	VirtualName *string `json:"virtualName" tf:"virtual_name"`
}

type FleetRequestSpecLaunchSpecificationRootBlockDevice struct {
	// +optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`
	// +optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`
	// +optional
	Iops *int64 `json:"iops,omitempty" tf:"iops"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`
	// +optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`
	// +optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type FleetRequestSpecLaunchSpecification struct {
	Ami *string `json:"ami" tf:"ami"`
	// +optional
	AssociatePublicIPAddress *bool `json:"associatePublicIPAddress,omitempty" tf:"associate_public_ip_address"`
	// +optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`
	// +optional
	EbsBlockDevice []FleetRequestSpecLaunchSpecificationEbsBlockDevice `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device"`
	// +optional
	EbsOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized"`
	// +optional
	EphemeralBlockDevice []FleetRequestSpecLaunchSpecificationEphemeralBlockDevice `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device"`
	// +optional
	IamInstanceProfile *string `json:"iamInstanceProfile,omitempty" tf:"iam_instance_profile"`
	// +optional
	IamInstanceProfileArn *string `json:"iamInstanceProfileArn,omitempty" tf:"iam_instance_profile_arn"`
	InstanceType          *string `json:"instanceType" tf:"instance_type"`
	// +optional
	KeyName *string `json:"keyName,omitempty" tf:"key_name"`
	// +optional
	Monitoring *bool `json:"monitoring,omitempty" tf:"monitoring"`
	// +optional
	PlacementGroup *string `json:"placementGroup,omitempty" tf:"placement_group"`
	// +optional
	PlacementTenancy *string `json:"placementTenancy,omitempty" tf:"placement_tenancy"`
	// +optional
	RootBlockDevice []FleetRequestSpecLaunchSpecificationRootBlockDevice `json:"rootBlockDevice,omitempty" tf:"root_block_device"`
	// +optional
	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UserData *string `json:"userData,omitempty" tf:"user_data"`
	// +optional
	VpcSecurityGroupIDS []string `json:"vpcSecurityGroupIDS,omitempty" tf:"vpc_security_group_ids"`
	// +optional
	WeightedCapacity *string `json:"weightedCapacity,omitempty" tf:"weighted_capacity"`
}

type FleetRequestSpecLaunchTemplateConfigLaunchTemplateSpecification struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type FleetRequestSpecLaunchTemplateConfigOverrides struct {
	// +optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`
	// +optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`
	// +optional
	Priority *float64 `json:"priority,omitempty" tf:"priority"`
	// +optional
	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	// +optional
	WeightedCapacity *float64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity"`
}

type FleetRequestSpecLaunchTemplateConfig struct {
	LaunchTemplateSpecification *FleetRequestSpecLaunchTemplateConfigLaunchTemplateSpecification `json:"launchTemplateSpecification" tf:"launch_template_specification"`
	// +optional
	Overrides []FleetRequestSpecLaunchTemplateConfigOverrides `json:"overrides,omitempty" tf:"overrides"`
}

type FleetRequestSpecSpotMaintenanceStrategiesCapacityRebalance struct {
	// +optional
	ReplacementStrategy *string `json:"replacementStrategy,omitempty" tf:"replacement_strategy"`
}

type FleetRequestSpecSpotMaintenanceStrategies struct {
	// +optional
	CapacityRebalance *FleetRequestSpecSpotMaintenanceStrategiesCapacityRebalance `json:"capacityRebalance,omitempty" tf:"capacity_rebalance"`
}

type FleetRequestSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy"`
	// +optional
	ClientToken *string `json:"clientToken,omitempty" tf:"client_token"`
	// +optional
	ExcessCapacityTerminationPolicy *string `json:"excessCapacityTerminationPolicy,omitempty" tf:"excess_capacity_termination_policy"`
	// +optional
	FleetType    *string `json:"fleetType,omitempty" tf:"fleet_type"`
	IamFleetRole *string `json:"iamFleetRole" tf:"iam_fleet_role"`
	// +optional
	InstanceInterruptionBehaviour *string `json:"instanceInterruptionBehaviour,omitempty" tf:"instance_interruption_behaviour"`
	// +optional
	InstancePoolsToUseCount *int64 `json:"instancePoolsToUseCount,omitempty" tf:"instance_pools_to_use_count"`
	// +optional
	LaunchSpecification []FleetRequestSpecLaunchSpecification `json:"launchSpecification,omitempty" tf:"launch_specification"`
	// +optional
	LaunchTemplateConfig []FleetRequestSpecLaunchTemplateConfig `json:"launchTemplateConfig,omitempty" tf:"launch_template_config"`
	// +optional
	LoadBalancers []string `json:"loadBalancers,omitempty" tf:"load_balancers"`
	// +optional
	ReplaceUnhealthyInstances *bool `json:"replaceUnhealthyInstances,omitempty" tf:"replace_unhealthy_instances"`
	// +optional
	SpotMaintenanceStrategies *FleetRequestSpecSpotMaintenanceStrategies `json:"spotMaintenanceStrategies,omitempty" tf:"spot_maintenance_strategies"`
	// +optional
	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price"`
	// +optional
	SpotRequestState *string `json:"spotRequestState,omitempty" tf:"spot_request_state"`
	// +optional
	Tags           *map[string]string `json:"tags,omitempty" tf:"tags"`
	TargetCapacity *int64             `json:"targetCapacity" tf:"target_capacity"`
	// +optional
	TargetGroupArns []string `json:"targetGroupArns,omitempty" tf:"target_group_arns"`
	// +optional
	TerminateInstancesWithExpiration *bool `json:"terminateInstancesWithExpiration,omitempty" tf:"terminate_instances_with_expiration"`
	// +optional
	ValidFrom *string `json:"validFrom,omitempty" tf:"valid_from"`
	// +optional
	ValidUntil *string `json:"validUntil,omitempty" tf:"valid_until"`
	// +optional
	WaitForFulfillment *bool `json:"waitForFulfillment,omitempty" tf:"wait_for_fulfillment"`
}

type FleetRequestStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FleetRequestList is a list of FleetRequests
type FleetRequestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of FleetRequest CRD objects
	Items []FleetRequest `json:"items,omitempty"`
}
