/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CachePolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CachePolicySpec   `json:"spec,omitempty"`
	Status            CachePolicyStatus `json:"status,omitempty"`
}

type CachePolicySpec struct {
	CachePolicySpec2 `json:",inline"`
	// +optional
	KubeformOutput CachePolicySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CachePolicySpecParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies struct {
	// +optional
	Items []string `json:"items,omitempty" tf:"items"`
}

type CachePolicySpecParametersInCacheKeyAndForwardedToOriginCookiesConfig struct {
	CookieBehavior *string `json:"cookieBehavior" tf:"cookie_behavior"`
	// +optional
	Cookies *CachePolicySpecParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies `json:"cookies,omitempty" tf:"cookies"`
}

type CachePolicySpecParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders struct {
	// +optional
	Items []string `json:"items,omitempty" tf:"items"`
}

type CachePolicySpecParametersInCacheKeyAndForwardedToOriginHeadersConfig struct {
	// +optional
	HeaderBehavior *string `json:"headerBehavior,omitempty" tf:"header_behavior"`
	// +optional
	Headers *CachePolicySpecParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders `json:"headers,omitempty" tf:"headers"`
}

type CachePolicySpecParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings struct {
	// +optional
	Items []string `json:"items,omitempty" tf:"items"`
}

type CachePolicySpecParametersInCacheKeyAndForwardedToOriginQueryStringsConfig struct {
	QueryStringBehavior *string `json:"queryStringBehavior" tf:"query_string_behavior"`
	// +optional
	QueryStrings *CachePolicySpecParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings `json:"queryStrings,omitempty" tf:"query_strings"`
}

type CachePolicySpecParametersInCacheKeyAndForwardedToOrigin struct {
	CookiesConfig *CachePolicySpecParametersInCacheKeyAndForwardedToOriginCookiesConfig `json:"cookiesConfig" tf:"cookies_config"`
	// +optional
	EnableAcceptEncodingBrotli *bool `json:"enableAcceptEncodingBrotli,omitempty" tf:"enable_accept_encoding_brotli"`
	// +optional
	EnableAcceptEncodingGzip *bool                                                                      `json:"enableAcceptEncodingGzip,omitempty" tf:"enable_accept_encoding_gzip"`
	HeadersConfig            *CachePolicySpecParametersInCacheKeyAndForwardedToOriginHeadersConfig      `json:"headersConfig" tf:"headers_config"`
	QueryStringsConfig       *CachePolicySpecParametersInCacheKeyAndForwardedToOriginQueryStringsConfig `json:"queryStringsConfig" tf:"query_strings_config"`
}

type CachePolicySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Comment *string `json:"comment,omitempty" tf:"comment"`
	// +optional
	DefaultTtl *int64 `json:"defaultTtl,omitempty" tf:"default_ttl"`
	// +optional
	Etag *string `json:"etag,omitempty" tf:"etag"`
	// +optional
	MaxTtl *int64 `json:"maxTtl,omitempty" tf:"max_ttl"`
	// +optional
	MinTtl *int64  `json:"minTtl,omitempty" tf:"min_ttl"`
	Name   *string `json:"name" tf:"name"`
	// +optional
	ParametersInCacheKeyAndForwardedToOrigin *CachePolicySpecParametersInCacheKeyAndForwardedToOrigin `json:"parametersInCacheKeyAndForwardedToOrigin,omitempty" tf:"parameters_in_cache_key_and_forwarded_to_origin"`
}

type CachePolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CachePolicyList is a list of CachePolicys
type CachePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CachePolicy CRD objects
	Items []CachePolicy `json:"items,omitempty"`
}
