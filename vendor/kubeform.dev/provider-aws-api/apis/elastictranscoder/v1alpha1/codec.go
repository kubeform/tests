/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecContentConfig{}).Type1()):   PipelineSpecContentConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecNotifications{}).Type1()):   PipelineSpecNotificationsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecThumbnailConfig{}).Type1()): PipelineSpecThumbnailConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudio{}).Type1()):             PresetSpecAudioCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudioCodecOptions{}).Type1()): PresetSpecAudioCodecOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecThumbnails{}).Type1()):        PresetSpecThumbnailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecVideo{}).Type1()):             PresetSpecVideoCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecContentConfig{}).Type1()):   PipelineSpecContentConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecNotifications{}).Type1()):   PipelineSpecNotificationsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecThumbnailConfig{}).Type1()): PipelineSpecThumbnailConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudio{}).Type1()):             PresetSpecAudioCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudioCodecOptions{}).Type1()): PresetSpecAudioCodecOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecThumbnails{}).Type1()):        PresetSpecThumbnailsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecVideo{}).Type1()):             PresetSpecVideoCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type PipelineSpecContentConfigCodec struct {
}

func (PipelineSpecContentConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PipelineSpecContentConfig)(ptr) == nil
}

func (PipelineSpecContentConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PipelineSpecContentConfig)(ptr)
	var objs []PipelineSpecContentConfig
	if obj != nil {
		objs = []PipelineSpecContentConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecContentConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PipelineSpecContentConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PipelineSpecContentConfig)(ptr) = PipelineSpecContentConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PipelineSpecContentConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecContentConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PipelineSpecContentConfig)(ptr) = objs[0]
			} else {
				*(*PipelineSpecContentConfig)(ptr) = PipelineSpecContentConfig{}
			}
		} else {
			*(*PipelineSpecContentConfig)(ptr) = PipelineSpecContentConfig{}
		}
	default:
		iter.ReportError("decode PipelineSpecContentConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PipelineSpecNotificationsCodec struct {
}

func (PipelineSpecNotificationsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PipelineSpecNotifications)(ptr) == nil
}

func (PipelineSpecNotificationsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PipelineSpecNotifications)(ptr)
	var objs []PipelineSpecNotifications
	if obj != nil {
		objs = []PipelineSpecNotifications{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecNotifications{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PipelineSpecNotificationsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PipelineSpecNotifications)(ptr) = PipelineSpecNotifications{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PipelineSpecNotifications

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecNotifications{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PipelineSpecNotifications)(ptr) = objs[0]
			} else {
				*(*PipelineSpecNotifications)(ptr) = PipelineSpecNotifications{}
			}
		} else {
			*(*PipelineSpecNotifications)(ptr) = PipelineSpecNotifications{}
		}
	default:
		iter.ReportError("decode PipelineSpecNotifications", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PipelineSpecThumbnailConfigCodec struct {
}

func (PipelineSpecThumbnailConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PipelineSpecThumbnailConfig)(ptr) == nil
}

func (PipelineSpecThumbnailConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PipelineSpecThumbnailConfig)(ptr)
	var objs []PipelineSpecThumbnailConfig
	if obj != nil {
		objs = []PipelineSpecThumbnailConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecThumbnailConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PipelineSpecThumbnailConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PipelineSpecThumbnailConfig)(ptr) = PipelineSpecThumbnailConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PipelineSpecThumbnailConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PipelineSpecThumbnailConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PipelineSpecThumbnailConfig)(ptr) = objs[0]
			} else {
				*(*PipelineSpecThumbnailConfig)(ptr) = PipelineSpecThumbnailConfig{}
			}
		} else {
			*(*PipelineSpecThumbnailConfig)(ptr) = PipelineSpecThumbnailConfig{}
		}
	default:
		iter.ReportError("decode PipelineSpecThumbnailConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PresetSpecAudioCodec struct {
}

func (PresetSpecAudioCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PresetSpecAudio)(ptr) == nil
}

func (PresetSpecAudioCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PresetSpecAudio)(ptr)
	var objs []PresetSpecAudio
	if obj != nil {
		objs = []PresetSpecAudio{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudio{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PresetSpecAudioCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PresetSpecAudio)(ptr) = PresetSpecAudio{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PresetSpecAudio

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudio{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PresetSpecAudio)(ptr) = objs[0]
			} else {
				*(*PresetSpecAudio)(ptr) = PresetSpecAudio{}
			}
		} else {
			*(*PresetSpecAudio)(ptr) = PresetSpecAudio{}
		}
	default:
		iter.ReportError("decode PresetSpecAudio", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PresetSpecAudioCodecOptionsCodec struct {
}

func (PresetSpecAudioCodecOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PresetSpecAudioCodecOptions)(ptr) == nil
}

func (PresetSpecAudioCodecOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PresetSpecAudioCodecOptions)(ptr)
	var objs []PresetSpecAudioCodecOptions
	if obj != nil {
		objs = []PresetSpecAudioCodecOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudioCodecOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PresetSpecAudioCodecOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PresetSpecAudioCodecOptions)(ptr) = PresetSpecAudioCodecOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PresetSpecAudioCodecOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecAudioCodecOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PresetSpecAudioCodecOptions)(ptr) = objs[0]
			} else {
				*(*PresetSpecAudioCodecOptions)(ptr) = PresetSpecAudioCodecOptions{}
			}
		} else {
			*(*PresetSpecAudioCodecOptions)(ptr) = PresetSpecAudioCodecOptions{}
		}
	default:
		iter.ReportError("decode PresetSpecAudioCodecOptions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PresetSpecThumbnailsCodec struct {
}

func (PresetSpecThumbnailsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PresetSpecThumbnails)(ptr) == nil
}

func (PresetSpecThumbnailsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PresetSpecThumbnails)(ptr)
	var objs []PresetSpecThumbnails
	if obj != nil {
		objs = []PresetSpecThumbnails{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecThumbnails{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PresetSpecThumbnailsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PresetSpecThumbnails)(ptr) = PresetSpecThumbnails{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PresetSpecThumbnails

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecThumbnails{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PresetSpecThumbnails)(ptr) = objs[0]
			} else {
				*(*PresetSpecThumbnails)(ptr) = PresetSpecThumbnails{}
			}
		} else {
			*(*PresetSpecThumbnails)(ptr) = PresetSpecThumbnails{}
		}
	default:
		iter.ReportError("decode PresetSpecThumbnails", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PresetSpecVideoCodec struct {
}

func (PresetSpecVideoCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PresetSpecVideo)(ptr) == nil
}

func (PresetSpecVideoCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PresetSpecVideo)(ptr)
	var objs []PresetSpecVideo
	if obj != nil {
		objs = []PresetSpecVideo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecVideo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PresetSpecVideoCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PresetSpecVideo)(ptr) = PresetSpecVideo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PresetSpecVideo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PresetSpecVideo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PresetSpecVideo)(ptr) = objs[0]
			} else {
				*(*PresetSpecVideo)(ptr) = PresetSpecVideo{}
			}
		} else {
			*(*PresetSpecVideo)(ptr) = PresetSpecVideo{}
		}
	default:
		iter.ReportError("decode PresetSpecVideo", "unexpected JSON type")
	}
}
