/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Preset struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PresetSpec   `json:"spec,omitempty"`
	Status            PresetStatus `json:"status,omitempty"`
}

type PresetSpec struct {
	PresetSpec2 `json:",inline"`
	// +optional
	KubeformOutput PresetSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PresetSpecAudio struct {
	// +optional
	AudioPackingMode *string `json:"audioPackingMode,omitempty" tf:"audio_packing_mode"`
	// +optional
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate"`
	// +optional
	Channels *string `json:"channels,omitempty" tf:"channels"`
	// +optional
	Codec *string `json:"codec,omitempty" tf:"codec"`
	// +optional
	SampleRate *string `json:"sampleRate,omitempty" tf:"sample_rate"`
}

type PresetSpecAudioCodecOptions struct {
	// +optional
	BitDepth *string `json:"bitDepth,omitempty" tf:"bit_depth"`
	// +optional
	BitOrder *string `json:"bitOrder,omitempty" tf:"bit_order"`
	// +optional
	Profile *string `json:"profile,omitempty" tf:"profile"`
	// +optional
	Signed *string `json:"signed,omitempty" tf:"signed"`
}

type PresetSpecThumbnails struct {
	// +optional
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio"`
	// +optional
	Format *string `json:"format,omitempty" tf:"format"`
	// +optional
	Interval *string `json:"interval,omitempty" tf:"interval"`
	// +optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height"`
	// +optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width"`
	// +optional
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy"`
	// +optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution"`
	// +optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy"`
}

type PresetSpecVideo struct {
	// +optional
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio"`
	// +optional
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate"`
	// +optional
	Codec *string `json:"codec,omitempty" tf:"codec"`
	// +optional
	DisplayAspectRatio *string `json:"displayAspectRatio,omitempty" tf:"display_aspect_ratio"`
	// +optional
	FixedGop *string `json:"fixedGop,omitempty" tf:"fixed_gop"`
	// +optional
	FrameRate *string `json:"frameRate,omitempty" tf:"frame_rate"`
	// +optional
	KeyframesMaxDist *string `json:"keyframesMaxDist,omitempty" tf:"keyframes_max_dist"`
	// +optional
	MaxFrameRate *string `json:"maxFrameRate,omitempty" tf:"max_frame_rate"`
	// +optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height"`
	// +optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width"`
	// +optional
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy"`
	// +optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution"`
	// +optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy"`
}

type PresetSpecVideoWatermarks struct {
	// +optional
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align"`
	// +optional
	HorizontalOffset *string `json:"horizontalOffset,omitempty" tf:"horizontal_offset"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height"`
	// +optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width"`
	// +optional
	Opacity *string `json:"opacity,omitempty" tf:"opacity"`
	// +optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy"`
	// +optional
	Target *string `json:"target,omitempty" tf:"target"`
	// +optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align"`
	// +optional
	VerticalOffset *string `json:"verticalOffset,omitempty" tf:"vertical_offset"`
}

type PresetSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	Audio *PresetSpecAudio `json:"audio,omitempty" tf:"audio"`
	// +optional
	AudioCodecOptions *PresetSpecAudioCodecOptions `json:"audioCodecOptions,omitempty" tf:"audio_codec_options"`
	Container         *string                      `json:"container" tf:"container"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Thumbnails *PresetSpecThumbnails `json:"thumbnails,omitempty" tf:"thumbnails"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	Video *PresetSpecVideo `json:"video,omitempty" tf:"video"`
	// +optional
	VideoCodecOptions *map[string]string `json:"videoCodecOptions,omitempty" tf:"video_codec_options"`
	// +optional
	VideoWatermarks []PresetSpecVideoWatermarks `json:"videoWatermarks,omitempty" tf:"video_watermarks"`
}

type PresetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PresetList is a list of Presets
type PresetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Preset CRD objects
	Items []Preset `json:"items,omitempty"`
}
