/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecScope{}).Type1()):                                      ConfigRuleSpecScopeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecSource{}).Type1()):                                     ConfigRuleSpecSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecAccountAggregationSource{}).Type1()):      ConfigurationAggregatorSpecAccountAggregationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecOrganizationAggregationSource{}).Type1()): ConfigurationAggregatorSpecOrganizationAggregationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationRecorderSpecRecordingGroup{}).Type1()):                  ConfigurationRecorderSpecRecordingGroupCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DeliveryChannelSpecSnapshotDeliveryProperties{}).Type1()):            DeliveryChannelSpecSnapshotDeliveryPropertiesCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecScope{}).Type1()):                                      ConfigRuleSpecScopeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecSource{}).Type1()):                                     ConfigRuleSpecSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecAccountAggregationSource{}).Type1()):      ConfigurationAggregatorSpecAccountAggregationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecOrganizationAggregationSource{}).Type1()): ConfigurationAggregatorSpecOrganizationAggregationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationRecorderSpecRecordingGroup{}).Type1()):                  ConfigurationRecorderSpecRecordingGroupCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DeliveryChannelSpecSnapshotDeliveryProperties{}).Type1()):            DeliveryChannelSpecSnapshotDeliveryPropertiesCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ConfigRuleSpecScopeCodec struct {
}

func (ConfigRuleSpecScopeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ConfigRuleSpecScope)(ptr) == nil
}

func (ConfigRuleSpecScopeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ConfigRuleSpecScope)(ptr)
	var objs []ConfigRuleSpecScope
	if obj != nil {
		objs = []ConfigRuleSpecScope{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecScope{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ConfigRuleSpecScopeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ConfigRuleSpecScope)(ptr) = ConfigRuleSpecScope{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ConfigRuleSpecScope

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecScope{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ConfigRuleSpecScope)(ptr) = objs[0]
			} else {
				*(*ConfigRuleSpecScope)(ptr) = ConfigRuleSpecScope{}
			}
		} else {
			*(*ConfigRuleSpecScope)(ptr) = ConfigRuleSpecScope{}
		}
	default:
		iter.ReportError("decode ConfigRuleSpecScope", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ConfigRuleSpecSourceCodec struct {
}

func (ConfigRuleSpecSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ConfigRuleSpecSource)(ptr) == nil
}

func (ConfigRuleSpecSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ConfigRuleSpecSource)(ptr)
	var objs []ConfigRuleSpecSource
	if obj != nil {
		objs = []ConfigRuleSpecSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ConfigRuleSpecSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ConfigRuleSpecSource)(ptr) = ConfigRuleSpecSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ConfigRuleSpecSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigRuleSpecSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ConfigRuleSpecSource)(ptr) = objs[0]
			} else {
				*(*ConfigRuleSpecSource)(ptr) = ConfigRuleSpecSource{}
			}
		} else {
			*(*ConfigRuleSpecSource)(ptr) = ConfigRuleSpecSource{}
		}
	default:
		iter.ReportError("decode ConfigRuleSpecSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ConfigurationAggregatorSpecAccountAggregationSourceCodec struct {
}

func (ConfigurationAggregatorSpecAccountAggregationSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ConfigurationAggregatorSpecAccountAggregationSource)(ptr) == nil
}

func (ConfigurationAggregatorSpecAccountAggregationSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ConfigurationAggregatorSpecAccountAggregationSource)(ptr)
	var objs []ConfigurationAggregatorSpecAccountAggregationSource
	if obj != nil {
		objs = []ConfigurationAggregatorSpecAccountAggregationSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecAccountAggregationSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ConfigurationAggregatorSpecAccountAggregationSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ConfigurationAggregatorSpecAccountAggregationSource)(ptr) = ConfigurationAggregatorSpecAccountAggregationSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ConfigurationAggregatorSpecAccountAggregationSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecAccountAggregationSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ConfigurationAggregatorSpecAccountAggregationSource)(ptr) = objs[0]
			} else {
				*(*ConfigurationAggregatorSpecAccountAggregationSource)(ptr) = ConfigurationAggregatorSpecAccountAggregationSource{}
			}
		} else {
			*(*ConfigurationAggregatorSpecAccountAggregationSource)(ptr) = ConfigurationAggregatorSpecAccountAggregationSource{}
		}
	default:
		iter.ReportError("decode ConfigurationAggregatorSpecAccountAggregationSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ConfigurationAggregatorSpecOrganizationAggregationSourceCodec struct {
}

func (ConfigurationAggregatorSpecOrganizationAggregationSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ConfigurationAggregatorSpecOrganizationAggregationSource)(ptr) == nil
}

func (ConfigurationAggregatorSpecOrganizationAggregationSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ConfigurationAggregatorSpecOrganizationAggregationSource)(ptr)
	var objs []ConfigurationAggregatorSpecOrganizationAggregationSource
	if obj != nil {
		objs = []ConfigurationAggregatorSpecOrganizationAggregationSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecOrganizationAggregationSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ConfigurationAggregatorSpecOrganizationAggregationSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ConfigurationAggregatorSpecOrganizationAggregationSource)(ptr) = ConfigurationAggregatorSpecOrganizationAggregationSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ConfigurationAggregatorSpecOrganizationAggregationSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationAggregatorSpecOrganizationAggregationSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ConfigurationAggregatorSpecOrganizationAggregationSource)(ptr) = objs[0]
			} else {
				*(*ConfigurationAggregatorSpecOrganizationAggregationSource)(ptr) = ConfigurationAggregatorSpecOrganizationAggregationSource{}
			}
		} else {
			*(*ConfigurationAggregatorSpecOrganizationAggregationSource)(ptr) = ConfigurationAggregatorSpecOrganizationAggregationSource{}
		}
	default:
		iter.ReportError("decode ConfigurationAggregatorSpecOrganizationAggregationSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ConfigurationRecorderSpecRecordingGroupCodec struct {
}

func (ConfigurationRecorderSpecRecordingGroupCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ConfigurationRecorderSpecRecordingGroup)(ptr) == nil
}

func (ConfigurationRecorderSpecRecordingGroupCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ConfigurationRecorderSpecRecordingGroup)(ptr)
	var objs []ConfigurationRecorderSpecRecordingGroup
	if obj != nil {
		objs = []ConfigurationRecorderSpecRecordingGroup{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationRecorderSpecRecordingGroup{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ConfigurationRecorderSpecRecordingGroupCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ConfigurationRecorderSpecRecordingGroup)(ptr) = ConfigurationRecorderSpecRecordingGroup{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ConfigurationRecorderSpecRecordingGroup

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationRecorderSpecRecordingGroup{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ConfigurationRecorderSpecRecordingGroup)(ptr) = objs[0]
			} else {
				*(*ConfigurationRecorderSpecRecordingGroup)(ptr) = ConfigurationRecorderSpecRecordingGroup{}
			}
		} else {
			*(*ConfigurationRecorderSpecRecordingGroup)(ptr) = ConfigurationRecorderSpecRecordingGroup{}
		}
	default:
		iter.ReportError("decode ConfigurationRecorderSpecRecordingGroup", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DeliveryChannelSpecSnapshotDeliveryPropertiesCodec struct {
}

func (DeliveryChannelSpecSnapshotDeliveryPropertiesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DeliveryChannelSpecSnapshotDeliveryProperties)(ptr) == nil
}

func (DeliveryChannelSpecSnapshotDeliveryPropertiesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DeliveryChannelSpecSnapshotDeliveryProperties)(ptr)
	var objs []DeliveryChannelSpecSnapshotDeliveryProperties
	if obj != nil {
		objs = []DeliveryChannelSpecSnapshotDeliveryProperties{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DeliveryChannelSpecSnapshotDeliveryProperties{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DeliveryChannelSpecSnapshotDeliveryPropertiesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DeliveryChannelSpecSnapshotDeliveryProperties)(ptr) = DeliveryChannelSpecSnapshotDeliveryProperties{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DeliveryChannelSpecSnapshotDeliveryProperties

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DeliveryChannelSpecSnapshotDeliveryProperties{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DeliveryChannelSpecSnapshotDeliveryProperties)(ptr) = objs[0]
			} else {
				*(*DeliveryChannelSpecSnapshotDeliveryProperties)(ptr) = DeliveryChannelSpecSnapshotDeliveryProperties{}
			}
		} else {
			*(*DeliveryChannelSpecSnapshotDeliveryProperties)(ptr) = DeliveryChannelSpecSnapshotDeliveryProperties{}
		}
	default:
		iter.ReportError("decode DeliveryChannelSpecSnapshotDeliveryProperties", "unexpected JSON type")
	}
}
