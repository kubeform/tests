/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ConfigRule struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigRuleSpec   `json:"spec,omitempty"`
	Status            ConfigRuleStatus `json:"status,omitempty"`
}

type ConfigRuleSpec struct {
	ConfigRuleSpec2 `json:",inline"`
	// +optional
	KubeformOutput ConfigRuleSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ConfigRuleSpecScope struct {
	// +optional
	ComplianceResourceID *string `json:"complianceResourceID,omitempty" tf:"compliance_resource_id"`
	// +optional
	// +kubebuilder:validation:MaxItems=100
	ComplianceResourceTypes []string `json:"complianceResourceTypes,omitempty" tf:"compliance_resource_types"`
	// +optional
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key"`
	// +optional
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value"`
}

type ConfigRuleSpecSourceSourceDetail struct {
	// +optional
	EventSource *string `json:"eventSource,omitempty" tf:"event_source"`
	// +optional
	MaximumExecutionFrequency *string `json:"maximumExecutionFrequency,omitempty" tf:"maximum_execution_frequency"`
	// +optional
	MessageType *string `json:"messageType,omitempty" tf:"message_type"`
}

type ConfigRuleSpecSource struct {
	Owner *string `json:"owner" tf:"owner"`
	// +optional
	// +kubebuilder:validation:MaxItems=25
	SourceDetail     []ConfigRuleSpecSourceSourceDetail `json:"sourceDetail,omitempty" tf:"source_detail"`
	SourceIdentifier *string                            `json:"sourceIdentifier" tf:"source_identifier"`
}

type ConfigRuleSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	InputParameters *string `json:"inputParameters,omitempty" tf:"input_parameters"`
	// +optional
	MaximumExecutionFrequency *string `json:"maximumExecutionFrequency,omitempty" tf:"maximum_execution_frequency"`
	Name                      *string `json:"name" tf:"name"`
	// +optional
	RuleID *string `json:"ruleID,omitempty" tf:"rule_id"`
	// +optional
	Scope  *ConfigRuleSpecScope  `json:"scope,omitempty" tf:"scope"`
	Source *ConfigRuleSpecSource `json:"source" tf:"source"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ConfigRuleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConfigRuleList is a list of ConfigRules
type ConfigRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ConfigRule CRD objects
	Items []ConfigRule `json:"items,omitempty"`
}
