/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecEncryptionConfiguration{}).Type1()):                                  DatabaseSpecEncryptionConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfiguration{}).Type1()):                                           WorkgroupSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfiguration{}).Type1()):                        WorkgroupSpecConfigurationResultConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{}).Type1()): WorkgroupSpecConfigurationResultConfigurationEncryptionConfigurationCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecEncryptionConfiguration{}).Type1()):                                  DatabaseSpecEncryptionConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfiguration{}).Type1()):                                           WorkgroupSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfiguration{}).Type1()):                        WorkgroupSpecConfigurationResultConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{}).Type1()): WorkgroupSpecConfigurationResultConfigurationEncryptionConfigurationCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DatabaseSpecEncryptionConfigurationCodec struct {
}

func (DatabaseSpecEncryptionConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecEncryptionConfiguration)(ptr) == nil
}

func (DatabaseSpecEncryptionConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecEncryptionConfiguration)(ptr)
	var objs []DatabaseSpecEncryptionConfiguration
	if obj != nil {
		objs = []DatabaseSpecEncryptionConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecEncryptionConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecEncryptionConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecEncryptionConfiguration)(ptr) = DatabaseSpecEncryptionConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecEncryptionConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecEncryptionConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecEncryptionConfiguration)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecEncryptionConfiguration)(ptr) = DatabaseSpecEncryptionConfiguration{}
			}
		} else {
			*(*DatabaseSpecEncryptionConfiguration)(ptr) = DatabaseSpecEncryptionConfiguration{}
		}
	default:
		iter.ReportError("decode DatabaseSpecEncryptionConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WorkgroupSpecConfigurationCodec struct {
}

func (WorkgroupSpecConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WorkgroupSpecConfiguration)(ptr) == nil
}

func (WorkgroupSpecConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WorkgroupSpecConfiguration)(ptr)
	var objs []WorkgroupSpecConfiguration
	if obj != nil {
		objs = []WorkgroupSpecConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WorkgroupSpecConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WorkgroupSpecConfiguration)(ptr) = WorkgroupSpecConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WorkgroupSpecConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WorkgroupSpecConfiguration)(ptr) = objs[0]
			} else {
				*(*WorkgroupSpecConfiguration)(ptr) = WorkgroupSpecConfiguration{}
			}
		} else {
			*(*WorkgroupSpecConfiguration)(ptr) = WorkgroupSpecConfiguration{}
		}
	default:
		iter.ReportError("decode WorkgroupSpecConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WorkgroupSpecConfigurationResultConfigurationCodec struct {
}

func (WorkgroupSpecConfigurationResultConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WorkgroupSpecConfigurationResultConfiguration)(ptr) == nil
}

func (WorkgroupSpecConfigurationResultConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WorkgroupSpecConfigurationResultConfiguration)(ptr)
	var objs []WorkgroupSpecConfigurationResultConfiguration
	if obj != nil {
		objs = []WorkgroupSpecConfigurationResultConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WorkgroupSpecConfigurationResultConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WorkgroupSpecConfigurationResultConfiguration)(ptr) = WorkgroupSpecConfigurationResultConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WorkgroupSpecConfigurationResultConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WorkgroupSpecConfigurationResultConfiguration)(ptr) = objs[0]
			} else {
				*(*WorkgroupSpecConfigurationResultConfiguration)(ptr) = WorkgroupSpecConfigurationResultConfiguration{}
			}
		} else {
			*(*WorkgroupSpecConfigurationResultConfiguration)(ptr) = WorkgroupSpecConfigurationResultConfiguration{}
		}
	default:
		iter.ReportError("decode WorkgroupSpecConfigurationResultConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WorkgroupSpecConfigurationResultConfigurationEncryptionConfigurationCodec struct {
}

func (WorkgroupSpecConfigurationResultConfigurationEncryptionConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration)(ptr) == nil
}

func (WorkgroupSpecConfigurationResultConfigurationEncryptionConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration)(ptr)
	var objs []WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration
	if obj != nil {
		objs = []WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WorkgroupSpecConfigurationResultConfigurationEncryptionConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration)(ptr) = WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration)(ptr) = objs[0]
			} else {
				*(*WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration)(ptr) = WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{}
			}
		} else {
			*(*WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration)(ptr) = WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration{}
		}
	default:
		iter.ReportError("decode WorkgroupSpecConfigurationResultConfigurationEncryptionConfiguration", "unexpected JSON type")
	}
}
