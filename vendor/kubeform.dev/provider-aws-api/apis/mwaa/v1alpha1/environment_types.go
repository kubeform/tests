/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Environment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvironmentSpec   `json:"spec,omitempty"`
	Status            EnvironmentStatus `json:"status,omitempty"`
}

type EnvironmentSpec struct {
	EnvironmentSpec2 `json:",inline"`
	// +optional
	KubeformOutput EnvironmentSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type EnvironmentSpecLastUpdatedError struct {
	// +optional
	ErrorCode *string `json:"errorCode,omitempty" tf:"error_code"`
	// +optional
	ErrorMessage *string `json:"errorMessage,omitempty" tf:"error_message"`
}

type EnvironmentSpecLastUpdated struct {
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	// +optional
	Error []EnvironmentSpecLastUpdatedError `json:"error,omitempty" tf:"error"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
}

type EnvironmentSpecLoggingConfigurationDagProcessingLogs struct {
	// +optional
	CloudWatchLogGroupArn *string `json:"cloudWatchLogGroupArn,omitempty" tf:"cloud_watch_log_group_arn"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level"`
}

type EnvironmentSpecLoggingConfigurationSchedulerLogs struct {
	// +optional
	CloudWatchLogGroupArn *string `json:"cloudWatchLogGroupArn,omitempty" tf:"cloud_watch_log_group_arn"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level"`
}

type EnvironmentSpecLoggingConfigurationTaskLogs struct {
	// +optional
	CloudWatchLogGroupArn *string `json:"cloudWatchLogGroupArn,omitempty" tf:"cloud_watch_log_group_arn"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level"`
}

type EnvironmentSpecLoggingConfigurationWebserverLogs struct {
	// +optional
	CloudWatchLogGroupArn *string `json:"cloudWatchLogGroupArn,omitempty" tf:"cloud_watch_log_group_arn"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level"`
}

type EnvironmentSpecLoggingConfigurationWorkerLogs struct {
	// +optional
	CloudWatchLogGroupArn *string `json:"cloudWatchLogGroupArn,omitempty" tf:"cloud_watch_log_group_arn"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level"`
}

type EnvironmentSpecLoggingConfiguration struct {
	// +optional
	DagProcessingLogs *EnvironmentSpecLoggingConfigurationDagProcessingLogs `json:"dagProcessingLogs,omitempty" tf:"dag_processing_logs"`
	// +optional
	SchedulerLogs *EnvironmentSpecLoggingConfigurationSchedulerLogs `json:"schedulerLogs,omitempty" tf:"scheduler_logs"`
	// +optional
	TaskLogs *EnvironmentSpecLoggingConfigurationTaskLogs `json:"taskLogs,omitempty" tf:"task_logs"`
	// +optional
	WebserverLogs *EnvironmentSpecLoggingConfigurationWebserverLogs `json:"webserverLogs,omitempty" tf:"webserver_logs"`
	// +optional
	WorkerLogs *EnvironmentSpecLoggingConfigurationWorkerLogs `json:"workerLogs,omitempty" tf:"worker_logs"`
}

type EnvironmentSpecNetworkConfiguration struct {
	// +kubebuilder:validation:MinItems=1
	SecurityGroupIDS []string `json:"securityGroupIDS" tf:"security_group_ids"`
	// +kubebuilder:validation:MinItems=2
	SubnetIDS []string `json:"subnetIDS" tf:"subnet_ids"`
}

type EnvironmentSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AirflowConfigurationOptions map[string]string `json:"-" sensitive:"true" tf:"airflow_configuration_options"`
	// +optional
	AirflowVersion *string `json:"airflowVersion,omitempty" tf:"airflow_version"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`
	DagS3Path *string `json:"dagS3Path" tf:"dag_s3_path"`
	// +optional
	EnvironmentClass *string `json:"environmentClass,omitempty" tf:"environment_class"`
	ExecutionRoleArn *string `json:"executionRoleArn" tf:"execution_role_arn"`
	// +optional
	KmsKey *string `json:"kmsKey,omitempty" tf:"kms_key"`
	// +optional
	LastUpdated []EnvironmentSpecLastUpdated `json:"lastUpdated,omitempty" tf:"last_updated"`
	// +optional
	LoggingConfiguration *EnvironmentSpecLoggingConfiguration `json:"loggingConfiguration,omitempty" tf:"logging_configuration"`
	// +optional
	MaxWorkers *int64 `json:"maxWorkers,omitempty" tf:"max_workers"`
	// +optional
	MinWorkers           *int64                               `json:"minWorkers,omitempty" tf:"min_workers"`
	Name                 *string                              `json:"name" tf:"name"`
	NetworkConfiguration *EnvironmentSpecNetworkConfiguration `json:"networkConfiguration" tf:"network_configuration"`
	// +optional
	PluginsS3ObjectVersion *string `json:"pluginsS3ObjectVersion,omitempty" tf:"plugins_s3_object_version"`
	// +optional
	PluginsS3Path *string `json:"pluginsS3Path,omitempty" tf:"plugins_s3_path"`
	// +optional
	RequirementsS3ObjectVersion *string `json:"requirementsS3ObjectVersion,omitempty" tf:"requirements_s3_object_version"`
	// +optional
	RequirementsS3Path *string `json:"requirementsS3Path,omitempty" tf:"requirements_s3_path"`
	// +optional
	ServiceRoleArn  *string `json:"serviceRoleArn,omitempty" tf:"service_role_arn"`
	SourceBucketArn *string `json:"sourceBucketArn" tf:"source_bucket_arn"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	WebserverAccessMode *string `json:"webserverAccessMode,omitempty" tf:"webserver_access_mode"`
	// +optional
	WebserverURL *string `json:"webserverURL,omitempty" tf:"webserver_url"`
	// +optional
	WeeklyMaintenanceWindowStart *string `json:"weeklyMaintenanceWindowStart,omitempty" tf:"weekly_maintenance_window_start"`
}

type EnvironmentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EnvironmentList is a list of Environments
type EnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Environment CRD objects
	Items []Environment `json:"items,omitempty"`
}
