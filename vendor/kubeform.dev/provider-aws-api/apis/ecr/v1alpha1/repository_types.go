/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Repository struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositorySpec   `json:"spec,omitempty"`
	Status            RepositoryStatus `json:"status,omitempty"`
}

type RepositorySpec struct {
	RepositorySpec2 `json:",inline"`
	// +optional
	KubeformOutput RepositorySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RepositorySpecEncryptionConfiguration struct {
	// +optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type"`
	// +optional
	KmsKey *string `json:"kmsKey,omitempty" tf:"kms_key"`
}

type RepositorySpecImageScanningConfiguration struct {
	ScanOnPush *bool `json:"scanOnPush" tf:"scan_on_push"`
}

type RepositorySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	EncryptionConfiguration []RepositorySpecEncryptionConfiguration `json:"encryptionConfiguration,omitempty" tf:"encryption_configuration"`
	// +optional
	ImageScanningConfiguration *RepositorySpecImageScanningConfiguration `json:"imageScanningConfiguration,omitempty" tf:"image_scanning_configuration"`
	// +optional
	ImageTagMutability *string `json:"imageTagMutability,omitempty" tf:"image_tag_mutability"`
	Name               *string `json:"name" tf:"name"`
	// +optional
	RegistryID *string `json:"registryID,omitempty" tf:"registry_id"`
	// +optional
	RepositoryURL *string `json:"repositoryURL,omitempty" tf:"repository_url"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type RepositoryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RepositoryList is a list of Repositorys
type RepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Repository CRD objects
	Items []Repository `json:"items,omitempty"`
}
