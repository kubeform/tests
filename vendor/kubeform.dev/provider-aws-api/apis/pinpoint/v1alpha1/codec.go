/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecCampaignHook{}).Type1()): AppSpecCampaignHookCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecLimits{}).Type1()):       AppSpecLimitsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecQuietTime{}).Type1()):    AppSpecQuietTimeCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecCampaignHook{}).Type1()): AppSpecCampaignHookCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecLimits{}).Type1()):       AppSpecLimitsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecQuietTime{}).Type1()):    AppSpecQuietTimeCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AppSpecCampaignHookCodec struct {
}

func (AppSpecCampaignHookCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecCampaignHook)(ptr) == nil
}

func (AppSpecCampaignHookCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecCampaignHook)(ptr)
	var objs []AppSpecCampaignHook
	if obj != nil {
		objs = []AppSpecCampaignHook{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecCampaignHook{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecCampaignHookCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecCampaignHook)(ptr) = AppSpecCampaignHook{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecCampaignHook

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecCampaignHook{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecCampaignHook)(ptr) = objs[0]
			} else {
				*(*AppSpecCampaignHook)(ptr) = AppSpecCampaignHook{}
			}
		} else {
			*(*AppSpecCampaignHook)(ptr) = AppSpecCampaignHook{}
		}
	default:
		iter.ReportError("decode AppSpecCampaignHook", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecLimitsCodec struct {
}

func (AppSpecLimitsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecLimits)(ptr) == nil
}

func (AppSpecLimitsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecLimits)(ptr)
	var objs []AppSpecLimits
	if obj != nil {
		objs = []AppSpecLimits{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecLimits{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecLimitsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecLimits)(ptr) = AppSpecLimits{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecLimits

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecLimits{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecLimits)(ptr) = objs[0]
			} else {
				*(*AppSpecLimits)(ptr) = AppSpecLimits{}
			}
		} else {
			*(*AppSpecLimits)(ptr) = AppSpecLimits{}
		}
	default:
		iter.ReportError("decode AppSpecLimits", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecQuietTimeCodec struct {
}

func (AppSpecQuietTimeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecQuietTime)(ptr) == nil
}

func (AppSpecQuietTimeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecQuietTime)(ptr)
	var objs []AppSpecQuietTime
	if obj != nil {
		objs = []AppSpecQuietTime{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecQuietTime{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecQuietTimeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecQuietTime)(ptr) = AppSpecQuietTime{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecQuietTime

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecQuietTime{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecQuietTime)(ptr) = objs[0]
			} else {
				*(*AppSpecQuietTime)(ptr) = AppSpecQuietTime{}
			}
		} else {
			*(*AppSpecQuietTime)(ptr) = AppSpecQuietTime{}
		}
	default:
		iter.ReportError("decode AppSpecQuietTime", "unexpected JSON type")
	}
}
