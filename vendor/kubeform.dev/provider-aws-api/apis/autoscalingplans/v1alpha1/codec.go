/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecApplicationSource{}).Type1()):                                                                 ScalingPlanSpecApplicationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{}).Type1()):                               ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{}).Type1()):                               ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{}).Type1()): ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{}).Type1()): ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecApplicationSource{}).Type1()):                                                                 ScalingPlanSpecApplicationSourceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{}).Type1()):                               ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{}).Type1()):                               ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{}).Type1()): ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{}).Type1()): ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ScalingPlanSpecApplicationSourceCodec struct {
}

func (ScalingPlanSpecApplicationSourceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScalingPlanSpecApplicationSource)(ptr) == nil
}

func (ScalingPlanSpecApplicationSourceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScalingPlanSpecApplicationSource)(ptr)
	var objs []ScalingPlanSpecApplicationSource
	if obj != nil {
		objs = []ScalingPlanSpecApplicationSource{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecApplicationSource{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScalingPlanSpecApplicationSourceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScalingPlanSpecApplicationSource)(ptr) = ScalingPlanSpecApplicationSource{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScalingPlanSpecApplicationSource

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecApplicationSource{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScalingPlanSpecApplicationSource)(ptr) = objs[0]
			} else {
				*(*ScalingPlanSpecApplicationSource)(ptr) = ScalingPlanSpecApplicationSource{}
			}
		} else {
			*(*ScalingPlanSpecApplicationSource)(ptr) = ScalingPlanSpecApplicationSource{}
		}
	default:
		iter.ReportError("decode ScalingPlanSpecApplicationSource", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecificationCodec struct {
}

func (ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification)(ptr) == nil
}

func (ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification)(ptr)
	var objs []ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification
	if obj != nil {
		objs = []ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification)(ptr) = objs[0]
			} else {
				*(*ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{}
			}
		} else {
			*(*ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification{}
		}
	default:
		iter.ReportError("decode ScalingPlanSpecScalingInstructionCustomizedLoadMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecificationCodec struct {
}

func (ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification)(ptr) == nil
}

func (ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification)(ptr)
	var objs []ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification
	if obj != nil {
		objs = []ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification)(ptr) = objs[0]
			} else {
				*(*ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{}
			}
		} else {
			*(*ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification{}
		}
	default:
		iter.ReportError("decode ScalingPlanSpecScalingInstructionPredefinedLoadMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationCodec struct {
}

func (ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification)(ptr) == nil
}

func (ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification)(ptr)
	var objs []ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification
	if obj != nil {
		objs = []ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification)(ptr) = objs[0]
			} else {
				*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{}
			}
		} else {
			*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification{}
		}
	default:
		iter.ReportError("decode ScalingPlanSpecScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationCodec struct {
}

func (ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification)(ptr) == nil
}

func (ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification)(ptr)
	var objs []ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification
	if obj != nil {
		objs = []ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification)(ptr) = objs[0]
			} else {
				*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{}
			}
		} else {
			*(*ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification)(ptr) = ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification{}
		}
	default:
		iter.ReportError("decode ScalingPlanSpecScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification", "unexpected JSON type")
	}
}
