/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BucketObject struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketObjectSpec   `json:"spec,omitempty"`
	Status            BucketObjectStatus `json:"status,omitempty"`
}

type BucketObjectSpec struct {
	BucketObjectSpec2 `json:",inline"`
	// +optional
	KubeformOutput BucketObjectSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type BucketObjectSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Acl    *string `json:"acl,omitempty" tf:"acl"`
	Bucket *string `json:"bucket" tf:"bucket"`
	// +optional
	BucketKeyEnabled *bool `json:"bucketKeyEnabled,omitempty" tf:"bucket_key_enabled"`
	// +optional
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control"`
	// +optional
	Content *string `json:"content,omitempty" tf:"content"`
	// +optional
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64"`
	// +optional
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition"`
	// +optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding"`
	// +optional
	ContentLanguage *string `json:"contentLanguage,omitempty" tf:"content_language"`
	// +optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`
	// +optional
	Etag *string `json:"etag,omitempty" tf:"etag"`
	// +optional
	ForceDestroy *bool   `json:"forceDestroy,omitempty" tf:"force_destroy"`
	Key          *string `json:"key" tf:"key"`
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	Metadata *map[string]string `json:"metadata,omitempty" tf:"metadata"`
	// +optional
	ObjectLockLegalHoldStatus *string `json:"objectLockLegalHoldStatus,omitempty" tf:"object_lock_legal_hold_status"`
	// +optional
	ObjectLockMode *string `json:"objectLockMode,omitempty" tf:"object_lock_mode"`
	// +optional
	ObjectLockRetainUntilDate *string `json:"objectLockRetainUntilDate,omitempty" tf:"object_lock_retain_until_date"`
	// +optional
	ServerSideEncryption *string `json:"serverSideEncryption,omitempty" tf:"server_side_encryption"`
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// +optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	VersionID *string `json:"versionID,omitempty" tf:"version_id"`
	// +optional
	WebsiteRedirect *string `json:"websiteRedirect,omitempty" tf:"website_redirect"`
}

type BucketObjectStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BucketObjectList is a list of BucketObjects
type BucketObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BucketObject CRD objects
	Items []BucketObject `json:"items,omitempty"`
}
