/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BucketAnalyticsConfiguration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketAnalyticsConfigurationSpec   `json:"spec,omitempty"`
	Status            BucketAnalyticsConfigurationStatus `json:"status,omitempty"`
}

type BucketAnalyticsConfigurationSpec struct {
	BucketAnalyticsConfigurationSpec2 `json:",inline"`
	// +optional
	KubeformOutput BucketAnalyticsConfigurationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type BucketAnalyticsConfigurationSpecFilter struct {
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type BucketAnalyticsConfigurationSpecStorageClassAnalysisDataExportDestinationS3BucketDestination struct {
	// +optional
	BucketAccountID *string `json:"bucketAccountID,omitempty" tf:"bucket_account_id"`
	BucketArn       *string `json:"bucketArn" tf:"bucket_arn"`
	// +optional
	Format *string `json:"format,omitempty" tf:"format"`
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
}

type BucketAnalyticsConfigurationSpecStorageClassAnalysisDataExportDestination struct {
	S3BucketDestination *BucketAnalyticsConfigurationSpecStorageClassAnalysisDataExportDestinationS3BucketDestination `json:"s3BucketDestination" tf:"s3_bucket_destination"`
}

type BucketAnalyticsConfigurationSpecStorageClassAnalysisDataExport struct {
	Destination *BucketAnalyticsConfigurationSpecStorageClassAnalysisDataExportDestination `json:"destination" tf:"destination"`
	// +optional
	OutputSchemaVersion *string `json:"outputSchemaVersion,omitempty" tf:"output_schema_version"`
}

type BucketAnalyticsConfigurationSpecStorageClassAnalysis struct {
	DataExport *BucketAnalyticsConfigurationSpecStorageClassAnalysisDataExport `json:"dataExport" tf:"data_export"`
}

type BucketAnalyticsConfigurationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Bucket *string `json:"bucket" tf:"bucket"`
	// +optional
	Filter *BucketAnalyticsConfigurationSpecFilter `json:"filter,omitempty" tf:"filter"`
	Name   *string                                 `json:"name" tf:"name"`
	// +optional
	StorageClassAnalysis *BucketAnalyticsConfigurationSpecStorageClassAnalysis `json:"storageClassAnalysis,omitempty" tf:"storage_class_analysis"`
}

type BucketAnalyticsConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BucketAnalyticsConfigurationList is a list of BucketAnalyticsConfigurations
type BucketAnalyticsConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BucketAnalyticsConfiguration CRD objects
	Items []BucketAnalyticsConfiguration `json:"items,omitempty"`
}
