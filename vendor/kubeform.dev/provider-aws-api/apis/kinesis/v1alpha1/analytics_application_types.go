/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AnalyticsApplication struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnalyticsApplicationSpec   `json:"spec,omitempty"`
	Status            AnalyticsApplicationStatus `json:"status,omitempty"`
}

type AnalyticsApplicationSpec struct {
	AnalyticsApplicationSpec2 `json:",inline"`
	// +optional
	KubeformOutput AnalyticsApplicationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type AnalyticsApplicationSpecCloudwatchLoggingOptions struct {
	// +optional
	ID           *string `json:"ID,omitempty" tf:"id"`
	LogStreamArn *string `json:"logStreamArn" tf:"log_stream_arn"`
	RoleArn      *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecInputsKinesisFirehose struct {
	ResourceArn *string `json:"resourceArn" tf:"resource_arn"`
	RoleArn     *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecInputsKinesisStream struct {
	ResourceArn *string `json:"resourceArn" tf:"resource_arn"`
	RoleArn     *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecInputsParallelism struct {
	// +optional
	Count *int64 `json:"count,omitempty" tf:"count"`
}

type AnalyticsApplicationSpecInputsProcessingConfigurationLambda struct {
	ResourceArn *string `json:"resourceArn" tf:"resource_arn"`
	RoleArn     *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecInputsProcessingConfiguration struct {
	Lambda *AnalyticsApplicationSpecInputsProcessingConfigurationLambda `json:"lambda" tf:"lambda"`
}

type AnalyticsApplicationSpecInputsSchemaRecordColumns struct {
	// +optional
	Mapping *string `json:"mapping,omitempty" tf:"mapping"`
	Name    *string `json:"name" tf:"name"`
	SqlType *string `json:"sqlType" tf:"sql_type"`
}

type AnalyticsApplicationSpecInputsSchemaRecordFormatMappingParametersCsv struct {
	RecordColumnDelimiter *string `json:"recordColumnDelimiter" tf:"record_column_delimiter"`
	RecordRowDelimiter    *string `json:"recordRowDelimiter" tf:"record_row_delimiter"`
}

type AnalyticsApplicationSpecInputsSchemaRecordFormatMappingParametersJson struct {
	RecordRowPath *string `json:"recordRowPath" tf:"record_row_path"`
}

type AnalyticsApplicationSpecInputsSchemaRecordFormatMappingParameters struct {
	// +optional
	Csv *AnalyticsApplicationSpecInputsSchemaRecordFormatMappingParametersCsv `json:"csv,omitempty" tf:"csv"`
	// +optional
	Json *AnalyticsApplicationSpecInputsSchemaRecordFormatMappingParametersJson `json:"json,omitempty" tf:"json"`
}

type AnalyticsApplicationSpecInputsSchemaRecordFormat struct {
	// +optional
	MappingParameters *AnalyticsApplicationSpecInputsSchemaRecordFormatMappingParameters `json:"mappingParameters,omitempty" tf:"mapping_parameters"`
	// +optional
	RecordFormatType *string `json:"recordFormatType,omitempty" tf:"record_format_type"`
}

type AnalyticsApplicationSpecInputsSchema struct {
	// +kubebuilder:validation:MaxItems=1000
	RecordColumns []AnalyticsApplicationSpecInputsSchemaRecordColumns `json:"recordColumns" tf:"record_columns"`
	// +optional
	RecordEncoding *string                                           `json:"recordEncoding,omitempty" tf:"record_encoding"`
	RecordFormat   *AnalyticsApplicationSpecInputsSchemaRecordFormat `json:"recordFormat" tf:"record_format"`
}

type AnalyticsApplicationSpecInputsStartingPositionConfiguration struct {
	// +optional
	StartingPosition *string `json:"startingPosition,omitempty" tf:"starting_position"`
}

type AnalyticsApplicationSpecInputs struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	KinesisFirehose *AnalyticsApplicationSpecInputsKinesisFirehose `json:"kinesisFirehose,omitempty" tf:"kinesis_firehose"`
	// +optional
	KinesisStream *AnalyticsApplicationSpecInputsKinesisStream `json:"kinesisStream,omitempty" tf:"kinesis_stream"`
	NamePrefix    *string                                      `json:"namePrefix" tf:"name_prefix"`
	// +optional
	Parallelism *AnalyticsApplicationSpecInputsParallelism `json:"parallelism,omitempty" tf:"parallelism"`
	// +optional
	ProcessingConfiguration *AnalyticsApplicationSpecInputsProcessingConfiguration `json:"processingConfiguration,omitempty" tf:"processing_configuration"`
	Schema                  *AnalyticsApplicationSpecInputsSchema                  `json:"schema" tf:"schema"`
	// +optional
	StartingPositionConfiguration []AnalyticsApplicationSpecInputsStartingPositionConfiguration `json:"startingPositionConfiguration,omitempty" tf:"starting_position_configuration"`
	// +optional
	StreamNames []string `json:"streamNames,omitempty" tf:"stream_names"`
}

type AnalyticsApplicationSpecOutputsKinesisFirehose struct {
	ResourceArn *string `json:"resourceArn" tf:"resource_arn"`
	RoleArn     *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecOutputsKinesisStream struct {
	ResourceArn *string `json:"resourceArn" tf:"resource_arn"`
	RoleArn     *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecOutputsLambda struct {
	ResourceArn *string `json:"resourceArn" tf:"resource_arn"`
	RoleArn     *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecOutputsSchema struct {
	RecordFormatType *string `json:"recordFormatType" tf:"record_format_type"`
}

type AnalyticsApplicationSpecOutputs struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	KinesisFirehose *AnalyticsApplicationSpecOutputsKinesisFirehose `json:"kinesisFirehose,omitempty" tf:"kinesis_firehose"`
	// +optional
	KinesisStream *AnalyticsApplicationSpecOutputsKinesisStream `json:"kinesisStream,omitempty" tf:"kinesis_stream"`
	// +optional
	Lambda *AnalyticsApplicationSpecOutputsLambda `json:"lambda,omitempty" tf:"lambda"`
	Name   *string                                `json:"name" tf:"name"`
	Schema *AnalyticsApplicationSpecOutputsSchema `json:"schema" tf:"schema"`
}

type AnalyticsApplicationSpecReferenceDataSourcesS3 struct {
	BucketArn *string `json:"bucketArn" tf:"bucket_arn"`
	FileKey   *string `json:"fileKey" tf:"file_key"`
	RoleArn   *string `json:"roleArn" tf:"role_arn"`
}

type AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordColumns struct {
	// +optional
	Mapping *string `json:"mapping,omitempty" tf:"mapping"`
	Name    *string `json:"name" tf:"name"`
	SqlType *string `json:"sqlType" tf:"sql_type"`
}

type AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormatMappingParametersCsv struct {
	RecordColumnDelimiter *string `json:"recordColumnDelimiter" tf:"record_column_delimiter"`
	RecordRowDelimiter    *string `json:"recordRowDelimiter" tf:"record_row_delimiter"`
}

type AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormatMappingParametersJson struct {
	RecordRowPath *string `json:"recordRowPath" tf:"record_row_path"`
}

type AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormatMappingParameters struct {
	// +optional
	Csv *AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormatMappingParametersCsv `json:"csv,omitempty" tf:"csv"`
	// +optional
	Json *AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormatMappingParametersJson `json:"json,omitempty" tf:"json"`
}

type AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormat struct {
	// +optional
	MappingParameters *AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormatMappingParameters `json:"mappingParameters,omitempty" tf:"mapping_parameters"`
	// +optional
	RecordFormatType *string `json:"recordFormatType,omitempty" tf:"record_format_type"`
}

type AnalyticsApplicationSpecReferenceDataSourcesSchema struct {
	// +kubebuilder:validation:MaxItems=1000
	RecordColumns []AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordColumns `json:"recordColumns" tf:"record_columns"`
	// +optional
	RecordEncoding *string                                                         `json:"recordEncoding,omitempty" tf:"record_encoding"`
	RecordFormat   *AnalyticsApplicationSpecReferenceDataSourcesSchemaRecordFormat `json:"recordFormat" tf:"record_format"`
}

type AnalyticsApplicationSpecReferenceDataSources struct {
	// +optional
	ID        *string                                             `json:"ID,omitempty" tf:"id"`
	S3        *AnalyticsApplicationSpecReferenceDataSourcesS3     `json:"s3" tf:"s3"`
	Schema    *AnalyticsApplicationSpecReferenceDataSourcesSchema `json:"schema" tf:"schema"`
	TableName *string                                             `json:"tableName" tf:"table_name"`
}

type AnalyticsApplicationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CloudwatchLoggingOptions *AnalyticsApplicationSpecCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	Code *string `json:"code,omitempty" tf:"code"`
	// +optional
	CreateTimestamp *string `json:"createTimestamp,omitempty" tf:"create_timestamp"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Inputs *AnalyticsApplicationSpecInputs `json:"inputs,omitempty" tf:"inputs"`
	// +optional
	LastUpdateTimestamp *string `json:"lastUpdateTimestamp,omitempty" tf:"last_update_timestamp"`
	Name                *string `json:"name" tf:"name"`
	// +optional
	// +kubebuilder:validation:MaxItems=3
	Outputs []AnalyticsApplicationSpecOutputs `json:"outputs,omitempty" tf:"outputs"`
	// +optional
	ReferenceDataSources *AnalyticsApplicationSpecReferenceDataSources `json:"referenceDataSources,omitempty" tf:"reference_data_sources"`
	// +optional
	StartApplication *bool `json:"startApplication,omitempty" tf:"start_application"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Version *int64 `json:"version,omitempty" tf:"version"`
}

type AnalyticsApplicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AnalyticsApplicationList is a list of AnalyticsApplications
type AnalyticsApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AnalyticsApplication CRD objects
	Items []AnalyticsApplication `json:"items,omitempty"`
}
