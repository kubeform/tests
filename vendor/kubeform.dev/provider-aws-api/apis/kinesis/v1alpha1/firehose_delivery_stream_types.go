/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type FirehoseDeliveryStream struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirehoseDeliveryStreamSpec   `json:"spec,omitempty"`
	Status            FirehoseDeliveryStreamStatus `json:"status,omitempty"`
}

type FirehoseDeliveryStreamSpec struct {
	FirehoseDeliveryStreamSpec2 `json:",inline"`
	// +optional
	KubeformOutput FirehoseDeliveryStreamSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type FirehoseDeliveryStreamSpecElasticsearchConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecElasticsearchConfigurationProcessingConfigurationProcessorsParameters struct {
	ParameterName  *string `json:"parameterName" tf:"parameter_name"`
	ParameterValue *string `json:"parameterValue" tf:"parameter_value"`
}

type FirehoseDeliveryStreamSpecElasticsearchConfigurationProcessingConfigurationProcessors struct {
	// +optional
	Parameters []FirehoseDeliveryStreamSpecElasticsearchConfigurationProcessingConfigurationProcessorsParameters `json:"parameters,omitempty" tf:"parameters"`
	Type       *string                                                                                           `json:"type" tf:"type"`
}

type FirehoseDeliveryStreamSpecElasticsearchConfigurationProcessingConfiguration struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Processors []FirehoseDeliveryStreamSpecElasticsearchConfigurationProcessingConfigurationProcessors `json:"processors,omitempty" tf:"processors"`
}

type FirehoseDeliveryStreamSpecElasticsearchConfigurationVpcConfig struct {
	RoleArn          *string  `json:"roleArn" tf:"role_arn"`
	SecurityGroupIDS []string `json:"securityGroupIDS" tf:"security_group_ids"`
	SubnetIDS        []string `json:"subnetIDS" tf:"subnet_ids"`
	// +optional
	VpcID *string `json:"vpcID,omitempty" tf:"vpc_id"`
}

type FirehoseDeliveryStreamSpecElasticsearchConfiguration struct {
	// +optional
	BufferingInterval *int64 `json:"bufferingInterval,omitempty" tf:"buffering_interval"`
	// +optional
	BufferingSize *int64 `json:"bufferingSize,omitempty" tf:"buffering_size"`
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecElasticsearchConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	ClusterEndpoint *string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint"`
	// +optional
	DomainArn *string `json:"domainArn,omitempty" tf:"domain_arn"`
	IndexName *string `json:"indexName" tf:"index_name"`
	// +optional
	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty" tf:"index_rotation_period"`
	// +optional
	ProcessingConfiguration *FirehoseDeliveryStreamSpecElasticsearchConfigurationProcessingConfiguration `json:"processingConfiguration,omitempty" tf:"processing_configuration"`
	// +optional
	RetryDuration *int64  `json:"retryDuration,omitempty" tf:"retry_duration"`
	RoleArn       *string `json:"roleArn" tf:"role_arn"`
	// +optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
	// +optional
	TypeName *string `json:"typeName,omitempty" tf:"type_name"`
	// +optional
	VpcConfig *FirehoseDeliveryStreamSpecElasticsearchConfigurationVpcConfig `json:"vpcConfig,omitempty" tf:"vpc_config"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJSONSerDe struct {
	// +optional
	TimestampFormats []string `json:"timestampFormats,omitempty" tf:"timestamp_formats"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJSONSerDe struct {
	// +optional
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive"`
	// +optional
	ColumnToJSONKeyMappings *map[string]string `json:"columnToJSONKeyMappings,omitempty" tf:"column_to_json_key_mappings"`
	// +optional
	ConvertDotsInJSONKeysToUnderscores *bool `json:"convertDotsInJSONKeysToUnderscores,omitempty" tf:"convert_dots_in_json_keys_to_underscores"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer struct {
	// +optional
	HiveJSONSerDe *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJSONSerDe `json:"hiveJSONSerDe,omitempty" tf:"hive_json_ser_de"`
	// +optional
	OpenXJSONSerDe *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJSONSerDe `json:"openXJSONSerDe,omitempty" tf:"open_x_json_ser_de"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration struct {
	Deserializer *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer `json:"deserializer" tf:"deserializer"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe struct {
	// +optional
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty" tf:"block_size_bytes"`
	// +optional
	BloomFilterColumns []string `json:"bloomFilterColumns,omitempty" tf:"bloom_filter_columns"`
	// +optional
	BloomFilterFalsePositiveProbability *float64 `json:"bloomFilterFalsePositiveProbability,omitempty" tf:"bloom_filter_false_positive_probability"`
	// +optional
	Compression *string `json:"compression,omitempty" tf:"compression"`
	// +optional
	DictionaryKeyThreshold *float64 `json:"dictionaryKeyThreshold,omitempty" tf:"dictionary_key_threshold"`
	// +optional
	EnablePadding *bool `json:"enablePadding,omitempty" tf:"enable_padding"`
	// +optional
	FormatVersion *string `json:"formatVersion,omitempty" tf:"format_version"`
	// +optional
	PaddingTolerance *float64 `json:"paddingTolerance,omitempty" tf:"padding_tolerance"`
	// +optional
	RowIndexStride *int64 `json:"rowIndexStride,omitempty" tf:"row_index_stride"`
	// +optional
	StripeSizeBytes *int64 `json:"stripeSizeBytes,omitempty" tf:"stripe_size_bytes"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe struct {
	// +optional
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty" tf:"block_size_bytes"`
	// +optional
	Compression *string `json:"compression,omitempty" tf:"compression"`
	// +optional
	EnableDictionaryCompression *bool `json:"enableDictionaryCompression,omitempty" tf:"enable_dictionary_compression"`
	// +optional
	MaxPaddingBytes *int64 `json:"maxPaddingBytes,omitempty" tf:"max_padding_bytes"`
	// +optional
	PageSizeBytes *int64 `json:"pageSizeBytes,omitempty" tf:"page_size_bytes"`
	// +optional
	WriterVersion *string `json:"writerVersion,omitempty" tf:"writer_version"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer struct {
	// +optional
	OrcSerDe *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe `json:"orcSerDe,omitempty" tf:"orc_ser_de"`
	// +optional
	ParquetSerDe *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe `json:"parquetSerDe,omitempty" tf:"parquet_ser_de"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration struct {
	Serializer *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer `json:"serializer" tf:"serializer"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration struct {
	// +optional
	CatalogID    *string `json:"catalogID,omitempty" tf:"catalog_id"`
	DatabaseName *string `json:"databaseName" tf:"database_name"`
	// +optional
	Region    *string `json:"region,omitempty" tf:"region"`
	RoleArn   *string `json:"roleArn" tf:"role_arn"`
	TableName *string `json:"tableName" tf:"table_name"`
	// +optional
	VersionID *string `json:"versionID,omitempty" tf:"version_id"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfiguration struct {
	// +optional
	Enabled                   *bool                                                                                                        `json:"enabled,omitempty" tf:"enabled"`
	InputFormatConfiguration  *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration  `json:"inputFormatConfiguration" tf:"input_format_configuration"`
	OutputFormatConfiguration *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration `json:"outputFormatConfiguration" tf:"output_format_configuration"`
	SchemaConfiguration       *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration       `json:"schemaConfiguration" tf:"schema_configuration"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationProcessingConfigurationProcessorsParameters struct {
	ParameterName  *string `json:"parameterName" tf:"parameter_name"`
	ParameterValue *string `json:"parameterValue" tf:"parameter_value"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationProcessingConfigurationProcessors struct {
	// +optional
	Parameters []FirehoseDeliveryStreamSpecExtendedS3ConfigurationProcessingConfigurationProcessorsParameters `json:"parameters,omitempty" tf:"parameters"`
	Type       *string                                                                                        `json:"type" tf:"type"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationProcessingConfiguration struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Processors []FirehoseDeliveryStreamSpecExtendedS3ConfigurationProcessingConfigurationProcessors `json:"processors,omitempty" tf:"processors"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecExtendedS3ConfigurationS3BackupConfiguration struct {
	BucketArn *string `json:"bucketArn" tf:"bucket_arn"`
	// +optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`
	// +optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`
	// +optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`
	// +optional
	Prefix  *string `json:"prefix,omitempty" tf:"prefix"`
	RoleArn *string `json:"roleArn" tf:"role_arn"`
}

type FirehoseDeliveryStreamSpecExtendedS3Configuration struct {
	BucketArn *string `json:"bucketArn" tf:"bucket_arn"`
	// +optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`
	// +optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecExtendedS3ConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`
	// +optional
	DataFormatConversionConfiguration *FirehoseDeliveryStreamSpecExtendedS3ConfigurationDataFormatConversionConfiguration `json:"dataFormatConversionConfiguration,omitempty" tf:"data_format_conversion_configuration"`
	// +optional
	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty" tf:"error_output_prefix"`
	// +optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`
	// +optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
	// +optional
	ProcessingConfiguration *FirehoseDeliveryStreamSpecExtendedS3ConfigurationProcessingConfiguration `json:"processingConfiguration,omitempty" tf:"processing_configuration"`
	RoleArn                 *string                                                                   `json:"roleArn" tf:"role_arn"`
	// +optional
	S3BackupConfiguration *FirehoseDeliveryStreamSpecExtendedS3ConfigurationS3BackupConfiguration `json:"s3BackupConfiguration,omitempty" tf:"s3_backup_configuration"`
	// +optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
}

type FirehoseDeliveryStreamSpecHttpEndpointConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecHttpEndpointConfigurationProcessingConfigurationProcessorsParameters struct {
	ParameterName  *string `json:"parameterName" tf:"parameter_name"`
	ParameterValue *string `json:"parameterValue" tf:"parameter_value"`
}

type FirehoseDeliveryStreamSpecHttpEndpointConfigurationProcessingConfigurationProcessors struct {
	// +optional
	Parameters []FirehoseDeliveryStreamSpecHttpEndpointConfigurationProcessingConfigurationProcessorsParameters `json:"parameters,omitempty" tf:"parameters"`
	Type       *string                                                                                          `json:"type" tf:"type"`
}

type FirehoseDeliveryStreamSpecHttpEndpointConfigurationProcessingConfiguration struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Processors []FirehoseDeliveryStreamSpecHttpEndpointConfigurationProcessingConfigurationProcessors `json:"processors,omitempty" tf:"processors"`
}

type FirehoseDeliveryStreamSpecHttpEndpointConfigurationRequestConfigurationCommonAttributes struct {
	Name  *string `json:"name" tf:"name"`
	Value *string `json:"value" tf:"value"`
}

type FirehoseDeliveryStreamSpecHttpEndpointConfigurationRequestConfiguration struct {
	// +optional
	CommonAttributes []FirehoseDeliveryStreamSpecHttpEndpointConfigurationRequestConfigurationCommonAttributes `json:"commonAttributes,omitempty" tf:"common_attributes"`
	// +optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding"`
}

type FirehoseDeliveryStreamSpecHttpEndpointConfiguration struct {
	// +optional
	AccessKey *string `json:"-" sensitive:"true" tf:"access_key"`
	// +optional
	BufferingInterval *int64 `json:"bufferingInterval,omitempty" tf:"buffering_interval"`
	// +optional
	BufferingSize *int64 `json:"bufferingSize,omitempty" tf:"buffering_size"`
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecHttpEndpointConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	ProcessingConfiguration *FirehoseDeliveryStreamSpecHttpEndpointConfigurationProcessingConfiguration `json:"processingConfiguration,omitempty" tf:"processing_configuration"`
	// +optional
	RequestConfiguration *FirehoseDeliveryStreamSpecHttpEndpointConfigurationRequestConfiguration `json:"requestConfiguration,omitempty" tf:"request_configuration"`
	// +optional
	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`
	// +optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn"`
	// +optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
	Url          *string `json:"url" tf:"url"`
}

type FirehoseDeliveryStreamSpecKinesisSourceConfiguration struct {
	KinesisStreamArn *string `json:"kinesisStreamArn" tf:"kinesis_stream_arn"`
	RoleArn          *string `json:"roleArn" tf:"role_arn"`
}

type FirehoseDeliveryStreamSpecRedshiftConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecRedshiftConfigurationProcessingConfigurationProcessorsParameters struct {
	ParameterName  *string `json:"parameterName" tf:"parameter_name"`
	ParameterValue *string `json:"parameterValue" tf:"parameter_value"`
}

type FirehoseDeliveryStreamSpecRedshiftConfigurationProcessingConfigurationProcessors struct {
	// +optional
	Parameters []FirehoseDeliveryStreamSpecRedshiftConfigurationProcessingConfigurationProcessorsParameters `json:"parameters,omitempty" tf:"parameters"`
	Type       *string                                                                                      `json:"type" tf:"type"`
}

type FirehoseDeliveryStreamSpecRedshiftConfigurationProcessingConfiguration struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Processors []FirehoseDeliveryStreamSpecRedshiftConfigurationProcessingConfigurationProcessors `json:"processors,omitempty" tf:"processors"`
}

type FirehoseDeliveryStreamSpecRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecRedshiftConfigurationS3BackupConfiguration struct {
	BucketArn *string `json:"bucketArn" tf:"bucket_arn"`
	// +optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`
	// +optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`
	// +optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`
	// +optional
	Prefix  *string `json:"prefix,omitempty" tf:"prefix"`
	RoleArn *string `json:"roleArn" tf:"role_arn"`
}

type FirehoseDeliveryStreamSpecRedshiftConfiguration struct {
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecRedshiftConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	ClusterJdbcurl           *string                                                                  `json:"clusterJdbcurl" tf:"cluster_jdbcurl"`
	// +optional
	CopyOptions *string `json:"copyOptions,omitempty" tf:"copy_options"`
	// +optional
	DataTableColumns *string `json:"dataTableColumns,omitempty" tf:"data_table_columns"`
	DataTableName    *string `json:"dataTableName" tf:"data_table_name"`
	Password         *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	ProcessingConfiguration *FirehoseDeliveryStreamSpecRedshiftConfigurationProcessingConfiguration `json:"processingConfiguration,omitempty" tf:"processing_configuration"`
	// +optional
	RetryDuration *int64  `json:"retryDuration,omitempty" tf:"retry_duration"`
	RoleArn       *string `json:"roleArn" tf:"role_arn"`
	// +optional
	S3BackupConfiguration *FirehoseDeliveryStreamSpecRedshiftConfigurationS3BackupConfiguration `json:"s3BackupConfiguration,omitempty" tf:"s3_backup_configuration"`
	// +optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
	Username     *string `json:"username" tf:"username"`
}

type FirehoseDeliveryStreamSpecS3ConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecS3Configuration struct {
	BucketArn *string `json:"bucketArn" tf:"bucket_arn"`
	// +optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`
	// +optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecS3ConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`
	// +optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`
	// +optional
	Prefix  *string `json:"prefix,omitempty" tf:"prefix"`
	RoleArn *string `json:"roleArn" tf:"role_arn"`
}

type FirehoseDeliveryStreamSpecServerSideEncryption struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	KeyArn *string `json:"keyArn,omitempty" tf:"key_arn"`
	// +optional
	KeyType *string `json:"keyType,omitempty" tf:"key_type"`
}

type FirehoseDeliveryStreamSpecSplunkConfigurationCloudwatchLoggingOptions struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`
	// +optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type FirehoseDeliveryStreamSpecSplunkConfigurationProcessingConfigurationProcessorsParameters struct {
	ParameterName  *string `json:"parameterName" tf:"parameter_name"`
	ParameterValue *string `json:"parameterValue" tf:"parameter_value"`
}

type FirehoseDeliveryStreamSpecSplunkConfigurationProcessingConfigurationProcessors struct {
	// +optional
	Parameters []FirehoseDeliveryStreamSpecSplunkConfigurationProcessingConfigurationProcessorsParameters `json:"parameters,omitempty" tf:"parameters"`
	Type       *string                                                                                    `json:"type" tf:"type"`
}

type FirehoseDeliveryStreamSpecSplunkConfigurationProcessingConfiguration struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Processors []FirehoseDeliveryStreamSpecSplunkConfigurationProcessingConfigurationProcessors `json:"processors,omitempty" tf:"processors"`
}

type FirehoseDeliveryStreamSpecSplunkConfiguration struct {
	// +optional
	CloudwatchLoggingOptions *FirehoseDeliveryStreamSpecSplunkConfigurationCloudwatchLoggingOptions `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`
	// +optional
	HecAcknowledgmentTimeout *int64  `json:"hecAcknowledgmentTimeout,omitempty" tf:"hec_acknowledgment_timeout"`
	HecEndpoint              *string `json:"hecEndpoint" tf:"hec_endpoint"`
	// +optional
	HecEndpointType *string `json:"hecEndpointType,omitempty" tf:"hec_endpoint_type"`
	HecToken        *string `json:"hecToken" tf:"hec_token"`
	// +optional
	ProcessingConfiguration *FirehoseDeliveryStreamSpecSplunkConfigurationProcessingConfiguration `json:"processingConfiguration,omitempty" tf:"processing_configuration"`
	// +optional
	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`
	// +optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
}

type FirehoseDeliveryStreamSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	Arn         *string `json:"arn,omitempty" tf:"arn"`
	Destination *string `json:"destination" tf:"destination"`
	// +optional
	DestinationID *string `json:"destinationID,omitempty" tf:"destination_id"`
	// +optional
	ElasticsearchConfiguration *FirehoseDeliveryStreamSpecElasticsearchConfiguration `json:"elasticsearchConfiguration,omitempty" tf:"elasticsearch_configuration"`
	// +optional
	ExtendedS3Configuration *FirehoseDeliveryStreamSpecExtendedS3Configuration `json:"extendedS3Configuration,omitempty" tf:"extended_s3_configuration"`
	// +optional
	HttpEndpointConfiguration *FirehoseDeliveryStreamSpecHttpEndpointConfiguration `json:"httpEndpointConfiguration,omitempty" tf:"http_endpoint_configuration"`
	// +optional
	KinesisSourceConfiguration *FirehoseDeliveryStreamSpecKinesisSourceConfiguration `json:"kinesisSourceConfiguration,omitempty" tf:"kinesis_source_configuration"`
	Name                       *string                                               `json:"name" tf:"name"`
	// +optional
	RedshiftConfiguration *FirehoseDeliveryStreamSpecRedshiftConfiguration `json:"redshiftConfiguration,omitempty" tf:"redshift_configuration"`
	// +optional
	S3Configuration *FirehoseDeliveryStreamSpecS3Configuration `json:"s3Configuration,omitempty" tf:"s3_configuration"`
	// +optional
	ServerSideEncryption *FirehoseDeliveryStreamSpecServerSideEncryption `json:"serverSideEncryption,omitempty" tf:"server_side_encryption"`
	// +optional
	SplunkConfiguration *FirehoseDeliveryStreamSpecSplunkConfiguration `json:"splunkConfiguration,omitempty" tf:"splunk_configuration"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	VersionID *string `json:"versionID,omitempty" tf:"version_id"`
}

type FirehoseDeliveryStreamStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FirehoseDeliveryStreamList is a list of FirehoseDeliveryStreams
type FirehoseDeliveryStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of FirehoseDeliveryStream CRD objects
	Items []FirehoseDeliveryStream `json:"items,omitempty"`
}
