/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Role struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleSpec   `json:"spec,omitempty"`
	Status            RoleStatus `json:"status,omitempty"`
}

type RoleSpec struct {
	RoleSpec2 `json:",inline"`
	// +optional
	KubeformOutput RoleSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RoleSpecInlinePolicy struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
}

type RoleSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn              *string `json:"arn,omitempty" tf:"arn"`
	AssumeRolePolicy *string `json:"assumeRolePolicy" tf:"assume_role_policy"`
	// +optional
	CreateDate *string `json:"createDate,omitempty" tf:"create_date"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	ForceDetachPolicies *bool `json:"forceDetachPolicies,omitempty" tf:"force_detach_policies"`
	// +optional
	InlinePolicy []RoleSpecInlinePolicy `json:"inlinePolicy,omitempty" tf:"inline_policy"`
	// +optional
	ManagedPolicyArns []string `json:"managedPolicyArns,omitempty" tf:"managed_policy_arns"`
	// +optional
	MaxSessionDuration *int64 `json:"maxSessionDuration,omitempty" tf:"max_session_duration"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	PermissionsBoundary *string `json:"permissionsBoundary,omitempty" tf:"permissions_boundary"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UniqueID *string `json:"uniqueID,omitempty" tf:"unique_id"`
}

type RoleStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RoleList is a list of Roles
type RoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Role CRD objects
	Items []Role `json:"items,omitempty"`
}
