/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecDynamodbConfig{}).Type1()):                                      DatasourceSpecDynamodbConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecElasticsearchConfig{}).Type1()):                                 DatasourceSpecElasticsearchConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecHttpConfig{}).Type1()):                                          DatasourceSpecHttpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecLambdaConfig{}).Type1()):                                        DatasourceSpecLambdaConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{}).Type1()): GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{}).Type1()):      GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecLogConfig{}).Type1()):                                           GraphqlAPISpecLogConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecOpenidConnectConfig{}).Type1()):                                 GraphqlAPISpecOpenidConnectConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecUserPoolConfig{}).Type1()):                                      GraphqlAPISpecUserPoolConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecCachingConfig{}).Type1()):                                         ResolverSpecCachingConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecPipelineConfig{}).Type1()):                                        ResolverSpecPipelineConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecDynamodbConfig{}).Type1()):                                      DatasourceSpecDynamodbConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecElasticsearchConfig{}).Type1()):                                 DatasourceSpecElasticsearchConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecHttpConfig{}).Type1()):                                          DatasourceSpecHttpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecLambdaConfig{}).Type1()):                                        DatasourceSpecLambdaConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{}).Type1()): GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{}).Type1()):      GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecLogConfig{}).Type1()):                                           GraphqlAPISpecLogConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecOpenidConnectConfig{}).Type1()):                                 GraphqlAPISpecOpenidConnectConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecUserPoolConfig{}).Type1()):                                      GraphqlAPISpecUserPoolConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecCachingConfig{}).Type1()):                                         ResolverSpecCachingConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecPipelineConfig{}).Type1()):                                        ResolverSpecPipelineConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DatasourceSpecDynamodbConfigCodec struct {
}

func (DatasourceSpecDynamodbConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatasourceSpecDynamodbConfig)(ptr) == nil
}

func (DatasourceSpecDynamodbConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatasourceSpecDynamodbConfig)(ptr)
	var objs []DatasourceSpecDynamodbConfig
	if obj != nil {
		objs = []DatasourceSpecDynamodbConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecDynamodbConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatasourceSpecDynamodbConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatasourceSpecDynamodbConfig)(ptr) = DatasourceSpecDynamodbConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatasourceSpecDynamodbConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecDynamodbConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatasourceSpecDynamodbConfig)(ptr) = objs[0]
			} else {
				*(*DatasourceSpecDynamodbConfig)(ptr) = DatasourceSpecDynamodbConfig{}
			}
		} else {
			*(*DatasourceSpecDynamodbConfig)(ptr) = DatasourceSpecDynamodbConfig{}
		}
	default:
		iter.ReportError("decode DatasourceSpecDynamodbConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatasourceSpecElasticsearchConfigCodec struct {
}

func (DatasourceSpecElasticsearchConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatasourceSpecElasticsearchConfig)(ptr) == nil
}

func (DatasourceSpecElasticsearchConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatasourceSpecElasticsearchConfig)(ptr)
	var objs []DatasourceSpecElasticsearchConfig
	if obj != nil {
		objs = []DatasourceSpecElasticsearchConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecElasticsearchConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatasourceSpecElasticsearchConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatasourceSpecElasticsearchConfig)(ptr) = DatasourceSpecElasticsearchConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatasourceSpecElasticsearchConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecElasticsearchConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatasourceSpecElasticsearchConfig)(ptr) = objs[0]
			} else {
				*(*DatasourceSpecElasticsearchConfig)(ptr) = DatasourceSpecElasticsearchConfig{}
			}
		} else {
			*(*DatasourceSpecElasticsearchConfig)(ptr) = DatasourceSpecElasticsearchConfig{}
		}
	default:
		iter.ReportError("decode DatasourceSpecElasticsearchConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatasourceSpecHttpConfigCodec struct {
}

func (DatasourceSpecHttpConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatasourceSpecHttpConfig)(ptr) == nil
}

func (DatasourceSpecHttpConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatasourceSpecHttpConfig)(ptr)
	var objs []DatasourceSpecHttpConfig
	if obj != nil {
		objs = []DatasourceSpecHttpConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecHttpConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatasourceSpecHttpConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatasourceSpecHttpConfig)(ptr) = DatasourceSpecHttpConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatasourceSpecHttpConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecHttpConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatasourceSpecHttpConfig)(ptr) = objs[0]
			} else {
				*(*DatasourceSpecHttpConfig)(ptr) = DatasourceSpecHttpConfig{}
			}
		} else {
			*(*DatasourceSpecHttpConfig)(ptr) = DatasourceSpecHttpConfig{}
		}
	default:
		iter.ReportError("decode DatasourceSpecHttpConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatasourceSpecLambdaConfigCodec struct {
}

func (DatasourceSpecLambdaConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatasourceSpecLambdaConfig)(ptr) == nil
}

func (DatasourceSpecLambdaConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatasourceSpecLambdaConfig)(ptr)
	var objs []DatasourceSpecLambdaConfig
	if obj != nil {
		objs = []DatasourceSpecLambdaConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecLambdaConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatasourceSpecLambdaConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatasourceSpecLambdaConfig)(ptr) = DatasourceSpecLambdaConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatasourceSpecLambdaConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatasourceSpecLambdaConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatasourceSpecLambdaConfig)(ptr) = objs[0]
			} else {
				*(*DatasourceSpecLambdaConfig)(ptr) = DatasourceSpecLambdaConfig{}
			}
		} else {
			*(*DatasourceSpecLambdaConfig)(ptr) = DatasourceSpecLambdaConfig{}
		}
	default:
		iter.ReportError("decode DatasourceSpecLambdaConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfigCodec struct {
}

func (GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig)(ptr) == nil
}

func (GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig)(ptr)
	var objs []GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig
	if obj != nil {
		objs = []GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig)(ptr) = GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig)(ptr) = objs[0]
			} else {
				*(*GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig)(ptr) = GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{}
			}
		} else {
			*(*GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig)(ptr) = GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig{}
		}
	default:
		iter.ReportError("decode GraphqlAPISpecAdditionalAuthenticationProviderOpenidConnectConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfigCodec struct {
}

func (GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig)(ptr) == nil
}

func (GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig)(ptr)
	var objs []GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig
	if obj != nil {
		objs = []GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig)(ptr) = GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig)(ptr) = objs[0]
			} else {
				*(*GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig)(ptr) = GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{}
			}
		} else {
			*(*GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig)(ptr) = GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig{}
		}
	default:
		iter.ReportError("decode GraphqlAPISpecAdditionalAuthenticationProviderUserPoolConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GraphqlAPISpecLogConfigCodec struct {
}

func (GraphqlAPISpecLogConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GraphqlAPISpecLogConfig)(ptr) == nil
}

func (GraphqlAPISpecLogConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GraphqlAPISpecLogConfig)(ptr)
	var objs []GraphqlAPISpecLogConfig
	if obj != nil {
		objs = []GraphqlAPISpecLogConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecLogConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GraphqlAPISpecLogConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GraphqlAPISpecLogConfig)(ptr) = GraphqlAPISpecLogConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GraphqlAPISpecLogConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecLogConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GraphqlAPISpecLogConfig)(ptr) = objs[0]
			} else {
				*(*GraphqlAPISpecLogConfig)(ptr) = GraphqlAPISpecLogConfig{}
			}
		} else {
			*(*GraphqlAPISpecLogConfig)(ptr) = GraphqlAPISpecLogConfig{}
		}
	default:
		iter.ReportError("decode GraphqlAPISpecLogConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GraphqlAPISpecOpenidConnectConfigCodec struct {
}

func (GraphqlAPISpecOpenidConnectConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GraphqlAPISpecOpenidConnectConfig)(ptr) == nil
}

func (GraphqlAPISpecOpenidConnectConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GraphqlAPISpecOpenidConnectConfig)(ptr)
	var objs []GraphqlAPISpecOpenidConnectConfig
	if obj != nil {
		objs = []GraphqlAPISpecOpenidConnectConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecOpenidConnectConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GraphqlAPISpecOpenidConnectConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GraphqlAPISpecOpenidConnectConfig)(ptr) = GraphqlAPISpecOpenidConnectConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GraphqlAPISpecOpenidConnectConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecOpenidConnectConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GraphqlAPISpecOpenidConnectConfig)(ptr) = objs[0]
			} else {
				*(*GraphqlAPISpecOpenidConnectConfig)(ptr) = GraphqlAPISpecOpenidConnectConfig{}
			}
		} else {
			*(*GraphqlAPISpecOpenidConnectConfig)(ptr) = GraphqlAPISpecOpenidConnectConfig{}
		}
	default:
		iter.ReportError("decode GraphqlAPISpecOpenidConnectConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GraphqlAPISpecUserPoolConfigCodec struct {
}

func (GraphqlAPISpecUserPoolConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GraphqlAPISpecUserPoolConfig)(ptr) == nil
}

func (GraphqlAPISpecUserPoolConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GraphqlAPISpecUserPoolConfig)(ptr)
	var objs []GraphqlAPISpecUserPoolConfig
	if obj != nil {
		objs = []GraphqlAPISpecUserPoolConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecUserPoolConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GraphqlAPISpecUserPoolConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GraphqlAPISpecUserPoolConfig)(ptr) = GraphqlAPISpecUserPoolConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GraphqlAPISpecUserPoolConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GraphqlAPISpecUserPoolConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GraphqlAPISpecUserPoolConfig)(ptr) = objs[0]
			} else {
				*(*GraphqlAPISpecUserPoolConfig)(ptr) = GraphqlAPISpecUserPoolConfig{}
			}
		} else {
			*(*GraphqlAPISpecUserPoolConfig)(ptr) = GraphqlAPISpecUserPoolConfig{}
		}
	default:
		iter.ReportError("decode GraphqlAPISpecUserPoolConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ResolverSpecCachingConfigCodec struct {
}

func (ResolverSpecCachingConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ResolverSpecCachingConfig)(ptr) == nil
}

func (ResolverSpecCachingConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ResolverSpecCachingConfig)(ptr)
	var objs []ResolverSpecCachingConfig
	if obj != nil {
		objs = []ResolverSpecCachingConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecCachingConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ResolverSpecCachingConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ResolverSpecCachingConfig)(ptr) = ResolverSpecCachingConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ResolverSpecCachingConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecCachingConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ResolverSpecCachingConfig)(ptr) = objs[0]
			} else {
				*(*ResolverSpecCachingConfig)(ptr) = ResolverSpecCachingConfig{}
			}
		} else {
			*(*ResolverSpecCachingConfig)(ptr) = ResolverSpecCachingConfig{}
		}
	default:
		iter.ReportError("decode ResolverSpecCachingConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ResolverSpecPipelineConfigCodec struct {
}

func (ResolverSpecPipelineConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ResolverSpecPipelineConfig)(ptr) == nil
}

func (ResolverSpecPipelineConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ResolverSpecPipelineConfig)(ptr)
	var objs []ResolverSpecPipelineConfig
	if obj != nil {
		objs = []ResolverSpecPipelineConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecPipelineConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ResolverSpecPipelineConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ResolverSpecPipelineConfig)(ptr) = ResolverSpecPipelineConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ResolverSpecPipelineConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResolverSpecPipelineConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ResolverSpecPipelineConfig)(ptr) = objs[0]
			} else {
				*(*ResolverSpecPipelineConfig)(ptr) = ResolverSpecPipelineConfig{}
			}
		} else {
			*(*ResolverSpecPipelineConfig)(ptr) = ResolverSpecPipelineConfig{}
		}
	default:
		iter.ReportError("decode ResolverSpecPipelineConfig", "unexpected JSON type")
	}
}
