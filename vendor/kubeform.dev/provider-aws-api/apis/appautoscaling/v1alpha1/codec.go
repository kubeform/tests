/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecStepScalingPolicyConfiguration{}).Type1()):                                        PolicySpecStepScalingPolicyConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfiguration{}).Type1()):                              PolicySpecTargetTrackingScalingPolicyConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{}).Type1()): PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{}).Type1()): PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduledActionSpecScalableTargetAction{}).Type1()):                                         ScheduledActionSpecScalableTargetActionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecStepScalingPolicyConfiguration{}).Type1()):                                        PolicySpecStepScalingPolicyConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfiguration{}).Type1()):                              PolicySpecTargetTrackingScalingPolicyConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{}).Type1()): PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{}).Type1()): PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduledActionSpecScalableTargetAction{}).Type1()):                                         ScheduledActionSpecScalableTargetActionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type PolicySpecStepScalingPolicyConfigurationCodec struct {
}

func (PolicySpecStepScalingPolicyConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecStepScalingPolicyConfiguration)(ptr) == nil
}

func (PolicySpecStepScalingPolicyConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecStepScalingPolicyConfiguration)(ptr)
	var objs []PolicySpecStepScalingPolicyConfiguration
	if obj != nil {
		objs = []PolicySpecStepScalingPolicyConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecStepScalingPolicyConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecStepScalingPolicyConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecStepScalingPolicyConfiguration)(ptr) = PolicySpecStepScalingPolicyConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecStepScalingPolicyConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecStepScalingPolicyConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecStepScalingPolicyConfiguration)(ptr) = objs[0]
			} else {
				*(*PolicySpecStepScalingPolicyConfiguration)(ptr) = PolicySpecStepScalingPolicyConfiguration{}
			}
		} else {
			*(*PolicySpecStepScalingPolicyConfiguration)(ptr) = PolicySpecStepScalingPolicyConfiguration{}
		}
	default:
		iter.ReportError("decode PolicySpecStepScalingPolicyConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecTargetTrackingScalingPolicyConfigurationCodec struct {
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecTargetTrackingScalingPolicyConfiguration)(ptr) == nil
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecTargetTrackingScalingPolicyConfiguration)(ptr)
	var objs []PolicySpecTargetTrackingScalingPolicyConfiguration
	if obj != nil {
		objs = []PolicySpecTargetTrackingScalingPolicyConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecTargetTrackingScalingPolicyConfiguration)(ptr) = PolicySpecTargetTrackingScalingPolicyConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecTargetTrackingScalingPolicyConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecTargetTrackingScalingPolicyConfiguration)(ptr) = objs[0]
			} else {
				*(*PolicySpecTargetTrackingScalingPolicyConfiguration)(ptr) = PolicySpecTargetTrackingScalingPolicyConfiguration{}
			}
		} else {
			*(*PolicySpecTargetTrackingScalingPolicyConfiguration)(ptr) = PolicySpecTargetTrackingScalingPolicyConfiguration{}
		}
	default:
		iter.ReportError("decode PolicySpecTargetTrackingScalingPolicyConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationCodec struct {
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification)(ptr) == nil
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification)(ptr)
	var objs []PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification
	if obj != nil {
		objs = []PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification)(ptr) = PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification)(ptr) = PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{}
			}
		} else {
			*(*PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification)(ptr) = PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationCodec struct {
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification)(ptr) == nil
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification)(ptr)
	var objs []PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification
	if obj != nil {
		objs = []PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecificationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification)(ptr) = PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification)(ptr) = objs[0]
			} else {
				*(*PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification)(ptr) = PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{}
			}
		} else {
			*(*PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification)(ptr) = PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification{}
		}
	default:
		iter.ReportError("decode PolicySpecTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScheduledActionSpecScalableTargetActionCodec struct {
}

func (ScheduledActionSpecScalableTargetActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScheduledActionSpecScalableTargetAction)(ptr) == nil
}

func (ScheduledActionSpecScalableTargetActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScheduledActionSpecScalableTargetAction)(ptr)
	var objs []ScheduledActionSpecScalableTargetAction
	if obj != nil {
		objs = []ScheduledActionSpecScalableTargetAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduledActionSpecScalableTargetAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScheduledActionSpecScalableTargetActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScheduledActionSpecScalableTargetAction)(ptr) = ScheduledActionSpecScalableTargetAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScheduledActionSpecScalableTargetAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduledActionSpecScalableTargetAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScheduledActionSpecScalableTargetAction)(ptr) = objs[0]
			} else {
				*(*ScheduledActionSpecScalableTargetAction)(ptr) = ScheduledActionSpecScalableTargetAction{}
			}
		} else {
			*(*ScheduledActionSpecScalableTargetAction)(ptr) = ScheduledActionSpecScalableTargetAction{}
		}
	default:
		iter.ReportError("decode ScheduledActionSpecScalableTargetAction", "unexpected JSON type")
	}
}
