/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecConfiguration{}).Type1()):              BrokerSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecEncryptionOptions{}).Type1()):          BrokerSpecEncryptionOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLdapServerMetadata{}).Type1()):         BrokerSpecLdapServerMetadataCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLogs{}).Type1()):                       BrokerSpecLogsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecMaintenanceWindowStartTime{}).Type1()): BrokerSpecMaintenanceWindowStartTimeCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecConfiguration{}).Type1()):              BrokerSpecConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecEncryptionOptions{}).Type1()):          BrokerSpecEncryptionOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLdapServerMetadata{}).Type1()):         BrokerSpecLdapServerMetadataCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLogs{}).Type1()):                       BrokerSpecLogsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecMaintenanceWindowStartTime{}).Type1()): BrokerSpecMaintenanceWindowStartTimeCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type BrokerSpecConfigurationCodec struct {
}

func (BrokerSpecConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BrokerSpecConfiguration)(ptr) == nil
}

func (BrokerSpecConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BrokerSpecConfiguration)(ptr)
	var objs []BrokerSpecConfiguration
	if obj != nil {
		objs = []BrokerSpecConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BrokerSpecConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BrokerSpecConfiguration)(ptr) = BrokerSpecConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BrokerSpecConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BrokerSpecConfiguration)(ptr) = objs[0]
			} else {
				*(*BrokerSpecConfiguration)(ptr) = BrokerSpecConfiguration{}
			}
		} else {
			*(*BrokerSpecConfiguration)(ptr) = BrokerSpecConfiguration{}
		}
	default:
		iter.ReportError("decode BrokerSpecConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BrokerSpecEncryptionOptionsCodec struct {
}

func (BrokerSpecEncryptionOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BrokerSpecEncryptionOptions)(ptr) == nil
}

func (BrokerSpecEncryptionOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BrokerSpecEncryptionOptions)(ptr)
	var objs []BrokerSpecEncryptionOptions
	if obj != nil {
		objs = []BrokerSpecEncryptionOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecEncryptionOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BrokerSpecEncryptionOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BrokerSpecEncryptionOptions)(ptr) = BrokerSpecEncryptionOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BrokerSpecEncryptionOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecEncryptionOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BrokerSpecEncryptionOptions)(ptr) = objs[0]
			} else {
				*(*BrokerSpecEncryptionOptions)(ptr) = BrokerSpecEncryptionOptions{}
			}
		} else {
			*(*BrokerSpecEncryptionOptions)(ptr) = BrokerSpecEncryptionOptions{}
		}
	default:
		iter.ReportError("decode BrokerSpecEncryptionOptions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BrokerSpecLdapServerMetadataCodec struct {
}

func (BrokerSpecLdapServerMetadataCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BrokerSpecLdapServerMetadata)(ptr) == nil
}

func (BrokerSpecLdapServerMetadataCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BrokerSpecLdapServerMetadata)(ptr)
	var objs []BrokerSpecLdapServerMetadata
	if obj != nil {
		objs = []BrokerSpecLdapServerMetadata{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLdapServerMetadata{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BrokerSpecLdapServerMetadataCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BrokerSpecLdapServerMetadata)(ptr) = BrokerSpecLdapServerMetadata{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BrokerSpecLdapServerMetadata

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLdapServerMetadata{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BrokerSpecLdapServerMetadata)(ptr) = objs[0]
			} else {
				*(*BrokerSpecLdapServerMetadata)(ptr) = BrokerSpecLdapServerMetadata{}
			}
		} else {
			*(*BrokerSpecLdapServerMetadata)(ptr) = BrokerSpecLdapServerMetadata{}
		}
	default:
		iter.ReportError("decode BrokerSpecLdapServerMetadata", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BrokerSpecLogsCodec struct {
}

func (BrokerSpecLogsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BrokerSpecLogs)(ptr) == nil
}

func (BrokerSpecLogsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BrokerSpecLogs)(ptr)
	var objs []BrokerSpecLogs
	if obj != nil {
		objs = []BrokerSpecLogs{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLogs{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BrokerSpecLogsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BrokerSpecLogs)(ptr) = BrokerSpecLogs{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BrokerSpecLogs

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecLogs{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BrokerSpecLogs)(ptr) = objs[0]
			} else {
				*(*BrokerSpecLogs)(ptr) = BrokerSpecLogs{}
			}
		} else {
			*(*BrokerSpecLogs)(ptr) = BrokerSpecLogs{}
		}
	default:
		iter.ReportError("decode BrokerSpecLogs", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BrokerSpecMaintenanceWindowStartTimeCodec struct {
}

func (BrokerSpecMaintenanceWindowStartTimeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BrokerSpecMaintenanceWindowStartTime)(ptr) == nil
}

func (BrokerSpecMaintenanceWindowStartTimeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BrokerSpecMaintenanceWindowStartTime)(ptr)
	var objs []BrokerSpecMaintenanceWindowStartTime
	if obj != nil {
		objs = []BrokerSpecMaintenanceWindowStartTime{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecMaintenanceWindowStartTime{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BrokerSpecMaintenanceWindowStartTimeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BrokerSpecMaintenanceWindowStartTime)(ptr) = BrokerSpecMaintenanceWindowStartTime{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BrokerSpecMaintenanceWindowStartTime

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BrokerSpecMaintenanceWindowStartTime{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BrokerSpecMaintenanceWindowStartTime)(ptr) = objs[0]
			} else {
				*(*BrokerSpecMaintenanceWindowStartTime)(ptr) = BrokerSpecMaintenanceWindowStartTime{}
			}
		} else {
			*(*BrokerSpecMaintenanceWindowStartTime)(ptr) = BrokerSpecMaintenanceWindowStartTime{}
		}
	default:
		iter.ReportError("decode BrokerSpecMaintenanceWindowStartTime", "unexpected JSON type")
	}
}
