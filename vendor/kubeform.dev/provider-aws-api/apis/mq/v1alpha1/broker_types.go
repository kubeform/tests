/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Broker struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BrokerSpec   `json:"spec,omitempty"`
	Status            BrokerStatus `json:"status,omitempty"`
}

type BrokerSpec struct {
	BrokerSpec2 `json:",inline"`
	// +optional
	KubeformOutput BrokerSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type BrokerSpecConfiguration struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Revision *int64 `json:"revision,omitempty" tf:"revision"`
}

type BrokerSpecEncryptionOptions struct {
	// +optional
	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
	// +optional
	UseAwsOwnedKey *bool `json:"useAwsOwnedKey,omitempty" tf:"use_aws_owned_key"`
}

type BrokerSpecInstances struct {
	// +optional
	ConsoleURL *string `json:"consoleURL,omitempty" tf:"console_url"`
	// +optional
	Endpoints []string `json:"endpoints,omitempty" tf:"endpoints"`
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
}

type BrokerSpecLdapServerMetadata struct {
	// +optional
	Hosts []string `json:"hosts,omitempty" tf:"hosts"`
	// +optional
	RoleBase *string `json:"roleBase,omitempty" tf:"role_base"`
	// +optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name"`
	// +optional
	RoleSearchMatching *string `json:"roleSearchMatching,omitempty" tf:"role_search_matching"`
	// +optional
	RoleSearchSubtree *bool `json:"roleSearchSubtree,omitempty" tf:"role_search_subtree"`
	// +optional
	ServiceAccountPassword *string `json:"-" sensitive:"true" tf:"service_account_password"`
	// +optional
	ServiceAccountUsername *string `json:"serviceAccountUsername,omitempty" tf:"service_account_username"`
	// +optional
	UserBase *string `json:"userBase,omitempty" tf:"user_base"`
	// +optional
	UserRoleName *string `json:"userRoleName,omitempty" tf:"user_role_name"`
	// +optional
	UserSearchMatching *string `json:"userSearchMatching,omitempty" tf:"user_search_matching"`
	// +optional
	UserSearchSubtree *bool `json:"userSearchSubtree,omitempty" tf:"user_search_subtree"`
}

type BrokerSpecLogs struct {
	// +optional
	Audit *bool `json:"audit,omitempty" tf:"audit"`
	// +optional
	General *bool `json:"general,omitempty" tf:"general"`
}

type BrokerSpecMaintenanceWindowStartTime struct {
	DayOfWeek *string `json:"dayOfWeek" tf:"day_of_week"`
	TimeOfDay *string `json:"timeOfDay" tf:"time_of_day"`
	TimeZone  *string `json:"timeZone" tf:"time_zone"`
}

type BrokerSpecUser struct {
	// +optional
	ConsoleAccess *bool `json:"consoleAccess,omitempty" tf:"console_access"`
	// +optional
	// +kubebuilder:validation:MaxItems=20
	Groups   []string `json:"groups,omitempty" tf:"groups"`
	Password *string  `json:"-" sensitive:"true" tf:"password"`
	Username *string  `json:"username" tf:"username"`
}

type BrokerSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	ApplyImmediately *bool `json:"applyImmediately,omitempty" tf:"apply_immediately"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AuthenticationStrategy *string `json:"authenticationStrategy,omitempty" tf:"authentication_strategy"`
	// +optional
	AutoMinorVersionUpgrade *bool   `json:"autoMinorVersionUpgrade,omitempty" tf:"auto_minor_version_upgrade"`
	BrokerName              *string `json:"brokerName" tf:"broker_name"`
	// +optional
	Configuration *BrokerSpecConfiguration `json:"configuration,omitempty" tf:"configuration"`
	// +optional
	DeploymentMode *string `json:"deploymentMode,omitempty" tf:"deployment_mode"`
	// +optional
	EncryptionOptions *BrokerSpecEncryptionOptions `json:"encryptionOptions,omitempty" tf:"encryption_options"`
	EngineType        *string                      `json:"engineType" tf:"engine_type"`
	EngineVersion     *string                      `json:"engineVersion" tf:"engine_version"`
	HostInstanceType  *string                      `json:"hostInstanceType" tf:"host_instance_type"`
	// +optional
	Instances []BrokerSpecInstances `json:"instances,omitempty" tf:"instances"`
	// +optional
	LdapServerMetadata *BrokerSpecLdapServerMetadata `json:"ldapServerMetadata,omitempty" tf:"ldap_server_metadata"`
	// +optional
	Logs *BrokerSpecLogs `json:"logs,omitempty" tf:"logs"`
	// +optional
	MaintenanceWindowStartTime *BrokerSpecMaintenanceWindowStartTime `json:"maintenanceWindowStartTime,omitempty" tf:"maintenance_window_start_time"`
	// +optional
	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty" tf:"publicly_accessible"`
	// +optional
	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`
	// +optional
	StorageType *string `json:"storageType,omitempty" tf:"storage_type"`
	// +optional
	SubnetIDS []string `json:"subnetIDS,omitempty" tf:"subnet_ids"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	User []BrokerSpecUser   `json:"user" tf:"user"`
}

type BrokerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BrokerList is a list of Brokers
type BrokerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Broker CRD objects
	Items []Broker `json:"items,omitempty"`
}
