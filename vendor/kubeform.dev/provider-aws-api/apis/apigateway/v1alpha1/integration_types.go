/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Integration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationSpec   `json:"spec,omitempty"`
	Status            IntegrationStatus `json:"status,omitempty"`
}

type IntegrationSpec struct {
	IntegrationSpec2 `json:",inline"`
	// +optional
	KubeformOutput IntegrationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type IntegrationSpecTlsConfig struct {
	// +optional
	InsecureSkipVerification *bool `json:"insecureSkipVerification,omitempty" tf:"insecure_skip_verification"`
}

type IntegrationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CacheKeyParameters []string `json:"cacheKeyParameters,omitempty" tf:"cache_key_parameters"`
	// +optional
	CacheNamespace *string `json:"cacheNamespace,omitempty" tf:"cache_namespace"`
	// +optional
	ConnectionID *string `json:"connectionID,omitempty" tf:"connection_id"`
	// +optional
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type"`
	// +optional
	ContentHandling *string `json:"contentHandling,omitempty" tf:"content_handling"`
	// +optional
	Credentials *string `json:"credentials,omitempty" tf:"credentials"`
	HttpMethod  *string `json:"httpMethod" tf:"http_method"`
	// +optional
	IntegrationHTTPMethod *string `json:"integrationHTTPMethod,omitempty" tf:"integration_http_method"`
	// +optional
	PassthroughBehavior *string `json:"passthroughBehavior,omitempty" tf:"passthrough_behavior"`
	// +optional
	RequestParameters *map[string]string `json:"requestParameters,omitempty" tf:"request_parameters"`
	// +optional
	RequestTemplates *map[string]string `json:"requestTemplates,omitempty" tf:"request_templates"`
	ResourceID       *string            `json:"resourceID" tf:"resource_id"`
	RestAPIID        *string            `json:"restAPIID" tf:"rest_api_id"`
	// +optional
	TimeoutMilliseconds *int64 `json:"timeoutMilliseconds,omitempty" tf:"timeout_milliseconds"`
	// +optional
	TlsConfig *IntegrationSpecTlsConfig `json:"tlsConfig,omitempty" tf:"tls_config"`
	Type      *string                   `json:"type" tf:"type"`
	// +optional
	Uri *string `json:"uri,omitempty" tf:"uri"`
}

type IntegrationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IntegrationList is a list of Integrations
type IntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Integration CRD objects
	Items []Integration `json:"items,omitempty"`
}
