/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RestAPI struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RestAPISpec   `json:"spec,omitempty"`
	Status            RestAPIStatus `json:"status,omitempty"`
}

type RestAPISpec struct {
	RestAPISpec2 `json:",inline"`
	// +optional
	KubeformOutput RestAPISpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RestAPISpecEndpointConfiguration struct {
	Types []string `json:"types" tf:"types"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	VpcEndpointIDS []string `json:"vpcEndpointIDS,omitempty" tf:"vpc_endpoint_ids"`
}

type RestAPISpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ApiKeySource *string `json:"apiKeySource,omitempty" tf:"api_key_source"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	BinaryMediaTypes []string `json:"binaryMediaTypes,omitempty" tf:"binary_media_types"`
	// +optional
	Body *string `json:"body,omitempty" tf:"body"`
	// +optional
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	DisableExecuteAPIEndpoint *bool `json:"disableExecuteAPIEndpoint,omitempty" tf:"disable_execute_api_endpoint"`
	// +optional
	EndpointConfiguration *RestAPISpecEndpointConfiguration `json:"endpointConfiguration,omitempty" tf:"endpoint_configuration"`
	// +optional
	ExecutionArn *string `json:"executionArn,omitempty" tf:"execution_arn"`
	// +optional
	MinimumCompressionSize *int64  `json:"minimumCompressionSize,omitempty" tf:"minimum_compression_size"`
	Name                   *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
	// +optional
	Policy *string `json:"policy,omitempty" tf:"policy"`
	// +optional
	RootResourceID *string `json:"rootResourceID,omitempty" tf:"root_resource_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type RestAPIStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RestAPIList is a list of RestAPIs
type RestAPIList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RestAPI CRD objects
	Items []RestAPI `json:"items,omitempty"`
}
