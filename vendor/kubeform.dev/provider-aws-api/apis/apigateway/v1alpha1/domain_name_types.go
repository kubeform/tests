/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DomainName struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainNameSpec   `json:"spec,omitempty"`
	Status            DomainNameStatus `json:"status,omitempty"`
}

type DomainNameSpec struct {
	DomainNameSpec2 `json:",inline"`
	// +optional
	KubeformOutput DomainNameSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DomainNameSpecEndpointConfiguration struct {
	Types []string `json:"types" tf:"types"`
}

type DomainNameSpecMutualTLSAuthentication struct {
	TruststoreURI *string `json:"truststoreURI" tf:"truststore_uri"`
	// +optional
	TruststoreVersion *string `json:"truststoreVersion,omitempty" tf:"truststore_version"`
}

type DomainNameSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn"`
	// +optional
	CertificateBody *string `json:"certificateBody,omitempty" tf:"certificate_body"`
	// +optional
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain"`
	// +optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name"`
	// +optional
	CertificatePrivateKey *string `json:"-" sensitive:"true" tf:"certificate_private_key"`
	// +optional
	CertificateUploadDate *string `json:"certificateUploadDate,omitempty" tf:"certificate_upload_date"`
	// +optional
	CloudfrontDomainName *string `json:"cloudfrontDomainName,omitempty" tf:"cloudfront_domain_name"`
	// +optional
	CloudfrontZoneID *string `json:"cloudfrontZoneID,omitempty" tf:"cloudfront_zone_id"`
	DomainName       *string `json:"domainName" tf:"domain_name"`
	// +optional
	EndpointConfiguration *DomainNameSpecEndpointConfiguration `json:"endpointConfiguration,omitempty" tf:"endpoint_configuration"`
	// +optional
	MutualTLSAuthentication *DomainNameSpecMutualTLSAuthentication `json:"mutualTLSAuthentication,omitempty" tf:"mutual_tls_authentication"`
	// +optional
	RegionalCertificateArn *string `json:"regionalCertificateArn,omitempty" tf:"regional_certificate_arn"`
	// +optional
	RegionalCertificateName *string `json:"regionalCertificateName,omitempty" tf:"regional_certificate_name"`
	// +optional
	RegionalDomainName *string `json:"regionalDomainName,omitempty" tf:"regional_domain_name"`
	// +optional
	RegionalZoneID *string `json:"regionalZoneID,omitempty" tf:"regional_zone_id"`
	// +optional
	SecurityPolicy *string `json:"securityPolicy,omitempty" tf:"security_policy"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type DomainNameStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DomainNameList is a list of DomainNames
type DomainNameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DomainName CRD objects
	Items []DomainName `json:"items,omitempty"`
}
