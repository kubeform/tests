/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DocumentationPartSpecLocation{}).Type1()):         DocumentationPartSpecLocationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecEndpointConfiguration{}).Type1()):   DomainNameSpecEndpointConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTLSAuthentication{}).Type1()): DomainNameSpecMutualTLSAuthenticationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1()):              IntegrationSpecTlsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MethodSettingsSpecSettings{}).Type1()):            MethodSettingsSpecSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RestAPISpecEndpointConfiguration{}).Type1()):      RestAPISpecEndpointConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1()):            StageSpecAccessLogSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecQuotaSettings{}).Type1()):            UsagePlanSpecQuotaSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecThrottleSettings{}).Type1()):         UsagePlanSpecThrottleSettingsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DocumentationPartSpecLocation{}).Type1()):         DocumentationPartSpecLocationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecEndpointConfiguration{}).Type1()):   DomainNameSpecEndpointConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTLSAuthentication{}).Type1()): DomainNameSpecMutualTLSAuthenticationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1()):              IntegrationSpecTlsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MethodSettingsSpecSettings{}).Type1()):            MethodSettingsSpecSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RestAPISpecEndpointConfiguration{}).Type1()):      RestAPISpecEndpointConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1()):            StageSpecAccessLogSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecQuotaSettings{}).Type1()):            UsagePlanSpecQuotaSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecThrottleSettings{}).Type1()):         UsagePlanSpecThrottleSettingsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DocumentationPartSpecLocationCodec struct {
}

func (DocumentationPartSpecLocationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DocumentationPartSpecLocation)(ptr) == nil
}

func (DocumentationPartSpecLocationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DocumentationPartSpecLocation)(ptr)
	var objs []DocumentationPartSpecLocation
	if obj != nil {
		objs = []DocumentationPartSpecLocation{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DocumentationPartSpecLocation{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DocumentationPartSpecLocationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DocumentationPartSpecLocation)(ptr) = DocumentationPartSpecLocation{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DocumentationPartSpecLocation

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DocumentationPartSpecLocation{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DocumentationPartSpecLocation)(ptr) = objs[0]
			} else {
				*(*DocumentationPartSpecLocation)(ptr) = DocumentationPartSpecLocation{}
			}
		} else {
			*(*DocumentationPartSpecLocation)(ptr) = DocumentationPartSpecLocation{}
		}
	default:
		iter.ReportError("decode DocumentationPartSpecLocation", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainNameSpecEndpointConfigurationCodec struct {
}

func (DomainNameSpecEndpointConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainNameSpecEndpointConfiguration)(ptr) == nil
}

func (DomainNameSpecEndpointConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainNameSpecEndpointConfiguration)(ptr)
	var objs []DomainNameSpecEndpointConfiguration
	if obj != nil {
		objs = []DomainNameSpecEndpointConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecEndpointConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainNameSpecEndpointConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainNameSpecEndpointConfiguration)(ptr) = DomainNameSpecEndpointConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainNameSpecEndpointConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecEndpointConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainNameSpecEndpointConfiguration)(ptr) = objs[0]
			} else {
				*(*DomainNameSpecEndpointConfiguration)(ptr) = DomainNameSpecEndpointConfiguration{}
			}
		} else {
			*(*DomainNameSpecEndpointConfiguration)(ptr) = DomainNameSpecEndpointConfiguration{}
		}
	default:
		iter.ReportError("decode DomainNameSpecEndpointConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainNameSpecMutualTLSAuthenticationCodec struct {
}

func (DomainNameSpecMutualTLSAuthenticationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainNameSpecMutualTLSAuthentication)(ptr) == nil
}

func (DomainNameSpecMutualTLSAuthenticationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainNameSpecMutualTLSAuthentication)(ptr)
	var objs []DomainNameSpecMutualTLSAuthentication
	if obj != nil {
		objs = []DomainNameSpecMutualTLSAuthentication{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTLSAuthentication{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainNameSpecMutualTLSAuthenticationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainNameSpecMutualTLSAuthentication)(ptr) = DomainNameSpecMutualTLSAuthentication{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainNameSpecMutualTLSAuthentication

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTLSAuthentication{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainNameSpecMutualTLSAuthentication)(ptr) = objs[0]
			} else {
				*(*DomainNameSpecMutualTLSAuthentication)(ptr) = DomainNameSpecMutualTLSAuthentication{}
			}
		} else {
			*(*DomainNameSpecMutualTLSAuthentication)(ptr) = DomainNameSpecMutualTLSAuthentication{}
		}
	default:
		iter.ReportError("decode DomainNameSpecMutualTLSAuthentication", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type IntegrationSpecTlsConfigCodec struct {
}

func (IntegrationSpecTlsConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*IntegrationSpecTlsConfig)(ptr) == nil
}

func (IntegrationSpecTlsConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*IntegrationSpecTlsConfig)(ptr)
	var objs []IntegrationSpecTlsConfig
	if obj != nil {
		objs = []IntegrationSpecTlsConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (IntegrationSpecTlsConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*IntegrationSpecTlsConfig)(ptr) = IntegrationSpecTlsConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []IntegrationSpecTlsConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*IntegrationSpecTlsConfig)(ptr) = objs[0]
			} else {
				*(*IntegrationSpecTlsConfig)(ptr) = IntegrationSpecTlsConfig{}
			}
		} else {
			*(*IntegrationSpecTlsConfig)(ptr) = IntegrationSpecTlsConfig{}
		}
	default:
		iter.ReportError("decode IntegrationSpecTlsConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MethodSettingsSpecSettingsCodec struct {
}

func (MethodSettingsSpecSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MethodSettingsSpecSettings)(ptr) == nil
}

func (MethodSettingsSpecSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MethodSettingsSpecSettings)(ptr)
	var objs []MethodSettingsSpecSettings
	if obj != nil {
		objs = []MethodSettingsSpecSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MethodSettingsSpecSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MethodSettingsSpecSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MethodSettingsSpecSettings)(ptr) = MethodSettingsSpecSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MethodSettingsSpecSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MethodSettingsSpecSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MethodSettingsSpecSettings)(ptr) = objs[0]
			} else {
				*(*MethodSettingsSpecSettings)(ptr) = MethodSettingsSpecSettings{}
			}
		} else {
			*(*MethodSettingsSpecSettings)(ptr) = MethodSettingsSpecSettings{}
		}
	default:
		iter.ReportError("decode MethodSettingsSpecSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type RestAPISpecEndpointConfigurationCodec struct {
}

func (RestAPISpecEndpointConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*RestAPISpecEndpointConfiguration)(ptr) == nil
}

func (RestAPISpecEndpointConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*RestAPISpecEndpointConfiguration)(ptr)
	var objs []RestAPISpecEndpointConfiguration
	if obj != nil {
		objs = []RestAPISpecEndpointConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RestAPISpecEndpointConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (RestAPISpecEndpointConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*RestAPISpecEndpointConfiguration)(ptr) = RestAPISpecEndpointConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []RestAPISpecEndpointConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RestAPISpecEndpointConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*RestAPISpecEndpointConfiguration)(ptr) = objs[0]
			} else {
				*(*RestAPISpecEndpointConfiguration)(ptr) = RestAPISpecEndpointConfiguration{}
			}
		} else {
			*(*RestAPISpecEndpointConfiguration)(ptr) = RestAPISpecEndpointConfiguration{}
		}
	default:
		iter.ReportError("decode RestAPISpecEndpointConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type StageSpecAccessLogSettingsCodec struct {
}

func (StageSpecAccessLogSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*StageSpecAccessLogSettings)(ptr) == nil
}

func (StageSpecAccessLogSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*StageSpecAccessLogSettings)(ptr)
	var objs []StageSpecAccessLogSettings
	if obj != nil {
		objs = []StageSpecAccessLogSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (StageSpecAccessLogSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*StageSpecAccessLogSettings)(ptr) = StageSpecAccessLogSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []StageSpecAccessLogSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*StageSpecAccessLogSettings)(ptr) = objs[0]
			} else {
				*(*StageSpecAccessLogSettings)(ptr) = StageSpecAccessLogSettings{}
			}
		} else {
			*(*StageSpecAccessLogSettings)(ptr) = StageSpecAccessLogSettings{}
		}
	default:
		iter.ReportError("decode StageSpecAccessLogSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UsagePlanSpecQuotaSettingsCodec struct {
}

func (UsagePlanSpecQuotaSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UsagePlanSpecQuotaSettings)(ptr) == nil
}

func (UsagePlanSpecQuotaSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UsagePlanSpecQuotaSettings)(ptr)
	var objs []UsagePlanSpecQuotaSettings
	if obj != nil {
		objs = []UsagePlanSpecQuotaSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecQuotaSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UsagePlanSpecQuotaSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UsagePlanSpecQuotaSettings)(ptr) = UsagePlanSpecQuotaSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UsagePlanSpecQuotaSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecQuotaSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UsagePlanSpecQuotaSettings)(ptr) = objs[0]
			} else {
				*(*UsagePlanSpecQuotaSettings)(ptr) = UsagePlanSpecQuotaSettings{}
			}
		} else {
			*(*UsagePlanSpecQuotaSettings)(ptr) = UsagePlanSpecQuotaSettings{}
		}
	default:
		iter.ReportError("decode UsagePlanSpecQuotaSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UsagePlanSpecThrottleSettingsCodec struct {
}

func (UsagePlanSpecThrottleSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UsagePlanSpecThrottleSettings)(ptr) == nil
}

func (UsagePlanSpecThrottleSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UsagePlanSpecThrottleSettings)(ptr)
	var objs []UsagePlanSpecThrottleSettings
	if obj != nil {
		objs = []UsagePlanSpecThrottleSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecThrottleSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UsagePlanSpecThrottleSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UsagePlanSpecThrottleSettings)(ptr) = UsagePlanSpecThrottleSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UsagePlanSpecThrottleSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UsagePlanSpecThrottleSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UsagePlanSpecThrottleSettings)(ptr) = objs[0]
			} else {
				*(*UsagePlanSpecThrottleSettings)(ptr) = UsagePlanSpecThrottleSettings{}
			}
		} else {
			*(*UsagePlanSpecThrottleSettings)(ptr) = UsagePlanSpecThrottleSettings{}
		}
	default:
		iter.ReportError("decode UsagePlanSpecThrottleSettings", "unexpected JSON type")
	}
}
