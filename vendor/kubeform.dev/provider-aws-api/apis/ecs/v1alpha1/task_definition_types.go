/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type TaskDefinition struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TaskDefinitionSpec   `json:"spec,omitempty"`
	Status            TaskDefinitionStatus `json:"status,omitempty"`
}

type TaskDefinitionSpec struct {
	TaskDefinitionSpec2 `json:",inline"`
	// +optional
	KubeformOutput TaskDefinitionSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type TaskDefinitionSpecInferenceAccelerator struct {
	DeviceName *string `json:"deviceName" tf:"device_name"`
	DeviceType *string `json:"deviceType" tf:"device_type"`
}

type TaskDefinitionSpecPlacementConstraints struct {
	// +optional
	Expression *string `json:"expression,omitempty" tf:"expression"`
	Type       *string `json:"type" tf:"type"`
}

type TaskDefinitionSpecProxyConfiguration struct {
	ContainerName *string `json:"containerName" tf:"container_name"`
	// +optional
	Properties *map[string]string `json:"properties,omitempty" tf:"properties"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type TaskDefinitionSpecVolumeDockerVolumeConfiguration struct {
	// +optional
	Autoprovision *bool `json:"autoprovision,omitempty" tf:"autoprovision"`
	// +optional
	Driver *string `json:"driver,omitempty" tf:"driver"`
	// +optional
	DriverOpts *map[string]string `json:"driverOpts,omitempty" tf:"driver_opts"`
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// +optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
}

type TaskDefinitionSpecVolumeEfsVolumeConfigurationAuthorizationConfig struct {
	// +optional
	AccessPointID *string `json:"accessPointID,omitempty" tf:"access_point_id"`
	// +optional
	Iam *string `json:"iam,omitempty" tf:"iam"`
}

type TaskDefinitionSpecVolumeEfsVolumeConfiguration struct {
	// +optional
	AuthorizationConfig *TaskDefinitionSpecVolumeEfsVolumeConfigurationAuthorizationConfig `json:"authorizationConfig,omitempty" tf:"authorization_config"`
	FileSystemID        *string                                                            `json:"fileSystemID" tf:"file_system_id"`
	// +optional
	RootDirectory *string `json:"rootDirectory,omitempty" tf:"root_directory"`
	// +optional
	TransitEncryption *string `json:"transitEncryption,omitempty" tf:"transit_encryption"`
	// +optional
	TransitEncryptionPort *int64 `json:"transitEncryptionPort,omitempty" tf:"transit_encryption_port"`
}

type TaskDefinitionSpecVolume struct {
	// +optional
	DockerVolumeConfiguration *TaskDefinitionSpecVolumeDockerVolumeConfiguration `json:"dockerVolumeConfiguration,omitempty" tf:"docker_volume_configuration"`
	// +optional
	EfsVolumeConfiguration *TaskDefinitionSpecVolumeEfsVolumeConfiguration `json:"efsVolumeConfiguration,omitempty" tf:"efs_volume_configuration"`
	// +optional
	HostPath *string `json:"hostPath,omitempty" tf:"host_path"`
	Name     *string `json:"name" tf:"name"`
}

type TaskDefinitionSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn                  *string `json:"arn,omitempty" tf:"arn"`
	ContainerDefinitions *string `json:"containerDefinitions" tf:"container_definitions"`
	// +optional
	Cpu *string `json:"cpu,omitempty" tf:"cpu"`
	// +optional
	ExecutionRoleArn *string `json:"executionRoleArn,omitempty" tf:"execution_role_arn"`
	Family           *string `json:"family" tf:"family"`
	// +optional
	InferenceAccelerator []TaskDefinitionSpecInferenceAccelerator `json:"inferenceAccelerator,omitempty" tf:"inference_accelerator"`
	// +optional
	IpcMode *string `json:"ipcMode,omitempty" tf:"ipc_mode"`
	// +optional
	Memory *string `json:"memory,omitempty" tf:"memory"`
	// +optional
	NetworkMode *string `json:"networkMode,omitempty" tf:"network_mode"`
	// +optional
	PidMode *string `json:"pidMode,omitempty" tf:"pid_mode"`
	// +optional
	// +kubebuilder:validation:MaxItems=10
	PlacementConstraints []TaskDefinitionSpecPlacementConstraints `json:"placementConstraints,omitempty" tf:"placement_constraints"`
	// +optional
	ProxyConfiguration *TaskDefinitionSpecProxyConfiguration `json:"proxyConfiguration,omitempty" tf:"proxy_configuration"`
	// +optional
	RequiresCompatibilities []string `json:"requiresCompatibilities,omitempty" tf:"requires_compatibilities"`
	// +optional
	Revision *int64 `json:"revision,omitempty" tf:"revision"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TaskRoleArn *string `json:"taskRoleArn,omitempty" tf:"task_role_arn"`
	// +optional
	Volume []TaskDefinitionSpecVolume `json:"volume,omitempty" tf:"volume"`
}

type TaskDefinitionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TaskDefinitionList is a list of TaskDefinitions
type TaskDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of TaskDefinition CRD objects
	Items []TaskDefinition `json:"items,omitempty"`
}
