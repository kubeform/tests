/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecResourceSpec{}).Type1()):                                                      AppSpecResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfig{}).Type1()):                               AppImageConfigSpecKernelGatewayImageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{}).Type1()):               AppImageConfigSpecKernelGatewayImageConfigFileSystemConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigKernelSpec{}).Type1()):                     AppImageConfigSpecKernelGatewayImageConfigKernelSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CodeRepositorySpecGitConfig{}).Type1()):                                              CodeRepositorySpecGitConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettings{}).Type1()):                                            DomainSpecDefaultUserSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettings{}).Type1()):                    DomainSpecDefaultUserSettingsJupyterServerAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1()): DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettings{}).Type1()):                    DomainSpecDefaultUserSettingsKernelGatewayAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1()): DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsSharingSettings{}).Type1()):                             DomainSpecDefaultUserSettingsSharingSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettings{}).Type1()):                      DomainSpecDefaultUserSettingsTensorBoardAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1()):   DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfig{}).Type1()):                               EndpointConfigurationSpecDataCaptureConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{}).Type1()):       EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeaderCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfig{}).Type1()):                                       FeatureGroupSpecOfflineStoreConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{}).Type1()):                      FeatureGroupSpecOfflineStoreConfigDataCatalogConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigS3StorageConfig{}).Type1()):                        FeatureGroupSpecOfflineStoreConfigS3StorageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfig{}).Type1()):                                        FeatureGroupSpecOnlineStoreConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfigSecurityConfig{}).Type1()):                          FeatureGroupSpecOnlineStoreConfigSecurityConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecContainerImageConfig{}).Type1()):                                            ModelSpecContainerImageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainer{}).Type1()):                                                ModelSpecPrimaryContainerCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainerImageConfig{}).Type1()):                                     ModelSpecPrimaryContainerImageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecVpcConfig{}).Type1()):                                                       ModelSpecVpcConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettings{}).Type1()):                                              UserProfileSpecUserSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettings{}).Type1()):                      UserProfileSpecUserSettingsJupyterServerAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1()):   UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettings{}).Type1()):                      UserProfileSpecUserSettingsKernelGatewayAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1()):   UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsSharingSettings{}).Type1()):                               UserProfileSpecUserSettingsSharingSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettings{}).Type1()):                        UserProfileSpecUserSettingsTensorBoardAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1()):     UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecResourceSpec{}).Type1()):                                                      AppSpecResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfig{}).Type1()):                               AppImageConfigSpecKernelGatewayImageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{}).Type1()):               AppImageConfigSpecKernelGatewayImageConfigFileSystemConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigKernelSpec{}).Type1()):                     AppImageConfigSpecKernelGatewayImageConfigKernelSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CodeRepositorySpecGitConfig{}).Type1()):                                              CodeRepositorySpecGitConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettings{}).Type1()):                                            DomainSpecDefaultUserSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettings{}).Type1()):                    DomainSpecDefaultUserSettingsJupyterServerAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1()): DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettings{}).Type1()):                    DomainSpecDefaultUserSettingsKernelGatewayAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1()): DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsSharingSettings{}).Type1()):                             DomainSpecDefaultUserSettingsSharingSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettings{}).Type1()):                      DomainSpecDefaultUserSettingsTensorBoardAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1()):   DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfig{}).Type1()):                               EndpointConfigurationSpecDataCaptureConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{}).Type1()):       EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeaderCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfig{}).Type1()):                                       FeatureGroupSpecOfflineStoreConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{}).Type1()):                      FeatureGroupSpecOfflineStoreConfigDataCatalogConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigS3StorageConfig{}).Type1()):                        FeatureGroupSpecOfflineStoreConfigS3StorageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfig{}).Type1()):                                        FeatureGroupSpecOnlineStoreConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfigSecurityConfig{}).Type1()):                          FeatureGroupSpecOnlineStoreConfigSecurityConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecContainerImageConfig{}).Type1()):                                            ModelSpecContainerImageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainer{}).Type1()):                                                ModelSpecPrimaryContainerCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainerImageConfig{}).Type1()):                                     ModelSpecPrimaryContainerImageConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecVpcConfig{}).Type1()):                                                       ModelSpecVpcConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettings{}).Type1()):                                              UserProfileSpecUserSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettings{}).Type1()):                      UserProfileSpecUserSettingsJupyterServerAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1()):   UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettings{}).Type1()):                      UserProfileSpecUserSettingsKernelGatewayAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1()):   UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsSharingSettings{}).Type1()):                               UserProfileSpecUserSettingsSharingSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettings{}).Type1()):                        UserProfileSpecUserSettingsTensorBoardAppSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1()):     UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AppSpecResourceSpecCodec struct {
}

func (AppSpecResourceSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecResourceSpec)(ptr) == nil
}

func (AppSpecResourceSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecResourceSpec)(ptr)
	var objs []AppSpecResourceSpec
	if obj != nil {
		objs = []AppSpecResourceSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecResourceSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecResourceSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecResourceSpec)(ptr) = AppSpecResourceSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecResourceSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecResourceSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecResourceSpec)(ptr) = objs[0]
			} else {
				*(*AppSpecResourceSpec)(ptr) = AppSpecResourceSpec{}
			}
		} else {
			*(*AppSpecResourceSpec)(ptr) = AppSpecResourceSpec{}
		}
	default:
		iter.ReportError("decode AppSpecResourceSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppImageConfigSpecKernelGatewayImageConfigCodec struct {
}

func (AppImageConfigSpecKernelGatewayImageConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppImageConfigSpecKernelGatewayImageConfig)(ptr) == nil
}

func (AppImageConfigSpecKernelGatewayImageConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppImageConfigSpecKernelGatewayImageConfig)(ptr)
	var objs []AppImageConfigSpecKernelGatewayImageConfig
	if obj != nil {
		objs = []AppImageConfigSpecKernelGatewayImageConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppImageConfigSpecKernelGatewayImageConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppImageConfigSpecKernelGatewayImageConfig)(ptr) = AppImageConfigSpecKernelGatewayImageConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppImageConfigSpecKernelGatewayImageConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppImageConfigSpecKernelGatewayImageConfig)(ptr) = objs[0]
			} else {
				*(*AppImageConfigSpecKernelGatewayImageConfig)(ptr) = AppImageConfigSpecKernelGatewayImageConfig{}
			}
		} else {
			*(*AppImageConfigSpecKernelGatewayImageConfig)(ptr) = AppImageConfigSpecKernelGatewayImageConfig{}
		}
	default:
		iter.ReportError("decode AppImageConfigSpecKernelGatewayImageConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppImageConfigSpecKernelGatewayImageConfigFileSystemConfigCodec struct {
}

func (AppImageConfigSpecKernelGatewayImageConfigFileSystemConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig)(ptr) == nil
}

func (AppImageConfigSpecKernelGatewayImageConfigFileSystemConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig)(ptr)
	var objs []AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig
	if obj != nil {
		objs = []AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppImageConfigSpecKernelGatewayImageConfigFileSystemConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig)(ptr) = AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig)(ptr) = objs[0]
			} else {
				*(*AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig)(ptr) = AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{}
			}
		} else {
			*(*AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig)(ptr) = AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig{}
		}
	default:
		iter.ReportError("decode AppImageConfigSpecKernelGatewayImageConfigFileSystemConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppImageConfigSpecKernelGatewayImageConfigKernelSpecCodec struct {
}

func (AppImageConfigSpecKernelGatewayImageConfigKernelSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppImageConfigSpecKernelGatewayImageConfigKernelSpec)(ptr) == nil
}

func (AppImageConfigSpecKernelGatewayImageConfigKernelSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppImageConfigSpecKernelGatewayImageConfigKernelSpec)(ptr)
	var objs []AppImageConfigSpecKernelGatewayImageConfigKernelSpec
	if obj != nil {
		objs = []AppImageConfigSpecKernelGatewayImageConfigKernelSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigKernelSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppImageConfigSpecKernelGatewayImageConfigKernelSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppImageConfigSpecKernelGatewayImageConfigKernelSpec)(ptr) = AppImageConfigSpecKernelGatewayImageConfigKernelSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppImageConfigSpecKernelGatewayImageConfigKernelSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppImageConfigSpecKernelGatewayImageConfigKernelSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppImageConfigSpecKernelGatewayImageConfigKernelSpec)(ptr) = objs[0]
			} else {
				*(*AppImageConfigSpecKernelGatewayImageConfigKernelSpec)(ptr) = AppImageConfigSpecKernelGatewayImageConfigKernelSpec{}
			}
		} else {
			*(*AppImageConfigSpecKernelGatewayImageConfigKernelSpec)(ptr) = AppImageConfigSpecKernelGatewayImageConfigKernelSpec{}
		}
	default:
		iter.ReportError("decode AppImageConfigSpecKernelGatewayImageConfigKernelSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CodeRepositorySpecGitConfigCodec struct {
}

func (CodeRepositorySpecGitConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CodeRepositorySpecGitConfig)(ptr) == nil
}

func (CodeRepositorySpecGitConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CodeRepositorySpecGitConfig)(ptr)
	var objs []CodeRepositorySpecGitConfig
	if obj != nil {
		objs = []CodeRepositorySpecGitConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CodeRepositorySpecGitConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CodeRepositorySpecGitConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CodeRepositorySpecGitConfig)(ptr) = CodeRepositorySpecGitConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CodeRepositorySpecGitConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CodeRepositorySpecGitConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CodeRepositorySpecGitConfig)(ptr) = objs[0]
			} else {
				*(*CodeRepositorySpecGitConfig)(ptr) = CodeRepositorySpecGitConfig{}
			}
		} else {
			*(*CodeRepositorySpecGitConfig)(ptr) = CodeRepositorySpecGitConfig{}
		}
	default:
		iter.ReportError("decode CodeRepositorySpecGitConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsCodec struct {
}

func (DomainSpecDefaultUserSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettings)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettings)(ptr)
	var objs []DomainSpecDefaultUserSettings
	if obj != nil {
		objs = []DomainSpecDefaultUserSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettings)(ptr) = DomainSpecDefaultUserSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettings)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettings)(ptr) = DomainSpecDefaultUserSettings{}
			}
		} else {
			*(*DomainSpecDefaultUserSettings)(ptr) = DomainSpecDefaultUserSettings{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsJupyterServerAppSettingsCodec struct {
}

func (DomainSpecDefaultUserSettingsJupyterServerAppSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettingsJupyterServerAppSettings)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsJupyterServerAppSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettingsJupyterServerAppSettings)(ptr)
	var objs []DomainSpecDefaultUserSettingsJupyterServerAppSettings
	if obj != nil {
		objs = []DomainSpecDefaultUserSettingsJupyterServerAppSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsJupyterServerAppSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettingsJupyterServerAppSettings)(ptr) = DomainSpecDefaultUserSettingsJupyterServerAppSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettingsJupyterServerAppSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettingsJupyterServerAppSettings)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettingsJupyterServerAppSettings)(ptr) = DomainSpecDefaultUserSettingsJupyterServerAppSettings{}
			}
		} else {
			*(*DomainSpecDefaultUserSettingsJupyterServerAppSettings)(ptr) = DomainSpecDefaultUserSettingsJupyterServerAppSettings{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettingsJupyterServerAppSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec struct {
}

func (DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr)
	var objs []DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec
	if obj != nil {
		objs = []DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}
			}
		} else {
			*(*DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsKernelGatewayAppSettingsCodec struct {
}

func (DomainSpecDefaultUserSettingsKernelGatewayAppSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettingsKernelGatewayAppSettings)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsKernelGatewayAppSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettingsKernelGatewayAppSettings)(ptr)
	var objs []DomainSpecDefaultUserSettingsKernelGatewayAppSettings
	if obj != nil {
		objs = []DomainSpecDefaultUserSettingsKernelGatewayAppSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsKernelGatewayAppSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettings)(ptr) = DomainSpecDefaultUserSettingsKernelGatewayAppSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettingsKernelGatewayAppSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettings)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettings)(ptr) = DomainSpecDefaultUserSettingsKernelGatewayAppSettings{}
			}
		} else {
			*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettings)(ptr) = DomainSpecDefaultUserSettingsKernelGatewayAppSettings{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettingsKernelGatewayAppSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec struct {
}

func (DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr)
	var objs []DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec
	if obj != nil {
		objs = []DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}
			}
		} else {
			*(*DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsSharingSettingsCodec struct {
}

func (DomainSpecDefaultUserSettingsSharingSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettingsSharingSettings)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsSharingSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettingsSharingSettings)(ptr)
	var objs []DomainSpecDefaultUserSettingsSharingSettings
	if obj != nil {
		objs = []DomainSpecDefaultUserSettingsSharingSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsSharingSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsSharingSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettingsSharingSettings)(ptr) = DomainSpecDefaultUserSettingsSharingSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettingsSharingSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsSharingSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettingsSharingSettings)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettingsSharingSettings)(ptr) = DomainSpecDefaultUserSettingsSharingSettings{}
			}
		} else {
			*(*DomainSpecDefaultUserSettingsSharingSettings)(ptr) = DomainSpecDefaultUserSettingsSharingSettings{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettingsSharingSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsTensorBoardAppSettingsCodec struct {
}

func (DomainSpecDefaultUserSettingsTensorBoardAppSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettingsTensorBoardAppSettings)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsTensorBoardAppSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettingsTensorBoardAppSettings)(ptr)
	var objs []DomainSpecDefaultUserSettingsTensorBoardAppSettings
	if obj != nil {
		objs = []DomainSpecDefaultUserSettingsTensorBoardAppSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsTensorBoardAppSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettingsTensorBoardAppSettings)(ptr) = DomainSpecDefaultUserSettingsTensorBoardAppSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettingsTensorBoardAppSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettingsTensorBoardAppSettings)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettingsTensorBoardAppSettings)(ptr) = DomainSpecDefaultUserSettingsTensorBoardAppSettings{}
			}
		} else {
			*(*DomainSpecDefaultUserSettingsTensorBoardAppSettings)(ptr) = DomainSpecDefaultUserSettingsTensorBoardAppSettings{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettingsTensorBoardAppSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec struct {
}

func (DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) == nil
}

func (DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr)
	var objs []DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec
	if obj != nil {
		objs = []DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = objs[0]
			} else {
				*(*DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}
			}
		} else {
			*(*DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}
		}
	default:
		iter.ReportError("decode DomainSpecDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointConfigurationSpecDataCaptureConfigCodec struct {
}

func (EndpointConfigurationSpecDataCaptureConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointConfigurationSpecDataCaptureConfig)(ptr) == nil
}

func (EndpointConfigurationSpecDataCaptureConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointConfigurationSpecDataCaptureConfig)(ptr)
	var objs []EndpointConfigurationSpecDataCaptureConfig
	if obj != nil {
		objs = []EndpointConfigurationSpecDataCaptureConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointConfigurationSpecDataCaptureConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointConfigurationSpecDataCaptureConfig)(ptr) = EndpointConfigurationSpecDataCaptureConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointConfigurationSpecDataCaptureConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointConfigurationSpecDataCaptureConfig)(ptr) = objs[0]
			} else {
				*(*EndpointConfigurationSpecDataCaptureConfig)(ptr) = EndpointConfigurationSpecDataCaptureConfig{}
			}
		} else {
			*(*EndpointConfigurationSpecDataCaptureConfig)(ptr) = EndpointConfigurationSpecDataCaptureConfig{}
		}
	default:
		iter.ReportError("decode EndpointConfigurationSpecDataCaptureConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeaderCodec struct {
}

func (EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeaderCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader)(ptr) == nil
}

func (EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeaderCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader)(ptr)
	var objs []EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader
	if obj != nil {
		objs = []EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeaderCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader)(ptr) = EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader)(ptr) = objs[0]
			} else {
				*(*EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader)(ptr) = EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{}
			}
		} else {
			*(*EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader)(ptr) = EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader{}
		}
	default:
		iter.ReportError("decode EndpointConfigurationSpecDataCaptureConfigCaptureContentTypeHeader", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FeatureGroupSpecOfflineStoreConfigCodec struct {
}

func (FeatureGroupSpecOfflineStoreConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FeatureGroupSpecOfflineStoreConfig)(ptr) == nil
}

func (FeatureGroupSpecOfflineStoreConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FeatureGroupSpecOfflineStoreConfig)(ptr)
	var objs []FeatureGroupSpecOfflineStoreConfig
	if obj != nil {
		objs = []FeatureGroupSpecOfflineStoreConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FeatureGroupSpecOfflineStoreConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FeatureGroupSpecOfflineStoreConfig)(ptr) = FeatureGroupSpecOfflineStoreConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FeatureGroupSpecOfflineStoreConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FeatureGroupSpecOfflineStoreConfig)(ptr) = objs[0]
			} else {
				*(*FeatureGroupSpecOfflineStoreConfig)(ptr) = FeatureGroupSpecOfflineStoreConfig{}
			}
		} else {
			*(*FeatureGroupSpecOfflineStoreConfig)(ptr) = FeatureGroupSpecOfflineStoreConfig{}
		}
	default:
		iter.ReportError("decode FeatureGroupSpecOfflineStoreConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FeatureGroupSpecOfflineStoreConfigDataCatalogConfigCodec struct {
}

func (FeatureGroupSpecOfflineStoreConfigDataCatalogConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FeatureGroupSpecOfflineStoreConfigDataCatalogConfig)(ptr) == nil
}

func (FeatureGroupSpecOfflineStoreConfigDataCatalogConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FeatureGroupSpecOfflineStoreConfigDataCatalogConfig)(ptr)
	var objs []FeatureGroupSpecOfflineStoreConfigDataCatalogConfig
	if obj != nil {
		objs = []FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FeatureGroupSpecOfflineStoreConfigDataCatalogConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FeatureGroupSpecOfflineStoreConfigDataCatalogConfig)(ptr) = FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FeatureGroupSpecOfflineStoreConfigDataCatalogConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FeatureGroupSpecOfflineStoreConfigDataCatalogConfig)(ptr) = objs[0]
			} else {
				*(*FeatureGroupSpecOfflineStoreConfigDataCatalogConfig)(ptr) = FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{}
			}
		} else {
			*(*FeatureGroupSpecOfflineStoreConfigDataCatalogConfig)(ptr) = FeatureGroupSpecOfflineStoreConfigDataCatalogConfig{}
		}
	default:
		iter.ReportError("decode FeatureGroupSpecOfflineStoreConfigDataCatalogConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FeatureGroupSpecOfflineStoreConfigS3StorageConfigCodec struct {
}

func (FeatureGroupSpecOfflineStoreConfigS3StorageConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FeatureGroupSpecOfflineStoreConfigS3StorageConfig)(ptr) == nil
}

func (FeatureGroupSpecOfflineStoreConfigS3StorageConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FeatureGroupSpecOfflineStoreConfigS3StorageConfig)(ptr)
	var objs []FeatureGroupSpecOfflineStoreConfigS3StorageConfig
	if obj != nil {
		objs = []FeatureGroupSpecOfflineStoreConfigS3StorageConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigS3StorageConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FeatureGroupSpecOfflineStoreConfigS3StorageConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FeatureGroupSpecOfflineStoreConfigS3StorageConfig)(ptr) = FeatureGroupSpecOfflineStoreConfigS3StorageConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FeatureGroupSpecOfflineStoreConfigS3StorageConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOfflineStoreConfigS3StorageConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FeatureGroupSpecOfflineStoreConfigS3StorageConfig)(ptr) = objs[0]
			} else {
				*(*FeatureGroupSpecOfflineStoreConfigS3StorageConfig)(ptr) = FeatureGroupSpecOfflineStoreConfigS3StorageConfig{}
			}
		} else {
			*(*FeatureGroupSpecOfflineStoreConfigS3StorageConfig)(ptr) = FeatureGroupSpecOfflineStoreConfigS3StorageConfig{}
		}
	default:
		iter.ReportError("decode FeatureGroupSpecOfflineStoreConfigS3StorageConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FeatureGroupSpecOnlineStoreConfigCodec struct {
}

func (FeatureGroupSpecOnlineStoreConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FeatureGroupSpecOnlineStoreConfig)(ptr) == nil
}

func (FeatureGroupSpecOnlineStoreConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FeatureGroupSpecOnlineStoreConfig)(ptr)
	var objs []FeatureGroupSpecOnlineStoreConfig
	if obj != nil {
		objs = []FeatureGroupSpecOnlineStoreConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FeatureGroupSpecOnlineStoreConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FeatureGroupSpecOnlineStoreConfig)(ptr) = FeatureGroupSpecOnlineStoreConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FeatureGroupSpecOnlineStoreConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FeatureGroupSpecOnlineStoreConfig)(ptr) = objs[0]
			} else {
				*(*FeatureGroupSpecOnlineStoreConfig)(ptr) = FeatureGroupSpecOnlineStoreConfig{}
			}
		} else {
			*(*FeatureGroupSpecOnlineStoreConfig)(ptr) = FeatureGroupSpecOnlineStoreConfig{}
		}
	default:
		iter.ReportError("decode FeatureGroupSpecOnlineStoreConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FeatureGroupSpecOnlineStoreConfigSecurityConfigCodec struct {
}

func (FeatureGroupSpecOnlineStoreConfigSecurityConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FeatureGroupSpecOnlineStoreConfigSecurityConfig)(ptr) == nil
}

func (FeatureGroupSpecOnlineStoreConfigSecurityConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FeatureGroupSpecOnlineStoreConfigSecurityConfig)(ptr)
	var objs []FeatureGroupSpecOnlineStoreConfigSecurityConfig
	if obj != nil {
		objs = []FeatureGroupSpecOnlineStoreConfigSecurityConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfigSecurityConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FeatureGroupSpecOnlineStoreConfigSecurityConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FeatureGroupSpecOnlineStoreConfigSecurityConfig)(ptr) = FeatureGroupSpecOnlineStoreConfigSecurityConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FeatureGroupSpecOnlineStoreConfigSecurityConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FeatureGroupSpecOnlineStoreConfigSecurityConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FeatureGroupSpecOnlineStoreConfigSecurityConfig)(ptr) = objs[0]
			} else {
				*(*FeatureGroupSpecOnlineStoreConfigSecurityConfig)(ptr) = FeatureGroupSpecOnlineStoreConfigSecurityConfig{}
			}
		} else {
			*(*FeatureGroupSpecOnlineStoreConfigSecurityConfig)(ptr) = FeatureGroupSpecOnlineStoreConfigSecurityConfig{}
		}
	default:
		iter.ReportError("decode FeatureGroupSpecOnlineStoreConfigSecurityConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ModelSpecContainerImageConfigCodec struct {
}

func (ModelSpecContainerImageConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ModelSpecContainerImageConfig)(ptr) == nil
}

func (ModelSpecContainerImageConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ModelSpecContainerImageConfig)(ptr)
	var objs []ModelSpecContainerImageConfig
	if obj != nil {
		objs = []ModelSpecContainerImageConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecContainerImageConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ModelSpecContainerImageConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ModelSpecContainerImageConfig)(ptr) = ModelSpecContainerImageConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ModelSpecContainerImageConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecContainerImageConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ModelSpecContainerImageConfig)(ptr) = objs[0]
			} else {
				*(*ModelSpecContainerImageConfig)(ptr) = ModelSpecContainerImageConfig{}
			}
		} else {
			*(*ModelSpecContainerImageConfig)(ptr) = ModelSpecContainerImageConfig{}
		}
	default:
		iter.ReportError("decode ModelSpecContainerImageConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ModelSpecPrimaryContainerCodec struct {
}

func (ModelSpecPrimaryContainerCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ModelSpecPrimaryContainer)(ptr) == nil
}

func (ModelSpecPrimaryContainerCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ModelSpecPrimaryContainer)(ptr)
	var objs []ModelSpecPrimaryContainer
	if obj != nil {
		objs = []ModelSpecPrimaryContainer{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainer{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ModelSpecPrimaryContainerCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ModelSpecPrimaryContainer)(ptr) = ModelSpecPrimaryContainer{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ModelSpecPrimaryContainer

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainer{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ModelSpecPrimaryContainer)(ptr) = objs[0]
			} else {
				*(*ModelSpecPrimaryContainer)(ptr) = ModelSpecPrimaryContainer{}
			}
		} else {
			*(*ModelSpecPrimaryContainer)(ptr) = ModelSpecPrimaryContainer{}
		}
	default:
		iter.ReportError("decode ModelSpecPrimaryContainer", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ModelSpecPrimaryContainerImageConfigCodec struct {
}

func (ModelSpecPrimaryContainerImageConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ModelSpecPrimaryContainerImageConfig)(ptr) == nil
}

func (ModelSpecPrimaryContainerImageConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ModelSpecPrimaryContainerImageConfig)(ptr)
	var objs []ModelSpecPrimaryContainerImageConfig
	if obj != nil {
		objs = []ModelSpecPrimaryContainerImageConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainerImageConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ModelSpecPrimaryContainerImageConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ModelSpecPrimaryContainerImageConfig)(ptr) = ModelSpecPrimaryContainerImageConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ModelSpecPrimaryContainerImageConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecPrimaryContainerImageConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ModelSpecPrimaryContainerImageConfig)(ptr) = objs[0]
			} else {
				*(*ModelSpecPrimaryContainerImageConfig)(ptr) = ModelSpecPrimaryContainerImageConfig{}
			}
		} else {
			*(*ModelSpecPrimaryContainerImageConfig)(ptr) = ModelSpecPrimaryContainerImageConfig{}
		}
	default:
		iter.ReportError("decode ModelSpecPrimaryContainerImageConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ModelSpecVpcConfigCodec struct {
}

func (ModelSpecVpcConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ModelSpecVpcConfig)(ptr) == nil
}

func (ModelSpecVpcConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ModelSpecVpcConfig)(ptr)
	var objs []ModelSpecVpcConfig
	if obj != nil {
		objs = []ModelSpecVpcConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecVpcConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ModelSpecVpcConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ModelSpecVpcConfig)(ptr) = ModelSpecVpcConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ModelSpecVpcConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ModelSpecVpcConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ModelSpecVpcConfig)(ptr) = objs[0]
			} else {
				*(*ModelSpecVpcConfig)(ptr) = ModelSpecVpcConfig{}
			}
		} else {
			*(*ModelSpecVpcConfig)(ptr) = ModelSpecVpcConfig{}
		}
	default:
		iter.ReportError("decode ModelSpecVpcConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsCodec struct {
}

func (UserProfileSpecUserSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettings)(ptr) == nil
}

func (UserProfileSpecUserSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettings)(ptr)
	var objs []UserProfileSpecUserSettings
	if obj != nil {
		objs = []UserProfileSpecUserSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettings)(ptr) = UserProfileSpecUserSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettings)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettings)(ptr) = UserProfileSpecUserSettings{}
			}
		} else {
			*(*UserProfileSpecUserSettings)(ptr) = UserProfileSpecUserSettings{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsJupyterServerAppSettingsCodec struct {
}

func (UserProfileSpecUserSettingsJupyterServerAppSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettingsJupyterServerAppSettings)(ptr) == nil
}

func (UserProfileSpecUserSettingsJupyterServerAppSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettingsJupyterServerAppSettings)(ptr)
	var objs []UserProfileSpecUserSettingsJupyterServerAppSettings
	if obj != nil {
		objs = []UserProfileSpecUserSettingsJupyterServerAppSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsJupyterServerAppSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettingsJupyterServerAppSettings)(ptr) = UserProfileSpecUserSettingsJupyterServerAppSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettingsJupyterServerAppSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettingsJupyterServerAppSettings)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettingsJupyterServerAppSettings)(ptr) = UserProfileSpecUserSettingsJupyterServerAppSettings{}
			}
		} else {
			*(*UserProfileSpecUserSettingsJupyterServerAppSettings)(ptr) = UserProfileSpecUserSettingsJupyterServerAppSettings{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettingsJupyterServerAppSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec struct {
}

func (UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) == nil
}

func (UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr)
	var objs []UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec
	if obj != nil {
		objs = []UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}
			}
		} else {
			*(*UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettingsJupyterServerAppSettingsDefaultResourceSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsKernelGatewayAppSettingsCodec struct {
}

func (UserProfileSpecUserSettingsKernelGatewayAppSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettingsKernelGatewayAppSettings)(ptr) == nil
}

func (UserProfileSpecUserSettingsKernelGatewayAppSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettingsKernelGatewayAppSettings)(ptr)
	var objs []UserProfileSpecUserSettingsKernelGatewayAppSettings
	if obj != nil {
		objs = []UserProfileSpecUserSettingsKernelGatewayAppSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsKernelGatewayAppSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettingsKernelGatewayAppSettings)(ptr) = UserProfileSpecUserSettingsKernelGatewayAppSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettingsKernelGatewayAppSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettingsKernelGatewayAppSettings)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettingsKernelGatewayAppSettings)(ptr) = UserProfileSpecUserSettingsKernelGatewayAppSettings{}
			}
		} else {
			*(*UserProfileSpecUserSettingsKernelGatewayAppSettings)(ptr) = UserProfileSpecUserSettingsKernelGatewayAppSettings{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettingsKernelGatewayAppSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec struct {
}

func (UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) == nil
}

func (UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr)
	var objs []UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec
	if obj != nil {
		objs = []UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}
			}
		} else {
			*(*UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettingsKernelGatewayAppSettingsDefaultResourceSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsSharingSettingsCodec struct {
}

func (UserProfileSpecUserSettingsSharingSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettingsSharingSettings)(ptr) == nil
}

func (UserProfileSpecUserSettingsSharingSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettingsSharingSettings)(ptr)
	var objs []UserProfileSpecUserSettingsSharingSettings
	if obj != nil {
		objs = []UserProfileSpecUserSettingsSharingSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsSharingSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsSharingSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettingsSharingSettings)(ptr) = UserProfileSpecUserSettingsSharingSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettingsSharingSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsSharingSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettingsSharingSettings)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettingsSharingSettings)(ptr) = UserProfileSpecUserSettingsSharingSettings{}
			}
		} else {
			*(*UserProfileSpecUserSettingsSharingSettings)(ptr) = UserProfileSpecUserSettingsSharingSettings{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettingsSharingSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsTensorBoardAppSettingsCodec struct {
}

func (UserProfileSpecUserSettingsTensorBoardAppSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettingsTensorBoardAppSettings)(ptr) == nil
}

func (UserProfileSpecUserSettingsTensorBoardAppSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettingsTensorBoardAppSettings)(ptr)
	var objs []UserProfileSpecUserSettingsTensorBoardAppSettings
	if obj != nil {
		objs = []UserProfileSpecUserSettingsTensorBoardAppSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsTensorBoardAppSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettingsTensorBoardAppSettings)(ptr) = UserProfileSpecUserSettingsTensorBoardAppSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettingsTensorBoardAppSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettingsTensorBoardAppSettings)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettingsTensorBoardAppSettings)(ptr) = UserProfileSpecUserSettingsTensorBoardAppSettings{}
			}
		} else {
			*(*UserProfileSpecUserSettingsTensorBoardAppSettings)(ptr) = UserProfileSpecUserSettingsTensorBoardAppSettings{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettingsTensorBoardAppSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec struct {
}

func (UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) == nil
}

func (UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr)
	var objs []UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec
	if obj != nil {
		objs = []UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = objs[0]
			} else {
				*(*UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}
			}
		} else {
			*(*UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec)(ptr) = UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec{}
		}
	default:
		iter.ReportError("decode UserProfileSpecUserSettingsTensorBoardAppSettingsDefaultResourceSpec", "unexpected JSON type")
	}
}
