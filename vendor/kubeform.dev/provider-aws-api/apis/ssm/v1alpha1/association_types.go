/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Association struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssociationSpec   `json:"spec,omitempty"`
	Status            AssociationStatus `json:"status,omitempty"`
}

type AssociationSpec struct {
	AssociationSpec2 `json:",inline"`
	// +optional
	KubeformOutput AssociationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type AssociationSpecOutputLocation struct {
	S3BucketName *string `json:"s3BucketName" tf:"s3_bucket_name"`
	// +optional
	S3KeyPrefix *string `json:"s3KeyPrefix,omitempty" tf:"s3_key_prefix"`
}

type AssociationSpecTargets struct {
	Key    *string  `json:"key" tf:"key"`
	Values []string `json:"values" tf:"values"`
}

type AssociationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ApplyOnlyAtCronInterval *bool `json:"applyOnlyAtCronInterval,omitempty" tf:"apply_only_at_cron_interval"`
	// +optional
	AssociationID *string `json:"associationID,omitempty" tf:"association_id"`
	// +optional
	AssociationName *string `json:"associationName,omitempty" tf:"association_name"`
	// +optional
	AutomationTargetParameterName *string `json:"automationTargetParameterName,omitempty" tf:"automation_target_parameter_name"`
	// +optional
	ComplianceSeverity *string `json:"complianceSeverity,omitempty" tf:"compliance_severity"`
	// +optional
	DocumentVersion *string `json:"documentVersion,omitempty" tf:"document_version"`
	// +optional
	InstanceID *string `json:"instanceID,omitempty" tf:"instance_id"`
	// +optional
	MaxConcurrency *string `json:"maxConcurrency,omitempty" tf:"max_concurrency"`
	// +optional
	MaxErrors *string `json:"maxErrors,omitempty" tf:"max_errors"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	OutputLocation *AssociationSpecOutputLocation `json:"outputLocation,omitempty" tf:"output_location"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
	// +optional
	ScheduleExpression *string `json:"scheduleExpression,omitempty" tf:"schedule_expression"`
	// +optional
	// +kubebuilder:validation:MaxItems=5
	Targets []AssociationSpecTargets `json:"targets,omitempty" tf:"targets"`
}

type AssociationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AssociationList is a list of Associations
type AssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Association CRD objects
	Items []Association `json:"items,omitempty"`
}
