/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AssociationSpecOutputLocation{}).Type1()):                                                           AssociationSpecOutputLocationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParameters{}).Type1()):                                       MaintenanceWindowTaskSpecTaskInvocationParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{}).Type1()):                   MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{}).Type1()):                       MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{}).Type1()):                   MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{}).Type1()):   MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{}).Type1()): MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{}).Type1()):                MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResourceDataSyncSpecS3Destination{}).Type1()):                                                       ResourceDataSyncSpecS3DestinationCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AssociationSpecOutputLocation{}).Type1()):                                                           AssociationSpecOutputLocationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParameters{}).Type1()):                                       MaintenanceWindowTaskSpecTaskInvocationParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{}).Type1()):                   MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{}).Type1()):                       MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{}).Type1()):                   MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{}).Type1()):   MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{}).Type1()): MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{}).Type1()):                MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParametersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ResourceDataSyncSpecS3Destination{}).Type1()):                                                       ResourceDataSyncSpecS3DestinationCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AssociationSpecOutputLocationCodec struct {
}

func (AssociationSpecOutputLocationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AssociationSpecOutputLocation)(ptr) == nil
}

func (AssociationSpecOutputLocationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AssociationSpecOutputLocation)(ptr)
	var objs []AssociationSpecOutputLocation
	if obj != nil {
		objs = []AssociationSpecOutputLocation{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AssociationSpecOutputLocation{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AssociationSpecOutputLocationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AssociationSpecOutputLocation)(ptr) = AssociationSpecOutputLocation{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AssociationSpecOutputLocation

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AssociationSpecOutputLocation{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AssociationSpecOutputLocation)(ptr) = objs[0]
			} else {
				*(*AssociationSpecOutputLocation)(ptr) = AssociationSpecOutputLocation{}
			}
		} else {
			*(*AssociationSpecOutputLocation)(ptr) = AssociationSpecOutputLocation{}
		}
	default:
		iter.ReportError("decode AssociationSpecOutputLocation", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MaintenanceWindowTaskSpecTaskInvocationParametersCodec struct {
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MaintenanceWindowTaskSpecTaskInvocationParameters)(ptr) == nil
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MaintenanceWindowTaskSpecTaskInvocationParameters)(ptr)
	var objs []MaintenanceWindowTaskSpecTaskInvocationParameters
	if obj != nil {
		objs = []MaintenanceWindowTaskSpecTaskInvocationParameters{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParameters{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MaintenanceWindowTaskSpecTaskInvocationParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParameters{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MaintenanceWindowTaskSpecTaskInvocationParameters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParameters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MaintenanceWindowTaskSpecTaskInvocationParameters)(ptr) = objs[0]
			} else {
				*(*MaintenanceWindowTaskSpecTaskInvocationParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParameters{}
			}
		} else {
			*(*MaintenanceWindowTaskSpecTaskInvocationParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParameters{}
		}
	default:
		iter.ReportError("decode MaintenanceWindowTaskSpecTaskInvocationParameters", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParametersCodec struct {
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParametersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters)(ptr) == nil
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParametersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters)(ptr)
	var objs []MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters
	if obj != nil {
		objs = []MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParametersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters)(ptr) = objs[0]
			} else {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{}
			}
		} else {
			*(*MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters{}
		}
	default:
		iter.ReportError("decode MaintenanceWindowTaskSpecTaskInvocationParametersAutomationParameters", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParametersCodec struct {
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParametersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters)(ptr) == nil
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParametersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters)(ptr)
	var objs []MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters
	if obj != nil {
		objs = []MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParametersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters)(ptr) = objs[0]
			} else {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{}
			}
		} else {
			*(*MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters{}
		}
	default:
		iter.ReportError("decode MaintenanceWindowTaskSpecTaskInvocationParametersLambdaParameters", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCodec struct {
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters)(ptr) == nil
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters)(ptr)
	var objs []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters
	if obj != nil {
		objs = []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters)(ptr) = objs[0]
			} else {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{}
			}
		} else {
			*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters{}
		}
	default:
		iter.ReportError("decode MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParameters", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfigCodec struct {
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig)(ptr) == nil
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig)(ptr)
	var objs []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig
	if obj != nil {
		objs = []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig)(ptr) = objs[0]
			} else {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{}
			}
		} else {
			*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig{}
		}
	default:
		iter.ReportError("decode MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersCloudwatchConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfigCodec struct {
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig)(ptr) == nil
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig)(ptr)
	var objs []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig
	if obj != nil {
		objs = []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig)(ptr) = objs[0]
			} else {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{}
			}
		} else {
			*(*MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig{}
		}
	default:
		iter.ReportError("decode MaintenanceWindowTaskSpecTaskInvocationParametersRunCommandParametersNotificationConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParametersCodec struct {
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParametersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters)(ptr) == nil
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParametersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters)(ptr)
	var objs []MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters
	if obj != nil {
		objs = []MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParametersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters)(ptr) = objs[0]
			} else {
				*(*MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{}
			}
		} else {
			*(*MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters)(ptr) = MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters{}
		}
	default:
		iter.ReportError("decode MaintenanceWindowTaskSpecTaskInvocationParametersStepFunctionsParameters", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ResourceDataSyncSpecS3DestinationCodec struct {
}

func (ResourceDataSyncSpecS3DestinationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ResourceDataSyncSpecS3Destination)(ptr) == nil
}

func (ResourceDataSyncSpecS3DestinationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ResourceDataSyncSpecS3Destination)(ptr)
	var objs []ResourceDataSyncSpecS3Destination
	if obj != nil {
		objs = []ResourceDataSyncSpecS3Destination{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResourceDataSyncSpecS3Destination{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ResourceDataSyncSpecS3DestinationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ResourceDataSyncSpecS3Destination)(ptr) = ResourceDataSyncSpecS3Destination{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ResourceDataSyncSpecS3Destination

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ResourceDataSyncSpecS3Destination{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ResourceDataSyncSpecS3Destination)(ptr) = objs[0]
			} else {
				*(*ResourceDataSyncSpecS3Destination)(ptr) = ResourceDataSyncSpecS3Destination{}
			}
		} else {
			*(*ResourceDataSyncSpecS3Destination)(ptr) = ResourceDataSyncSpecS3Destination{}
		}
	default:
		iter.ReportError("decode ResourceDataSyncSpecS3Destination", "unexpected JSON type")
	}
}
