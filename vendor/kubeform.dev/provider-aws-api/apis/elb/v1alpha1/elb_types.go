/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Elb struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElbSpec   `json:"spec,omitempty"`
	Status            ElbStatus `json:"status,omitempty"`
}

type ElbSpec struct {
	ElbSpec2 `json:",inline"`
	// +optional
	KubeformOutput ElbSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ElbSpecAccessLogs struct {
	Bucket *string `json:"bucket" tf:"bucket"`
	// +optional
	BucketPrefix *string `json:"bucketPrefix,omitempty" tf:"bucket_prefix"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`
}

type ElbSpecHealthCheck struct {
	HealthyThreshold   *int64  `json:"healthyThreshold" tf:"healthy_threshold"`
	Interval           *int64  `json:"interval" tf:"interval"`
	Target             *string `json:"target" tf:"target"`
	Timeout            *int64  `json:"timeout" tf:"timeout"`
	UnhealthyThreshold *int64  `json:"unhealthyThreshold" tf:"unhealthy_threshold"`
}

type ElbSpecListener struct {
	InstancePort     *int64  `json:"instancePort" tf:"instance_port"`
	InstanceProtocol *string `json:"instanceProtocol" tf:"instance_protocol"`
	LbPort           *int64  `json:"lbPort" tf:"lb_port"`
	LbProtocol       *string `json:"lbProtocol" tf:"lb_protocol"`
	// +optional
	SslCertificateID *string `json:"sslCertificateID,omitempty" tf:"ssl_certificate_id"`
}

type ElbSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessLogs *ElbSpecAccessLogs `json:"accessLogs,omitempty" tf:"access_logs"`
	// +optional
	Arn *string `json:"arn,omitempty" tf:"arn"`
	// +optional
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`
	// +optional
	ConnectionDraining *bool `json:"connectionDraining,omitempty" tf:"connection_draining"`
	// +optional
	ConnectionDrainingTimeout *int64 `json:"connectionDrainingTimeout,omitempty" tf:"connection_draining_timeout"`
	// +optional
	CrossZoneLoadBalancing *bool `json:"crossZoneLoadBalancing,omitempty" tf:"cross_zone_load_balancing"`
	// +optional
	DnsName *string `json:"dnsName,omitempty" tf:"dns_name"`
	// +optional
	HealthCheck *ElbSpecHealthCheck `json:"healthCheck,omitempty" tf:"health_check"`
	// +optional
	IdleTimeout *int64 `json:"idleTimeout,omitempty" tf:"idle_timeout"`
	// +optional
	Instances []string `json:"instances,omitempty" tf:"instances"`
	// +optional
	Internal *bool             `json:"internal,omitempty" tf:"internal"`
	Listener []ElbSpecListener `json:"listener" tf:"listener"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`
	// +optional
	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`
	// +optional
	SourceSecurityGroup *string `json:"sourceSecurityGroup,omitempty" tf:"source_security_group"`
	// +optional
	SourceSecurityGroupID *string `json:"sourceSecurityGroupID,omitempty" tf:"source_security_group_id"`
	// +optional
	Subnets []string `json:"subnets,omitempty" tf:"subnets"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	ZoneID *string `json:"zoneID,omitempty" tf:"zone_id"`
}

type ElbStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ElbList is a list of Elbs
type ElbList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Elb CRD objects
	Items []Elb `json:"items,omitempty"`
}
