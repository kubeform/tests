/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAccountRecoverySetting{}).Type1()):                     UserPoolSpecAccountRecoverySettingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfig{}).Type1()):                      UserPoolSpecAdminCreateUserConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{}).Type1()): UserPoolSpecAdminCreateUserConfigInviteMessageTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecDeviceConfiguration{}).Type1()):                        UserPoolSpecDeviceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecEmailConfiguration{}).Type1()):                         UserPoolSpecEmailConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecLambdaConfig{}).Type1()):                               UserPoolSpecLambdaConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecPasswordPolicy{}).Type1()):                             UserPoolSpecPasswordPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaNumberAttributeConstraints{}).Type1()):           UserPoolSpecSchemaNumberAttributeConstraintsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaStringAttributeConstraints{}).Type1()):           UserPoolSpecSchemaStringAttributeConstraintsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSmsConfiguration{}).Type1()):                           UserPoolSpecSmsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSoftwareTokenMfaConfiguration{}).Type1()):              UserPoolSpecSoftwareTokenMfaConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUserPoolAddOns{}).Type1()):                             UserPoolSpecUserPoolAddOnsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUsernameConfiguration{}).Type1()):                      UserPoolSpecUsernameConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecVerificationMessageTemplate{}).Type1()):                UserPoolSpecVerificationMessageTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecAnalyticsConfiguration{}).Type1()):               UserPoolClientSpecAnalyticsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecTokenValidityUnits{}).Type1()):                   UserPoolClientSpecTokenValidityUnitsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAccountRecoverySetting{}).Type1()):                     UserPoolSpecAccountRecoverySettingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfig{}).Type1()):                      UserPoolSpecAdminCreateUserConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{}).Type1()): UserPoolSpecAdminCreateUserConfigInviteMessageTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecDeviceConfiguration{}).Type1()):                        UserPoolSpecDeviceConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecEmailConfiguration{}).Type1()):                         UserPoolSpecEmailConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecLambdaConfig{}).Type1()):                               UserPoolSpecLambdaConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecPasswordPolicy{}).Type1()):                             UserPoolSpecPasswordPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaNumberAttributeConstraints{}).Type1()):           UserPoolSpecSchemaNumberAttributeConstraintsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaStringAttributeConstraints{}).Type1()):           UserPoolSpecSchemaStringAttributeConstraintsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSmsConfiguration{}).Type1()):                           UserPoolSpecSmsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSoftwareTokenMfaConfiguration{}).Type1()):              UserPoolSpecSoftwareTokenMfaConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUserPoolAddOns{}).Type1()):                             UserPoolSpecUserPoolAddOnsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUsernameConfiguration{}).Type1()):                      UserPoolSpecUsernameConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecVerificationMessageTemplate{}).Type1()):                UserPoolSpecVerificationMessageTemplateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecAnalyticsConfiguration{}).Type1()):               UserPoolClientSpecAnalyticsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecTokenValidityUnits{}).Type1()):                   UserPoolClientSpecTokenValidityUnitsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type UserPoolSpecAccountRecoverySettingCodec struct {
}

func (UserPoolSpecAccountRecoverySettingCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecAccountRecoverySetting)(ptr) == nil
}

func (UserPoolSpecAccountRecoverySettingCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecAccountRecoverySetting)(ptr)
	var objs []UserPoolSpecAccountRecoverySetting
	if obj != nil {
		objs = []UserPoolSpecAccountRecoverySetting{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAccountRecoverySetting{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecAccountRecoverySettingCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecAccountRecoverySetting)(ptr) = UserPoolSpecAccountRecoverySetting{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecAccountRecoverySetting

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAccountRecoverySetting{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecAccountRecoverySetting)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecAccountRecoverySetting)(ptr) = UserPoolSpecAccountRecoverySetting{}
			}
		} else {
			*(*UserPoolSpecAccountRecoverySetting)(ptr) = UserPoolSpecAccountRecoverySetting{}
		}
	default:
		iter.ReportError("decode UserPoolSpecAccountRecoverySetting", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecAdminCreateUserConfigCodec struct {
}

func (UserPoolSpecAdminCreateUserConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecAdminCreateUserConfig)(ptr) == nil
}

func (UserPoolSpecAdminCreateUserConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecAdminCreateUserConfig)(ptr)
	var objs []UserPoolSpecAdminCreateUserConfig
	if obj != nil {
		objs = []UserPoolSpecAdminCreateUserConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecAdminCreateUserConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecAdminCreateUserConfig)(ptr) = UserPoolSpecAdminCreateUserConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecAdminCreateUserConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecAdminCreateUserConfig)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecAdminCreateUserConfig)(ptr) = UserPoolSpecAdminCreateUserConfig{}
			}
		} else {
			*(*UserPoolSpecAdminCreateUserConfig)(ptr) = UserPoolSpecAdminCreateUserConfig{}
		}
	default:
		iter.ReportError("decode UserPoolSpecAdminCreateUserConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecAdminCreateUserConfigInviteMessageTemplateCodec struct {
}

func (UserPoolSpecAdminCreateUserConfigInviteMessageTemplateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecAdminCreateUserConfigInviteMessageTemplate)(ptr) == nil
}

func (UserPoolSpecAdminCreateUserConfigInviteMessageTemplateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecAdminCreateUserConfigInviteMessageTemplate)(ptr)
	var objs []UserPoolSpecAdminCreateUserConfigInviteMessageTemplate
	if obj != nil {
		objs = []UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecAdminCreateUserConfigInviteMessageTemplateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecAdminCreateUserConfigInviteMessageTemplate)(ptr) = UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecAdminCreateUserConfigInviteMessageTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecAdminCreateUserConfigInviteMessageTemplate)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecAdminCreateUserConfigInviteMessageTemplate)(ptr) = UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{}
			}
		} else {
			*(*UserPoolSpecAdminCreateUserConfigInviteMessageTemplate)(ptr) = UserPoolSpecAdminCreateUserConfigInviteMessageTemplate{}
		}
	default:
		iter.ReportError("decode UserPoolSpecAdminCreateUserConfigInviteMessageTemplate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecDeviceConfigurationCodec struct {
}

func (UserPoolSpecDeviceConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecDeviceConfiguration)(ptr) == nil
}

func (UserPoolSpecDeviceConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecDeviceConfiguration)(ptr)
	var objs []UserPoolSpecDeviceConfiguration
	if obj != nil {
		objs = []UserPoolSpecDeviceConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecDeviceConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecDeviceConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecDeviceConfiguration)(ptr) = UserPoolSpecDeviceConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecDeviceConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecDeviceConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecDeviceConfiguration)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecDeviceConfiguration)(ptr) = UserPoolSpecDeviceConfiguration{}
			}
		} else {
			*(*UserPoolSpecDeviceConfiguration)(ptr) = UserPoolSpecDeviceConfiguration{}
		}
	default:
		iter.ReportError("decode UserPoolSpecDeviceConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecEmailConfigurationCodec struct {
}

func (UserPoolSpecEmailConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecEmailConfiguration)(ptr) == nil
}

func (UserPoolSpecEmailConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecEmailConfiguration)(ptr)
	var objs []UserPoolSpecEmailConfiguration
	if obj != nil {
		objs = []UserPoolSpecEmailConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecEmailConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecEmailConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecEmailConfiguration)(ptr) = UserPoolSpecEmailConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecEmailConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecEmailConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecEmailConfiguration)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecEmailConfiguration)(ptr) = UserPoolSpecEmailConfiguration{}
			}
		} else {
			*(*UserPoolSpecEmailConfiguration)(ptr) = UserPoolSpecEmailConfiguration{}
		}
	default:
		iter.ReportError("decode UserPoolSpecEmailConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecLambdaConfigCodec struct {
}

func (UserPoolSpecLambdaConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecLambdaConfig)(ptr) == nil
}

func (UserPoolSpecLambdaConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecLambdaConfig)(ptr)
	var objs []UserPoolSpecLambdaConfig
	if obj != nil {
		objs = []UserPoolSpecLambdaConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecLambdaConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecLambdaConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecLambdaConfig)(ptr) = UserPoolSpecLambdaConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecLambdaConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecLambdaConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecLambdaConfig)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecLambdaConfig)(ptr) = UserPoolSpecLambdaConfig{}
			}
		} else {
			*(*UserPoolSpecLambdaConfig)(ptr) = UserPoolSpecLambdaConfig{}
		}
	default:
		iter.ReportError("decode UserPoolSpecLambdaConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecPasswordPolicyCodec struct {
}

func (UserPoolSpecPasswordPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecPasswordPolicy)(ptr) == nil
}

func (UserPoolSpecPasswordPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecPasswordPolicy)(ptr)
	var objs []UserPoolSpecPasswordPolicy
	if obj != nil {
		objs = []UserPoolSpecPasswordPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecPasswordPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecPasswordPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecPasswordPolicy)(ptr) = UserPoolSpecPasswordPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecPasswordPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecPasswordPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecPasswordPolicy)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecPasswordPolicy)(ptr) = UserPoolSpecPasswordPolicy{}
			}
		} else {
			*(*UserPoolSpecPasswordPolicy)(ptr) = UserPoolSpecPasswordPolicy{}
		}
	default:
		iter.ReportError("decode UserPoolSpecPasswordPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecSchemaNumberAttributeConstraintsCodec struct {
}

func (UserPoolSpecSchemaNumberAttributeConstraintsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecSchemaNumberAttributeConstraints)(ptr) == nil
}

func (UserPoolSpecSchemaNumberAttributeConstraintsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecSchemaNumberAttributeConstraints)(ptr)
	var objs []UserPoolSpecSchemaNumberAttributeConstraints
	if obj != nil {
		objs = []UserPoolSpecSchemaNumberAttributeConstraints{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaNumberAttributeConstraints{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecSchemaNumberAttributeConstraintsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecSchemaNumberAttributeConstraints)(ptr) = UserPoolSpecSchemaNumberAttributeConstraints{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecSchemaNumberAttributeConstraints

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaNumberAttributeConstraints{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecSchemaNumberAttributeConstraints)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecSchemaNumberAttributeConstraints)(ptr) = UserPoolSpecSchemaNumberAttributeConstraints{}
			}
		} else {
			*(*UserPoolSpecSchemaNumberAttributeConstraints)(ptr) = UserPoolSpecSchemaNumberAttributeConstraints{}
		}
	default:
		iter.ReportError("decode UserPoolSpecSchemaNumberAttributeConstraints", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecSchemaStringAttributeConstraintsCodec struct {
}

func (UserPoolSpecSchemaStringAttributeConstraintsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecSchemaStringAttributeConstraints)(ptr) == nil
}

func (UserPoolSpecSchemaStringAttributeConstraintsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecSchemaStringAttributeConstraints)(ptr)
	var objs []UserPoolSpecSchemaStringAttributeConstraints
	if obj != nil {
		objs = []UserPoolSpecSchemaStringAttributeConstraints{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaStringAttributeConstraints{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecSchemaStringAttributeConstraintsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecSchemaStringAttributeConstraints)(ptr) = UserPoolSpecSchemaStringAttributeConstraints{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecSchemaStringAttributeConstraints

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSchemaStringAttributeConstraints{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecSchemaStringAttributeConstraints)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecSchemaStringAttributeConstraints)(ptr) = UserPoolSpecSchemaStringAttributeConstraints{}
			}
		} else {
			*(*UserPoolSpecSchemaStringAttributeConstraints)(ptr) = UserPoolSpecSchemaStringAttributeConstraints{}
		}
	default:
		iter.ReportError("decode UserPoolSpecSchemaStringAttributeConstraints", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecSmsConfigurationCodec struct {
}

func (UserPoolSpecSmsConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecSmsConfiguration)(ptr) == nil
}

func (UserPoolSpecSmsConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecSmsConfiguration)(ptr)
	var objs []UserPoolSpecSmsConfiguration
	if obj != nil {
		objs = []UserPoolSpecSmsConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSmsConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecSmsConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecSmsConfiguration)(ptr) = UserPoolSpecSmsConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecSmsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSmsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecSmsConfiguration)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecSmsConfiguration)(ptr) = UserPoolSpecSmsConfiguration{}
			}
		} else {
			*(*UserPoolSpecSmsConfiguration)(ptr) = UserPoolSpecSmsConfiguration{}
		}
	default:
		iter.ReportError("decode UserPoolSpecSmsConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecSoftwareTokenMfaConfigurationCodec struct {
}

func (UserPoolSpecSoftwareTokenMfaConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecSoftwareTokenMfaConfiguration)(ptr) == nil
}

func (UserPoolSpecSoftwareTokenMfaConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecSoftwareTokenMfaConfiguration)(ptr)
	var objs []UserPoolSpecSoftwareTokenMfaConfiguration
	if obj != nil {
		objs = []UserPoolSpecSoftwareTokenMfaConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSoftwareTokenMfaConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecSoftwareTokenMfaConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecSoftwareTokenMfaConfiguration)(ptr) = UserPoolSpecSoftwareTokenMfaConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecSoftwareTokenMfaConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecSoftwareTokenMfaConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecSoftwareTokenMfaConfiguration)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecSoftwareTokenMfaConfiguration)(ptr) = UserPoolSpecSoftwareTokenMfaConfiguration{}
			}
		} else {
			*(*UserPoolSpecSoftwareTokenMfaConfiguration)(ptr) = UserPoolSpecSoftwareTokenMfaConfiguration{}
		}
	default:
		iter.ReportError("decode UserPoolSpecSoftwareTokenMfaConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecUserPoolAddOnsCodec struct {
}

func (UserPoolSpecUserPoolAddOnsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecUserPoolAddOns)(ptr) == nil
}

func (UserPoolSpecUserPoolAddOnsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecUserPoolAddOns)(ptr)
	var objs []UserPoolSpecUserPoolAddOns
	if obj != nil {
		objs = []UserPoolSpecUserPoolAddOns{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUserPoolAddOns{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecUserPoolAddOnsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecUserPoolAddOns)(ptr) = UserPoolSpecUserPoolAddOns{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecUserPoolAddOns

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUserPoolAddOns{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecUserPoolAddOns)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecUserPoolAddOns)(ptr) = UserPoolSpecUserPoolAddOns{}
			}
		} else {
			*(*UserPoolSpecUserPoolAddOns)(ptr) = UserPoolSpecUserPoolAddOns{}
		}
	default:
		iter.ReportError("decode UserPoolSpecUserPoolAddOns", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecUsernameConfigurationCodec struct {
}

func (UserPoolSpecUsernameConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecUsernameConfiguration)(ptr) == nil
}

func (UserPoolSpecUsernameConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecUsernameConfiguration)(ptr)
	var objs []UserPoolSpecUsernameConfiguration
	if obj != nil {
		objs = []UserPoolSpecUsernameConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUsernameConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecUsernameConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecUsernameConfiguration)(ptr) = UserPoolSpecUsernameConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecUsernameConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecUsernameConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecUsernameConfiguration)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecUsernameConfiguration)(ptr) = UserPoolSpecUsernameConfiguration{}
			}
		} else {
			*(*UserPoolSpecUsernameConfiguration)(ptr) = UserPoolSpecUsernameConfiguration{}
		}
	default:
		iter.ReportError("decode UserPoolSpecUsernameConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolSpecVerificationMessageTemplateCodec struct {
}

func (UserPoolSpecVerificationMessageTemplateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolSpecVerificationMessageTemplate)(ptr) == nil
}

func (UserPoolSpecVerificationMessageTemplateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolSpecVerificationMessageTemplate)(ptr)
	var objs []UserPoolSpecVerificationMessageTemplate
	if obj != nil {
		objs = []UserPoolSpecVerificationMessageTemplate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecVerificationMessageTemplate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolSpecVerificationMessageTemplateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolSpecVerificationMessageTemplate)(ptr) = UserPoolSpecVerificationMessageTemplate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolSpecVerificationMessageTemplate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolSpecVerificationMessageTemplate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolSpecVerificationMessageTemplate)(ptr) = objs[0]
			} else {
				*(*UserPoolSpecVerificationMessageTemplate)(ptr) = UserPoolSpecVerificationMessageTemplate{}
			}
		} else {
			*(*UserPoolSpecVerificationMessageTemplate)(ptr) = UserPoolSpecVerificationMessageTemplate{}
		}
	default:
		iter.ReportError("decode UserPoolSpecVerificationMessageTemplate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolClientSpecAnalyticsConfigurationCodec struct {
}

func (UserPoolClientSpecAnalyticsConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolClientSpecAnalyticsConfiguration)(ptr) == nil
}

func (UserPoolClientSpecAnalyticsConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolClientSpecAnalyticsConfiguration)(ptr)
	var objs []UserPoolClientSpecAnalyticsConfiguration
	if obj != nil {
		objs = []UserPoolClientSpecAnalyticsConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecAnalyticsConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolClientSpecAnalyticsConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolClientSpecAnalyticsConfiguration)(ptr) = UserPoolClientSpecAnalyticsConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolClientSpecAnalyticsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecAnalyticsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolClientSpecAnalyticsConfiguration)(ptr) = objs[0]
			} else {
				*(*UserPoolClientSpecAnalyticsConfiguration)(ptr) = UserPoolClientSpecAnalyticsConfiguration{}
			}
		} else {
			*(*UserPoolClientSpecAnalyticsConfiguration)(ptr) = UserPoolClientSpecAnalyticsConfiguration{}
		}
	default:
		iter.ReportError("decode UserPoolClientSpecAnalyticsConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type UserPoolClientSpecTokenValidityUnitsCodec struct {
}

func (UserPoolClientSpecTokenValidityUnitsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*UserPoolClientSpecTokenValidityUnits)(ptr) == nil
}

func (UserPoolClientSpecTokenValidityUnitsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*UserPoolClientSpecTokenValidityUnits)(ptr)
	var objs []UserPoolClientSpecTokenValidityUnits
	if obj != nil {
		objs = []UserPoolClientSpecTokenValidityUnits{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecTokenValidityUnits{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (UserPoolClientSpecTokenValidityUnitsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*UserPoolClientSpecTokenValidityUnits)(ptr) = UserPoolClientSpecTokenValidityUnits{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []UserPoolClientSpecTokenValidityUnits

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(UserPoolClientSpecTokenValidityUnits{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*UserPoolClientSpecTokenValidityUnits)(ptr) = objs[0]
			} else {
				*(*UserPoolClientSpecTokenValidityUnits)(ptr) = UserPoolClientSpecTokenValidityUnits{}
			}
		} else {
			*(*UserPoolClientSpecTokenValidityUnits)(ptr) = UserPoolClientSpecTokenValidityUnits{}
		}
	default:
		iter.ReportError("decode UserPoolClientSpecTokenValidityUnits", "unexpected JSON type")
	}
}
