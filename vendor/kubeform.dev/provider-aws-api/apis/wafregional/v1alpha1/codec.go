/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ByteMatchSetSpecByteMatchTuplesFieldToMatch{}).Type1()):                ByteMatchSetSpecByteMatchTuplesFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RegexMatchSetSpecRegexMatchTupleFieldToMatch{}).Type1()):               RegexMatchSetSpecRegexMatchTupleFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RuleGroupSpecActivatedRuleAction{}).Type1()):                           RuleGroupSpecActivatedRuleActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SizeConstraintSetSpecSizeConstraintsFieldToMatch{}).Type1()):           SizeConstraintSetSpecSizeConstraintsFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{}).Type1()): SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecDefaultAction{}).Type1()):                                    WebACLSpecDefaultActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfiguration{}).Type1()):                             WebACLSpecLoggingConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfigurationRedactedFields{}).Type1()):               WebACLSpecLoggingConfigurationRedactedFieldsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleAction{}).Type1()):                                       WebACLSpecRuleActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleOverrideAction{}).Type1()):                               WebACLSpecRuleOverrideActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(XssMatchSetSpecXssMatchTupleFieldToMatch{}).Type1()):                   XssMatchSetSpecXssMatchTupleFieldToMatchCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ByteMatchSetSpecByteMatchTuplesFieldToMatch{}).Type1()):                ByteMatchSetSpecByteMatchTuplesFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RegexMatchSetSpecRegexMatchTupleFieldToMatch{}).Type1()):               RegexMatchSetSpecRegexMatchTupleFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(RuleGroupSpecActivatedRuleAction{}).Type1()):                           RuleGroupSpecActivatedRuleActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SizeConstraintSetSpecSizeConstraintsFieldToMatch{}).Type1()):           SizeConstraintSetSpecSizeConstraintsFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{}).Type1()): SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatchCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecDefaultAction{}).Type1()):                                    WebACLSpecDefaultActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfiguration{}).Type1()):                             WebACLSpecLoggingConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfigurationRedactedFields{}).Type1()):               WebACLSpecLoggingConfigurationRedactedFieldsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleAction{}).Type1()):                                       WebACLSpecRuleActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleOverrideAction{}).Type1()):                               WebACLSpecRuleOverrideActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(XssMatchSetSpecXssMatchTupleFieldToMatch{}).Type1()):                   XssMatchSetSpecXssMatchTupleFieldToMatchCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ByteMatchSetSpecByteMatchTuplesFieldToMatchCodec struct {
}

func (ByteMatchSetSpecByteMatchTuplesFieldToMatchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ByteMatchSetSpecByteMatchTuplesFieldToMatch)(ptr) == nil
}

func (ByteMatchSetSpecByteMatchTuplesFieldToMatchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ByteMatchSetSpecByteMatchTuplesFieldToMatch)(ptr)
	var objs []ByteMatchSetSpecByteMatchTuplesFieldToMatch
	if obj != nil {
		objs = []ByteMatchSetSpecByteMatchTuplesFieldToMatch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ByteMatchSetSpecByteMatchTuplesFieldToMatch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ByteMatchSetSpecByteMatchTuplesFieldToMatchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ByteMatchSetSpecByteMatchTuplesFieldToMatch)(ptr) = ByteMatchSetSpecByteMatchTuplesFieldToMatch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ByteMatchSetSpecByteMatchTuplesFieldToMatch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ByteMatchSetSpecByteMatchTuplesFieldToMatch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ByteMatchSetSpecByteMatchTuplesFieldToMatch)(ptr) = objs[0]
			} else {
				*(*ByteMatchSetSpecByteMatchTuplesFieldToMatch)(ptr) = ByteMatchSetSpecByteMatchTuplesFieldToMatch{}
			}
		} else {
			*(*ByteMatchSetSpecByteMatchTuplesFieldToMatch)(ptr) = ByteMatchSetSpecByteMatchTuplesFieldToMatch{}
		}
	default:
		iter.ReportError("decode ByteMatchSetSpecByteMatchTuplesFieldToMatch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type RegexMatchSetSpecRegexMatchTupleFieldToMatchCodec struct {
}

func (RegexMatchSetSpecRegexMatchTupleFieldToMatchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*RegexMatchSetSpecRegexMatchTupleFieldToMatch)(ptr) == nil
}

func (RegexMatchSetSpecRegexMatchTupleFieldToMatchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*RegexMatchSetSpecRegexMatchTupleFieldToMatch)(ptr)
	var objs []RegexMatchSetSpecRegexMatchTupleFieldToMatch
	if obj != nil {
		objs = []RegexMatchSetSpecRegexMatchTupleFieldToMatch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegexMatchSetSpecRegexMatchTupleFieldToMatch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (RegexMatchSetSpecRegexMatchTupleFieldToMatchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*RegexMatchSetSpecRegexMatchTupleFieldToMatch)(ptr) = RegexMatchSetSpecRegexMatchTupleFieldToMatch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []RegexMatchSetSpecRegexMatchTupleFieldToMatch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RegexMatchSetSpecRegexMatchTupleFieldToMatch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*RegexMatchSetSpecRegexMatchTupleFieldToMatch)(ptr) = objs[0]
			} else {
				*(*RegexMatchSetSpecRegexMatchTupleFieldToMatch)(ptr) = RegexMatchSetSpecRegexMatchTupleFieldToMatch{}
			}
		} else {
			*(*RegexMatchSetSpecRegexMatchTupleFieldToMatch)(ptr) = RegexMatchSetSpecRegexMatchTupleFieldToMatch{}
		}
	default:
		iter.ReportError("decode RegexMatchSetSpecRegexMatchTupleFieldToMatch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type RuleGroupSpecActivatedRuleActionCodec struct {
}

func (RuleGroupSpecActivatedRuleActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*RuleGroupSpecActivatedRuleAction)(ptr) == nil
}

func (RuleGroupSpecActivatedRuleActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*RuleGroupSpecActivatedRuleAction)(ptr)
	var objs []RuleGroupSpecActivatedRuleAction
	if obj != nil {
		objs = []RuleGroupSpecActivatedRuleAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RuleGroupSpecActivatedRuleAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (RuleGroupSpecActivatedRuleActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*RuleGroupSpecActivatedRuleAction)(ptr) = RuleGroupSpecActivatedRuleAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []RuleGroupSpecActivatedRuleAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(RuleGroupSpecActivatedRuleAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*RuleGroupSpecActivatedRuleAction)(ptr) = objs[0]
			} else {
				*(*RuleGroupSpecActivatedRuleAction)(ptr) = RuleGroupSpecActivatedRuleAction{}
			}
		} else {
			*(*RuleGroupSpecActivatedRuleAction)(ptr) = RuleGroupSpecActivatedRuleAction{}
		}
	default:
		iter.ReportError("decode RuleGroupSpecActivatedRuleAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SizeConstraintSetSpecSizeConstraintsFieldToMatchCodec struct {
}

func (SizeConstraintSetSpecSizeConstraintsFieldToMatchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SizeConstraintSetSpecSizeConstraintsFieldToMatch)(ptr) == nil
}

func (SizeConstraintSetSpecSizeConstraintsFieldToMatchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SizeConstraintSetSpecSizeConstraintsFieldToMatch)(ptr)
	var objs []SizeConstraintSetSpecSizeConstraintsFieldToMatch
	if obj != nil {
		objs = []SizeConstraintSetSpecSizeConstraintsFieldToMatch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SizeConstraintSetSpecSizeConstraintsFieldToMatch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SizeConstraintSetSpecSizeConstraintsFieldToMatchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SizeConstraintSetSpecSizeConstraintsFieldToMatch)(ptr) = SizeConstraintSetSpecSizeConstraintsFieldToMatch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SizeConstraintSetSpecSizeConstraintsFieldToMatch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SizeConstraintSetSpecSizeConstraintsFieldToMatch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SizeConstraintSetSpecSizeConstraintsFieldToMatch)(ptr) = objs[0]
			} else {
				*(*SizeConstraintSetSpecSizeConstraintsFieldToMatch)(ptr) = SizeConstraintSetSpecSizeConstraintsFieldToMatch{}
			}
		} else {
			*(*SizeConstraintSetSpecSizeConstraintsFieldToMatch)(ptr) = SizeConstraintSetSpecSizeConstraintsFieldToMatch{}
		}
	default:
		iter.ReportError("decode SizeConstraintSetSpecSizeConstraintsFieldToMatch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatchCodec struct {
}

func (SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch)(ptr) == nil
}

func (SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch)(ptr)
	var objs []SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch
	if obj != nil {
		objs = []SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch)(ptr) = SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch)(ptr) = objs[0]
			} else {
				*(*SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch)(ptr) = SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{}
			}
		} else {
			*(*SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch)(ptr) = SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch{}
		}
	default:
		iter.ReportError("decode SqlInjectionMatchSetSpecSqlInjectionMatchTupleFieldToMatch", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WebACLSpecDefaultActionCodec struct {
}

func (WebACLSpecDefaultActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WebACLSpecDefaultAction)(ptr) == nil
}

func (WebACLSpecDefaultActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WebACLSpecDefaultAction)(ptr)
	var objs []WebACLSpecDefaultAction
	if obj != nil {
		objs = []WebACLSpecDefaultAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecDefaultAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WebACLSpecDefaultActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WebACLSpecDefaultAction)(ptr) = WebACLSpecDefaultAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WebACLSpecDefaultAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecDefaultAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WebACLSpecDefaultAction)(ptr) = objs[0]
			} else {
				*(*WebACLSpecDefaultAction)(ptr) = WebACLSpecDefaultAction{}
			}
		} else {
			*(*WebACLSpecDefaultAction)(ptr) = WebACLSpecDefaultAction{}
		}
	default:
		iter.ReportError("decode WebACLSpecDefaultAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WebACLSpecLoggingConfigurationCodec struct {
}

func (WebACLSpecLoggingConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WebACLSpecLoggingConfiguration)(ptr) == nil
}

func (WebACLSpecLoggingConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WebACLSpecLoggingConfiguration)(ptr)
	var objs []WebACLSpecLoggingConfiguration
	if obj != nil {
		objs = []WebACLSpecLoggingConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WebACLSpecLoggingConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WebACLSpecLoggingConfiguration)(ptr) = WebACLSpecLoggingConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WebACLSpecLoggingConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WebACLSpecLoggingConfiguration)(ptr) = objs[0]
			} else {
				*(*WebACLSpecLoggingConfiguration)(ptr) = WebACLSpecLoggingConfiguration{}
			}
		} else {
			*(*WebACLSpecLoggingConfiguration)(ptr) = WebACLSpecLoggingConfiguration{}
		}
	default:
		iter.ReportError("decode WebACLSpecLoggingConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WebACLSpecLoggingConfigurationRedactedFieldsCodec struct {
}

func (WebACLSpecLoggingConfigurationRedactedFieldsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WebACLSpecLoggingConfigurationRedactedFields)(ptr) == nil
}

func (WebACLSpecLoggingConfigurationRedactedFieldsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WebACLSpecLoggingConfigurationRedactedFields)(ptr)
	var objs []WebACLSpecLoggingConfigurationRedactedFields
	if obj != nil {
		objs = []WebACLSpecLoggingConfigurationRedactedFields{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfigurationRedactedFields{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WebACLSpecLoggingConfigurationRedactedFieldsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WebACLSpecLoggingConfigurationRedactedFields)(ptr) = WebACLSpecLoggingConfigurationRedactedFields{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WebACLSpecLoggingConfigurationRedactedFields

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecLoggingConfigurationRedactedFields{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WebACLSpecLoggingConfigurationRedactedFields)(ptr) = objs[0]
			} else {
				*(*WebACLSpecLoggingConfigurationRedactedFields)(ptr) = WebACLSpecLoggingConfigurationRedactedFields{}
			}
		} else {
			*(*WebACLSpecLoggingConfigurationRedactedFields)(ptr) = WebACLSpecLoggingConfigurationRedactedFields{}
		}
	default:
		iter.ReportError("decode WebACLSpecLoggingConfigurationRedactedFields", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WebACLSpecRuleActionCodec struct {
}

func (WebACLSpecRuleActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WebACLSpecRuleAction)(ptr) == nil
}

func (WebACLSpecRuleActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WebACLSpecRuleAction)(ptr)
	var objs []WebACLSpecRuleAction
	if obj != nil {
		objs = []WebACLSpecRuleAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WebACLSpecRuleActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WebACLSpecRuleAction)(ptr) = WebACLSpecRuleAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WebACLSpecRuleAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WebACLSpecRuleAction)(ptr) = objs[0]
			} else {
				*(*WebACLSpecRuleAction)(ptr) = WebACLSpecRuleAction{}
			}
		} else {
			*(*WebACLSpecRuleAction)(ptr) = WebACLSpecRuleAction{}
		}
	default:
		iter.ReportError("decode WebACLSpecRuleAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WebACLSpecRuleOverrideActionCodec struct {
}

func (WebACLSpecRuleOverrideActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WebACLSpecRuleOverrideAction)(ptr) == nil
}

func (WebACLSpecRuleOverrideActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WebACLSpecRuleOverrideAction)(ptr)
	var objs []WebACLSpecRuleOverrideAction
	if obj != nil {
		objs = []WebACLSpecRuleOverrideAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleOverrideAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WebACLSpecRuleOverrideActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WebACLSpecRuleOverrideAction)(ptr) = WebACLSpecRuleOverrideAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WebACLSpecRuleOverrideAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WebACLSpecRuleOverrideAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WebACLSpecRuleOverrideAction)(ptr) = objs[0]
			} else {
				*(*WebACLSpecRuleOverrideAction)(ptr) = WebACLSpecRuleOverrideAction{}
			}
		} else {
			*(*WebACLSpecRuleOverrideAction)(ptr) = WebACLSpecRuleOverrideAction{}
		}
	default:
		iter.ReportError("decode WebACLSpecRuleOverrideAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type XssMatchSetSpecXssMatchTupleFieldToMatchCodec struct {
}

func (XssMatchSetSpecXssMatchTupleFieldToMatchCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*XssMatchSetSpecXssMatchTupleFieldToMatch)(ptr) == nil
}

func (XssMatchSetSpecXssMatchTupleFieldToMatchCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*XssMatchSetSpecXssMatchTupleFieldToMatch)(ptr)
	var objs []XssMatchSetSpecXssMatchTupleFieldToMatch
	if obj != nil {
		objs = []XssMatchSetSpecXssMatchTupleFieldToMatch{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(XssMatchSetSpecXssMatchTupleFieldToMatch{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (XssMatchSetSpecXssMatchTupleFieldToMatchCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*XssMatchSetSpecXssMatchTupleFieldToMatch)(ptr) = XssMatchSetSpecXssMatchTupleFieldToMatch{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []XssMatchSetSpecXssMatchTupleFieldToMatch

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(XssMatchSetSpecXssMatchTupleFieldToMatch{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*XssMatchSetSpecXssMatchTupleFieldToMatch)(ptr) = objs[0]
			} else {
				*(*XssMatchSetSpecXssMatchTupleFieldToMatch)(ptr) = XssMatchSetSpecXssMatchTupleFieldToMatch{}
			}
		} else {
			*(*XssMatchSetSpecXssMatchTupleFieldToMatch)(ptr) = XssMatchSetSpecXssMatchTupleFieldToMatch{}
		}
	default:
		iter.ReportError("decode XssMatchSetSpecXssMatchTupleFieldToMatch", "unexpected JSON type")
	}
}
