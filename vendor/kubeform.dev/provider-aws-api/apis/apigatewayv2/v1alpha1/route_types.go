/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Route struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteSpec   `json:"spec,omitempty"`
	Status            RouteStatus `json:"status,omitempty"`
}

type RouteSpec struct {
	RouteSpec2 `json:",inline"`
	// +optional
	KubeformOutput RouteSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RouteSpecRequestParameter struct {
	RequestParameterKey *string `json:"requestParameterKey" tf:"request_parameter_key"`
	Required            *bool   `json:"required" tf:"required"`
}

type RouteSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ApiID *string `json:"apiID" tf:"api_id"`
	// +optional
	ApiKeyRequired *bool `json:"apiKeyRequired,omitempty" tf:"api_key_required"`
	// +optional
	AuthorizationScopes []string `json:"authorizationScopes,omitempty" tf:"authorization_scopes"`
	// +optional
	AuthorizationType *string `json:"authorizationType,omitempty" tf:"authorization_type"`
	// +optional
	AuthorizerID *string `json:"authorizerID,omitempty" tf:"authorizer_id"`
	// +optional
	ModelSelectionExpression *string `json:"modelSelectionExpression,omitempty" tf:"model_selection_expression"`
	// +optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name"`
	// +optional
	RequestModels *map[string]string `json:"requestModels,omitempty" tf:"request_models"`
	// +optional
	RequestParameter []RouteSpecRequestParameter `json:"requestParameter,omitempty" tf:"request_parameter"`
	RouteKey         *string                     `json:"routeKey" tf:"route_key"`
	// +optional
	RouteResponseSelectionExpression *string `json:"routeResponseSelectionExpression,omitempty" tf:"route_response_selection_expression"`
	// +optional
	Target *string `json:"target,omitempty" tf:"target"`
}

type RouteStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RouteList is a list of Routes
type RouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Route CRD objects
	Items []Route `json:"items,omitempty"`
}
