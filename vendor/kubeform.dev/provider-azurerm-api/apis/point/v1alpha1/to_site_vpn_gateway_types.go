/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ToSiteVPNGateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ToSiteVPNGatewaySpec   `json:"spec,omitempty"`
	Status            ToSiteVPNGatewayStatus `json:"status,omitempty"`
}

type ToSiteVPNGatewaySpec struct {
	ToSiteVPNGatewaySpec2 `json:",inline"`
	// +optional
	KubeformOutput ToSiteVPNGatewaySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ToSiteVPNGatewaySpecConnectionConfigurationRoutePropagatedRouteTable struct {
	Ids []string `json:"ids" tf:"ids"`
	// +optional
	Labels []string `json:"labels,omitempty" tf:"labels"`
}

type ToSiteVPNGatewaySpecConnectionConfigurationRoute struct {
	AssociatedRouteTableID *string `json:"associatedRouteTableID" tf:"associated_route_table_id"`
	// +optional
	PropagatedRouteTable *ToSiteVPNGatewaySpecConnectionConfigurationRoutePropagatedRouteTable `json:"propagatedRouteTable,omitempty" tf:"propagated_route_table"`
}

type ToSiteVPNGatewaySpecConnectionConfigurationVpnClientAddressPool struct {
	AddressPrefixes []string `json:"addressPrefixes" tf:"address_prefixes"`
}

type ToSiteVPNGatewaySpecConnectionConfiguration struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Route                *ToSiteVPNGatewaySpecConnectionConfigurationRoute                `json:"route,omitempty" tf:"route"`
	VpnClientAddressPool *ToSiteVPNGatewaySpecConnectionConfigurationVpnClientAddressPool `json:"vpnClientAddressPool" tf:"vpn_client_address_pool"`
}

type ToSiteVPNGatewaySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ConnectionConfiguration *ToSiteVPNGatewaySpecConnectionConfiguration `json:"connectionConfiguration" tf:"connection_configuration"`
	// +optional
	DnsServers        []string `json:"dnsServers,omitempty" tf:"dns_servers"`
	Location          *string  `json:"location" tf:"location"`
	Name              *string  `json:"name" tf:"name"`
	ResourceGroupName *string  `json:"resourceGroupName" tf:"resource_group_name"`
	ScaleUnit         *int64   `json:"scaleUnit" tf:"scale_unit"`
	// +optional
	Tags                     *map[string]string `json:"tags,omitempty" tf:"tags"`
	VirtualHubID             *string            `json:"virtualHubID" tf:"virtual_hub_id"`
	VpnServerConfigurationID *string            `json:"vpnServerConfigurationID" tf:"vpn_server_configuration_id"`
}

type ToSiteVPNGatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ToSiteVPNGatewayList is a list of ToSiteVPNGateways
type ToSiteVPNGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ToSiteVPNGateway CRD objects
	Items []ToSiteVPNGateway `json:"items,omitempty"`
}
