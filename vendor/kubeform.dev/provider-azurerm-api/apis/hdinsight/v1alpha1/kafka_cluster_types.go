/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type KafkaCluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KafkaClusterSpec   `json:"spec,omitempty"`
	Status            KafkaClusterStatus `json:"status,omitempty"`
}

type KafkaClusterSpec struct {
	KafkaClusterSpec2 `json:",inline"`
	// +optional
	KubeformOutput KafkaClusterSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type KafkaClusterSpecComponentVersion struct {
	Kafka *string `json:"kafka" tf:"kafka"`
}

type KafkaClusterSpecGateway struct {
	// +optional
	// Deprecated
	Enabled  *bool   `json:"enabled,omitempty" tf:"enabled"`
	Password *string `json:"-" sensitive:"true" tf:"password"`
	Username *string `json:"username" tf:"username"`
}

type KafkaClusterSpecMetastoresAmbari struct {
	DatabaseName *string `json:"databaseName" tf:"database_name"`
	Password     *string `json:"-" sensitive:"true" tf:"password"`
	Server       *string `json:"server" tf:"server"`
	Username     *string `json:"username" tf:"username"`
}

type KafkaClusterSpecMetastoresHive struct {
	DatabaseName *string `json:"databaseName" tf:"database_name"`
	Password     *string `json:"-" sensitive:"true" tf:"password"`
	Server       *string `json:"server" tf:"server"`
	Username     *string `json:"username" tf:"username"`
}

type KafkaClusterSpecMetastoresOozie struct {
	DatabaseName *string `json:"databaseName" tf:"database_name"`
	Password     *string `json:"-" sensitive:"true" tf:"password"`
	Server       *string `json:"server" tf:"server"`
	Username     *string `json:"username" tf:"username"`
}

type KafkaClusterSpecMetastores struct {
	// +optional
	Ambari *KafkaClusterSpecMetastoresAmbari `json:"ambari,omitempty" tf:"ambari"`
	// +optional
	Hive *KafkaClusterSpecMetastoresHive `json:"hive,omitempty" tf:"hive"`
	// +optional
	Oozie *KafkaClusterSpecMetastoresOozie `json:"oozie,omitempty" tf:"oozie"`
}

type KafkaClusterSpecMonitor struct {
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceID" tf:"log_analytics_workspace_id"`
	PrimaryKey              *string `json:"-" sensitive:"true" tf:"primary_key"`
}

type KafkaClusterSpecRestProxy struct {
	SecurityGroupID *string `json:"securityGroupID" tf:"security_group_id"`
}

type KafkaClusterSpecRolesHeadNode struct {
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	Username *string `json:"username" tf:"username"`
	// +optional
	VirtualNetworkID *string `json:"virtualNetworkID,omitempty" tf:"virtual_network_id"`
	VmSize           *string `json:"vmSize" tf:"vm_size"`
}

type KafkaClusterSpecRolesKafkaManagementNode struct {
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	Username *string `json:"username" tf:"username"`
	// +optional
	VirtualNetworkID *string `json:"virtualNetworkID,omitempty" tf:"virtual_network_id"`
	VmSize           *string `json:"vmSize" tf:"vm_size"`
}

type KafkaClusterSpecRolesWorkerNode struct {
	// +optional
	// Deprecated
	MinInstanceCount     *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`
	NumberOfDisksPerNode *int64 `json:"numberOfDisksPerNode" tf:"number_of_disks_per_node"`
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`
	// +optional
	SubnetID            *string `json:"subnetID,omitempty" tf:"subnet_id"`
	TargetInstanceCount *int64  `json:"targetInstanceCount" tf:"target_instance_count"`
	Username            *string `json:"username" tf:"username"`
	// +optional
	VirtualNetworkID *string `json:"virtualNetworkID,omitempty" tf:"virtual_network_id"`
	VmSize           *string `json:"vmSize" tf:"vm_size"`
}

type KafkaClusterSpecRolesZookeeperNode struct {
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
	Username *string `json:"username" tf:"username"`
	// +optional
	VirtualNetworkID *string `json:"virtualNetworkID,omitempty" tf:"virtual_network_id"`
	VmSize           *string `json:"vmSize" tf:"vm_size"`
}

type KafkaClusterSpecRoles struct {
	HeadNode *KafkaClusterSpecRolesHeadNode `json:"headNode" tf:"head_node"`
	// +optional
	KafkaManagementNode *KafkaClusterSpecRolesKafkaManagementNode `json:"kafkaManagementNode,omitempty" tf:"kafka_management_node"`
	WorkerNode          *KafkaClusterSpecRolesWorkerNode          `json:"workerNode" tf:"worker_node"`
	ZookeeperNode       *KafkaClusterSpecRolesZookeeperNode       `json:"zookeeperNode" tf:"zookeeper_node"`
}

type KafkaClusterSpecStorageAccount struct {
	IsDefault          *bool   `json:"isDefault" tf:"is_default"`
	StorageAccountKey  *string `json:"-" sensitive:"true" tf:"storage_account_key"`
	StorageContainerID *string `json:"storageContainerID" tf:"storage_container_id"`
}

type KafkaClusterSpecStorageAccountGen2 struct {
	FilesystemID              *string `json:"filesystemID" tf:"filesystem_id"`
	IsDefault                 *bool   `json:"isDefault" tf:"is_default"`
	ManagedIdentityResourceID *string `json:"managedIdentityResourceID" tf:"managed_identity_resource_id"`
	StorageResourceID         *string `json:"storageResourceID" tf:"storage_resource_id"`
}

type KafkaClusterSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	ClusterVersion   *string                           `json:"clusterVersion" tf:"cluster_version"`
	ComponentVersion *KafkaClusterSpecComponentVersion `json:"componentVersion" tf:"component_version"`
	// +optional
	EncryptionInTransitEnabled *bool                    `json:"encryptionInTransitEnabled,omitempty" tf:"encryption_in_transit_enabled"`
	Gateway                    *KafkaClusterSpecGateway `json:"gateway" tf:"gateway"`
	// +optional
	HttpsEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`
	// +optional
	KafkaRestProxyEndpoint *string `json:"kafkaRestProxyEndpoint,omitempty" tf:"kafka_rest_proxy_endpoint"`
	Location               *string `json:"location" tf:"location"`
	// +optional
	Metastores *KafkaClusterSpecMetastores `json:"metastores,omitempty" tf:"metastores"`
	// +optional
	Monitor           *KafkaClusterSpecMonitor `json:"monitor,omitempty" tf:"monitor"`
	Name              *string                  `json:"name" tf:"name"`
	ResourceGroupName *string                  `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RestProxy *KafkaClusterSpecRestProxy `json:"restProxy,omitempty" tf:"rest_proxy"`
	Roles     *KafkaClusterSpecRoles     `json:"roles" tf:"roles"`
	// +optional
	SshEndpoint *string `json:"sshEndpoint,omitempty" tf:"ssh_endpoint"`
	// +optional
	StorageAccount []KafkaClusterSpecStorageAccount `json:"storageAccount,omitempty" tf:"storage_account"`
	// +optional
	StorageAccountGen2 *KafkaClusterSpecStorageAccountGen2 `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	Tier *string            `json:"tier" tf:"tier"`
	// +optional
	TlsMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`
}

type KafkaClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KafkaClusterList is a list of KafkaClusters
type KafkaClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of KafkaCluster CRD objects
	Items []KafkaCluster `json:"items,omitempty"`
}
