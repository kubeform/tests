/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Registry struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistrySpec   `json:"spec,omitempty"`
	Status            RegistryStatus `json:"status,omitempty"`
}

type RegistrySpec struct {
	RegistrySpec2 `json:",inline"`
	// +optional
	KubeformOutput RegistrySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RegistrySpecEncryption struct {
	// +optional
	Enabled          *bool   `json:"enabled,omitempty" tf:"enabled"`
	IdentityClientID *string `json:"identityClientID" tf:"identity_client_id"`
	KeyVaultKeyID    *string `json:"keyVaultKeyID" tf:"key_vault_key_id"`
}

type RegistrySpecGeoreplications struct {
	Location *string `json:"location" tf:"location"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type RegistrySpecIdentity struct {
	// +optional
	// +kubebuilder:validation:MinItems=1
	IdentityIDS []string `json:"identityIDS,omitempty" tf:"identity_ids"`
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	Type        *string `json:"type" tf:"type"`
}

type RegistrySpecNetworkRuleSetIpRule struct {
	Action  *string `json:"action" tf:"action"`
	IpRange *string `json:"ipRange" tf:"ip_range"`
}

type RegistrySpecNetworkRuleSetVirtualNetwork struct {
	Action   *string `json:"action" tf:"action"`
	SubnetID *string `json:"subnetID" tf:"subnet_id"`
}

type RegistrySpecNetworkRuleSet struct {
	// +optional
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action"`
	// +optional
	IpRule []RegistrySpecNetworkRuleSetIpRule `json:"ipRule,omitempty" tf:"ip_rule"`
	// +optional
	VirtualNetwork []RegistrySpecNetworkRuleSetVirtualNetwork `json:"virtualNetwork,omitempty" tf:"virtual_network"`
}

type RegistrySpecRetentionPolicy struct {
	// +optional
	Days *int64 `json:"days,omitempty" tf:"days"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type RegistrySpecTrustPolicy struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type RegistrySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AdminEnabled *bool `json:"adminEnabled,omitempty" tf:"admin_enabled"`
	// +optional
	AdminPassword *string `json:"-" sensitive:"true" tf:"admin_password"`
	// +optional
	AdminUsername *string `json:"adminUsername,omitempty" tf:"admin_username"`
	// +optional
	Encryption *RegistrySpecEncryption `json:"encryption,omitempty" tf:"encryption"`
	// +optional
	// Deprecated
	GeoreplicationLocations []string `json:"georeplicationLocations,omitempty" tf:"georeplication_locations"`
	// +optional
	Georeplications []RegistrySpecGeoreplications `json:"georeplications,omitempty" tf:"georeplications"`
	// +optional
	Identity *RegistrySpecIdentity `json:"identity,omitempty" tf:"identity"`
	Location *string               `json:"location" tf:"location"`
	// +optional
	LoginServer *string `json:"loginServer,omitempty" tf:"login_server"`
	Name        *string `json:"name" tf:"name"`
	// +optional
	NetworkRuleSet *RegistrySpecNetworkRuleSet `json:"networkRuleSet,omitempty" tf:"network_rule_set"`
	// +optional
	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`
	// +optional
	QuarantinePolicyEnabled *bool   `json:"quarantinePolicyEnabled,omitempty" tf:"quarantine_policy_enabled"`
	ResourceGroupName       *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RetentionPolicy *RegistrySpecRetentionPolicy `json:"retentionPolicy,omitempty" tf:"retention_policy"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
	// +optional
	StorageAccountID *string `json:"storageAccountID,omitempty" tf:"storage_account_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TrustPolicy *RegistrySpecTrustPolicy `json:"trustPolicy,omitempty" tf:"trust_policy"`
}

type RegistryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RegistryList is a list of Registrys
type RegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Registry CRD objects
	Items []Registry `json:"items,omitempty"`
}
