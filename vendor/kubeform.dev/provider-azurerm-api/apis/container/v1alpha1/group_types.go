/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Group struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupSpec   `json:"spec,omitempty"`
	Status            GroupStatus `json:"status,omitempty"`
}

type GroupSpec struct {
	GroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput GroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type GroupSpecContainerGpu struct {
	// +optional
	Count *int64 `json:"count,omitempty" tf:"count"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
}

type GroupSpecContainerLivenessProbeHttpGet struct {
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Scheme *string `json:"scheme,omitempty" tf:"scheme"`
}

type GroupSpecContainerLivenessProbe struct {
	// +optional
	Exec []string `json:"exec,omitempty" tf:"exec"`
	// +optional
	FailureThreshold *int64 `json:"failureThreshold,omitempty" tf:"failure_threshold"`
	// +optional
	HttpGet []GroupSpecContainerLivenessProbeHttpGet `json:"httpGet,omitempty" tf:"http_get"`
	// +optional
	InitialDelaySeconds *int64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds"`
	// +optional
	PeriodSeconds *int64 `json:"periodSeconds,omitempty" tf:"period_seconds"`
	// +optional
	SuccessThreshold *int64 `json:"successThreshold,omitempty" tf:"success_threshold"`
	// +optional
	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds"`
}

type GroupSpecContainerPorts struct {
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
}

type GroupSpecContainerReadinessProbeHttpGet struct {
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Scheme *string `json:"scheme,omitempty" tf:"scheme"`
}

type GroupSpecContainerReadinessProbe struct {
	// +optional
	Exec []string `json:"exec,omitempty" tf:"exec"`
	// +optional
	FailureThreshold *int64 `json:"failureThreshold,omitempty" tf:"failure_threshold"`
	// +optional
	HttpGet []GroupSpecContainerReadinessProbeHttpGet `json:"httpGet,omitempty" tf:"http_get"`
	// +optional
	InitialDelaySeconds *int64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds"`
	// +optional
	PeriodSeconds *int64 `json:"periodSeconds,omitempty" tf:"period_seconds"`
	// +optional
	SuccessThreshold *int64 `json:"successThreshold,omitempty" tf:"success_threshold"`
	// +optional
	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds"`
}

type GroupSpecContainerVolumeGitRepo struct {
	// +optional
	Directory *string `json:"directory,omitempty" tf:"directory"`
	// +optional
	Revision *string `json:"revision,omitempty" tf:"revision"`
	Url      *string `json:"url" tf:"url"`
}

type GroupSpecContainerVolume struct {
	// +optional
	EmptyDir *bool `json:"emptyDir,omitempty" tf:"empty_dir"`
	// +optional
	GitRepo   *GroupSpecContainerVolumeGitRepo `json:"gitRepo,omitempty" tf:"git_repo"`
	MountPath *string                          `json:"mountPath" tf:"mount_path"`
	Name      *string                          `json:"name" tf:"name"`
	// +optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only"`
	// +optional
	Secret map[string]string `json:"-" sensitive:"true" tf:"secret"`
	// +optional
	ShareName *string `json:"shareName,omitempty" tf:"share_name"`
	// +optional
	StorageAccountKey *string `json:"-" sensitive:"true" tf:"storage_account_key"`
	// +optional
	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name"`
}

type GroupSpecContainer struct {
	// +optional
	Commands []string `json:"commands,omitempty" tf:"commands"`
	Cpu      *float64 `json:"cpu" tf:"cpu"`
	// +optional
	EnvironmentVariables *map[string]string `json:"environmentVariables,omitempty" tf:"environment_variables"`
	// +optional
	Gpu   *GroupSpecContainerGpu `json:"gpu,omitempty" tf:"gpu"`
	Image *string                `json:"image" tf:"image"`
	// +optional
	LivenessProbe *GroupSpecContainerLivenessProbe `json:"livenessProbe,omitempty" tf:"liveness_probe"`
	Memory        *float64                         `json:"memory" tf:"memory"`
	Name          *string                          `json:"name" tf:"name"`
	// +optional
	Ports []GroupSpecContainerPorts `json:"ports,omitempty" tf:"ports"`
	// +optional
	ReadinessProbe *GroupSpecContainerReadinessProbe `json:"readinessProbe,omitempty" tf:"readiness_probe"`
	// +optional
	SecureEnvironmentVariables map[string]string `json:"-" sensitive:"true" tf:"secure_environment_variables"`
	// +optional
	Volume []GroupSpecContainerVolume `json:"volume,omitempty" tf:"volume"`
}

type GroupSpecDiagnosticsLogAnalytics struct {
	// +optional
	LogType *string `json:"logType,omitempty" tf:"log_type"`
	// +optional
	Metadata     *map[string]string `json:"metadata,omitempty" tf:"metadata"`
	WorkspaceID  *string            `json:"workspaceID" tf:"workspace_id"`
	WorkspaceKey *string            `json:"-" sensitive:"true" tf:"workspace_key"`
}

type GroupSpecDiagnostics struct {
	LogAnalytics *GroupSpecDiagnosticsLogAnalytics `json:"logAnalytics" tf:"log_analytics"`
}

type GroupSpecDnsConfig struct {
	Nameservers   []string `json:"nameservers" tf:"nameservers"`
	Options       []string `json:"options" tf:"options"`
	SearchDomains []string `json:"searchDomains" tf:"search_domains"`
}

type GroupSpecExposedPort struct {
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
}

type GroupSpecIdentity struct {
	// +optional
	// +kubebuilder:validation:MinItems=1
	IdentityIDS []string `json:"identityIDS,omitempty" tf:"identity_ids"`
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	Type        *string `json:"type" tf:"type"`
}

type GroupSpecImageRegistryCredential struct {
	Password *string `json:"-" sensitive:"true" tf:"password"`
	Server   *string `json:"server" tf:"server"`
	Username *string `json:"username" tf:"username"`
}

type GroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	Container []GroupSpecContainer `json:"container" tf:"container"`
	// +optional
	Diagnostics *GroupSpecDiagnostics `json:"diagnostics,omitempty" tf:"diagnostics"`
	// +optional
	DnsConfig *GroupSpecDnsConfig `json:"dnsConfig,omitempty" tf:"dns_config"`
	// +optional
	DnsNameLabel *string `json:"dnsNameLabel,omitempty" tf:"dns_name_label"`
	// +optional
	ExposedPort []GroupSpecExposedPort `json:"exposedPort,omitempty" tf:"exposed_port"`
	// +optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`
	// +optional
	Identity *GroupSpecIdentity `json:"identity,omitempty" tf:"identity"`
	// +optional
	ImageRegistryCredential []GroupSpecImageRegistryCredential `json:"imageRegistryCredential,omitempty" tf:"image_registry_credential"`
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
	// +optional
	IpAddressType *string `json:"ipAddressType,omitempty" tf:"ip_address_type"`
	Location      *string `json:"location" tf:"location"`
	Name          *string `json:"name" tf:"name"`
	// +optional
	NetworkProfileID  *string `json:"networkProfileID,omitempty" tf:"network_profile_id"`
	OsType            *string `json:"osType" tf:"os_type"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RestartPolicy *string `json:"restartPolicy,omitempty" tf:"restart_policy"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type GroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GroupList is a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Group CRD objects
	Items []Group `json:"items,omitempty"`
}
