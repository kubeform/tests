/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ActionRuleActionGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActionRuleActionGroupSpec   `json:"spec,omitempty"`
	Status            ActionRuleActionGroupStatus `json:"status,omitempty"`
}

type ActionRuleActionGroupSpec struct {
	ActionRuleActionGroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput ActionRuleActionGroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ActionRuleActionGroupSpecConditionAlertContext struct {
	Operator *string  `json:"operator" tf:"operator"`
	Values   []string `json:"values" tf:"values"`
}

type ActionRuleActionGroupSpecConditionAlertRuleID struct {
	Operator *string  `json:"operator" tf:"operator"`
	Values   []string `json:"values" tf:"values"`
}

type ActionRuleActionGroupSpecConditionDescription struct {
	Operator *string  `json:"operator" tf:"operator"`
	Values   []string `json:"values" tf:"values"`
}

type ActionRuleActionGroupSpecConditionMonitor struct {
	Operator *string  `json:"operator" tf:"operator"`
	Values   []string `json:"values" tf:"values"`
}

type ActionRuleActionGroupSpecConditionMonitorService struct {
	Operator *string  `json:"operator" tf:"operator"`
	Values   []string `json:"values" tf:"values"`
}

type ActionRuleActionGroupSpecConditionSeverity struct {
	Operator *string  `json:"operator" tf:"operator"`
	Values   []string `json:"values" tf:"values"`
}

type ActionRuleActionGroupSpecConditionTargetResourceType struct {
	Operator *string  `json:"operator" tf:"operator"`
	Values   []string `json:"values" tf:"values"`
}

type ActionRuleActionGroupSpecCondition struct {
	// +optional
	AlertContext *ActionRuleActionGroupSpecConditionAlertContext `json:"alertContext,omitempty" tf:"alert_context"`
	// +optional
	AlertRuleID *ActionRuleActionGroupSpecConditionAlertRuleID `json:"alertRuleID,omitempty" tf:"alert_rule_id"`
	// +optional
	Description *ActionRuleActionGroupSpecConditionDescription `json:"description,omitempty" tf:"description"`
	// +optional
	Monitor *ActionRuleActionGroupSpecConditionMonitor `json:"monitor,omitempty" tf:"monitor"`
	// +optional
	MonitorService *ActionRuleActionGroupSpecConditionMonitorService `json:"monitorService,omitempty" tf:"monitor_service"`
	// +optional
	Severity *ActionRuleActionGroupSpecConditionSeverity `json:"severity,omitempty" tf:"severity"`
	// +optional
	TargetResourceType *ActionRuleActionGroupSpecConditionTargetResourceType `json:"targetResourceType,omitempty" tf:"target_resource_type"`
}

type ActionRuleActionGroupSpecScope struct {
	ResourceIDS []string `json:"resourceIDS" tf:"resource_ids"`
	Type        *string  `json:"type" tf:"type"`
}

type ActionRuleActionGroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	ActionGroupID *string `json:"actionGroupID" tf:"action_group_id"`
	// +optional
	Condition *ActionRuleActionGroupSpecCondition `json:"condition,omitempty" tf:"condition"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Enabled           *bool   `json:"enabled,omitempty" tf:"enabled"`
	Name              *string `json:"name" tf:"name"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Scope *ActionRuleActionGroupSpecScope `json:"scope,omitempty" tf:"scope"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ActionRuleActionGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ActionRuleActionGroupList is a list of ActionRuleActionGroups
type ActionRuleActionGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ActionRuleActionGroup CRD objects
	Items []ActionRuleActionGroup `json:"items,omitempty"`
}
