/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Cache struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CacheSpec   `json:"spec,omitempty"`
	Status            CacheStatus `json:"status,omitempty"`
}

type CacheSpec struct {
	CacheSpec2 `json:",inline"`
	// +optional
	KubeformOutput CacheSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CacheSpecDefaultAccessPolicyAccessRule struct {
	Access *string `json:"access" tf:"access"`
	// +optional
	AnonymousGid *int64 `json:"anonymousGid,omitempty" tf:"anonymous_gid"`
	// +optional
	AnonymousUid *int64 `json:"anonymousUid,omitempty" tf:"anonymous_uid"`
	// +optional
	Filter *string `json:"filter,omitempty" tf:"filter"`
	// +optional
	RootSquashEnabled *bool   `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled"`
	Scope             *string `json:"scope" tf:"scope"`
	// +optional
	SubmountAccessEnabled *bool `json:"submountAccessEnabled,omitempty" tf:"submount_access_enabled"`
	// +optional
	SuidEnabled *bool `json:"suidEnabled,omitempty" tf:"suid_enabled"`
}

type CacheSpecDefaultAccessPolicy struct {
	// +kubebuilder:validation:MaxItems=3
	// +kubebuilder:validation:MinItems=1
	AccessRule []CacheSpecDefaultAccessPolicyAccessRule `json:"accessRule" tf:"access_rule"`
}

type CacheSpecDirectoryActiveDirectory struct {
	CacheNetbiosName *string `json:"cacheNetbiosName" tf:"cache_netbios_name"`
	DnsPrimaryIP     *string `json:"dnsPrimaryIP" tf:"dns_primary_ip"`
	// +optional
	DnsSecondaryIP    *string `json:"dnsSecondaryIP,omitempty" tf:"dns_secondary_ip"`
	DomainName        *string `json:"domainName" tf:"domain_name"`
	DomainNetbiosName *string `json:"domainNetbiosName" tf:"domain_netbios_name"`
	Password          *string `json:"-" sensitive:"true" tf:"password"`
	Username          *string `json:"username" tf:"username"`
}

type CacheSpecDirectoryFlatFile struct {
	GroupFileURI    *string `json:"groupFileURI" tf:"group_file_uri"`
	PasswordFileURI *string `json:"passwordFileURI" tf:"password_file_uri"`
}

type CacheSpecDirectoryLdapBind struct {
	Dn       *string `json:"dn" tf:"dn"`
	Password *string `json:"-" sensitive:"true" tf:"password"`
}

type CacheSpecDirectoryLdap struct {
	BaseDn *string `json:"baseDn" tf:"base_dn"`
	// +optional
	Bind *CacheSpecDirectoryLdapBind `json:"bind,omitempty" tf:"bind"`
	// +optional
	CertificateValidationURI *string `json:"certificateValidationURI,omitempty" tf:"certificate_validation_uri"`
	// +optional
	DownloadCertificateAutomatically *bool `json:"downloadCertificateAutomatically,omitempty" tf:"download_certificate_automatically"`
	// +optional
	Encrypted *bool   `json:"encrypted,omitempty" tf:"encrypted"`
	Server    *string `json:"server" tf:"server"`
}

type CacheSpecDns struct {
	// +optional
	SearchDomain *string `json:"searchDomain,omitempty" tf:"search_domain"`
	// +kubebuilder:validation:MaxItems=3
	Servers []string `json:"servers" tf:"servers"`
}

type CacheSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	CacheSizeInGb *int64 `json:"cacheSizeInGb" tf:"cache_size_in_gb"`
	// +optional
	DefaultAccessPolicy *CacheSpecDefaultAccessPolicy `json:"defaultAccessPolicy,omitempty" tf:"default_access_policy"`
	// +optional
	DirectoryActiveDirectory *CacheSpecDirectoryActiveDirectory `json:"directoryActiveDirectory,omitempty" tf:"directory_active_directory"`
	// +optional
	DirectoryFlatFile *CacheSpecDirectoryFlatFile `json:"directoryFlatFile,omitempty" tf:"directory_flat_file"`
	// +optional
	DirectoryLdap *CacheSpecDirectoryLdap `json:"directoryLdap,omitempty" tf:"directory_ldap"`
	// +optional
	Dns      *CacheSpecDns `json:"dns,omitempty" tf:"dns"`
	Location *string       `json:"location" tf:"location"`
	// +optional
	MountAddresses []string `json:"mountAddresses,omitempty" tf:"mount_addresses"`
	// +optional
	Mtu  *int64  `json:"mtu,omitempty" tf:"mtu"`
	Name *string `json:"name" tf:"name"`
	// +optional
	NtpServer         *string `json:"ntpServer,omitempty" tf:"ntp_server"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	// Deprecated
	RootSquashEnabled *bool   `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled"`
	SkuName           *string `json:"skuName" tf:"sku_name"`
	SubnetID          *string `json:"subnetID" tf:"subnet_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type CacheStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CacheList is a list of Caches
type CacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Cache CRD objects
	Items []Cache `json:"items,omitempty"`
}
