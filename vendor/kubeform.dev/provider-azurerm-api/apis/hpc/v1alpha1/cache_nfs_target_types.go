/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CacheNfsTarget struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CacheNfsTargetSpec   `json:"spec,omitempty"`
	Status            CacheNfsTargetStatus `json:"status,omitempty"`
}

type CacheNfsTargetSpec struct {
	CacheNfsTargetSpec2 `json:",inline"`
	// +optional
	KubeformOutput CacheNfsTargetSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CacheNfsTargetSpecNamespaceJunction struct {
	// +optional
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name"`
	NamespacePath    *string `json:"namespacePath" tf:"namespace_path"`
	NfsExport        *string `json:"nfsExport" tf:"nfs_export"`
	// +optional
	TargetPath *string `json:"targetPath,omitempty" tf:"target_path"`
}

type CacheNfsTargetSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CacheName *string `json:"cacheName" tf:"cache_name"`
	Name      *string `json:"name" tf:"name"`
	// +kubebuilder:validation:MaxItems=10
	// +kubebuilder:validation:MinItems=1
	NamespaceJunction []CacheNfsTargetSpecNamespaceJunction `json:"namespaceJunction" tf:"namespace_junction"`
	ResourceGroupName *string                               `json:"resourceGroupName" tf:"resource_group_name"`
	TargetHostName    *string                               `json:"targetHostName" tf:"target_host_name"`
	UsageModel        *string                               `json:"usageModel" tf:"usage_model"`
}

type CacheNfsTargetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CacheNfsTargetList is a list of CacheNfsTargets
type CacheNfsTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CacheNfsTarget CRD objects
	Items []CacheNfsTarget `json:"items,omitempty"`
}
