/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Gateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewaySpec   `json:"spec,omitempty"`
	Status            GatewayStatus `json:"status,omitempty"`
}

type GatewaySpec struct {
	GatewaySpec2 `json:",inline"`
	// +optional
	KubeformOutput GatewaySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type GatewaySpecBgpSettingsInstance0BGPPeeringAddress struct {
	CustomIPS []string `json:"customIPS" tf:"custom_ips"`
	// +optional
	DefaultIPS []string `json:"defaultIPS,omitempty" tf:"default_ips"`
	// +optional
	IpConfigurationID *string `json:"ipConfigurationID,omitempty" tf:"ip_configuration_id"`
	// +optional
	TunnelIPS []string `json:"tunnelIPS,omitempty" tf:"tunnel_ips"`
}

type GatewaySpecBgpSettingsInstance1BGPPeeringAddress struct {
	CustomIPS []string `json:"customIPS" tf:"custom_ips"`
	// +optional
	DefaultIPS []string `json:"defaultIPS,omitempty" tf:"default_ips"`
	// +optional
	IpConfigurationID *string `json:"ipConfigurationID,omitempty" tf:"ip_configuration_id"`
	// +optional
	TunnelIPS []string `json:"tunnelIPS,omitempty" tf:"tunnel_ips"`
}

type GatewaySpecBgpSettings struct {
	Asn *int64 `json:"asn" tf:"asn"`
	// +optional
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty" tf:"bgp_peering_address"`
	// +optional
	Instance0BGPPeeringAddress *GatewaySpecBgpSettingsInstance0BGPPeeringAddress `json:"instance0BGPPeeringAddress,omitempty" tf:"instance_0_bgp_peering_address"`
	// +optional
	Instance1BGPPeeringAddress *GatewaySpecBgpSettingsInstance1BGPPeeringAddress `json:"instance1BGPPeeringAddress,omitempty" tf:"instance_1_bgp_peering_address"`
	PeerWeight                 *int64                                            `json:"peerWeight" tf:"peer_weight"`
}

type GatewaySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	BgpSettings       *GatewaySpecBgpSettings `json:"bgpSettings,omitempty" tf:"bgp_settings"`
	Location          *string                 `json:"location" tf:"location"`
	Name              *string                 `json:"name" tf:"name"`
	ResourceGroupName *string                 `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	ScaleUnit *int64 `json:"scaleUnit,omitempty" tf:"scale_unit"`
	// +optional
	Tags         *map[string]string `json:"tags,omitempty" tf:"tags"`
	VirtualHubID *string            `json:"virtualHubID" tf:"virtual_hub_id"`
}

type GatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GatewayList is a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Gateway CRD objects
	Items []Gateway `json:"items,omitempty"`
}
