/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServerConfiguration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerConfigurationSpec   `json:"spec,omitempty"`
	Status            ServerConfigurationStatus `json:"status,omitempty"`
}

type ServerConfigurationSpec struct {
	ServerConfigurationSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServerConfigurationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServerConfigurationSpecAzureActiveDirectoryAuthentication struct {
	Audience *string `json:"audience" tf:"audience"`
	Issuer   *string `json:"issuer" tf:"issuer"`
	Tenant   *string `json:"tenant" tf:"tenant"`
}

type ServerConfigurationSpecClientRevokedCertificate struct {
	Name       *string `json:"name" tf:"name"`
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
}

type ServerConfigurationSpecClientRootCertificate struct {
	Name           *string `json:"name" tf:"name"`
	PublicCertData *string `json:"publicCertData" tf:"public_cert_data"`
}

type ServerConfigurationSpecIpsecPolicy struct {
	DhGroup             *string `json:"dhGroup" tf:"dh_group"`
	IkeEncryption       *string `json:"ikeEncryption" tf:"ike_encryption"`
	IkeIntegrity        *string `json:"ikeIntegrity" tf:"ike_integrity"`
	IpsecEncryption     *string `json:"ipsecEncryption" tf:"ipsec_encryption"`
	IpsecIntegrity      *string `json:"ipsecIntegrity" tf:"ipsec_integrity"`
	PfsGroup            *string `json:"pfsGroup" tf:"pfs_group"`
	SaDataSizeKilobytes *int64  `json:"saDataSizeKilobytes" tf:"sa_data_size_kilobytes"`
	SaLifetimeSeconds   *int64  `json:"saLifetimeSeconds" tf:"sa_lifetime_seconds"`
}

type ServerConfigurationSpecRadiusClientRootCertificate struct {
	Name       *string `json:"name" tf:"name"`
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
}

type ServerConfigurationSpecRadiusServer struct {
	Address *string `json:"address" tf:"address"`
	Score   *int64  `json:"score" tf:"score"`
	Secret  *string `json:"-" sensitive:"true" tf:"secret"`
}

type ServerConfigurationSpecRadiusServerRootCertificate struct {
	Name           *string `json:"name" tf:"name"`
	PublicCertData *string `json:"publicCertData" tf:"public_cert_data"`
}

type ServerConfigurationSpecRadius struct {
	// +optional
	ClientRootCertificate []ServerConfigurationSpecRadiusClientRootCertificate `json:"clientRootCertificate,omitempty" tf:"client_root_certificate"`
	// +optional
	Server                []ServerConfigurationSpecRadiusServer                `json:"server,omitempty" tf:"server"`
	ServerRootCertificate []ServerConfigurationSpecRadiusServerRootCertificate `json:"serverRootCertificate" tf:"server_root_certificate"`
}

type ServerConfigurationSpecRadiusServer2ClientRootCertificate struct {
	Name       *string `json:"name" tf:"name"`
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
}

type ServerConfigurationSpecRadiusServer2ServerRootCertificate struct {
	Name           *string `json:"name" tf:"name"`
	PublicCertData *string `json:"publicCertData" tf:"public_cert_data"`
}

type ServerConfigurationSpecRadiusServer2 struct {
	Address *string `json:"address" tf:"address"`
	// +optional
	ClientRootCertificate []ServerConfigurationSpecRadiusServer2ClientRootCertificate `json:"clientRootCertificate,omitempty" tf:"client_root_certificate"`
	Secret                *string                                                     `json:"-" sensitive:"true" tf:"secret"`
	ServerRootCertificate []ServerConfigurationSpecRadiusServer2ServerRootCertificate `json:"serverRootCertificate" tf:"server_root_certificate"`
}

type ServerConfigurationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	// +kubebuilder:validation:MinItems=1
	AzureActiveDirectoryAuthentication []ServerConfigurationSpecAzureActiveDirectoryAuthentication `json:"azureActiveDirectoryAuthentication,omitempty" tf:"azure_active_directory_authentication"`
	// +optional
	ClientRevokedCertificate []ServerConfigurationSpecClientRevokedCertificate `json:"clientRevokedCertificate,omitempty" tf:"client_revoked_certificate"`
	// +optional
	ClientRootCertificate []ServerConfigurationSpecClientRootCertificate `json:"clientRootCertificate,omitempty" tf:"client_root_certificate"`
	// +optional
	IpsecPolicy *ServerConfigurationSpecIpsecPolicy `json:"ipsecPolicy,omitempty" tf:"ipsec_policy"`
	Location    *string                             `json:"location" tf:"location"`
	Name        *string                             `json:"name" tf:"name"`
	// +optional
	Radius *ServerConfigurationSpecRadius `json:"radius,omitempty" tf:"radius"`
	// +optional
	// Deprecated
	RadiusServer2     *ServerConfigurationSpecRadiusServer2 `json:"radiusServer,omitempty" tf:"radius_server"`
	ResourceGroupName *string                               `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Tags                   *map[string]string `json:"tags,omitempty" tf:"tags"`
	VpnAuthenticationTypes []string           `json:"vpnAuthenticationTypes" tf:"vpn_authentication_types"`
	// +optional
	VpnProtocols []string `json:"vpnProtocols,omitempty" tf:"vpn_protocols"`
}

type ServerConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServerConfigurationList is a list of ServerConfigurations
type ServerConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServerConfiguration CRD objects
	Items []ServerConfiguration `json:"items,omitempty"`
}
