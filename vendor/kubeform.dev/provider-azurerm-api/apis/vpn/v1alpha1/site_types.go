/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Site struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SiteSpec   `json:"spec,omitempty"`
	Status            SiteStatus `json:"status,omitempty"`
}

type SiteSpec struct {
	SiteSpec2 `json:",inline"`
	// +optional
	KubeformOutput SiteSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type SiteSpecLinkBgp struct {
	Asn            *int64  `json:"asn" tf:"asn"`
	PeeringAddress *string `json:"peeringAddress" tf:"peering_address"`
}

type SiteSpecLink struct {
	// +optional
	Bgp *SiteSpecLinkBgp `json:"bgp,omitempty" tf:"bgp"`
	// +optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
	Name      *string `json:"name" tf:"name"`
	// +optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name"`
	// +optional
	SpeedInMbps *int64 `json:"speedInMbps,omitempty" tf:"speed_in_mbps"`
}

type SiteSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AddressCidrs []string `json:"addressCidrs,omitempty" tf:"address_cidrs"`
	// +optional
	DeviceModel *string `json:"deviceModel,omitempty" tf:"device_model"`
	// +optional
	DeviceVendor *string `json:"deviceVendor,omitempty" tf:"device_vendor"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	Link              []SiteSpecLink `json:"link,omitempty" tf:"link"`
	Location          *string        `json:"location" tf:"location"`
	Name              *string        `json:"name" tf:"name"`
	ResourceGroupName *string        `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Tags         *map[string]string `json:"tags,omitempty" tf:"tags"`
	VirtualWANID *string            `json:"virtualWANID" tf:"virtual_wan_id"`
}

type SiteStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SiteList is a list of Sites
type SiteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Site CRD objects
	Items []Site `json:"items,omitempty"`
}
