/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type GatewayConnection struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayConnectionSpec   `json:"spec,omitempty"`
	Status            GatewayConnectionStatus `json:"status,omitempty"`
}

type GatewayConnectionSpec struct {
	GatewayConnectionSpec2 `json:",inline"`
	// +optional
	KubeformOutput GatewayConnectionSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type GatewayConnectionSpecRouting struct {
	AssociatedRouteTable  *string  `json:"associatedRouteTable" tf:"associated_route_table"`
	PropagatedRouteTables []string `json:"propagatedRouteTables" tf:"propagated_route_tables"`
}

type GatewayConnectionSpecVpnLinkIpsecPolicy struct {
	DhGroup                *string `json:"dhGroup" tf:"dh_group"`
	EncryptionAlgorithm    *string `json:"encryptionAlgorithm" tf:"encryption_algorithm"`
	IkeEncryptionAlgorithm *string `json:"ikeEncryptionAlgorithm" tf:"ike_encryption_algorithm"`
	IkeIntegrityAlgorithm  *string `json:"ikeIntegrityAlgorithm" tf:"ike_integrity_algorithm"`
	IntegrityAlgorithm     *string `json:"integrityAlgorithm" tf:"integrity_algorithm"`
	PfsGroup               *string `json:"pfsGroup" tf:"pfs_group"`
	SaDataSizeKb           *int64  `json:"saDataSizeKb" tf:"sa_data_size_kb"`
	SaLifetimeSec          *int64  `json:"saLifetimeSec" tf:"sa_lifetime_sec"`
}

type GatewayConnectionSpecVpnLink struct {
	// +optional
	BandwidthMbps *int64 `json:"bandwidthMbps,omitempty" tf:"bandwidth_mbps"`
	// +optional
	BgpEnabled *bool `json:"bgpEnabled,omitempty" tf:"bgp_enabled"`
	// +optional
	// +kubebuilder:validation:MinItems=1
	IpsecPolicy []GatewayConnectionSpecVpnLinkIpsecPolicy `json:"ipsecPolicy,omitempty" tf:"ipsec_policy"`
	// +optional
	LocalAzureIPAddressEnabled *bool   `json:"localAzureIPAddressEnabled,omitempty" tf:"local_azure_ip_address_enabled"`
	Name                       *string `json:"name" tf:"name"`
	// +optional
	PolicyBasedTrafficSelectorEnabled *bool `json:"policyBasedTrafficSelectorEnabled,omitempty" tf:"policy_based_traffic_selector_enabled"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	RatelimitEnabled *bool `json:"ratelimitEnabled,omitempty" tf:"ratelimit_enabled"`
	// +optional
	RouteWeight *int64 `json:"routeWeight,omitempty" tf:"route_weight"`
	// +optional
	SharedKey     *string `json:"sharedKey,omitempty" tf:"shared_key"`
	VpnSiteLinkID *string `json:"vpnSiteLinkID" tf:"vpn_site_link_id"`
}

type GatewayConnectionSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	InternetSecurityEnabled *bool   `json:"internetSecurityEnabled,omitempty" tf:"internet_security_enabled"`
	Name                    *string `json:"name" tf:"name"`
	RemoteVPNSiteID         *string `json:"remoteVPNSiteID" tf:"remote_vpn_site_id"`
	// +optional
	Routing      []GatewayConnectionSpecRouting `json:"routing,omitempty" tf:"routing"`
	VpnGatewayID *string                        `json:"vpnGatewayID" tf:"vpn_gateway_id"`
	// +kubebuilder:validation:MinItems=1
	VpnLink []GatewayConnectionSpecVpnLink `json:"vpnLink" tf:"vpn_link"`
}

type GatewayConnectionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GatewayConnectionList is a list of GatewayConnections
type GatewayConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of GatewayConnection CRD objects
	Items []GatewayConnection `json:"items,omitempty"`
}
