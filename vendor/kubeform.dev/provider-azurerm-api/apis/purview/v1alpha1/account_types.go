/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Account struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountSpec   `json:"spec,omitempty"`
	Status            AccountStatus `json:"status,omitempty"`
}

type AccountSpec struct {
	AccountSpec2 `json:",inline"`
	// +optional
	KubeformOutput AccountSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type AccountSpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type AccountSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AtlasKafkaEndpointPrimaryConnectionString *string `json:"-" sensitive:"true" tf:"atlas_kafka_endpoint_primary_connection_string"`
	// +optional
	AtlasKafkaEndpointSecondaryConnectionString *string `json:"-" sensitive:"true" tf:"atlas_kafka_endpoint_secondary_connection_string"`
	// +optional
	CatalogEndpoint *string `json:"catalogEndpoint,omitempty" tf:"catalog_endpoint"`
	// +optional
	GuardianEndpoint *string `json:"guardianEndpoint,omitempty" tf:"guardian_endpoint"`
	// +optional
	Identity []AccountSpecIdentity `json:"identity,omitempty" tf:"identity"`
	Location *string               `json:"location" tf:"location"`
	Name     *string               `json:"name" tf:"name"`
	// +optional
	PublicNetworkEnabled *bool   `json:"publicNetworkEnabled,omitempty" tf:"public_network_enabled"`
	ResourceGroupName    *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	ScanEndpoint *string `json:"scanEndpoint,omitempty" tf:"scan_endpoint"`
	SkuName      *string `json:"skuName" tf:"sku_name"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type AccountStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AccountList is a list of Accounts
type AccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Account CRD objects
	Items []Account `json:"items,omitempty"`
}
