/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DataLakeGen2Path struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataLakeGen2PathSpec   `json:"spec,omitempty"`
	Status            DataLakeGen2PathStatus `json:"status,omitempty"`
}

type DataLakeGen2PathSpec struct {
	DataLakeGen2PathSpec2 `json:",inline"`
	// +optional
	KubeformOutput DataLakeGen2PathSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DataLakeGen2PathSpecAce struct {
	// +optional
	ID          *string `json:"ID,omitempty" tf:"id"`
	Permissions *string `json:"permissions" tf:"permissions"`
	// +optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
	Type  *string `json:"type" tf:"type"`
}

type DataLakeGen2PathSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Ace            []DataLakeGen2PathSpecAce `json:"ace,omitempty" tf:"ace"`
	FilesystemName *string                   `json:"filesystemName" tf:"filesystem_name"`
	// +optional
	Group *string `json:"group,omitempty" tf:"group"`
	// +optional
	Owner            *string `json:"owner,omitempty" tf:"owner"`
	Path             *string `json:"path" tf:"path"`
	Resource         *string `json:"resource" tf:"resource"`
	StorageAccountID *string `json:"storageAccountID" tf:"storage_account_id"`
}

type DataLakeGen2PathStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DataLakeGen2PathList is a list of DataLakeGen2Paths
type DataLakeGen2PathList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DataLakeGen2Path CRD objects
	Items []DataLakeGen2Path `json:"items,omitempty"`
}
