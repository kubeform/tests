/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Blob struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlobSpec   `json:"spec,omitempty"`
	Status            BlobStatus `json:"status,omitempty"`
}

type BlobSpec struct {
	BlobSpec2 `json:",inline"`
	// +optional
	KubeformOutput BlobSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type BlobSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessTier *string `json:"accessTier,omitempty" tf:"access_tier"`
	// +optional
	ContentMd5 *string `json:"contentMd5,omitempty" tf:"content_md5"`
	// +optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`
	// +optional
	Metadata *map[string]string `json:"metadata,omitempty" tf:"metadata"`
	Name     *string            `json:"name" tf:"name"`
	// +optional
	Parallelism *int64 `json:"parallelism,omitempty" tf:"parallelism"`
	// +optional
	Size *int64 `json:"size,omitempty" tf:"size"`
	// +optional
	Source *string `json:"source,omitempty" tf:"source"`
	// +optional
	SourceContent *string `json:"sourceContent,omitempty" tf:"source_content"`
	// +optional
	SourceURI            *string `json:"sourceURI,omitempty" tf:"source_uri"`
	StorageAccountName   *string `json:"storageAccountName" tf:"storage_account_name"`
	StorageContainerName *string `json:"storageContainerName" tf:"storage_container_name"`
	Type                 *string `json:"type" tf:"type"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type BlobStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BlobList is a list of Blobs
type BlobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Blob CRD objects
	Items []Blob `json:"items,omitempty"`
}
