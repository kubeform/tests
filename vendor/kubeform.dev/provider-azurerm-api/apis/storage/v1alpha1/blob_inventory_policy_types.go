/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BlobInventoryPolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlobInventoryPolicySpec   `json:"spec,omitempty"`
	Status            BlobInventoryPolicyStatus `json:"status,omitempty"`
}

type BlobInventoryPolicySpec struct {
	BlobInventoryPolicySpec2 `json:",inline"`
	// +optional
	KubeformOutput BlobInventoryPolicySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type BlobInventoryPolicySpecRulesFilter struct {
	BlobTypes []string `json:"blobTypes" tf:"blob_types"`
	// +optional
	IncludeBlobVersions *bool `json:"includeBlobVersions,omitempty" tf:"include_blob_versions"`
	// +optional
	IncludeSnapshots *bool `json:"includeSnapshots,omitempty" tf:"include_snapshots"`
	// +optional
	PrefixMatch []string `json:"prefixMatch,omitempty" tf:"prefix_match"`
}

type BlobInventoryPolicySpecRules struct {
	Filter *BlobInventoryPolicySpecRulesFilter `json:"filter" tf:"filter"`
	Name   *string                             `json:"name" tf:"name"`
}

type BlobInventoryPolicySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Rules                []BlobInventoryPolicySpecRules `json:"rules" tf:"rules"`
	StorageAccountID     *string                        `json:"storageAccountID" tf:"storage_account_id"`
	StorageContainerName *string                        `json:"storageContainerName" tf:"storage_container_name"`
}

type BlobInventoryPolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BlobInventoryPolicyList is a list of BlobInventoryPolicys
type BlobInventoryPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BlobInventoryPolicy CRD objects
	Items []BlobInventoryPolicy `json:"items,omitempty"`
}
