/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ManagementPolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementPolicySpec   `json:"spec,omitempty"`
	Status            ManagementPolicyStatus `json:"status,omitempty"`
}

type ManagementPolicySpec struct {
	ManagementPolicySpec2 `json:",inline"`
	// +optional
	KubeformOutput ManagementPolicySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ManagementPolicySpecRuleActionsBaseBlob struct {
	// +optional
	DeleteAfterDaysSinceModificationGreaterThan *int64 `json:"deleteAfterDaysSinceModificationGreaterThan,omitempty" tf:"delete_after_days_since_modification_greater_than"`
	// +optional
	TierToArchiveAfterDaysSinceModificationGreaterThan *int64 `json:"tierToArchiveAfterDaysSinceModificationGreaterThan,omitempty" tf:"tier_to_archive_after_days_since_modification_greater_than"`
	// +optional
	TierToCoolAfterDaysSinceModificationGreaterThan *int64 `json:"tierToCoolAfterDaysSinceModificationGreaterThan,omitempty" tf:"tier_to_cool_after_days_since_modification_greater_than"`
}

type ManagementPolicySpecRuleActionsSnapshot struct {
	// +optional
	ChangeTierToArchiveAfterDaysSinceCreation *int64 `json:"changeTierToArchiveAfterDaysSinceCreation,omitempty" tf:"change_tier_to_archive_after_days_since_creation"`
	// +optional
	ChangeTierToCoolAfterDaysSinceCreation *int64 `json:"changeTierToCoolAfterDaysSinceCreation,omitempty" tf:"change_tier_to_cool_after_days_since_creation"`
	// +optional
	DeleteAfterDaysSinceCreationGreaterThan *int64 `json:"deleteAfterDaysSinceCreationGreaterThan,omitempty" tf:"delete_after_days_since_creation_greater_than"`
}

type ManagementPolicySpecRuleActionsVersion struct {
	// +optional
	ChangeTierToArchiveAfterDaysSinceCreation *int64 `json:"changeTierToArchiveAfterDaysSinceCreation,omitempty" tf:"change_tier_to_archive_after_days_since_creation"`
	// +optional
	ChangeTierToCoolAfterDaysSinceCreation *int64 `json:"changeTierToCoolAfterDaysSinceCreation,omitempty" tf:"change_tier_to_cool_after_days_since_creation"`
	// +optional
	DeleteAfterDaysSinceCreation *int64 `json:"deleteAfterDaysSinceCreation,omitempty" tf:"delete_after_days_since_creation"`
}

type ManagementPolicySpecRuleActions struct {
	// +optional
	BaseBlob *ManagementPolicySpecRuleActionsBaseBlob `json:"baseBlob,omitempty" tf:"base_blob"`
	// +optional
	Snapshot *ManagementPolicySpecRuleActionsSnapshot `json:"snapshot,omitempty" tf:"snapshot"`
	// +optional
	Version *ManagementPolicySpecRuleActionsVersion `json:"version,omitempty" tf:"version"`
}

type ManagementPolicySpecRuleFiltersMatchBlobIndexTag struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Operation *string `json:"operation,omitempty" tf:"operation"`
	Value     *string `json:"value" tf:"value"`
}

type ManagementPolicySpecRuleFilters struct {
	// +optional
	BlobTypes []string `json:"blobTypes,omitempty" tf:"blob_types"`
	// +optional
	MatchBlobIndexTag []ManagementPolicySpecRuleFiltersMatchBlobIndexTag `json:"matchBlobIndexTag,omitempty" tf:"match_blob_index_tag"`
	// +optional
	PrefixMatch []string `json:"prefixMatch,omitempty" tf:"prefix_match"`
}

type ManagementPolicySpecRule struct {
	Actions *ManagementPolicySpecRuleActions `json:"actions" tf:"actions"`
	Enabled *bool                            `json:"enabled" tf:"enabled"`
	// +optional
	Filters *ManagementPolicySpecRuleFilters `json:"filters,omitempty" tf:"filters"`
	Name    *string                          `json:"name" tf:"name"`
}

type ManagementPolicySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	// +kubebuilder:validation:MinItems=1
	Rule             []ManagementPolicySpecRule `json:"rule,omitempty" tf:"rule"`
	StorageAccountID *string                    `json:"storageAccountID" tf:"storage_account_id"`
}

type ManagementPolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ManagementPolicyList is a list of ManagementPolicys
type ManagementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ManagementPolicy CRD objects
	Items []ManagementPolicy `json:"items,omitempty"`
}
