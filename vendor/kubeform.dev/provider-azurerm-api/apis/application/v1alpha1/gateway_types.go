/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Gateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewaySpec   `json:"spec,omitempty"`
	Status            GatewayStatus `json:"status,omitempty"`
}

type GatewaySpec struct {
	GatewaySpec2 `json:",inline"`
	// +optional
	KubeformOutput GatewaySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type GatewaySpecAuthenticationCertificate struct {
	Data *string `json:"-" sensitive:"true" tf:"data"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type GatewaySpecAutoscaleConfiguration struct {
	// +optional
	MaxCapacity *int64 `json:"maxCapacity,omitempty" tf:"max_capacity"`
	MinCapacity *int64 `json:"minCapacity" tf:"min_capacity"`
}

type GatewaySpecBackendAddressPool struct {
	// +optional
	// +kubebuilder:validation:MinItems=1
	Fqdns []string `json:"fqdns,omitempty" tf:"fqdns"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
	Name        *string  `json:"name" tf:"name"`
}

type GatewaySpecBackendHTTPSettingsAuthenticationCertificate struct {
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type GatewaySpecBackendHTTPSettingsConnectionDraining struct {
	DrainTimeoutSec *int64 `json:"drainTimeoutSec" tf:"drain_timeout_sec"`
	Enabled         *bool  `json:"enabled" tf:"enabled"`
}

type GatewaySpecBackendHTTPSettings struct {
	// +optional
	AffinityCookieName *string `json:"affinityCookieName,omitempty" tf:"affinity_cookie_name"`
	// +optional
	AuthenticationCertificate []GatewaySpecBackendHTTPSettingsAuthenticationCertificate `json:"authenticationCertificate,omitempty" tf:"authentication_certificate"`
	// +optional
	ConnectionDraining  *GatewaySpecBackendHTTPSettingsConnectionDraining `json:"connectionDraining,omitempty" tf:"connection_draining"`
	CookieBasedAffinity *string                                           `json:"cookieBasedAffinity" tf:"cookie_based_affinity"`
	// +optional
	HostName *string `json:"hostName,omitempty" tf:"host_name"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	PickHostNameFromBackendAddress *bool  `json:"pickHostNameFromBackendAddress,omitempty" tf:"pick_host_name_from_backend_address"`
	Port                           *int64 `json:"port" tf:"port"`
	// +optional
	ProbeID *string `json:"probeID,omitempty" tf:"probe_id"`
	// +optional
	ProbeName *string `json:"probeName,omitempty" tf:"probe_name"`
	Protocol  *string `json:"protocol" tf:"protocol"`
	// +optional
	RequestTimeout *int64 `json:"requestTimeout,omitempty" tf:"request_timeout"`
	// +optional
	TrustedRootCertificateNames []string `json:"trustedRootCertificateNames,omitempty" tf:"trusted_root_certificate_names"`
}

type GatewaySpecCustomErrorConfiguration struct {
	CustomErrorPageURL *string `json:"customErrorPageURL" tf:"custom_error_page_url"`
	// +optional
	ID         *string `json:"ID,omitempty" tf:"id"`
	StatusCode *string `json:"statusCode" tf:"status_code"`
}

type GatewaySpecFrontendIPConfiguration struct {
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +optional
	PrivateIPAddress *string `json:"privateIPAddress,omitempty" tf:"private_ip_address"`
	// +optional
	PrivateIPAddressAllocation *string `json:"privateIPAddressAllocation,omitempty" tf:"private_ip_address_allocation"`
	// +optional
	PublicIPAddressID *string `json:"publicIPAddressID,omitempty" tf:"public_ip_address_id"`
	// +optional
	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`
}

type GatewaySpecFrontendPort struct {
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	Port *int64  `json:"port" tf:"port"`
}

type GatewaySpecGatewayIPConfiguration struct {
	// +optional
	ID       *string `json:"ID,omitempty" tf:"id"`
	Name     *string `json:"name" tf:"name"`
	SubnetID *string `json:"subnetID" tf:"subnet_id"`
}

type GatewaySpecHttpListenerCustomErrorConfiguration struct {
	CustomErrorPageURL *string `json:"customErrorPageURL" tf:"custom_error_page_url"`
	// +optional
	ID         *string `json:"ID,omitempty" tf:"id"`
	StatusCode *string `json:"statusCode" tf:"status_code"`
}

type GatewaySpecHttpListener struct {
	// +optional
	CustomErrorConfiguration []GatewaySpecHttpListenerCustomErrorConfiguration `json:"customErrorConfiguration,omitempty" tf:"custom_error_configuration"`
	// +optional
	FirewallPolicyID *string `json:"firewallPolicyID,omitempty" tf:"firewall_policy_id"`
	// +optional
	FrontendIPConfigurationID   *string `json:"frontendIPConfigurationID,omitempty" tf:"frontend_ip_configuration_id"`
	FrontendIPConfigurationName *string `json:"frontendIPConfigurationName" tf:"frontend_ip_configuration_name"`
	// +optional
	FrontendPortID   *string `json:"frontendPortID,omitempty" tf:"frontend_port_id"`
	FrontendPortName *string `json:"frontendPortName" tf:"frontend_port_name"`
	// +optional
	HostName *string `json:"hostName,omitempty" tf:"host_name"`
	// +optional
	HostNames []string `json:"hostNames,omitempty" tf:"host_names"`
	// +optional
	ID       *string `json:"ID,omitempty" tf:"id"`
	Name     *string `json:"name" tf:"name"`
	Protocol *string `json:"protocol" tf:"protocol"`
	// +optional
	RequireSni *bool `json:"requireSni,omitempty" tf:"require_sni"`
	// +optional
	SslCertificateID *string `json:"sslCertificateID,omitempty" tf:"ssl_certificate_id"`
	// +optional
	SslCertificateName *string `json:"sslCertificateName,omitempty" tf:"ssl_certificate_name"`
}

type GatewaySpecIdentity struct {
	IdentityIDS []string `json:"identityIDS" tf:"identity_ids"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type GatewaySpecProbeMatch struct {
	// +optional
	Body *string `json:"body,omitempty" tf:"body"`
	// +optional
	StatusCode []string `json:"statusCode,omitempty" tf:"status_code"`
}

type GatewaySpecProbe struct {
	// +optional
	Host *string `json:"host,omitempty" tf:"host"`
	// +optional
	ID       *string `json:"ID,omitempty" tf:"id"`
	Interval *int64  `json:"interval" tf:"interval"`
	// +optional
	Match *GatewaySpecProbeMatch `json:"match,omitempty" tf:"match"`
	// +optional
	MinimumServers *int64  `json:"minimumServers,omitempty" tf:"minimum_servers"`
	Name           *string `json:"name" tf:"name"`
	Path           *string `json:"path" tf:"path"`
	// +optional
	PickHostNameFromBackendHTTPSettings *bool `json:"pickHostNameFromBackendHTTPSettings,omitempty" tf:"pick_host_name_from_backend_http_settings"`
	// +optional
	Port               *int64  `json:"port,omitempty" tf:"port"`
	Protocol           *string `json:"protocol" tf:"protocol"`
	Timeout            *int64  `json:"timeout" tf:"timeout"`
	UnhealthyThreshold *int64  `json:"unhealthyThreshold" tf:"unhealthy_threshold"`
}

type GatewaySpecRedirectConfiguration struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	IncludePath *bool `json:"includePath,omitempty" tf:"include_path"`
	// +optional
	IncludeQueryString *bool   `json:"includeQueryString,omitempty" tf:"include_query_string"`
	Name               *string `json:"name" tf:"name"`
	RedirectType       *string `json:"redirectType" tf:"redirect_type"`
	// +optional
	TargetListenerID *string `json:"targetListenerID,omitempty" tf:"target_listener_id"`
	// +optional
	TargetListenerName *string `json:"targetListenerName,omitempty" tf:"target_listener_name"`
	// +optional
	TargetURL *string `json:"targetURL,omitempty" tf:"target_url"`
}

type GatewaySpecRequestRoutingRule struct {
	// +optional
	BackendAddressPoolID *string `json:"backendAddressPoolID,omitempty" tf:"backend_address_pool_id"`
	// +optional
	BackendAddressPoolName *string `json:"backendAddressPoolName,omitempty" tf:"backend_address_pool_name"`
	// +optional
	BackendHTTPSettingsID *string `json:"backendHTTPSettingsID,omitempty" tf:"backend_http_settings_id"`
	// +optional
	BackendHTTPSettingsName *string `json:"backendHTTPSettingsName,omitempty" tf:"backend_http_settings_name"`
	// +optional
	HttpListenerID   *string `json:"httpListenerID,omitempty" tf:"http_listener_id"`
	HttpListenerName *string `json:"httpListenerName" tf:"http_listener_name"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +optional
	RedirectConfigurationID *string `json:"redirectConfigurationID,omitempty" tf:"redirect_configuration_id"`
	// +optional
	RedirectConfigurationName *string `json:"redirectConfigurationName,omitempty" tf:"redirect_configuration_name"`
	// +optional
	RewriteRuleSetID *string `json:"rewriteRuleSetID,omitempty" tf:"rewrite_rule_set_id"`
	// +optional
	RewriteRuleSetName *string `json:"rewriteRuleSetName,omitempty" tf:"rewrite_rule_set_name"`
	RuleType           *string `json:"ruleType" tf:"rule_type"`
	// +optional
	UrlPathMapID *string `json:"urlPathMapID,omitempty" tf:"url_path_map_id"`
	// +optional
	UrlPathMapName *string `json:"urlPathMapName,omitempty" tf:"url_path_map_name"`
}

type GatewaySpecRewriteRuleSetRewriteRuleCondition struct {
	// +optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case"`
	// +optional
	Negate   *bool   `json:"negate,omitempty" tf:"negate"`
	Pattern  *string `json:"pattern" tf:"pattern"`
	Variable *string `json:"variable" tf:"variable"`
}

type GatewaySpecRewriteRuleSetRewriteRuleRequestHeaderConfiguration struct {
	HeaderName  *string `json:"headerName" tf:"header_name"`
	HeaderValue *string `json:"headerValue" tf:"header_value"`
}

type GatewaySpecRewriteRuleSetRewriteRuleResponseHeaderConfiguration struct {
	HeaderName  *string `json:"headerName" tf:"header_name"`
	HeaderValue *string `json:"headerValue" tf:"header_value"`
}

type GatewaySpecRewriteRuleSetRewriteRuleUrl struct {
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	QueryString *string `json:"queryString,omitempty" tf:"query_string"`
	// +optional
	Reroute *bool `json:"reroute,omitempty" tf:"reroute"`
}

type GatewaySpecRewriteRuleSetRewriteRule struct {
	// +optional
	Condition []GatewaySpecRewriteRuleSetRewriteRuleCondition `json:"condition,omitempty" tf:"condition"`
	Name      *string                                         `json:"name" tf:"name"`
	// +optional
	RequestHeaderConfiguration []GatewaySpecRewriteRuleSetRewriteRuleRequestHeaderConfiguration `json:"requestHeaderConfiguration,omitempty" tf:"request_header_configuration"`
	// +optional
	ResponseHeaderConfiguration []GatewaySpecRewriteRuleSetRewriteRuleResponseHeaderConfiguration `json:"responseHeaderConfiguration,omitempty" tf:"response_header_configuration"`
	RuleSequence                *int64                                                            `json:"ruleSequence" tf:"rule_sequence"`
	// +optional
	Url *GatewaySpecRewriteRuleSetRewriteRuleUrl `json:"url,omitempty" tf:"url"`
}

type GatewaySpecRewriteRuleSet struct {
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +optional
	RewriteRule []GatewaySpecRewriteRuleSetRewriteRule `json:"rewriteRule,omitempty" tf:"rewrite_rule"`
}

type GatewaySpecSku struct {
	// +optional
	Capacity *int64  `json:"capacity,omitempty" tf:"capacity"`
	Name     *string `json:"name" tf:"name"`
	Tier     *string `json:"tier" tf:"tier"`
}

type GatewaySpecSslCertificate struct {
	// +optional
	Data *string `json:"-" sensitive:"true" tf:"data"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	KeyVaultSecretID *string `json:"keyVaultSecretID,omitempty" tf:"key_vault_secret_id"`
	Name             *string `json:"name" tf:"name"`
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// +optional
	PublicCertData *string `json:"publicCertData,omitempty" tf:"public_cert_data"`
}

type GatewaySpecSslPolicy struct {
	// +optional
	CipherSuites []string `json:"cipherSuites,omitempty" tf:"cipher_suites"`
	// +optional
	DisabledProtocols []string `json:"disabledProtocols,omitempty" tf:"disabled_protocols"`
	// +optional
	MinProtocolVersion *string `json:"minProtocolVersion,omitempty" tf:"min_protocol_version"`
	// +optional
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name"`
	// +optional
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type"`
}

type GatewaySpecTrustedRootCertificate struct {
	Data *string `json:"-" sensitive:"true" tf:"data"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
}

type GatewaySpecUrlPathMapPathRule struct {
	// +optional
	BackendAddressPoolID *string `json:"backendAddressPoolID,omitempty" tf:"backend_address_pool_id"`
	// +optional
	BackendAddressPoolName *string `json:"backendAddressPoolName,omitempty" tf:"backend_address_pool_name"`
	// +optional
	BackendHTTPSettingsID *string `json:"backendHTTPSettingsID,omitempty" tf:"backend_http_settings_id"`
	// +optional
	BackendHTTPSettingsName *string `json:"backendHTTPSettingsName,omitempty" tf:"backend_http_settings_name"`
	// +optional
	FirewallPolicyID *string `json:"firewallPolicyID,omitempty" tf:"firewall_policy_id"`
	// +optional
	ID    *string  `json:"ID,omitempty" tf:"id"`
	Name  *string  `json:"name" tf:"name"`
	Paths []string `json:"paths" tf:"paths"`
	// +optional
	RedirectConfigurationID *string `json:"redirectConfigurationID,omitempty" tf:"redirect_configuration_id"`
	// +optional
	RedirectConfigurationName *string `json:"redirectConfigurationName,omitempty" tf:"redirect_configuration_name"`
	// +optional
	RewriteRuleSetID *string `json:"rewriteRuleSetID,omitempty" tf:"rewrite_rule_set_id"`
	// +optional
	RewriteRuleSetName *string `json:"rewriteRuleSetName,omitempty" tf:"rewrite_rule_set_name"`
}

type GatewaySpecUrlPathMap struct {
	// +optional
	DefaultBackendAddressPoolID *string `json:"defaultBackendAddressPoolID,omitempty" tf:"default_backend_address_pool_id"`
	// +optional
	DefaultBackendAddressPoolName *string `json:"defaultBackendAddressPoolName,omitempty" tf:"default_backend_address_pool_name"`
	// +optional
	DefaultBackendHTTPSettingsID *string `json:"defaultBackendHTTPSettingsID,omitempty" tf:"default_backend_http_settings_id"`
	// +optional
	DefaultBackendHTTPSettingsName *string `json:"defaultBackendHTTPSettingsName,omitempty" tf:"default_backend_http_settings_name"`
	// +optional
	DefaultRedirectConfigurationID *string `json:"defaultRedirectConfigurationID,omitempty" tf:"default_redirect_configuration_id"`
	// +optional
	DefaultRedirectConfigurationName *string `json:"defaultRedirectConfigurationName,omitempty" tf:"default_redirect_configuration_name"`
	// +optional
	DefaultRewriteRuleSetID *string `json:"defaultRewriteRuleSetID,omitempty" tf:"default_rewrite_rule_set_id"`
	// +optional
	DefaultRewriteRuleSetName *string `json:"defaultRewriteRuleSetName,omitempty" tf:"default_rewrite_rule_set_name"`
	// +optional
	ID       *string                         `json:"ID,omitempty" tf:"id"`
	Name     *string                         `json:"name" tf:"name"`
	PathRule []GatewaySpecUrlPathMapPathRule `json:"pathRule" tf:"path_rule"`
}

type GatewaySpecWafConfigurationDisabledRuleGroup struct {
	RuleGroupName *string `json:"ruleGroupName" tf:"rule_group_name"`
	// +optional
	Rules []int64 `json:"rules,omitempty" tf:"rules"`
}

type GatewaySpecWafConfigurationExclusion struct {
	MatchVariable *string `json:"matchVariable" tf:"match_variable"`
	// +optional
	Selector *string `json:"selector,omitempty" tf:"selector"`
	// +optional
	SelectorMatchOperator *string `json:"selectorMatchOperator,omitempty" tf:"selector_match_operator"`
}

type GatewaySpecWafConfiguration struct {
	// +optional
	DisabledRuleGroup []GatewaySpecWafConfigurationDisabledRuleGroup `json:"disabledRuleGroup,omitempty" tf:"disabled_rule_group"`
	Enabled           *bool                                          `json:"enabled" tf:"enabled"`
	// +optional
	Exclusion []GatewaySpecWafConfigurationExclusion `json:"exclusion,omitempty" tf:"exclusion"`
	// +optional
	FileUploadLimitMb *int64  `json:"fileUploadLimitMb,omitempty" tf:"file_upload_limit_mb"`
	FirewallMode      *string `json:"firewallMode" tf:"firewall_mode"`
	// +optional
	MaxRequestBodySizeKb *int64 `json:"maxRequestBodySizeKb,omitempty" tf:"max_request_body_size_kb"`
	// +optional
	RequestBodyCheck *bool `json:"requestBodyCheck,omitempty" tf:"request_body_check"`
	// +optional
	RuleSetType    *string `json:"ruleSetType,omitempty" tf:"rule_set_type"`
	RuleSetVersion *string `json:"ruleSetVersion" tf:"rule_set_version"`
}

type GatewaySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AuthenticationCertificate []GatewaySpecAuthenticationCertificate `json:"authenticationCertificate,omitempty" tf:"authentication_certificate"`
	// +optional
	AutoscaleConfiguration *GatewaySpecAutoscaleConfiguration `json:"autoscaleConfiguration,omitempty" tf:"autoscale_configuration"`
	BackendAddressPool     []GatewaySpecBackendAddressPool    `json:"backendAddressPool" tf:"backend_address_pool"`
	// +kubebuilder:validation:MinItems=1
	BackendHTTPSettings []GatewaySpecBackendHTTPSettings `json:"backendHTTPSettings" tf:"backend_http_settings"`
	// +optional
	CustomErrorConfiguration []GatewaySpecCustomErrorConfiguration `json:"customErrorConfiguration,omitempty" tf:"custom_error_configuration"`
	// +optional
	EnableHttp2 *bool `json:"enableHttp2,omitempty" tf:"enable_http2"`
	// +optional
	FirewallPolicyID *string `json:"firewallPolicyID,omitempty" tf:"firewall_policy_id"`
	// +kubebuilder:validation:MinItems=1
	FrontendIPConfiguration []GatewaySpecFrontendIPConfiguration `json:"frontendIPConfiguration" tf:"frontend_ip_configuration"`
	FrontendPort            []GatewaySpecFrontendPort            `json:"frontendPort" tf:"frontend_port"`
	// +kubebuilder:validation:MaxItems=2
	GatewayIPConfiguration []GatewaySpecGatewayIPConfiguration `json:"gatewayIPConfiguration" tf:"gateway_ip_configuration"`
	HttpListener           []GatewaySpecHttpListener           `json:"httpListener" tf:"http_listener"`
	// +optional
	Identity *GatewaySpecIdentity `json:"identity,omitempty" tf:"identity"`
	Location *string              `json:"location" tf:"location"`
	Name     *string              `json:"name" tf:"name"`
	// +optional
	Probe []GatewaySpecProbe `json:"probe,omitempty" tf:"probe"`
	// +optional
	RedirectConfiguration []GatewaySpecRedirectConfiguration `json:"redirectConfiguration,omitempty" tf:"redirect_configuration"`
	// +kubebuilder:validation:MinItems=1
	RequestRoutingRule []GatewaySpecRequestRoutingRule `json:"requestRoutingRule" tf:"request_routing_rule"`
	ResourceGroupName  *string                         `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RewriteRuleSet []GatewaySpecRewriteRuleSet `json:"rewriteRuleSet,omitempty" tf:"rewrite_rule_set"`
	Sku            *GatewaySpecSku             `json:"sku" tf:"sku"`
	// +optional
	SslCertificate []GatewaySpecSslCertificate `json:"sslCertificate,omitempty" tf:"ssl_certificate"`
	// +optional
	SslPolicy []GatewaySpecSslPolicy `json:"sslPolicy,omitempty" tf:"ssl_policy"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TrustedRootCertificate []GatewaySpecTrustedRootCertificate `json:"trustedRootCertificate,omitempty" tf:"trusted_root_certificate"`
	// +optional
	UrlPathMap []GatewaySpecUrlPathMap `json:"urlPathMap,omitempty" tf:"url_path_map"`
	// +optional
	WafConfiguration *GatewaySpecWafConfiguration `json:"wafConfiguration,omitempty" tf:"waf_configuration"`
	// +optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type GatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// GatewayList is a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Gateway CRD objects
	Items []Gateway `json:"items,omitempty"`
}
