/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type LiveEvent struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LiveEventSpec   `json:"spec,omitempty"`
	Status            LiveEventStatus `json:"status,omitempty"`
}

type LiveEventSpec struct {
	LiveEventSpec2 `json:",inline"`
	// +optional
	KubeformOutput LiveEventSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type LiveEventSpecCrossSiteAccessPolicy struct {
	// +optional
	ClientAccessPolicy *string `json:"clientAccessPolicy,omitempty" tf:"client_access_policy"`
	// +optional
	CrossDomainPolicy *string `json:"crossDomainPolicy,omitempty" tf:"cross_domain_policy"`
}

type LiveEventSpecEncoding struct {
	// +optional
	KeyFrameInterval *string `json:"keyFrameInterval,omitempty" tf:"key_frame_interval"`
	// +optional
	PresetName *string `json:"presetName,omitempty" tf:"preset_name"`
	// +optional
	StretchMode *string `json:"stretchMode,omitempty" tf:"stretch_mode"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type LiveEventSpecInputEndpoint struct {
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type LiveEventSpecInputIpAccessControlAllow struct {
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	SubnetPrefixLength *int64 `json:"subnetPrefixLength,omitempty" tf:"subnet_prefix_length"`
}

type LiveEventSpecInput struct {
	// +optional
	AccessToken *string `json:"accessToken,omitempty" tf:"access_token"`
	// +optional
	Endpoint []LiveEventSpecInputEndpoint `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	IpAccessControlAllow []LiveEventSpecInputIpAccessControlAllow `json:"ipAccessControlAllow,omitempty" tf:"ip_access_control_allow"`
	// +optional
	KeyFrameIntervalDuration *string `json:"keyFrameIntervalDuration,omitempty" tf:"key_frame_interval_duration"`
	// +optional
	StreamingProtocol *string `json:"streamingProtocol,omitempty" tf:"streaming_protocol"`
}

type LiveEventSpecPreviewEndpoint struct {
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type LiveEventSpecPreviewIpAccessControlAllow struct {
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	SubnetPrefixLength *int64 `json:"subnetPrefixLength,omitempty" tf:"subnet_prefix_length"`
}

type LiveEventSpecPreview struct {
	// +optional
	AlternativeMediaID *string `json:"alternativeMediaID,omitempty" tf:"alternative_media_id"`
	// +optional
	Endpoint []LiveEventSpecPreviewEndpoint `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	IpAccessControlAllow []LiveEventSpecPreviewIpAccessControlAllow `json:"ipAccessControlAllow,omitempty" tf:"ip_access_control_allow"`
	// +optional
	PreviewLocator *string `json:"previewLocator,omitempty" tf:"preview_locator"`
	// +optional
	StreamingPolicyName *string `json:"streamingPolicyName,omitempty" tf:"streaming_policy_name"`
}

type LiveEventSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AutoStartEnabled *bool `json:"autoStartEnabled,omitempty" tf:"auto_start_enabled"`
	// +optional
	CrossSiteAccessPolicy *LiveEventSpecCrossSiteAccessPolicy `json:"crossSiteAccessPolicy,omitempty" tf:"cross_site_access_policy"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Encoding *LiveEventSpecEncoding `json:"encoding,omitempty" tf:"encoding"`
	// +optional
	HostnamePrefix           *string             `json:"hostnamePrefix,omitempty" tf:"hostname_prefix"`
	Input                    *LiveEventSpecInput `json:"input" tf:"input"`
	Location                 *string             `json:"location" tf:"location"`
	MediaServicesAccountName *string             `json:"mediaServicesAccountName" tf:"media_services_account_name"`
	Name                     *string             `json:"name" tf:"name"`
	// +optional
	Preview           *LiveEventSpecPreview `json:"preview,omitempty" tf:"preview"`
	ResourceGroupName *string               `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	TranscriptionLanguages []string `json:"transcriptionLanguages,omitempty" tf:"transcription_languages"`
	// +optional
	UseStaticHostname *bool `json:"useStaticHostname,omitempty" tf:"use_static_hostname"`
}

type LiveEventStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LiveEventList is a list of LiveEvents
type LiveEventList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of LiveEvent CRD objects
	Items []LiveEvent `json:"items,omitempty"`
}
