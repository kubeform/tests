/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ContentKeyPolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContentKeyPolicySpec   `json:"spec,omitempty"`
	Status            ContentKeyPolicyStatus `json:"status,omitempty"`
}

type ContentKeyPolicySpec struct {
	ContentKeyPolicySpec2 `json:",inline"`
	// +optional
	KubeformOutput ContentKeyPolicySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ContentKeyPolicySpecPolicyOptionFairplayConfigurationOfflineRentalConfiguration struct {
	// +optional
	PlaybackDurationSeconds *int64 `json:"playbackDurationSeconds,omitempty" tf:"playback_duration_seconds"`
	// +optional
	StorageDurationSeconds *int64 `json:"storageDurationSeconds,omitempty" tf:"storage_duration_seconds"`
}

type ContentKeyPolicySpecPolicyOptionFairplayConfiguration struct {
	// +optional
	Ask *string `json:"-" sensitive:"true" tf:"ask"`
	// +optional
	OfflineRentalConfiguration *ContentKeyPolicySpecPolicyOptionFairplayConfigurationOfflineRentalConfiguration `json:"offlineRentalConfiguration,omitempty" tf:"offline_rental_configuration"`
	// +optional
	Pfx *string `json:"-" sensitive:"true" tf:"pfx"`
	// +optional
	PfxPassword *string `json:"-" sensitive:"true" tf:"pfx_password"`
	// +optional
	RentalAndLeaseKeyType *string `json:"rentalAndLeaseKeyType,omitempty" tf:"rental_and_lease_key_type"`
	// +optional
	RentalDurationSeconds *int64 `json:"rentalDurationSeconds,omitempty" tf:"rental_duration_seconds"`
}

type ContentKeyPolicySpecPolicyOptionPlayreadyConfigurationLicensePlayRight struct {
	// +optional
	AgcAndColorStripeRestriction *int64 `json:"agcAndColorStripeRestriction,omitempty" tf:"agc_and_color_stripe_restriction"`
	// +optional
	AllowPassingVideoContentToUnknownOutput *string `json:"allowPassingVideoContentToUnknownOutput,omitempty" tf:"allow_passing_video_content_to_unknown_output"`
	// +optional
	AnalogVideoOpl *int64 `json:"analogVideoOpl,omitempty" tf:"analog_video_opl"`
	// +optional
	CompressedDigitalAudioOpl *int64 `json:"compressedDigitalAudioOpl,omitempty" tf:"compressed_digital_audio_opl"`
	// +optional
	DigitalVideoOnlyContentRestriction *bool `json:"digitalVideoOnlyContentRestriction,omitempty" tf:"digital_video_only_content_restriction"`
	// +optional
	FirstPlayExpiration *string `json:"firstPlayExpiration,omitempty" tf:"first_play_expiration"`
	// +optional
	ImageConstraintForAnalogComponentVideoRestriction *bool `json:"imageConstraintForAnalogComponentVideoRestriction,omitempty" tf:"image_constraint_for_analog_component_video_restriction"`
	// +optional
	ImageConstraintForAnalogComputerMonitorRestriction *bool `json:"imageConstraintForAnalogComputerMonitorRestriction,omitempty" tf:"image_constraint_for_analog_computer_monitor_restriction"`
	// +optional
	ScmsRestriction *int64 `json:"scmsRestriction,omitempty" tf:"scms_restriction"`
	// +optional
	UncompressedDigitalAudioOpl *int64 `json:"uncompressedDigitalAudioOpl,omitempty" tf:"uncompressed_digital_audio_opl"`
	// +optional
	UncompressedDigitalVideoOpl *int64 `json:"uncompressedDigitalVideoOpl,omitempty" tf:"uncompressed_digital_video_opl"`
}

type ContentKeyPolicySpecPolicyOptionPlayreadyConfigurationLicense struct {
	// +optional
	AllowTestDevices *bool `json:"allowTestDevices,omitempty" tf:"allow_test_devices"`
	// +optional
	BeginDate *string `json:"beginDate,omitempty" tf:"begin_date"`
	// +optional
	ContentKeyLocationFromHeaderEnabled *bool `json:"contentKeyLocationFromHeaderEnabled,omitempty" tf:"content_key_location_from_header_enabled"`
	// +optional
	ContentKeyLocationFromKeyID *string `json:"contentKeyLocationFromKeyID,omitempty" tf:"content_key_location_from_key_id"`
	// +optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`
	// +optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date"`
	// +optional
	GracePeriod *string `json:"-" sensitive:"true" tf:"grace_period"`
	// +optional
	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`
	// +optional
	PlayRight *ContentKeyPolicySpecPolicyOptionPlayreadyConfigurationLicensePlayRight `json:"playRight,omitempty" tf:"play_right"`
	// +optional
	RelativeBeginDate *string `json:"relativeBeginDate,omitempty" tf:"relative_begin_date"`
	// +optional
	RelativeExpirationDate *string `json:"relativeExpirationDate,omitempty" tf:"relative_expiration_date"`
}

type ContentKeyPolicySpecPolicyOptionTokenRestrictionRequiredClaim struct {
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// +optional
	Value *string `json:"value,omitempty" tf:"value"`
}

type ContentKeyPolicySpecPolicyOptionTokenRestriction struct {
	// +optional
	Audience *string `json:"audience,omitempty" tf:"audience"`
	// +optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer"`
	// +optional
	OpenIDConnectDiscoveryDocument *string `json:"openIDConnectDiscoveryDocument,omitempty" tf:"open_id_connect_discovery_document"`
	// +optional
	PrimaryRsaTokenKeyExponent *string `json:"-" sensitive:"true" tf:"primary_rsa_token_key_exponent"`
	// +optional
	PrimaryRsaTokenKeyModulus *string `json:"-" sensitive:"true" tf:"primary_rsa_token_key_modulus"`
	// +optional
	PrimarySymmetricTokenKey *string `json:"-" sensitive:"true" tf:"primary_symmetric_token_key"`
	// +optional
	PrimaryX509TokenKeyRaw *string `json:"-" sensitive:"true" tf:"primary_x509_token_key_raw"`
	// +optional
	RequiredClaim []ContentKeyPolicySpecPolicyOptionTokenRestrictionRequiredClaim `json:"requiredClaim,omitempty" tf:"required_claim"`
	// +optional
	TokenType *string `json:"tokenType,omitempty" tf:"token_type"`
}

type ContentKeyPolicySpecPolicyOption struct {
	// +optional
	ClearKeyConfigurationEnabled *bool `json:"clearKeyConfigurationEnabled,omitempty" tf:"clear_key_configuration_enabled"`
	// +optional
	FairplayConfiguration *ContentKeyPolicySpecPolicyOptionFairplayConfiguration `json:"fairplayConfiguration,omitempty" tf:"fairplay_configuration"`
	Name                  *string                                                `json:"name" tf:"name"`
	// +optional
	OpenRestrictionEnabled *bool `json:"openRestrictionEnabled,omitempty" tf:"open_restriction_enabled"`
	// +optional
	PlayreadyConfigurationLicense []ContentKeyPolicySpecPolicyOptionPlayreadyConfigurationLicense `json:"playreadyConfigurationLicense,omitempty" tf:"playready_configuration_license"`
	// +optional
	TokenRestriction *ContentKeyPolicySpecPolicyOptionTokenRestriction `json:"tokenRestriction,omitempty" tf:"token_restriction"`
	// +optional
	WidevineConfigurationTemplate *string `json:"widevineConfigurationTemplate,omitempty" tf:"widevine_configuration_template"`
}

type ContentKeyPolicySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	Description              *string `json:"description,omitempty" tf:"description"`
	MediaServicesAccountName *string `json:"mediaServicesAccountName" tf:"media_services_account_name"`
	Name                     *string `json:"name" tf:"name"`
	// +kubebuilder:validation:MinItems=1
	PolicyOption      []ContentKeyPolicySpecPolicyOption `json:"policyOption" tf:"policy_option"`
	ResourceGroupName *string                            `json:"resourceGroupName" tf:"resource_group_name"`
}

type ContentKeyPolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ContentKeyPolicyList is a list of ContentKeyPolicys
type ContentKeyPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ContentKeyPolicy CRD objects
	Items []ContentKeyPolicy `json:"items,omitempty"`
}
