/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StreamingEndpoint struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamingEndpointSpec   `json:"spec,omitempty"`
	Status            StreamingEndpointStatus `json:"status,omitempty"`
}

type StreamingEndpointSpec struct {
	StreamingEndpointSpec2 `json:",inline"`
	// +optional
	KubeformOutput StreamingEndpointSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type StreamingEndpointSpecAccessControlAkamaiSignatureHeaderAuthenticationKey struct {
	// +optional
	Base64Key *string `json:"base64Key,omitempty" tf:"base64_key"`
	// +optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration"`
	// +optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier"`
}

type StreamingEndpointSpecAccessControlIpAllow struct {
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	SubnetPrefixLength *int64 `json:"subnetPrefixLength,omitempty" tf:"subnet_prefix_length"`
}

type StreamingEndpointSpecAccessControl struct {
	// +optional
	AkamaiSignatureHeaderAuthenticationKey []StreamingEndpointSpecAccessControlAkamaiSignatureHeaderAuthenticationKey `json:"akamaiSignatureHeaderAuthenticationKey,omitempty" tf:"akamai_signature_header_authentication_key"`
	// +optional
	IpAllow []StreamingEndpointSpecAccessControlIpAllow `json:"ipAllow,omitempty" tf:"ip_allow"`
}

type StreamingEndpointSpecCrossSiteAccessPolicy struct {
	// +optional
	ClientAccessPolicy *string `json:"clientAccessPolicy,omitempty" tf:"client_access_policy"`
	// +optional
	CrossDomainPolicy *string `json:"crossDomainPolicy,omitempty" tf:"cross_domain_policy"`
}

type StreamingEndpointSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessControl *StreamingEndpointSpecAccessControl `json:"accessControl,omitempty" tf:"access_control"`
	// +optional
	AutoStartEnabled *bool `json:"autoStartEnabled,omitempty" tf:"auto_start_enabled"`
	// +optional
	CdnEnabled *bool `json:"cdnEnabled,omitempty" tf:"cdn_enabled"`
	// +optional
	CdnProfile *string `json:"cdnProfile,omitempty" tf:"cdn_profile"`
	// +optional
	CdnProvider *string `json:"cdnProvider,omitempty" tf:"cdn_provider"`
	// +optional
	CrossSiteAccessPolicy *StreamingEndpointSpecCrossSiteAccessPolicy `json:"crossSiteAccessPolicy,omitempty" tf:"cross_site_access_policy"`
	// +optional
	CustomHostNames []string `json:"customHostNames,omitempty" tf:"custom_host_names"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	HostName *string `json:"hostName,omitempty" tf:"host_name"`
	Location *string `json:"location" tf:"location"`
	// +optional
	MaxCacheAgeSeconds       *int64  `json:"maxCacheAgeSeconds,omitempty" tf:"max_cache_age_seconds"`
	MediaServicesAccountName *string `json:"mediaServicesAccountName" tf:"media_services_account_name"`
	Name                     *string `json:"name" tf:"name"`
	ResourceGroupName        *string `json:"resourceGroupName" tf:"resource_group_name"`
	ScaleUnits               *int64  `json:"scaleUnits" tf:"scale_units"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type StreamingEndpointStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StreamingEndpointList is a list of StreamingEndpoints
type StreamingEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of StreamingEndpoint CRD objects
	Items []StreamingEndpoint `json:"items,omitempty"`
}
