/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServicesAccount struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicesAccountSpec   `json:"spec,omitempty"`
	Status            ServicesAccountStatus `json:"status,omitempty"`
}

type ServicesAccountSpec struct {
	ServicesAccountSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServicesAccountSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServicesAccountSpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ServicesAccountSpecKeyDeliveryAccessControl struct {
	// +optional
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action"`
	// +optional
	IpAllowList []string `json:"ipAllowList,omitempty" tf:"ip_allow_list"`
}

type ServicesAccountSpecStorageAccount struct {
	ID *string `json:"ID" tf:"id"`
	// +optional
	IsPrimary *bool `json:"isPrimary,omitempty" tf:"is_primary"`
}

type ServicesAccountSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Identity *ServicesAccountSpecIdentity `json:"identity,omitempty" tf:"identity"`
	// +optional
	KeyDeliveryAccessControl *ServicesAccountSpecKeyDeliveryAccessControl `json:"keyDeliveryAccessControl,omitempty" tf:"key_delivery_access_control"`
	Location                 *string                                      `json:"location" tf:"location"`
	Name                     *string                                      `json:"name" tf:"name"`
	ResourceGroupName        *string                                      `json:"resourceGroupName" tf:"resource_group_name"`
	StorageAccount           []ServicesAccountSpecStorageAccount          `json:"storageAccount" tf:"storage_account"`
	// +optional
	StorageAuthenticationType *string `json:"storageAuthenticationType,omitempty" tf:"storage_authentication_type"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ServicesAccountStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServicesAccountList is a list of ServicesAccounts
type ServicesAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServicesAccount CRD objects
	Items []ServicesAccount `json:"items,omitempty"`
}
