/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettings{}).Type1()):                          AppSpecAuthSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsActiveDirectory{}).Type1()):           AppSpecAuthSettingsActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsFacebook{}).Type1()):                  AppSpecAuthSettingsFacebookCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsGoogle{}).Type1()):                    AppSpecAuthSettingsGoogleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsMicrosoft{}).Type1()):                 AppSpecAuthSettingsMicrosoftCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsTwitter{}).Type1()):                   AppSpecAuthSettingsTwitterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecIdentity{}).Type1()):                              AppSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfig{}).Type1()):                            AppSpecSiteConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigCors{}).Type1()):                        AppSpecSiteConfigCorsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigIpRestrictionHeaders{}).Type1()):        AppSpecSiteConfigIpRestrictionHeadersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigScmIPRestrictionHeaders{}).Type1()):     AppSpecSiteConfigScmIPRestrictionHeadersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSourceControl{}).Type1()):                         AppSpecSourceControlCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettings{}).Type1()):                      AppSlotSpecAuthSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsActiveDirectory{}).Type1()):       AppSlotSpecAuthSettingsActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsFacebook{}).Type1()):              AppSlotSpecAuthSettingsFacebookCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsGoogle{}).Type1()):                AppSlotSpecAuthSettingsGoogleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsMicrosoft{}).Type1()):             AppSlotSpecAuthSettingsMicrosoftCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsTwitter{}).Type1()):               AppSlotSpecAuthSettingsTwitterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecIdentity{}).Type1()):                          AppSlotSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfig{}).Type1()):                        AppSlotSpecSiteConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigCors{}).Type1()):                    AppSlotSpecSiteConfigCorsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigIpRestrictionHeaders{}).Type1()):    AppSlotSpecSiteConfigIpRestrictionHeadersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigScmIPRestrictionHeaders{}).Type1()): AppSlotSpecSiteConfigScmIPRestrictionHeadersCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettings{}).Type1()):                          AppSpecAuthSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsActiveDirectory{}).Type1()):           AppSpecAuthSettingsActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsFacebook{}).Type1()):                  AppSpecAuthSettingsFacebookCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsGoogle{}).Type1()):                    AppSpecAuthSettingsGoogleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsMicrosoft{}).Type1()):                 AppSpecAuthSettingsMicrosoftCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsTwitter{}).Type1()):                   AppSpecAuthSettingsTwitterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecIdentity{}).Type1()):                              AppSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfig{}).Type1()):                            AppSpecSiteConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigCors{}).Type1()):                        AppSpecSiteConfigCorsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigIpRestrictionHeaders{}).Type1()):        AppSpecSiteConfigIpRestrictionHeadersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigScmIPRestrictionHeaders{}).Type1()):     AppSpecSiteConfigScmIPRestrictionHeadersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSourceControl{}).Type1()):                         AppSpecSourceControlCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettings{}).Type1()):                      AppSlotSpecAuthSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsActiveDirectory{}).Type1()):       AppSlotSpecAuthSettingsActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsFacebook{}).Type1()):              AppSlotSpecAuthSettingsFacebookCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsGoogle{}).Type1()):                AppSlotSpecAuthSettingsGoogleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsMicrosoft{}).Type1()):             AppSlotSpecAuthSettingsMicrosoftCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsTwitter{}).Type1()):               AppSlotSpecAuthSettingsTwitterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecIdentity{}).Type1()):                          AppSlotSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfig{}).Type1()):                        AppSlotSpecSiteConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigCors{}).Type1()):                    AppSlotSpecSiteConfigCorsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigIpRestrictionHeaders{}).Type1()):    AppSlotSpecSiteConfigIpRestrictionHeadersCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigScmIPRestrictionHeaders{}).Type1()): AppSlotSpecSiteConfigScmIPRestrictionHeadersCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AppSpecAuthSettingsCodec struct {
}

func (AppSpecAuthSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecAuthSettings)(ptr) == nil
}

func (AppSpecAuthSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecAuthSettings)(ptr)
	var objs []AppSpecAuthSettings
	if obj != nil {
		objs = []AppSpecAuthSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecAuthSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecAuthSettings)(ptr) = AppSpecAuthSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecAuthSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecAuthSettings)(ptr) = objs[0]
			} else {
				*(*AppSpecAuthSettings)(ptr) = AppSpecAuthSettings{}
			}
		} else {
			*(*AppSpecAuthSettings)(ptr) = AppSpecAuthSettings{}
		}
	default:
		iter.ReportError("decode AppSpecAuthSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecAuthSettingsActiveDirectoryCodec struct {
}

func (AppSpecAuthSettingsActiveDirectoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecAuthSettingsActiveDirectory)(ptr) == nil
}

func (AppSpecAuthSettingsActiveDirectoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecAuthSettingsActiveDirectory)(ptr)
	var objs []AppSpecAuthSettingsActiveDirectory
	if obj != nil {
		objs = []AppSpecAuthSettingsActiveDirectory{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsActiveDirectory{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecAuthSettingsActiveDirectoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecAuthSettingsActiveDirectory)(ptr) = AppSpecAuthSettingsActiveDirectory{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecAuthSettingsActiveDirectory

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsActiveDirectory{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecAuthSettingsActiveDirectory)(ptr) = objs[0]
			} else {
				*(*AppSpecAuthSettingsActiveDirectory)(ptr) = AppSpecAuthSettingsActiveDirectory{}
			}
		} else {
			*(*AppSpecAuthSettingsActiveDirectory)(ptr) = AppSpecAuthSettingsActiveDirectory{}
		}
	default:
		iter.ReportError("decode AppSpecAuthSettingsActiveDirectory", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecAuthSettingsFacebookCodec struct {
}

func (AppSpecAuthSettingsFacebookCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecAuthSettingsFacebook)(ptr) == nil
}

func (AppSpecAuthSettingsFacebookCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecAuthSettingsFacebook)(ptr)
	var objs []AppSpecAuthSettingsFacebook
	if obj != nil {
		objs = []AppSpecAuthSettingsFacebook{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsFacebook{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecAuthSettingsFacebookCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecAuthSettingsFacebook)(ptr) = AppSpecAuthSettingsFacebook{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecAuthSettingsFacebook

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsFacebook{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecAuthSettingsFacebook)(ptr) = objs[0]
			} else {
				*(*AppSpecAuthSettingsFacebook)(ptr) = AppSpecAuthSettingsFacebook{}
			}
		} else {
			*(*AppSpecAuthSettingsFacebook)(ptr) = AppSpecAuthSettingsFacebook{}
		}
	default:
		iter.ReportError("decode AppSpecAuthSettingsFacebook", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecAuthSettingsGoogleCodec struct {
}

func (AppSpecAuthSettingsGoogleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecAuthSettingsGoogle)(ptr) == nil
}

func (AppSpecAuthSettingsGoogleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecAuthSettingsGoogle)(ptr)
	var objs []AppSpecAuthSettingsGoogle
	if obj != nil {
		objs = []AppSpecAuthSettingsGoogle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsGoogle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecAuthSettingsGoogleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecAuthSettingsGoogle)(ptr) = AppSpecAuthSettingsGoogle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecAuthSettingsGoogle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsGoogle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecAuthSettingsGoogle)(ptr) = objs[0]
			} else {
				*(*AppSpecAuthSettingsGoogle)(ptr) = AppSpecAuthSettingsGoogle{}
			}
		} else {
			*(*AppSpecAuthSettingsGoogle)(ptr) = AppSpecAuthSettingsGoogle{}
		}
	default:
		iter.ReportError("decode AppSpecAuthSettingsGoogle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecAuthSettingsMicrosoftCodec struct {
}

func (AppSpecAuthSettingsMicrosoftCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecAuthSettingsMicrosoft)(ptr) == nil
}

func (AppSpecAuthSettingsMicrosoftCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecAuthSettingsMicrosoft)(ptr)
	var objs []AppSpecAuthSettingsMicrosoft
	if obj != nil {
		objs = []AppSpecAuthSettingsMicrosoft{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsMicrosoft{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecAuthSettingsMicrosoftCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecAuthSettingsMicrosoft)(ptr) = AppSpecAuthSettingsMicrosoft{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecAuthSettingsMicrosoft

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsMicrosoft{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecAuthSettingsMicrosoft)(ptr) = objs[0]
			} else {
				*(*AppSpecAuthSettingsMicrosoft)(ptr) = AppSpecAuthSettingsMicrosoft{}
			}
		} else {
			*(*AppSpecAuthSettingsMicrosoft)(ptr) = AppSpecAuthSettingsMicrosoft{}
		}
	default:
		iter.ReportError("decode AppSpecAuthSettingsMicrosoft", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecAuthSettingsTwitterCodec struct {
}

func (AppSpecAuthSettingsTwitterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecAuthSettingsTwitter)(ptr) == nil
}

func (AppSpecAuthSettingsTwitterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecAuthSettingsTwitter)(ptr)
	var objs []AppSpecAuthSettingsTwitter
	if obj != nil {
		objs = []AppSpecAuthSettingsTwitter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsTwitter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecAuthSettingsTwitterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecAuthSettingsTwitter)(ptr) = AppSpecAuthSettingsTwitter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecAuthSettingsTwitter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecAuthSettingsTwitter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecAuthSettingsTwitter)(ptr) = objs[0]
			} else {
				*(*AppSpecAuthSettingsTwitter)(ptr) = AppSpecAuthSettingsTwitter{}
			}
		} else {
			*(*AppSpecAuthSettingsTwitter)(ptr) = AppSpecAuthSettingsTwitter{}
		}
	default:
		iter.ReportError("decode AppSpecAuthSettingsTwitter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecIdentityCodec struct {
}

func (AppSpecIdentityCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecIdentity)(ptr) == nil
}

func (AppSpecIdentityCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecIdentity)(ptr)
	var objs []AppSpecIdentity
	if obj != nil {
		objs = []AppSpecIdentity{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecIdentity{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecIdentityCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecIdentity)(ptr) = AppSpecIdentity{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecIdentity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecIdentity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecIdentity)(ptr) = objs[0]
			} else {
				*(*AppSpecIdentity)(ptr) = AppSpecIdentity{}
			}
		} else {
			*(*AppSpecIdentity)(ptr) = AppSpecIdentity{}
		}
	default:
		iter.ReportError("decode AppSpecIdentity", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecSiteConfigCodec struct {
}

func (AppSpecSiteConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecSiteConfig)(ptr) == nil
}

func (AppSpecSiteConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecSiteConfig)(ptr)
	var objs []AppSpecSiteConfig
	if obj != nil {
		objs = []AppSpecSiteConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecSiteConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecSiteConfig)(ptr) = AppSpecSiteConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecSiteConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecSiteConfig)(ptr) = objs[0]
			} else {
				*(*AppSpecSiteConfig)(ptr) = AppSpecSiteConfig{}
			}
		} else {
			*(*AppSpecSiteConfig)(ptr) = AppSpecSiteConfig{}
		}
	default:
		iter.ReportError("decode AppSpecSiteConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecSiteConfigCorsCodec struct {
}

func (AppSpecSiteConfigCorsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecSiteConfigCors)(ptr) == nil
}

func (AppSpecSiteConfigCorsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecSiteConfigCors)(ptr)
	var objs []AppSpecSiteConfigCors
	if obj != nil {
		objs = []AppSpecSiteConfigCors{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigCors{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecSiteConfigCorsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecSiteConfigCors)(ptr) = AppSpecSiteConfigCors{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecSiteConfigCors

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigCors{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecSiteConfigCors)(ptr) = objs[0]
			} else {
				*(*AppSpecSiteConfigCors)(ptr) = AppSpecSiteConfigCors{}
			}
		} else {
			*(*AppSpecSiteConfigCors)(ptr) = AppSpecSiteConfigCors{}
		}
	default:
		iter.ReportError("decode AppSpecSiteConfigCors", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecSiteConfigIpRestrictionHeadersCodec struct {
}

func (AppSpecSiteConfigIpRestrictionHeadersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecSiteConfigIpRestrictionHeaders)(ptr) == nil
}

func (AppSpecSiteConfigIpRestrictionHeadersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecSiteConfigIpRestrictionHeaders)(ptr)
	var objs []AppSpecSiteConfigIpRestrictionHeaders
	if obj != nil {
		objs = []AppSpecSiteConfigIpRestrictionHeaders{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigIpRestrictionHeaders{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecSiteConfigIpRestrictionHeadersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecSiteConfigIpRestrictionHeaders)(ptr) = AppSpecSiteConfigIpRestrictionHeaders{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecSiteConfigIpRestrictionHeaders

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigIpRestrictionHeaders{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecSiteConfigIpRestrictionHeaders)(ptr) = objs[0]
			} else {
				*(*AppSpecSiteConfigIpRestrictionHeaders)(ptr) = AppSpecSiteConfigIpRestrictionHeaders{}
			}
		} else {
			*(*AppSpecSiteConfigIpRestrictionHeaders)(ptr) = AppSpecSiteConfigIpRestrictionHeaders{}
		}
	default:
		iter.ReportError("decode AppSpecSiteConfigIpRestrictionHeaders", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecSiteConfigScmIPRestrictionHeadersCodec struct {
}

func (AppSpecSiteConfigScmIPRestrictionHeadersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecSiteConfigScmIPRestrictionHeaders)(ptr) == nil
}

func (AppSpecSiteConfigScmIPRestrictionHeadersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecSiteConfigScmIPRestrictionHeaders)(ptr)
	var objs []AppSpecSiteConfigScmIPRestrictionHeaders
	if obj != nil {
		objs = []AppSpecSiteConfigScmIPRestrictionHeaders{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigScmIPRestrictionHeaders{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecSiteConfigScmIPRestrictionHeadersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecSiteConfigScmIPRestrictionHeaders)(ptr) = AppSpecSiteConfigScmIPRestrictionHeaders{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecSiteConfigScmIPRestrictionHeaders

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSiteConfigScmIPRestrictionHeaders{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecSiteConfigScmIPRestrictionHeaders)(ptr) = objs[0]
			} else {
				*(*AppSpecSiteConfigScmIPRestrictionHeaders)(ptr) = AppSpecSiteConfigScmIPRestrictionHeaders{}
			}
		} else {
			*(*AppSpecSiteConfigScmIPRestrictionHeaders)(ptr) = AppSpecSiteConfigScmIPRestrictionHeaders{}
		}
	default:
		iter.ReportError("decode AppSpecSiteConfigScmIPRestrictionHeaders", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSpecSourceControlCodec struct {
}

func (AppSpecSourceControlCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSpecSourceControl)(ptr) == nil
}

func (AppSpecSourceControlCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSpecSourceControl)(ptr)
	var objs []AppSpecSourceControl
	if obj != nil {
		objs = []AppSpecSourceControl{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSourceControl{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSpecSourceControlCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSpecSourceControl)(ptr) = AppSpecSourceControl{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSpecSourceControl

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSpecSourceControl{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSpecSourceControl)(ptr) = objs[0]
			} else {
				*(*AppSpecSourceControl)(ptr) = AppSpecSourceControl{}
			}
		} else {
			*(*AppSpecSourceControl)(ptr) = AppSpecSourceControl{}
		}
	default:
		iter.ReportError("decode AppSpecSourceControl", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecAuthSettingsCodec struct {
}

func (AppSlotSpecAuthSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecAuthSettings)(ptr) == nil
}

func (AppSlotSpecAuthSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecAuthSettings)(ptr)
	var objs []AppSlotSpecAuthSettings
	if obj != nil {
		objs = []AppSlotSpecAuthSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecAuthSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecAuthSettings)(ptr) = AppSlotSpecAuthSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecAuthSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecAuthSettings)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecAuthSettings)(ptr) = AppSlotSpecAuthSettings{}
			}
		} else {
			*(*AppSlotSpecAuthSettings)(ptr) = AppSlotSpecAuthSettings{}
		}
	default:
		iter.ReportError("decode AppSlotSpecAuthSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecAuthSettingsActiveDirectoryCodec struct {
}

func (AppSlotSpecAuthSettingsActiveDirectoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecAuthSettingsActiveDirectory)(ptr) == nil
}

func (AppSlotSpecAuthSettingsActiveDirectoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecAuthSettingsActiveDirectory)(ptr)
	var objs []AppSlotSpecAuthSettingsActiveDirectory
	if obj != nil {
		objs = []AppSlotSpecAuthSettingsActiveDirectory{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsActiveDirectory{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecAuthSettingsActiveDirectoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecAuthSettingsActiveDirectory)(ptr) = AppSlotSpecAuthSettingsActiveDirectory{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecAuthSettingsActiveDirectory

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsActiveDirectory{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecAuthSettingsActiveDirectory)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecAuthSettingsActiveDirectory)(ptr) = AppSlotSpecAuthSettingsActiveDirectory{}
			}
		} else {
			*(*AppSlotSpecAuthSettingsActiveDirectory)(ptr) = AppSlotSpecAuthSettingsActiveDirectory{}
		}
	default:
		iter.ReportError("decode AppSlotSpecAuthSettingsActiveDirectory", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecAuthSettingsFacebookCodec struct {
}

func (AppSlotSpecAuthSettingsFacebookCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecAuthSettingsFacebook)(ptr) == nil
}

func (AppSlotSpecAuthSettingsFacebookCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecAuthSettingsFacebook)(ptr)
	var objs []AppSlotSpecAuthSettingsFacebook
	if obj != nil {
		objs = []AppSlotSpecAuthSettingsFacebook{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsFacebook{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecAuthSettingsFacebookCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecAuthSettingsFacebook)(ptr) = AppSlotSpecAuthSettingsFacebook{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecAuthSettingsFacebook

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsFacebook{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecAuthSettingsFacebook)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecAuthSettingsFacebook)(ptr) = AppSlotSpecAuthSettingsFacebook{}
			}
		} else {
			*(*AppSlotSpecAuthSettingsFacebook)(ptr) = AppSlotSpecAuthSettingsFacebook{}
		}
	default:
		iter.ReportError("decode AppSlotSpecAuthSettingsFacebook", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecAuthSettingsGoogleCodec struct {
}

func (AppSlotSpecAuthSettingsGoogleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecAuthSettingsGoogle)(ptr) == nil
}

func (AppSlotSpecAuthSettingsGoogleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecAuthSettingsGoogle)(ptr)
	var objs []AppSlotSpecAuthSettingsGoogle
	if obj != nil {
		objs = []AppSlotSpecAuthSettingsGoogle{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsGoogle{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecAuthSettingsGoogleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecAuthSettingsGoogle)(ptr) = AppSlotSpecAuthSettingsGoogle{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecAuthSettingsGoogle

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsGoogle{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecAuthSettingsGoogle)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecAuthSettingsGoogle)(ptr) = AppSlotSpecAuthSettingsGoogle{}
			}
		} else {
			*(*AppSlotSpecAuthSettingsGoogle)(ptr) = AppSlotSpecAuthSettingsGoogle{}
		}
	default:
		iter.ReportError("decode AppSlotSpecAuthSettingsGoogle", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecAuthSettingsMicrosoftCodec struct {
}

func (AppSlotSpecAuthSettingsMicrosoftCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecAuthSettingsMicrosoft)(ptr) == nil
}

func (AppSlotSpecAuthSettingsMicrosoftCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecAuthSettingsMicrosoft)(ptr)
	var objs []AppSlotSpecAuthSettingsMicrosoft
	if obj != nil {
		objs = []AppSlotSpecAuthSettingsMicrosoft{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsMicrosoft{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecAuthSettingsMicrosoftCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecAuthSettingsMicrosoft)(ptr) = AppSlotSpecAuthSettingsMicrosoft{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecAuthSettingsMicrosoft

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsMicrosoft{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecAuthSettingsMicrosoft)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecAuthSettingsMicrosoft)(ptr) = AppSlotSpecAuthSettingsMicrosoft{}
			}
		} else {
			*(*AppSlotSpecAuthSettingsMicrosoft)(ptr) = AppSlotSpecAuthSettingsMicrosoft{}
		}
	default:
		iter.ReportError("decode AppSlotSpecAuthSettingsMicrosoft", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecAuthSettingsTwitterCodec struct {
}

func (AppSlotSpecAuthSettingsTwitterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecAuthSettingsTwitter)(ptr) == nil
}

func (AppSlotSpecAuthSettingsTwitterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecAuthSettingsTwitter)(ptr)
	var objs []AppSlotSpecAuthSettingsTwitter
	if obj != nil {
		objs = []AppSlotSpecAuthSettingsTwitter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsTwitter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecAuthSettingsTwitterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecAuthSettingsTwitter)(ptr) = AppSlotSpecAuthSettingsTwitter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecAuthSettingsTwitter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecAuthSettingsTwitter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecAuthSettingsTwitter)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecAuthSettingsTwitter)(ptr) = AppSlotSpecAuthSettingsTwitter{}
			}
		} else {
			*(*AppSlotSpecAuthSettingsTwitter)(ptr) = AppSlotSpecAuthSettingsTwitter{}
		}
	default:
		iter.ReportError("decode AppSlotSpecAuthSettingsTwitter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecIdentityCodec struct {
}

func (AppSlotSpecIdentityCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecIdentity)(ptr) == nil
}

func (AppSlotSpecIdentityCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecIdentity)(ptr)
	var objs []AppSlotSpecIdentity
	if obj != nil {
		objs = []AppSlotSpecIdentity{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecIdentity{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecIdentityCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecIdentity)(ptr) = AppSlotSpecIdentity{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecIdentity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecIdentity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecIdentity)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecIdentity)(ptr) = AppSlotSpecIdentity{}
			}
		} else {
			*(*AppSlotSpecIdentity)(ptr) = AppSlotSpecIdentity{}
		}
	default:
		iter.ReportError("decode AppSlotSpecIdentity", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecSiteConfigCodec struct {
}

func (AppSlotSpecSiteConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecSiteConfig)(ptr) == nil
}

func (AppSlotSpecSiteConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecSiteConfig)(ptr)
	var objs []AppSlotSpecSiteConfig
	if obj != nil {
		objs = []AppSlotSpecSiteConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecSiteConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecSiteConfig)(ptr) = AppSlotSpecSiteConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecSiteConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecSiteConfig)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecSiteConfig)(ptr) = AppSlotSpecSiteConfig{}
			}
		} else {
			*(*AppSlotSpecSiteConfig)(ptr) = AppSlotSpecSiteConfig{}
		}
	default:
		iter.ReportError("decode AppSlotSpecSiteConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecSiteConfigCorsCodec struct {
}

func (AppSlotSpecSiteConfigCorsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecSiteConfigCors)(ptr) == nil
}

func (AppSlotSpecSiteConfigCorsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecSiteConfigCors)(ptr)
	var objs []AppSlotSpecSiteConfigCors
	if obj != nil {
		objs = []AppSlotSpecSiteConfigCors{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigCors{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecSiteConfigCorsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecSiteConfigCors)(ptr) = AppSlotSpecSiteConfigCors{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecSiteConfigCors

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigCors{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecSiteConfigCors)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecSiteConfigCors)(ptr) = AppSlotSpecSiteConfigCors{}
			}
		} else {
			*(*AppSlotSpecSiteConfigCors)(ptr) = AppSlotSpecSiteConfigCors{}
		}
	default:
		iter.ReportError("decode AppSlotSpecSiteConfigCors", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecSiteConfigIpRestrictionHeadersCodec struct {
}

func (AppSlotSpecSiteConfigIpRestrictionHeadersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecSiteConfigIpRestrictionHeaders)(ptr) == nil
}

func (AppSlotSpecSiteConfigIpRestrictionHeadersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecSiteConfigIpRestrictionHeaders)(ptr)
	var objs []AppSlotSpecSiteConfigIpRestrictionHeaders
	if obj != nil {
		objs = []AppSlotSpecSiteConfigIpRestrictionHeaders{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigIpRestrictionHeaders{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecSiteConfigIpRestrictionHeadersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecSiteConfigIpRestrictionHeaders)(ptr) = AppSlotSpecSiteConfigIpRestrictionHeaders{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecSiteConfigIpRestrictionHeaders

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigIpRestrictionHeaders{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecSiteConfigIpRestrictionHeaders)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecSiteConfigIpRestrictionHeaders)(ptr) = AppSlotSpecSiteConfigIpRestrictionHeaders{}
			}
		} else {
			*(*AppSlotSpecSiteConfigIpRestrictionHeaders)(ptr) = AppSlotSpecSiteConfigIpRestrictionHeaders{}
		}
	default:
		iter.ReportError("decode AppSlotSpecSiteConfigIpRestrictionHeaders", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AppSlotSpecSiteConfigScmIPRestrictionHeadersCodec struct {
}

func (AppSlotSpecSiteConfigScmIPRestrictionHeadersCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppSlotSpecSiteConfigScmIPRestrictionHeaders)(ptr) == nil
}

func (AppSlotSpecSiteConfigScmIPRestrictionHeadersCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppSlotSpecSiteConfigScmIPRestrictionHeaders)(ptr)
	var objs []AppSlotSpecSiteConfigScmIPRestrictionHeaders
	if obj != nil {
		objs = []AppSlotSpecSiteConfigScmIPRestrictionHeaders{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigScmIPRestrictionHeaders{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppSlotSpecSiteConfigScmIPRestrictionHeadersCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppSlotSpecSiteConfigScmIPRestrictionHeaders)(ptr) = AppSlotSpecSiteConfigScmIPRestrictionHeaders{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppSlotSpecSiteConfigScmIPRestrictionHeaders

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppSlotSpecSiteConfigScmIPRestrictionHeaders{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppSlotSpecSiteConfigScmIPRestrictionHeaders)(ptr) = objs[0]
			} else {
				*(*AppSlotSpecSiteConfigScmIPRestrictionHeaders)(ptr) = AppSlotSpecSiteConfigScmIPRestrictionHeaders{}
			}
		} else {
			*(*AppSlotSpecSiteConfigScmIPRestrictionHeaders)(ptr) = AppSlotSpecSiteConfigScmIPRestrictionHeaders{}
		}
	default:
		iter.ReportError("decode AppSlotSpecSiteConfigScmIPRestrictionHeaders", "unexpected JSON type")
	}
}
