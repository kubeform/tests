/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsFunctionJavascriptUdfSpecOutput{}).Type1()):        AnalyticsFunctionJavascriptUdfSpecOutputCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputBlobSpecSerialization{}).Type1()):            AnalyticsOutputBlobSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputEventhubSpecSerialization{}).Type1()):        AnalyticsOutputEventhubSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusQueueSpecSerialization{}).Type1()): AnalyticsOutputServicebusQueueSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusTopicSpecSerialization{}).Type1()): AnalyticsOutputServicebusTopicSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsReferenceInputBlobSpecSerialization{}).Type1()):    AnalyticsReferenceInputBlobSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputBlobSpecSerialization{}).Type1()):       AnalyticsStreamInputBlobSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputEventhubSpecSerialization{}).Type1()):   AnalyticsStreamInputEventhubSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputIothubSpecSerialization{}).Type1()):     AnalyticsStreamInputIothubSpecSerializationCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsFunctionJavascriptUdfSpecOutput{}).Type1()):        AnalyticsFunctionJavascriptUdfSpecOutputCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputBlobSpecSerialization{}).Type1()):            AnalyticsOutputBlobSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputEventhubSpecSerialization{}).Type1()):        AnalyticsOutputEventhubSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusQueueSpecSerialization{}).Type1()): AnalyticsOutputServicebusQueueSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusTopicSpecSerialization{}).Type1()): AnalyticsOutputServicebusTopicSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsReferenceInputBlobSpecSerialization{}).Type1()):    AnalyticsReferenceInputBlobSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputBlobSpecSerialization{}).Type1()):       AnalyticsStreamInputBlobSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputEventhubSpecSerialization{}).Type1()):   AnalyticsStreamInputEventhubSpecSerializationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputIothubSpecSerialization{}).Type1()):     AnalyticsStreamInputIothubSpecSerializationCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AnalyticsFunctionJavascriptUdfSpecOutputCodec struct {
}

func (AnalyticsFunctionJavascriptUdfSpecOutputCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsFunctionJavascriptUdfSpecOutput)(ptr) == nil
}

func (AnalyticsFunctionJavascriptUdfSpecOutputCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsFunctionJavascriptUdfSpecOutput)(ptr)
	var objs []AnalyticsFunctionJavascriptUdfSpecOutput
	if obj != nil {
		objs = []AnalyticsFunctionJavascriptUdfSpecOutput{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsFunctionJavascriptUdfSpecOutput{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsFunctionJavascriptUdfSpecOutputCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsFunctionJavascriptUdfSpecOutput)(ptr) = AnalyticsFunctionJavascriptUdfSpecOutput{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsFunctionJavascriptUdfSpecOutput

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsFunctionJavascriptUdfSpecOutput{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsFunctionJavascriptUdfSpecOutput)(ptr) = objs[0]
			} else {
				*(*AnalyticsFunctionJavascriptUdfSpecOutput)(ptr) = AnalyticsFunctionJavascriptUdfSpecOutput{}
			}
		} else {
			*(*AnalyticsFunctionJavascriptUdfSpecOutput)(ptr) = AnalyticsFunctionJavascriptUdfSpecOutput{}
		}
	default:
		iter.ReportError("decode AnalyticsFunctionJavascriptUdfSpecOutput", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsOutputBlobSpecSerializationCodec struct {
}

func (AnalyticsOutputBlobSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsOutputBlobSpecSerialization)(ptr) == nil
}

func (AnalyticsOutputBlobSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsOutputBlobSpecSerialization)(ptr)
	var objs []AnalyticsOutputBlobSpecSerialization
	if obj != nil {
		objs = []AnalyticsOutputBlobSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputBlobSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsOutputBlobSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsOutputBlobSpecSerialization)(ptr) = AnalyticsOutputBlobSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsOutputBlobSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputBlobSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsOutputBlobSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsOutputBlobSpecSerialization)(ptr) = AnalyticsOutputBlobSpecSerialization{}
			}
		} else {
			*(*AnalyticsOutputBlobSpecSerialization)(ptr) = AnalyticsOutputBlobSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsOutputBlobSpecSerialization", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsOutputEventhubSpecSerializationCodec struct {
}

func (AnalyticsOutputEventhubSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsOutputEventhubSpecSerialization)(ptr) == nil
}

func (AnalyticsOutputEventhubSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsOutputEventhubSpecSerialization)(ptr)
	var objs []AnalyticsOutputEventhubSpecSerialization
	if obj != nil {
		objs = []AnalyticsOutputEventhubSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputEventhubSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsOutputEventhubSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsOutputEventhubSpecSerialization)(ptr) = AnalyticsOutputEventhubSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsOutputEventhubSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputEventhubSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsOutputEventhubSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsOutputEventhubSpecSerialization)(ptr) = AnalyticsOutputEventhubSpecSerialization{}
			}
		} else {
			*(*AnalyticsOutputEventhubSpecSerialization)(ptr) = AnalyticsOutputEventhubSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsOutputEventhubSpecSerialization", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsOutputServicebusQueueSpecSerializationCodec struct {
}

func (AnalyticsOutputServicebusQueueSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsOutputServicebusQueueSpecSerialization)(ptr) == nil
}

func (AnalyticsOutputServicebusQueueSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsOutputServicebusQueueSpecSerialization)(ptr)
	var objs []AnalyticsOutputServicebusQueueSpecSerialization
	if obj != nil {
		objs = []AnalyticsOutputServicebusQueueSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusQueueSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsOutputServicebusQueueSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsOutputServicebusQueueSpecSerialization)(ptr) = AnalyticsOutputServicebusQueueSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsOutputServicebusQueueSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusQueueSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsOutputServicebusQueueSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsOutputServicebusQueueSpecSerialization)(ptr) = AnalyticsOutputServicebusQueueSpecSerialization{}
			}
		} else {
			*(*AnalyticsOutputServicebusQueueSpecSerialization)(ptr) = AnalyticsOutputServicebusQueueSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsOutputServicebusQueueSpecSerialization", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsOutputServicebusTopicSpecSerializationCodec struct {
}

func (AnalyticsOutputServicebusTopicSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsOutputServicebusTopicSpecSerialization)(ptr) == nil
}

func (AnalyticsOutputServicebusTopicSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsOutputServicebusTopicSpecSerialization)(ptr)
	var objs []AnalyticsOutputServicebusTopicSpecSerialization
	if obj != nil {
		objs = []AnalyticsOutputServicebusTopicSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusTopicSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsOutputServicebusTopicSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsOutputServicebusTopicSpecSerialization)(ptr) = AnalyticsOutputServicebusTopicSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsOutputServicebusTopicSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsOutputServicebusTopicSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsOutputServicebusTopicSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsOutputServicebusTopicSpecSerialization)(ptr) = AnalyticsOutputServicebusTopicSpecSerialization{}
			}
		} else {
			*(*AnalyticsOutputServicebusTopicSpecSerialization)(ptr) = AnalyticsOutputServicebusTopicSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsOutputServicebusTopicSpecSerialization", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsReferenceInputBlobSpecSerializationCodec struct {
}

func (AnalyticsReferenceInputBlobSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsReferenceInputBlobSpecSerialization)(ptr) == nil
}

func (AnalyticsReferenceInputBlobSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsReferenceInputBlobSpecSerialization)(ptr)
	var objs []AnalyticsReferenceInputBlobSpecSerialization
	if obj != nil {
		objs = []AnalyticsReferenceInputBlobSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsReferenceInputBlobSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsReferenceInputBlobSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsReferenceInputBlobSpecSerialization)(ptr) = AnalyticsReferenceInputBlobSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsReferenceInputBlobSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsReferenceInputBlobSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsReferenceInputBlobSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsReferenceInputBlobSpecSerialization)(ptr) = AnalyticsReferenceInputBlobSpecSerialization{}
			}
		} else {
			*(*AnalyticsReferenceInputBlobSpecSerialization)(ptr) = AnalyticsReferenceInputBlobSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsReferenceInputBlobSpecSerialization", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsStreamInputBlobSpecSerializationCodec struct {
}

func (AnalyticsStreamInputBlobSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsStreamInputBlobSpecSerialization)(ptr) == nil
}

func (AnalyticsStreamInputBlobSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsStreamInputBlobSpecSerialization)(ptr)
	var objs []AnalyticsStreamInputBlobSpecSerialization
	if obj != nil {
		objs = []AnalyticsStreamInputBlobSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputBlobSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsStreamInputBlobSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsStreamInputBlobSpecSerialization)(ptr) = AnalyticsStreamInputBlobSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsStreamInputBlobSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputBlobSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsStreamInputBlobSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsStreamInputBlobSpecSerialization)(ptr) = AnalyticsStreamInputBlobSpecSerialization{}
			}
		} else {
			*(*AnalyticsStreamInputBlobSpecSerialization)(ptr) = AnalyticsStreamInputBlobSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsStreamInputBlobSpecSerialization", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsStreamInputEventhubSpecSerializationCodec struct {
}

func (AnalyticsStreamInputEventhubSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsStreamInputEventhubSpecSerialization)(ptr) == nil
}

func (AnalyticsStreamInputEventhubSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsStreamInputEventhubSpecSerialization)(ptr)
	var objs []AnalyticsStreamInputEventhubSpecSerialization
	if obj != nil {
		objs = []AnalyticsStreamInputEventhubSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputEventhubSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsStreamInputEventhubSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsStreamInputEventhubSpecSerialization)(ptr) = AnalyticsStreamInputEventhubSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsStreamInputEventhubSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputEventhubSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsStreamInputEventhubSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsStreamInputEventhubSpecSerialization)(ptr) = AnalyticsStreamInputEventhubSpecSerialization{}
			}
		} else {
			*(*AnalyticsStreamInputEventhubSpecSerialization)(ptr) = AnalyticsStreamInputEventhubSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsStreamInputEventhubSpecSerialization", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AnalyticsStreamInputIothubSpecSerializationCodec struct {
}

func (AnalyticsStreamInputIothubSpecSerializationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AnalyticsStreamInputIothubSpecSerialization)(ptr) == nil
}

func (AnalyticsStreamInputIothubSpecSerializationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AnalyticsStreamInputIothubSpecSerialization)(ptr)
	var objs []AnalyticsStreamInputIothubSpecSerialization
	if obj != nil {
		objs = []AnalyticsStreamInputIothubSpecSerialization{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputIothubSpecSerialization{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AnalyticsStreamInputIothubSpecSerializationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AnalyticsStreamInputIothubSpecSerialization)(ptr) = AnalyticsStreamInputIothubSpecSerialization{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AnalyticsStreamInputIothubSpecSerialization

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AnalyticsStreamInputIothubSpecSerialization{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AnalyticsStreamInputIothubSpecSerialization)(ptr) = objs[0]
			} else {
				*(*AnalyticsStreamInputIothubSpecSerialization)(ptr) = AnalyticsStreamInputIothubSpecSerialization{}
			}
		} else {
			*(*AnalyticsStreamInputIothubSpecSerialization)(ptr) = AnalyticsStreamInputIothubSpecSerialization{}
		}
	default:
		iter.ReportError("decode AnalyticsStreamInputIothubSpecSerialization", "unexpected JSON type")
	}
}
