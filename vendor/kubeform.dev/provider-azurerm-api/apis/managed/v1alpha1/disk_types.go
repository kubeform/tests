/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Disk struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiskSpec   `json:"spec,omitempty"`
	Status            DiskStatus `json:"status,omitempty"`
}

type DiskSpec struct {
	DiskSpec2 `json:",inline"`
	// +optional
	KubeformOutput DiskSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DiskSpecEncryptionSettingsDiskEncryptionKey struct {
	SecretURL     *string `json:"secretURL" tf:"secret_url"`
	SourceVaultID *string `json:"sourceVaultID" tf:"source_vault_id"`
}

type DiskSpecEncryptionSettingsKeyEncryptionKey struct {
	KeyURL        *string `json:"keyURL" tf:"key_url"`
	SourceVaultID *string `json:"sourceVaultID" tf:"source_vault_id"`
}

type DiskSpecEncryptionSettings struct {
	// +optional
	DiskEncryptionKey *DiskSpecEncryptionSettingsDiskEncryptionKey `json:"diskEncryptionKey,omitempty" tf:"disk_encryption_key"`
	Enabled           *bool                                        `json:"enabled" tf:"enabled"`
	// +optional
	KeyEncryptionKey *DiskSpecEncryptionSettingsKeyEncryptionKey `json:"keyEncryptionKey,omitempty" tf:"key_encryption_key"`
}

type DiskSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	CreateOption *string `json:"createOption" tf:"create_option"`
	// +optional
	DiskAccessID *string `json:"diskAccessID,omitempty" tf:"disk_access_id"`
	// +optional
	DiskEncryptionSetID *string `json:"diskEncryptionSetID,omitempty" tf:"disk_encryption_set_id"`
	// +optional
	DiskIopsReadWrite *int64 `json:"diskIopsReadWrite,omitempty" tf:"disk_iops_read_write"`
	// +optional
	DiskMbpsReadWrite *int64 `json:"diskMbpsReadWrite,omitempty" tf:"disk_mbps_read_write"`
	// +optional
	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`
	// +optional
	EncryptionSettings *DiskSpecEncryptionSettings `json:"encryptionSettings,omitempty" tf:"encryption_settings"`
	// +optional
	ImageReferenceID *string `json:"imageReferenceID,omitempty" tf:"image_reference_id"`
	Location         *string `json:"location" tf:"location"`
	Name             *string `json:"name" tf:"name"`
	// +optional
	NetworkAccessPolicy *string `json:"networkAccessPolicy,omitempty" tf:"network_access_policy"`
	// +optional
	OsType            *string `json:"osType,omitempty" tf:"os_type"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	SourceResourceID *string `json:"sourceResourceID,omitempty" tf:"source_resource_id"`
	// +optional
	SourceURI *string `json:"sourceURI,omitempty" tf:"source_uri"`
	// +optional
	StorageAccountID   *string `json:"storageAccountID,omitempty" tf:"storage_account_id"`
	StorageAccountType *string `json:"storageAccountType" tf:"storage_account_type"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Tier *string `json:"tier,omitempty" tf:"tier"`
	// +optional
	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type DiskStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DiskList is a list of Disks
type DiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Disk CRD objects
	Items []Disk `json:"items,omitempty"`
}
