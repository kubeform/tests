/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1()):             BudgetResourceGroupSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1()):          BudgetResourceGroupSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1()): BudgetResourceGroupSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1()):       BudgetResourceGroupSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1()):         BudgetResourceGroupSpecTimePeriodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1()):              BudgetSubscriptionSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1()):           BudgetSubscriptionSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1()):  BudgetSubscriptionSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1()):        BudgetSubscriptionSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1()):          BudgetSubscriptionSpecTimePeriodCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1()):             BudgetResourceGroupSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1()):          BudgetResourceGroupSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1()): BudgetResourceGroupSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1()):       BudgetResourceGroupSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1()):         BudgetResourceGroupSpecTimePeriodCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1()):              BudgetSubscriptionSpecFilterCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1()):           BudgetSubscriptionSpecFilterNotCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1()):  BudgetSubscriptionSpecFilterNotDimensionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1()):        BudgetSubscriptionSpecFilterNotTagCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1()):          BudgetSubscriptionSpecTimePeriodCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterCodec struct {
}

func (BudgetResourceGroupSpecFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilter)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilter)(ptr)
	var objs []BudgetResourceGroupSpecFilter
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilter)(ptr) = BudgetResourceGroupSpecFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilter)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilter)(ptr) = BudgetResourceGroupSpecFilter{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilter)(ptr) = BudgetResourceGroupSpecFilter{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterNotCodec struct {
}

func (BudgetResourceGroupSpecFilterNotCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilterNot)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterNotCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilterNot)(ptr)
	var objs []BudgetResourceGroupSpecFilterNot
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilterNot{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterNotCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilterNot)(ptr) = BudgetResourceGroupSpecFilterNot{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilterNot)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilterNot)(ptr) = BudgetResourceGroupSpecFilterNot{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilterNot)(ptr) = BudgetResourceGroupSpecFilterNot{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilterNot", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterNotDimensionCodec struct {
}

func (BudgetResourceGroupSpecFilterNotDimensionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilterNotDimension)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterNotDimensionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilterNotDimension)(ptr)
	var objs []BudgetResourceGroupSpecFilterNotDimension
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilterNotDimension{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterNotDimensionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = BudgetResourceGroupSpecFilterNotDimension{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = BudgetResourceGroupSpecFilterNotDimension{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilterNotDimension)(ptr) = BudgetResourceGroupSpecFilterNotDimension{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilterNotDimension", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecFilterNotTagCodec struct {
}

func (BudgetResourceGroupSpecFilterNotTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecFilterNotTag)(ptr) == nil
}

func (BudgetResourceGroupSpecFilterNotTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecFilterNotTag)(ptr)
	var objs []BudgetResourceGroupSpecFilterNotTag
	if obj != nil {
		objs = []BudgetResourceGroupSpecFilterNotTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecFilterNotTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = BudgetResourceGroupSpecFilterNotTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = BudgetResourceGroupSpecFilterNotTag{}
			}
		} else {
			*(*BudgetResourceGroupSpecFilterNotTag)(ptr) = BudgetResourceGroupSpecFilterNotTag{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecFilterNotTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetResourceGroupSpecTimePeriodCodec struct {
}

func (BudgetResourceGroupSpecTimePeriodCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetResourceGroupSpecTimePeriod)(ptr) == nil
}

func (BudgetResourceGroupSpecTimePeriodCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetResourceGroupSpecTimePeriod)(ptr)
	var objs []BudgetResourceGroupSpecTimePeriod
	if obj != nil {
		objs = []BudgetResourceGroupSpecTimePeriod{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetResourceGroupSpecTimePeriodCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetResourceGroupSpecTimePeriod)(ptr) = BudgetResourceGroupSpecTimePeriod{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetResourceGroupSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetResourceGroupSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetResourceGroupSpecTimePeriod)(ptr) = objs[0]
			} else {
				*(*BudgetResourceGroupSpecTimePeriod)(ptr) = BudgetResourceGroupSpecTimePeriod{}
			}
		} else {
			*(*BudgetResourceGroupSpecTimePeriod)(ptr) = BudgetResourceGroupSpecTimePeriod{}
		}
	default:
		iter.ReportError("decode BudgetResourceGroupSpecTimePeriod", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterCodec struct {
}

func (BudgetSubscriptionSpecFilterCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilter)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilter)(ptr)
	var objs []BudgetSubscriptionSpecFilter
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilter{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilter)(ptr) = BudgetSubscriptionSpecFilter{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilter

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilter{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilter)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilter)(ptr) = BudgetSubscriptionSpecFilter{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilter)(ptr) = BudgetSubscriptionSpecFilter{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilter", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterNotCodec struct {
}

func (BudgetSubscriptionSpecFilterNotCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilterNot)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterNotCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilterNot)(ptr)
	var objs []BudgetSubscriptionSpecFilterNot
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilterNot{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterNotCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilterNot)(ptr) = BudgetSubscriptionSpecFilterNot{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilterNot

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNot{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilterNot)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilterNot)(ptr) = BudgetSubscriptionSpecFilterNot{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilterNot)(ptr) = BudgetSubscriptionSpecFilterNot{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilterNot", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterNotDimensionCodec struct {
}

func (BudgetSubscriptionSpecFilterNotDimensionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilterNotDimension)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterNotDimensionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilterNotDimension)(ptr)
	var objs []BudgetSubscriptionSpecFilterNotDimension
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilterNotDimension{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterNotDimensionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = BudgetSubscriptionSpecFilterNotDimension{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilterNotDimension

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotDimension{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = BudgetSubscriptionSpecFilterNotDimension{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilterNotDimension)(ptr) = BudgetSubscriptionSpecFilterNotDimension{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilterNotDimension", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecFilterNotTagCodec struct {
}

func (BudgetSubscriptionSpecFilterNotTagCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecFilterNotTag)(ptr) == nil
}

func (BudgetSubscriptionSpecFilterNotTagCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecFilterNotTag)(ptr)
	var objs []BudgetSubscriptionSpecFilterNotTag
	if obj != nil {
		objs = []BudgetSubscriptionSpecFilterNotTag{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecFilterNotTagCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = BudgetSubscriptionSpecFilterNotTag{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecFilterNotTag

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecFilterNotTag{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = BudgetSubscriptionSpecFilterNotTag{}
			}
		} else {
			*(*BudgetSubscriptionSpecFilterNotTag)(ptr) = BudgetSubscriptionSpecFilterNotTag{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecFilterNotTag", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type BudgetSubscriptionSpecTimePeriodCodec struct {
}

func (BudgetSubscriptionSpecTimePeriodCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*BudgetSubscriptionSpecTimePeriod)(ptr) == nil
}

func (BudgetSubscriptionSpecTimePeriodCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*BudgetSubscriptionSpecTimePeriod)(ptr)
	var objs []BudgetSubscriptionSpecTimePeriod
	if obj != nil {
		objs = []BudgetSubscriptionSpecTimePeriod{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (BudgetSubscriptionSpecTimePeriodCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*BudgetSubscriptionSpecTimePeriod)(ptr) = BudgetSubscriptionSpecTimePeriod{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []BudgetSubscriptionSpecTimePeriod

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(BudgetSubscriptionSpecTimePeriod{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*BudgetSubscriptionSpecTimePeriod)(ptr) = objs[0]
			} else {
				*(*BudgetSubscriptionSpecTimePeriod)(ptr) = BudgetSubscriptionSpecTimePeriod{}
			}
		} else {
			*(*BudgetSubscriptionSpecTimePeriod)(ptr) = BudgetSubscriptionSpecTimePeriod{}
		}
	default:
		iter.ReportError("decode BudgetSubscriptionSpecTimePeriod", "unexpected JSON type")
	}
}
