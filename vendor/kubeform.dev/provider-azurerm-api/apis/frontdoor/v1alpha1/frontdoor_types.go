/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Frontdoor struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FrontdoorSpec   `json:"spec,omitempty"`
	Status            FrontdoorStatus `json:"status,omitempty"`
}

type FrontdoorSpec struct {
	FrontdoorSpec2 `json:",inline"`
	// +optional
	KubeformOutput FrontdoorSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type FrontdoorSpecBackendPoolBackend struct {
	Address *string `json:"address" tf:"address"`
	// +optional
	Enabled    *bool   `json:"enabled,omitempty" tf:"enabled"`
	HostHeader *string `json:"hostHeader" tf:"host_header"`
	HttpPort   *int64  `json:"httpPort" tf:"http_port"`
	HttpsPort  *int64  `json:"httpsPort" tf:"https_port"`
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type FrontdoorSpecBackendPool struct {
	// +kubebuilder:validation:MaxItems=500
	Backend         []FrontdoorSpecBackendPoolBackend `json:"backend" tf:"backend"`
	HealthProbeName *string                           `json:"healthProbeName" tf:"health_probe_name"`
	// +optional
	ID                *string `json:"ID,omitempty" tf:"id"`
	LoadBalancingName *string `json:"loadBalancingName" tf:"load_balancing_name"`
	Name              *string `json:"name" tf:"name"`
}

type FrontdoorSpecBackendPoolHealthProbe struct {
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	IntervalInSeconds *int64  `json:"intervalInSeconds,omitempty" tf:"interval_in_seconds"`
	Name              *string `json:"name" tf:"name"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	ProbeMethod *string `json:"probeMethod,omitempty" tf:"probe_method"`
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
}

type FrontdoorSpecBackendPoolLoadBalancing struct {
	// +optional
	AdditionalLatencyMilliseconds *int64 `json:"additionalLatencyMilliseconds,omitempty" tf:"additional_latency_milliseconds"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +optional
	SampleSize *int64 `json:"sampleSize,omitempty" tf:"sample_size"`
	// +optional
	SuccessfulSamplesRequired *int64 `json:"successfulSamplesRequired,omitempty" tf:"successful_samples_required"`
}

type FrontdoorSpecExplicitResourceOrder struct {
	// +optional
	BackendPoolHealthProbeIDS []string `json:"backendPoolHealthProbeIDS,omitempty" tf:"backend_pool_health_probe_ids"`
	// +optional
	BackendPoolIDS []string `json:"backendPoolIDS,omitempty" tf:"backend_pool_ids"`
	// +optional
	BackendPoolLoadBalancingIDS []string `json:"backendPoolLoadBalancingIDS,omitempty" tf:"backend_pool_load_balancing_ids"`
	// +optional
	FrontendEndpointIDS []string `json:"frontendEndpointIDS,omitempty" tf:"frontend_endpoint_ids"`
	// +optional
	RoutingRuleIDS []string `json:"routingRuleIDS,omitempty" tf:"routing_rule_ids"`
}

type FrontdoorSpecFrontendEndpoint struct {
	HostName *string `json:"hostName" tf:"host_name"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +optional
	SessionAffinityEnabled *bool `json:"sessionAffinityEnabled,omitempty" tf:"session_affinity_enabled"`
	// +optional
	SessionAffinityTtlSeconds *int64 `json:"sessionAffinityTtlSeconds,omitempty" tf:"session_affinity_ttl_seconds"`
	// +optional
	WebApplicationFirewallPolicyLinkID *string `json:"webApplicationFirewallPolicyLinkID,omitempty" tf:"web_application_firewall_policy_link_id"`
}

type FrontdoorSpecRoutingRuleForwardingConfiguration struct {
	BackendPoolName *string `json:"backendPoolName" tf:"backend_pool_name"`
	// +optional
	CacheEnabled *bool `json:"cacheEnabled,omitempty" tf:"cache_enabled"`
	// +optional
	CacheQueryParameterStripDirective *string `json:"cacheQueryParameterStripDirective,omitempty" tf:"cache_query_parameter_strip_directive"`
	// +optional
	CacheUseDynamicCompression *bool `json:"cacheUseDynamicCompression,omitempty" tf:"cache_use_dynamic_compression"`
	// +optional
	CustomForwardingPath *string `json:"customForwardingPath,omitempty" tf:"custom_forwarding_path"`
	// +optional
	ForwardingProtocol *string `json:"forwardingProtocol,omitempty" tf:"forwarding_protocol"`
}

type FrontdoorSpecRoutingRuleRedirectConfiguration struct {
	// +optional
	CustomFragment *string `json:"customFragment,omitempty" tf:"custom_fragment"`
	// +optional
	CustomHost *string `json:"customHost,omitempty" tf:"custom_host"`
	// +optional
	CustomPath *string `json:"customPath,omitempty" tf:"custom_path"`
	// +optional
	CustomQueryString *string `json:"customQueryString,omitempty" tf:"custom_query_string"`
	RedirectProtocol  *string `json:"redirectProtocol" tf:"redirect_protocol"`
	RedirectType      *string `json:"redirectType" tf:"redirect_type"`
}

type FrontdoorSpecRoutingRule struct {
	// +kubebuilder:validation:MaxItems=2
	AcceptedProtocols []string `json:"acceptedProtocols" tf:"accepted_protocols"`
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	ForwardingConfiguration *FrontdoorSpecRoutingRuleForwardingConfiguration `json:"forwardingConfiguration,omitempty" tf:"forwarding_configuration"`
	// +kubebuilder:validation:MaxItems=500
	FrontendEndpoints []string `json:"frontendEndpoints" tf:"frontend_endpoints"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +kubebuilder:validation:MaxItems=25
	PatternsToMatch []string `json:"patternsToMatch" tf:"patterns_to_match"`
	// +optional
	RedirectConfiguration *FrontdoorSpecRoutingRuleRedirectConfiguration `json:"redirectConfiguration,omitempty" tf:"redirect_configuration"`
}

type FrontdoorSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	BackendPool []FrontdoorSpecBackendPool `json:"backendPool" tf:"backend_pool"`
	// +kubebuilder:validation:MaxItems=5000
	BackendPoolHealthProbe []FrontdoorSpecBackendPoolHealthProbe `json:"backendPoolHealthProbe" tf:"backend_pool_health_probe"`
	// +optional
	BackendPoolHealthProbes *map[string]string `json:"backendPoolHealthProbes,omitempty" tf:"backend_pool_health_probes"`
	// +kubebuilder:validation:MaxItems=5000
	BackendPoolLoadBalancing []FrontdoorSpecBackendPoolLoadBalancing `json:"backendPoolLoadBalancing" tf:"backend_pool_load_balancing"`
	// +optional
	BackendPoolLoadBalancingSettings *map[string]string `json:"backendPoolLoadBalancingSettings,omitempty" tf:"backend_pool_load_balancing_settings"`
	// +optional
	BackendPools *map[string]string `json:"backendPools,omitempty" tf:"backend_pools"`
	// +optional
	BackendPoolsSendReceiveTimeoutSeconds *int64 `json:"backendPoolsSendReceiveTimeoutSeconds,omitempty" tf:"backend_pools_send_receive_timeout_seconds"`
	// +optional
	Cname                                   *string `json:"cname,omitempty" tf:"cname"`
	EnforceBackendPoolsCertificateNameCheck *bool   `json:"enforceBackendPoolsCertificateNameCheck" tf:"enforce_backend_pools_certificate_name_check"`
	// +optional
	ExplicitResourceOrder []FrontdoorSpecExplicitResourceOrder `json:"explicitResourceOrder,omitempty" tf:"explicit_resource_order"`
	// +optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name"`
	// +kubebuilder:validation:MaxItems=500
	FrontendEndpoint []FrontdoorSpecFrontendEndpoint `json:"frontendEndpoint" tf:"frontend_endpoint"`
	// +optional
	FrontendEndpoints *map[string]string `json:"frontendEndpoints,omitempty" tf:"frontend_endpoints"`
	// +optional
	HeaderFrontdoorID *string `json:"headerFrontdoorID,omitempty" tf:"header_frontdoor_id"`
	// +optional
	LoadBalancerEnabled *bool `json:"loadBalancerEnabled,omitempty" tf:"load_balancer_enabled"`
	// +optional
	// Deprecated
	Location          *string `json:"location,omitempty" tf:"location"`
	Name              *string `json:"name" tf:"name"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +kubebuilder:validation:MaxItems=500
	RoutingRule []FrontdoorSpecRoutingRule `json:"routingRule" tf:"routing_rule"`
	// +optional
	RoutingRules *map[string]string `json:"routingRules,omitempty" tf:"routing_rules"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type FrontdoorStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FrontdoorList is a list of Frontdoors
type FrontdoorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Frontdoor CRD objects
	Items []Frontdoor `json:"items,omitempty"`
}
