/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ShareDatasetDataLakeGen1 struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShareDatasetDataLakeGen1Spec   `json:"spec,omitempty"`
	Status            ShareDatasetDataLakeGen1Status `json:"status,omitempty"`
}

type ShareDatasetDataLakeGen1Spec struct {
	ShareDatasetDataLakeGen1Spec2 `json:",inline"`
	// +optional
	KubeformOutput ShareDatasetDataLakeGen1Spec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ShareDatasetDataLakeGen1Spec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	DataLakeStoreID *string `json:"dataLakeStoreID" tf:"data_lake_store_id"`
	DataShareID     *string `json:"dataShareID" tf:"data_share_id"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FileName   *string `json:"fileName,omitempty" tf:"file_name"`
	FolderPath *string `json:"folderPath" tf:"folder_path"`
	Name       *string `json:"name" tf:"name"`
}

type ShareDatasetDataLakeGen1Status struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ShareDatasetDataLakeGen1List is a list of ShareDatasetDataLakeGen1s
type ShareDatasetDataLakeGen1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ShareDatasetDataLakeGen1 CRD objects
	Items []ShareDatasetDataLakeGen1 `json:"items,omitempty"`
}
