/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GlobalVmShutdownScheduleSpecNotificationSettings{}).Type1()): GlobalVmShutdownScheduleSpecNotificationSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LinuxVirtualMachineSpecGalleryImageReference{}).Type1()):     LinuxVirtualMachineSpecGalleryImageReferenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecDailyRecurrence{}).Type1()):                      ScheduleSpecDailyRecurrenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecHourlyRecurrence{}).Type1()):                     ScheduleSpecHourlyRecurrenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecNotificationSettings{}).Type1()):                 ScheduleSpecNotificationSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecWeeklyRecurrence{}).Type1()):                     ScheduleSpecWeeklyRecurrenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(VirtualNetworkSpecSubnet{}).Type1()):                         VirtualNetworkSpecSubnetCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WindowsVirtualMachineSpecGalleryImageReference{}).Type1()):   WindowsVirtualMachineSpecGalleryImageReferenceCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(GlobalVmShutdownScheduleSpecNotificationSettings{}).Type1()): GlobalVmShutdownScheduleSpecNotificationSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(LinuxVirtualMachineSpecGalleryImageReference{}).Type1()):     LinuxVirtualMachineSpecGalleryImageReferenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecDailyRecurrence{}).Type1()):                      ScheduleSpecDailyRecurrenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecHourlyRecurrence{}).Type1()):                     ScheduleSpecHourlyRecurrenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecNotificationSettings{}).Type1()):                 ScheduleSpecNotificationSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecWeeklyRecurrence{}).Type1()):                     ScheduleSpecWeeklyRecurrenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(VirtualNetworkSpecSubnet{}).Type1()):                         VirtualNetworkSpecSubnetCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(WindowsVirtualMachineSpecGalleryImageReference{}).Type1()):   WindowsVirtualMachineSpecGalleryImageReferenceCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type GlobalVmShutdownScheduleSpecNotificationSettingsCodec struct {
}

func (GlobalVmShutdownScheduleSpecNotificationSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GlobalVmShutdownScheduleSpecNotificationSettings)(ptr) == nil
}

func (GlobalVmShutdownScheduleSpecNotificationSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GlobalVmShutdownScheduleSpecNotificationSettings)(ptr)
	var objs []GlobalVmShutdownScheduleSpecNotificationSettings
	if obj != nil {
		objs = []GlobalVmShutdownScheduleSpecNotificationSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GlobalVmShutdownScheduleSpecNotificationSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GlobalVmShutdownScheduleSpecNotificationSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GlobalVmShutdownScheduleSpecNotificationSettings)(ptr) = GlobalVmShutdownScheduleSpecNotificationSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GlobalVmShutdownScheduleSpecNotificationSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GlobalVmShutdownScheduleSpecNotificationSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GlobalVmShutdownScheduleSpecNotificationSettings)(ptr) = objs[0]
			} else {
				*(*GlobalVmShutdownScheduleSpecNotificationSettings)(ptr) = GlobalVmShutdownScheduleSpecNotificationSettings{}
			}
		} else {
			*(*GlobalVmShutdownScheduleSpecNotificationSettings)(ptr) = GlobalVmShutdownScheduleSpecNotificationSettings{}
		}
	default:
		iter.ReportError("decode GlobalVmShutdownScheduleSpecNotificationSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type LinuxVirtualMachineSpecGalleryImageReferenceCodec struct {
}

func (LinuxVirtualMachineSpecGalleryImageReferenceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*LinuxVirtualMachineSpecGalleryImageReference)(ptr) == nil
}

func (LinuxVirtualMachineSpecGalleryImageReferenceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*LinuxVirtualMachineSpecGalleryImageReference)(ptr)
	var objs []LinuxVirtualMachineSpecGalleryImageReference
	if obj != nil {
		objs = []LinuxVirtualMachineSpecGalleryImageReference{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LinuxVirtualMachineSpecGalleryImageReference{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (LinuxVirtualMachineSpecGalleryImageReferenceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*LinuxVirtualMachineSpecGalleryImageReference)(ptr) = LinuxVirtualMachineSpecGalleryImageReference{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []LinuxVirtualMachineSpecGalleryImageReference

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(LinuxVirtualMachineSpecGalleryImageReference{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*LinuxVirtualMachineSpecGalleryImageReference)(ptr) = objs[0]
			} else {
				*(*LinuxVirtualMachineSpecGalleryImageReference)(ptr) = LinuxVirtualMachineSpecGalleryImageReference{}
			}
		} else {
			*(*LinuxVirtualMachineSpecGalleryImageReference)(ptr) = LinuxVirtualMachineSpecGalleryImageReference{}
		}
	default:
		iter.ReportError("decode LinuxVirtualMachineSpecGalleryImageReference", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScheduleSpecDailyRecurrenceCodec struct {
}

func (ScheduleSpecDailyRecurrenceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScheduleSpecDailyRecurrence)(ptr) == nil
}

func (ScheduleSpecDailyRecurrenceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScheduleSpecDailyRecurrence)(ptr)
	var objs []ScheduleSpecDailyRecurrence
	if obj != nil {
		objs = []ScheduleSpecDailyRecurrence{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecDailyRecurrence{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScheduleSpecDailyRecurrenceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScheduleSpecDailyRecurrence)(ptr) = ScheduleSpecDailyRecurrence{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScheduleSpecDailyRecurrence

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecDailyRecurrence{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScheduleSpecDailyRecurrence)(ptr) = objs[0]
			} else {
				*(*ScheduleSpecDailyRecurrence)(ptr) = ScheduleSpecDailyRecurrence{}
			}
		} else {
			*(*ScheduleSpecDailyRecurrence)(ptr) = ScheduleSpecDailyRecurrence{}
		}
	default:
		iter.ReportError("decode ScheduleSpecDailyRecurrence", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScheduleSpecHourlyRecurrenceCodec struct {
}

func (ScheduleSpecHourlyRecurrenceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScheduleSpecHourlyRecurrence)(ptr) == nil
}

func (ScheduleSpecHourlyRecurrenceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScheduleSpecHourlyRecurrence)(ptr)
	var objs []ScheduleSpecHourlyRecurrence
	if obj != nil {
		objs = []ScheduleSpecHourlyRecurrence{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecHourlyRecurrence{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScheduleSpecHourlyRecurrenceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScheduleSpecHourlyRecurrence)(ptr) = ScheduleSpecHourlyRecurrence{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScheduleSpecHourlyRecurrence

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecHourlyRecurrence{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScheduleSpecHourlyRecurrence)(ptr) = objs[0]
			} else {
				*(*ScheduleSpecHourlyRecurrence)(ptr) = ScheduleSpecHourlyRecurrence{}
			}
		} else {
			*(*ScheduleSpecHourlyRecurrence)(ptr) = ScheduleSpecHourlyRecurrence{}
		}
	default:
		iter.ReportError("decode ScheduleSpecHourlyRecurrence", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScheduleSpecNotificationSettingsCodec struct {
}

func (ScheduleSpecNotificationSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScheduleSpecNotificationSettings)(ptr) == nil
}

func (ScheduleSpecNotificationSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScheduleSpecNotificationSettings)(ptr)
	var objs []ScheduleSpecNotificationSettings
	if obj != nil {
		objs = []ScheduleSpecNotificationSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecNotificationSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScheduleSpecNotificationSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScheduleSpecNotificationSettings)(ptr) = ScheduleSpecNotificationSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScheduleSpecNotificationSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecNotificationSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScheduleSpecNotificationSettings)(ptr) = objs[0]
			} else {
				*(*ScheduleSpecNotificationSettings)(ptr) = ScheduleSpecNotificationSettings{}
			}
		} else {
			*(*ScheduleSpecNotificationSettings)(ptr) = ScheduleSpecNotificationSettings{}
		}
	default:
		iter.ReportError("decode ScheduleSpecNotificationSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ScheduleSpecWeeklyRecurrenceCodec struct {
}

func (ScheduleSpecWeeklyRecurrenceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ScheduleSpecWeeklyRecurrence)(ptr) == nil
}

func (ScheduleSpecWeeklyRecurrenceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ScheduleSpecWeeklyRecurrence)(ptr)
	var objs []ScheduleSpecWeeklyRecurrence
	if obj != nil {
		objs = []ScheduleSpecWeeklyRecurrence{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecWeeklyRecurrence{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ScheduleSpecWeeklyRecurrenceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ScheduleSpecWeeklyRecurrence)(ptr) = ScheduleSpecWeeklyRecurrence{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ScheduleSpecWeeklyRecurrence

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ScheduleSpecWeeklyRecurrence{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ScheduleSpecWeeklyRecurrence)(ptr) = objs[0]
			} else {
				*(*ScheduleSpecWeeklyRecurrence)(ptr) = ScheduleSpecWeeklyRecurrence{}
			}
		} else {
			*(*ScheduleSpecWeeklyRecurrence)(ptr) = ScheduleSpecWeeklyRecurrence{}
		}
	default:
		iter.ReportError("decode ScheduleSpecWeeklyRecurrence", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type VirtualNetworkSpecSubnetCodec struct {
}

func (VirtualNetworkSpecSubnetCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*VirtualNetworkSpecSubnet)(ptr) == nil
}

func (VirtualNetworkSpecSubnetCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*VirtualNetworkSpecSubnet)(ptr)
	var objs []VirtualNetworkSpecSubnet
	if obj != nil {
		objs = []VirtualNetworkSpecSubnet{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VirtualNetworkSpecSubnet{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (VirtualNetworkSpecSubnetCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*VirtualNetworkSpecSubnet)(ptr) = VirtualNetworkSpecSubnet{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []VirtualNetworkSpecSubnet

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(VirtualNetworkSpecSubnet{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*VirtualNetworkSpecSubnet)(ptr) = objs[0]
			} else {
				*(*VirtualNetworkSpecSubnet)(ptr) = VirtualNetworkSpecSubnet{}
			}
		} else {
			*(*VirtualNetworkSpecSubnet)(ptr) = VirtualNetworkSpecSubnet{}
		}
	default:
		iter.ReportError("decode VirtualNetworkSpecSubnet", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type WindowsVirtualMachineSpecGalleryImageReferenceCodec struct {
}

func (WindowsVirtualMachineSpecGalleryImageReferenceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*WindowsVirtualMachineSpecGalleryImageReference)(ptr) == nil
}

func (WindowsVirtualMachineSpecGalleryImageReferenceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*WindowsVirtualMachineSpecGalleryImageReference)(ptr)
	var objs []WindowsVirtualMachineSpecGalleryImageReference
	if obj != nil {
		objs = []WindowsVirtualMachineSpecGalleryImageReference{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WindowsVirtualMachineSpecGalleryImageReference{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (WindowsVirtualMachineSpecGalleryImageReferenceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*WindowsVirtualMachineSpecGalleryImageReference)(ptr) = WindowsVirtualMachineSpecGalleryImageReference{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []WindowsVirtualMachineSpecGalleryImageReference

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(WindowsVirtualMachineSpecGalleryImageReference{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*WindowsVirtualMachineSpecGalleryImageReference)(ptr) = objs[0]
			} else {
				*(*WindowsVirtualMachineSpecGalleryImageReference)(ptr) = WindowsVirtualMachineSpecGalleryImageReference{}
			}
		} else {
			*(*WindowsVirtualMachineSpecGalleryImageReference)(ptr) = WindowsVirtualMachineSpecGalleryImageReference{}
		}
	default:
		iter.ReportError("decode WindowsVirtualMachineSpecGalleryImageReference", "unexpected JSON type")
	}
}
