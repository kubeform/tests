/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type PolicyFileShare struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyFileShareSpec   `json:"spec,omitempty"`
	Status            PolicyFileShareStatus `json:"status,omitempty"`
}

type PolicyFileShareSpec struct {
	PolicyFileShareSpec2 `json:",inline"`
	// +optional
	KubeformOutput PolicyFileShareSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PolicyFileShareSpecBackup struct {
	Frequency *string `json:"frequency" tf:"frequency"`
	Time      *string `json:"time" tf:"time"`
}

type PolicyFileShareSpecRetentionDaily struct {
	Count *int64 `json:"count" tf:"count"`
}

type PolicyFileShareSpecRetentionMonthly struct {
	Count    *int64   `json:"count" tf:"count"`
	Weekdays []string `json:"weekdays" tf:"weekdays"`
	Weeks    []string `json:"weeks" tf:"weeks"`
}

type PolicyFileShareSpecRetentionWeekly struct {
	Count    *int64   `json:"count" tf:"count"`
	Weekdays []string `json:"weekdays" tf:"weekdays"`
}

type PolicyFileShareSpecRetentionYearly struct {
	Count    *int64   `json:"count" tf:"count"`
	Months   []string `json:"months" tf:"months"`
	Weekdays []string `json:"weekdays" tf:"weekdays"`
	Weeks    []string `json:"weeks" tf:"weeks"`
}

type PolicyFileShareSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Backup            *PolicyFileShareSpecBackup         `json:"backup" tf:"backup"`
	Name              *string                            `json:"name" tf:"name"`
	RecoveryVaultName *string                            `json:"recoveryVaultName" tf:"recovery_vault_name"`
	ResourceGroupName *string                            `json:"resourceGroupName" tf:"resource_group_name"`
	RetentionDaily    *PolicyFileShareSpecRetentionDaily `json:"retentionDaily" tf:"retention_daily"`
	// +optional
	RetentionMonthly *PolicyFileShareSpecRetentionMonthly `json:"retentionMonthly,omitempty" tf:"retention_monthly"`
	// +optional
	RetentionWeekly *PolicyFileShareSpecRetentionWeekly `json:"retentionWeekly,omitempty" tf:"retention_weekly"`
	// +optional
	RetentionYearly *PolicyFileShareSpecRetentionYearly `json:"retentionYearly,omitempty" tf:"retention_yearly"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone"`
}

type PolicyFileShareStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PolicyFileShareList is a list of PolicyFileShares
type PolicyFileShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of PolicyFileShare CRD objects
	Items []PolicyFileShare `json:"items,omitempty"`
}
