/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecExtendedAuditingPolicy{}).Type1()):               DatabaseSpecExtendedAuditingPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecImport{}).Type1()):                               DatabaseSpecImportCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecThreatDetectionPolicy{}).Type1()):                DatabaseSpecThreatDetectionPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadWriteEndpointFailoverPolicy{}).Type1()): FailoverGroupSpecReadWriteEndpointFailoverPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadonlyEndpointFailoverPolicy{}).Type1()):  FailoverGroupSpecReadonlyEndpointFailoverPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecExtendedAuditingPolicy{}).Type1()):                 ServerSpecExtendedAuditingPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecIdentity{}).Type1()):                               ServerSpecIdentityCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecExtendedAuditingPolicy{}).Type1()):               DatabaseSpecExtendedAuditingPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecImport{}).Type1()):                               DatabaseSpecImportCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecThreatDetectionPolicy{}).Type1()):                DatabaseSpecThreatDetectionPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadWriteEndpointFailoverPolicy{}).Type1()): FailoverGroupSpecReadWriteEndpointFailoverPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadonlyEndpointFailoverPolicy{}).Type1()):  FailoverGroupSpecReadonlyEndpointFailoverPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecExtendedAuditingPolicy{}).Type1()):                 ServerSpecExtendedAuditingPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecIdentity{}).Type1()):                               ServerSpecIdentityCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DatabaseSpecExtendedAuditingPolicyCodec struct {
}

func (DatabaseSpecExtendedAuditingPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecExtendedAuditingPolicy)(ptr) == nil
}

func (DatabaseSpecExtendedAuditingPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecExtendedAuditingPolicy)(ptr)
	var objs []DatabaseSpecExtendedAuditingPolicy
	if obj != nil {
		objs = []DatabaseSpecExtendedAuditingPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecExtendedAuditingPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecExtendedAuditingPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecExtendedAuditingPolicy)(ptr) = DatabaseSpecExtendedAuditingPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecExtendedAuditingPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecExtendedAuditingPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecExtendedAuditingPolicy)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecExtendedAuditingPolicy)(ptr) = DatabaseSpecExtendedAuditingPolicy{}
			}
		} else {
			*(*DatabaseSpecExtendedAuditingPolicy)(ptr) = DatabaseSpecExtendedAuditingPolicy{}
		}
	default:
		iter.ReportError("decode DatabaseSpecExtendedAuditingPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseSpecImportCodec struct {
}

func (DatabaseSpecImportCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecImport)(ptr) == nil
}

func (DatabaseSpecImportCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecImport)(ptr)
	var objs []DatabaseSpecImport
	if obj != nil {
		objs = []DatabaseSpecImport{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecImport{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecImportCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecImport)(ptr) = DatabaseSpecImport{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecImport

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecImport{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecImport)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecImport)(ptr) = DatabaseSpecImport{}
			}
		} else {
			*(*DatabaseSpecImport)(ptr) = DatabaseSpecImport{}
		}
	default:
		iter.ReportError("decode DatabaseSpecImport", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseSpecThreatDetectionPolicyCodec struct {
}

func (DatabaseSpecThreatDetectionPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseSpecThreatDetectionPolicy)(ptr) == nil
}

func (DatabaseSpecThreatDetectionPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseSpecThreatDetectionPolicy)(ptr)
	var objs []DatabaseSpecThreatDetectionPolicy
	if obj != nil {
		objs = []DatabaseSpecThreatDetectionPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecThreatDetectionPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseSpecThreatDetectionPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseSpecThreatDetectionPolicy)(ptr) = DatabaseSpecThreatDetectionPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseSpecThreatDetectionPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseSpecThreatDetectionPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseSpecThreatDetectionPolicy)(ptr) = objs[0]
			} else {
				*(*DatabaseSpecThreatDetectionPolicy)(ptr) = DatabaseSpecThreatDetectionPolicy{}
			}
		} else {
			*(*DatabaseSpecThreatDetectionPolicy)(ptr) = DatabaseSpecThreatDetectionPolicy{}
		}
	default:
		iter.ReportError("decode DatabaseSpecThreatDetectionPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FailoverGroupSpecReadWriteEndpointFailoverPolicyCodec struct {
}

func (FailoverGroupSpecReadWriteEndpointFailoverPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FailoverGroupSpecReadWriteEndpointFailoverPolicy)(ptr) == nil
}

func (FailoverGroupSpecReadWriteEndpointFailoverPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FailoverGroupSpecReadWriteEndpointFailoverPolicy)(ptr)
	var objs []FailoverGroupSpecReadWriteEndpointFailoverPolicy
	if obj != nil {
		objs = []FailoverGroupSpecReadWriteEndpointFailoverPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadWriteEndpointFailoverPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FailoverGroupSpecReadWriteEndpointFailoverPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FailoverGroupSpecReadWriteEndpointFailoverPolicy)(ptr) = FailoverGroupSpecReadWriteEndpointFailoverPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FailoverGroupSpecReadWriteEndpointFailoverPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadWriteEndpointFailoverPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FailoverGroupSpecReadWriteEndpointFailoverPolicy)(ptr) = objs[0]
			} else {
				*(*FailoverGroupSpecReadWriteEndpointFailoverPolicy)(ptr) = FailoverGroupSpecReadWriteEndpointFailoverPolicy{}
			}
		} else {
			*(*FailoverGroupSpecReadWriteEndpointFailoverPolicy)(ptr) = FailoverGroupSpecReadWriteEndpointFailoverPolicy{}
		}
	default:
		iter.ReportError("decode FailoverGroupSpecReadWriteEndpointFailoverPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FailoverGroupSpecReadonlyEndpointFailoverPolicyCodec struct {
}

func (FailoverGroupSpecReadonlyEndpointFailoverPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FailoverGroupSpecReadonlyEndpointFailoverPolicy)(ptr) == nil
}

func (FailoverGroupSpecReadonlyEndpointFailoverPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FailoverGroupSpecReadonlyEndpointFailoverPolicy)(ptr)
	var objs []FailoverGroupSpecReadonlyEndpointFailoverPolicy
	if obj != nil {
		objs = []FailoverGroupSpecReadonlyEndpointFailoverPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadonlyEndpointFailoverPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FailoverGroupSpecReadonlyEndpointFailoverPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FailoverGroupSpecReadonlyEndpointFailoverPolicy)(ptr) = FailoverGroupSpecReadonlyEndpointFailoverPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FailoverGroupSpecReadonlyEndpointFailoverPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FailoverGroupSpecReadonlyEndpointFailoverPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FailoverGroupSpecReadonlyEndpointFailoverPolicy)(ptr) = objs[0]
			} else {
				*(*FailoverGroupSpecReadonlyEndpointFailoverPolicy)(ptr) = FailoverGroupSpecReadonlyEndpointFailoverPolicy{}
			}
		} else {
			*(*FailoverGroupSpecReadonlyEndpointFailoverPolicy)(ptr) = FailoverGroupSpecReadonlyEndpointFailoverPolicy{}
		}
	default:
		iter.ReportError("decode FailoverGroupSpecReadonlyEndpointFailoverPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServerSpecExtendedAuditingPolicyCodec struct {
}

func (ServerSpecExtendedAuditingPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServerSpecExtendedAuditingPolicy)(ptr) == nil
}

func (ServerSpecExtendedAuditingPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServerSpecExtendedAuditingPolicy)(ptr)
	var objs []ServerSpecExtendedAuditingPolicy
	if obj != nil {
		objs = []ServerSpecExtendedAuditingPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecExtendedAuditingPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServerSpecExtendedAuditingPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServerSpecExtendedAuditingPolicy)(ptr) = ServerSpecExtendedAuditingPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServerSpecExtendedAuditingPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecExtendedAuditingPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServerSpecExtendedAuditingPolicy)(ptr) = objs[0]
			} else {
				*(*ServerSpecExtendedAuditingPolicy)(ptr) = ServerSpecExtendedAuditingPolicy{}
			}
		} else {
			*(*ServerSpecExtendedAuditingPolicy)(ptr) = ServerSpecExtendedAuditingPolicy{}
		}
	default:
		iter.ReportError("decode ServerSpecExtendedAuditingPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ServerSpecIdentityCodec struct {
}

func (ServerSpecIdentityCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ServerSpecIdentity)(ptr) == nil
}

func (ServerSpecIdentityCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ServerSpecIdentity)(ptr)
	var objs []ServerSpecIdentity
	if obj != nil {
		objs = []ServerSpecIdentity{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecIdentity{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ServerSpecIdentityCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ServerSpecIdentity)(ptr) = ServerSpecIdentity{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ServerSpecIdentity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ServerSpecIdentity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ServerSpecIdentity)(ptr) = objs[0]
			} else {
				*(*ServerSpecIdentity)(ptr) = ServerSpecIdentity{}
			}
		} else {
			*(*ServerSpecIdentity)(ptr) = ServerSpecIdentity{}
		}
	default:
		iter.ReportError("decode ServerSpecIdentity", "unexpected JSON type")
	}
}
