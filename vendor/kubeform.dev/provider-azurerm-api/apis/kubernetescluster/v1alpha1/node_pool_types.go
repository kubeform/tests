/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NodePool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodePoolSpec   `json:"spec,omitempty"`
	Status            NodePoolStatus `json:"status,omitempty"`
}

type NodePoolSpec struct {
	NodePoolSpec2 `json:",inline"`
	// +optional
	KubeformOutput NodePoolSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NodePoolSpecUpgradeSettings struct {
	MaxSurge *string `json:"maxSurge" tf:"max_surge"`
}

type NodePoolSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`
	// +optional
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty" tf:"enable_auto_scaling"`
	// +optional
	EnableHostEncryption *bool `json:"enableHostEncryption,omitempty" tf:"enable_host_encryption"`
	// +optional
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty" tf:"enable_node_public_ip"`
	// +optional
	EvictionPolicy      *string `json:"evictionPolicy,omitempty" tf:"eviction_policy"`
	KubernetesClusterID *string `json:"kubernetesClusterID" tf:"kubernetes_cluster_id"`
	// +optional
	MaxCount *int64 `json:"maxCount,omitempty" tf:"max_count"`
	// +optional
	MaxPods *int64 `json:"maxPods,omitempty" tf:"max_pods"`
	// +optional
	MinCount *int64 `json:"minCount,omitempty" tf:"min_count"`
	// +optional
	Mode *string `json:"mode,omitempty" tf:"mode"`
	Name *string `json:"name" tf:"name"`
	// +optional
	NodeCount *int64 `json:"nodeCount,omitempty" tf:"node_count"`
	// +optional
	NodeLabels *map[string]string `json:"nodeLabels,omitempty" tf:"node_labels"`
	// +optional
	NodeTaints []string `json:"nodeTaints,omitempty" tf:"node_taints"`
	// +optional
	OrchestratorVersion *string `json:"orchestratorVersion,omitempty" tf:"orchestrator_version"`
	// +optional
	OsDiskSizeGb *int64 `json:"osDiskSizeGb,omitempty" tf:"os_disk_size_gb"`
	// +optional
	OsDiskType *string `json:"osDiskType,omitempty" tf:"os_disk_type"`
	// +optional
	OsType *string `json:"osType,omitempty" tf:"os_type"`
	// +optional
	Priority *string `json:"priority,omitempty" tf:"priority"`
	// +optional
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty" tf:"proximity_placement_group_id"`
	// +optional
	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty" tf:"spot_max_price"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	UpgradeSettings *NodePoolSpecUpgradeSettings `json:"upgradeSettings,omitempty" tf:"upgrade_settings"`
	VmSize          *string                      `json:"vmSize" tf:"vm_size"`
	// +optional
	VnetSubnetID *string `json:"vnetSubnetID,omitempty" tf:"vnet_subnet_id"`
}

type NodePoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NodePoolList is a list of NodePools
type NodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NodePool CRD objects
	Items []NodePool `json:"items,omitempty"`
}
