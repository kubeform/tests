/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheExpirationAction{}).Type1()):           EndpointSpecDeliveryRuleCacheExpirationActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheKeyQueryStringAction{}).Type1()):       EndpointSpecDeliveryRuleCacheKeyQueryStringActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleDeviceCondition{}).Type1()):                 EndpointSpecDeliveryRuleDeviceConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestMethodCondition{}).Type1()):          EndpointSpecDeliveryRuleRequestMethodConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestSchemeCondition{}).Type1()):          EndpointSpecDeliveryRuleRequestSchemeConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRedirectAction{}).Type1()):               EndpointSpecDeliveryRuleUrlRedirectActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRewriteAction{}).Type1()):                EndpointSpecDeliveryRuleUrlRewriteActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRule{}).Type1()):                          EndpointSpecGlobalDeliveryRuleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheExpirationAction{}).Type1()):     EndpointSpecGlobalDeliveryRuleCacheExpirationActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{}).Type1()): EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRedirectAction{}).Type1()):         EndpointSpecGlobalDeliveryRuleUrlRedirectActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRewriteAction{}).Type1()):          EndpointSpecGlobalDeliveryRuleUrlRewriteActionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheExpirationAction{}).Type1()):           EndpointSpecDeliveryRuleCacheExpirationActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheKeyQueryStringAction{}).Type1()):       EndpointSpecDeliveryRuleCacheKeyQueryStringActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleDeviceCondition{}).Type1()):                 EndpointSpecDeliveryRuleDeviceConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestMethodCondition{}).Type1()):          EndpointSpecDeliveryRuleRequestMethodConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestSchemeCondition{}).Type1()):          EndpointSpecDeliveryRuleRequestSchemeConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRedirectAction{}).Type1()):               EndpointSpecDeliveryRuleUrlRedirectActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRewriteAction{}).Type1()):                EndpointSpecDeliveryRuleUrlRewriteActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRule{}).Type1()):                          EndpointSpecGlobalDeliveryRuleCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheExpirationAction{}).Type1()):     EndpointSpecGlobalDeliveryRuleCacheExpirationActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{}).Type1()): EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRedirectAction{}).Type1()):         EndpointSpecGlobalDeliveryRuleUrlRedirectActionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRewriteAction{}).Type1()):          EndpointSpecGlobalDeliveryRuleUrlRewriteActionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type EndpointSpecDeliveryRuleCacheExpirationActionCodec struct {
}

func (EndpointSpecDeliveryRuleCacheExpirationActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecDeliveryRuleCacheExpirationAction)(ptr) == nil
}

func (EndpointSpecDeliveryRuleCacheExpirationActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecDeliveryRuleCacheExpirationAction)(ptr)
	var objs []EndpointSpecDeliveryRuleCacheExpirationAction
	if obj != nil {
		objs = []EndpointSpecDeliveryRuleCacheExpirationAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheExpirationAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecDeliveryRuleCacheExpirationActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecDeliveryRuleCacheExpirationAction)(ptr) = EndpointSpecDeliveryRuleCacheExpirationAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecDeliveryRuleCacheExpirationAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheExpirationAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecDeliveryRuleCacheExpirationAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecDeliveryRuleCacheExpirationAction)(ptr) = EndpointSpecDeliveryRuleCacheExpirationAction{}
			}
		} else {
			*(*EndpointSpecDeliveryRuleCacheExpirationAction)(ptr) = EndpointSpecDeliveryRuleCacheExpirationAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecDeliveryRuleCacheExpirationAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecDeliveryRuleCacheKeyQueryStringActionCodec struct {
}

func (EndpointSpecDeliveryRuleCacheKeyQueryStringActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecDeliveryRuleCacheKeyQueryStringAction)(ptr) == nil
}

func (EndpointSpecDeliveryRuleCacheKeyQueryStringActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecDeliveryRuleCacheKeyQueryStringAction)(ptr)
	var objs []EndpointSpecDeliveryRuleCacheKeyQueryStringAction
	if obj != nil {
		objs = []EndpointSpecDeliveryRuleCacheKeyQueryStringAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheKeyQueryStringAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecDeliveryRuleCacheKeyQueryStringActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecDeliveryRuleCacheKeyQueryStringAction)(ptr) = EndpointSpecDeliveryRuleCacheKeyQueryStringAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecDeliveryRuleCacheKeyQueryStringAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleCacheKeyQueryStringAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecDeliveryRuleCacheKeyQueryStringAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecDeliveryRuleCacheKeyQueryStringAction)(ptr) = EndpointSpecDeliveryRuleCacheKeyQueryStringAction{}
			}
		} else {
			*(*EndpointSpecDeliveryRuleCacheKeyQueryStringAction)(ptr) = EndpointSpecDeliveryRuleCacheKeyQueryStringAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecDeliveryRuleCacheKeyQueryStringAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecDeliveryRuleDeviceConditionCodec struct {
}

func (EndpointSpecDeliveryRuleDeviceConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecDeliveryRuleDeviceCondition)(ptr) == nil
}

func (EndpointSpecDeliveryRuleDeviceConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecDeliveryRuleDeviceCondition)(ptr)
	var objs []EndpointSpecDeliveryRuleDeviceCondition
	if obj != nil {
		objs = []EndpointSpecDeliveryRuleDeviceCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleDeviceCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecDeliveryRuleDeviceConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecDeliveryRuleDeviceCondition)(ptr) = EndpointSpecDeliveryRuleDeviceCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecDeliveryRuleDeviceCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleDeviceCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecDeliveryRuleDeviceCondition)(ptr) = objs[0]
			} else {
				*(*EndpointSpecDeliveryRuleDeviceCondition)(ptr) = EndpointSpecDeliveryRuleDeviceCondition{}
			}
		} else {
			*(*EndpointSpecDeliveryRuleDeviceCondition)(ptr) = EndpointSpecDeliveryRuleDeviceCondition{}
		}
	default:
		iter.ReportError("decode EndpointSpecDeliveryRuleDeviceCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecDeliveryRuleRequestMethodConditionCodec struct {
}

func (EndpointSpecDeliveryRuleRequestMethodConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecDeliveryRuleRequestMethodCondition)(ptr) == nil
}

func (EndpointSpecDeliveryRuleRequestMethodConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecDeliveryRuleRequestMethodCondition)(ptr)
	var objs []EndpointSpecDeliveryRuleRequestMethodCondition
	if obj != nil {
		objs = []EndpointSpecDeliveryRuleRequestMethodCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestMethodCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecDeliveryRuleRequestMethodConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecDeliveryRuleRequestMethodCondition)(ptr) = EndpointSpecDeliveryRuleRequestMethodCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecDeliveryRuleRequestMethodCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestMethodCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecDeliveryRuleRequestMethodCondition)(ptr) = objs[0]
			} else {
				*(*EndpointSpecDeliveryRuleRequestMethodCondition)(ptr) = EndpointSpecDeliveryRuleRequestMethodCondition{}
			}
		} else {
			*(*EndpointSpecDeliveryRuleRequestMethodCondition)(ptr) = EndpointSpecDeliveryRuleRequestMethodCondition{}
		}
	default:
		iter.ReportError("decode EndpointSpecDeliveryRuleRequestMethodCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecDeliveryRuleRequestSchemeConditionCodec struct {
}

func (EndpointSpecDeliveryRuleRequestSchemeConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecDeliveryRuleRequestSchemeCondition)(ptr) == nil
}

func (EndpointSpecDeliveryRuleRequestSchemeConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecDeliveryRuleRequestSchemeCondition)(ptr)
	var objs []EndpointSpecDeliveryRuleRequestSchemeCondition
	if obj != nil {
		objs = []EndpointSpecDeliveryRuleRequestSchemeCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestSchemeCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecDeliveryRuleRequestSchemeConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecDeliveryRuleRequestSchemeCondition)(ptr) = EndpointSpecDeliveryRuleRequestSchemeCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecDeliveryRuleRequestSchemeCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleRequestSchemeCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecDeliveryRuleRequestSchemeCondition)(ptr) = objs[0]
			} else {
				*(*EndpointSpecDeliveryRuleRequestSchemeCondition)(ptr) = EndpointSpecDeliveryRuleRequestSchemeCondition{}
			}
		} else {
			*(*EndpointSpecDeliveryRuleRequestSchemeCondition)(ptr) = EndpointSpecDeliveryRuleRequestSchemeCondition{}
		}
	default:
		iter.ReportError("decode EndpointSpecDeliveryRuleRequestSchemeCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecDeliveryRuleUrlRedirectActionCodec struct {
}

func (EndpointSpecDeliveryRuleUrlRedirectActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecDeliveryRuleUrlRedirectAction)(ptr) == nil
}

func (EndpointSpecDeliveryRuleUrlRedirectActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecDeliveryRuleUrlRedirectAction)(ptr)
	var objs []EndpointSpecDeliveryRuleUrlRedirectAction
	if obj != nil {
		objs = []EndpointSpecDeliveryRuleUrlRedirectAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRedirectAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecDeliveryRuleUrlRedirectActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecDeliveryRuleUrlRedirectAction)(ptr) = EndpointSpecDeliveryRuleUrlRedirectAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecDeliveryRuleUrlRedirectAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRedirectAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecDeliveryRuleUrlRedirectAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecDeliveryRuleUrlRedirectAction)(ptr) = EndpointSpecDeliveryRuleUrlRedirectAction{}
			}
		} else {
			*(*EndpointSpecDeliveryRuleUrlRedirectAction)(ptr) = EndpointSpecDeliveryRuleUrlRedirectAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecDeliveryRuleUrlRedirectAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecDeliveryRuleUrlRewriteActionCodec struct {
}

func (EndpointSpecDeliveryRuleUrlRewriteActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecDeliveryRuleUrlRewriteAction)(ptr) == nil
}

func (EndpointSpecDeliveryRuleUrlRewriteActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecDeliveryRuleUrlRewriteAction)(ptr)
	var objs []EndpointSpecDeliveryRuleUrlRewriteAction
	if obj != nil {
		objs = []EndpointSpecDeliveryRuleUrlRewriteAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRewriteAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecDeliveryRuleUrlRewriteActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecDeliveryRuleUrlRewriteAction)(ptr) = EndpointSpecDeliveryRuleUrlRewriteAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecDeliveryRuleUrlRewriteAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecDeliveryRuleUrlRewriteAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecDeliveryRuleUrlRewriteAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecDeliveryRuleUrlRewriteAction)(ptr) = EndpointSpecDeliveryRuleUrlRewriteAction{}
			}
		} else {
			*(*EndpointSpecDeliveryRuleUrlRewriteAction)(ptr) = EndpointSpecDeliveryRuleUrlRewriteAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecDeliveryRuleUrlRewriteAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecGlobalDeliveryRuleCodec struct {
}

func (EndpointSpecGlobalDeliveryRuleCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecGlobalDeliveryRule)(ptr) == nil
}

func (EndpointSpecGlobalDeliveryRuleCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecGlobalDeliveryRule)(ptr)
	var objs []EndpointSpecGlobalDeliveryRule
	if obj != nil {
		objs = []EndpointSpecGlobalDeliveryRule{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRule{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecGlobalDeliveryRuleCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecGlobalDeliveryRule)(ptr) = EndpointSpecGlobalDeliveryRule{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecGlobalDeliveryRule

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRule{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecGlobalDeliveryRule)(ptr) = objs[0]
			} else {
				*(*EndpointSpecGlobalDeliveryRule)(ptr) = EndpointSpecGlobalDeliveryRule{}
			}
		} else {
			*(*EndpointSpecGlobalDeliveryRule)(ptr) = EndpointSpecGlobalDeliveryRule{}
		}
	default:
		iter.ReportError("decode EndpointSpecGlobalDeliveryRule", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecGlobalDeliveryRuleCacheExpirationActionCodec struct {
}

func (EndpointSpecGlobalDeliveryRuleCacheExpirationActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecGlobalDeliveryRuleCacheExpirationAction)(ptr) == nil
}

func (EndpointSpecGlobalDeliveryRuleCacheExpirationActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecGlobalDeliveryRuleCacheExpirationAction)(ptr)
	var objs []EndpointSpecGlobalDeliveryRuleCacheExpirationAction
	if obj != nil {
		objs = []EndpointSpecGlobalDeliveryRuleCacheExpirationAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheExpirationAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecGlobalDeliveryRuleCacheExpirationActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecGlobalDeliveryRuleCacheExpirationAction)(ptr) = EndpointSpecGlobalDeliveryRuleCacheExpirationAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecGlobalDeliveryRuleCacheExpirationAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheExpirationAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecGlobalDeliveryRuleCacheExpirationAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecGlobalDeliveryRuleCacheExpirationAction)(ptr) = EndpointSpecGlobalDeliveryRuleCacheExpirationAction{}
			}
		} else {
			*(*EndpointSpecGlobalDeliveryRuleCacheExpirationAction)(ptr) = EndpointSpecGlobalDeliveryRuleCacheExpirationAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecGlobalDeliveryRuleCacheExpirationAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringActionCodec struct {
}

func (EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction)(ptr) == nil
}

func (EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction)(ptr)
	var objs []EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction
	if obj != nil {
		objs = []EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction)(ptr) = EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction)(ptr) = EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{}
			}
		} else {
			*(*EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction)(ptr) = EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecGlobalDeliveryRuleCacheKeyQueryStringAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecGlobalDeliveryRuleUrlRedirectActionCodec struct {
}

func (EndpointSpecGlobalDeliveryRuleUrlRedirectActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecGlobalDeliveryRuleUrlRedirectAction)(ptr) == nil
}

func (EndpointSpecGlobalDeliveryRuleUrlRedirectActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecGlobalDeliveryRuleUrlRedirectAction)(ptr)
	var objs []EndpointSpecGlobalDeliveryRuleUrlRedirectAction
	if obj != nil {
		objs = []EndpointSpecGlobalDeliveryRuleUrlRedirectAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRedirectAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecGlobalDeliveryRuleUrlRedirectActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecGlobalDeliveryRuleUrlRedirectAction)(ptr) = EndpointSpecGlobalDeliveryRuleUrlRedirectAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecGlobalDeliveryRuleUrlRedirectAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRedirectAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecGlobalDeliveryRuleUrlRedirectAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecGlobalDeliveryRuleUrlRedirectAction)(ptr) = EndpointSpecGlobalDeliveryRuleUrlRedirectAction{}
			}
		} else {
			*(*EndpointSpecGlobalDeliveryRuleUrlRedirectAction)(ptr) = EndpointSpecGlobalDeliveryRuleUrlRedirectAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecGlobalDeliveryRuleUrlRedirectAction", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EndpointSpecGlobalDeliveryRuleUrlRewriteActionCodec struct {
}

func (EndpointSpecGlobalDeliveryRuleUrlRewriteActionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EndpointSpecGlobalDeliveryRuleUrlRewriteAction)(ptr) == nil
}

func (EndpointSpecGlobalDeliveryRuleUrlRewriteActionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EndpointSpecGlobalDeliveryRuleUrlRewriteAction)(ptr)
	var objs []EndpointSpecGlobalDeliveryRuleUrlRewriteAction
	if obj != nil {
		objs = []EndpointSpecGlobalDeliveryRuleUrlRewriteAction{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRewriteAction{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EndpointSpecGlobalDeliveryRuleUrlRewriteActionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EndpointSpecGlobalDeliveryRuleUrlRewriteAction)(ptr) = EndpointSpecGlobalDeliveryRuleUrlRewriteAction{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EndpointSpecGlobalDeliveryRuleUrlRewriteAction

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EndpointSpecGlobalDeliveryRuleUrlRewriteAction{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EndpointSpecGlobalDeliveryRuleUrlRewriteAction)(ptr) = objs[0]
			} else {
				*(*EndpointSpecGlobalDeliveryRuleUrlRewriteAction)(ptr) = EndpointSpecGlobalDeliveryRuleUrlRewriteAction{}
			}
		} else {
			*(*EndpointSpecGlobalDeliveryRuleUrlRewriteAction)(ptr) = EndpointSpecGlobalDeliveryRuleUrlRewriteAction{}
		}
	default:
		iter.ReportError("decode EndpointSpecGlobalDeliveryRuleUrlRewriteAction", "unexpected JSON type")
	}
}
