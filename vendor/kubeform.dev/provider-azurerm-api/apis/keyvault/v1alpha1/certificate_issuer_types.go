/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CertificateIssuer struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateIssuerSpec   `json:"spec,omitempty"`
	Status            CertificateIssuerStatus `json:"status,omitempty"`
}

type CertificateIssuerSpec struct {
	CertificateIssuerSpec2 `json:",inline"`
	// +optional
	KubeformOutput CertificateIssuerSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CertificateIssuerSpecAdmin struct {
	EmailAddress *string `json:"emailAddress" tf:"email_address"`
	// +optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name"`
	// +optional
	LastName *string `json:"lastName,omitempty" tf:"last_name"`
	// +optional
	Phone *string `json:"phone,omitempty" tf:"phone"`
}

type CertificateIssuerSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AccountID *string `json:"accountID,omitempty" tf:"account_id"`
	// +optional
	Admin      []CertificateIssuerSpecAdmin `json:"admin,omitempty" tf:"admin"`
	KeyVaultID *string                      `json:"keyVaultID" tf:"key_vault_id"`
	Name       *string                      `json:"name" tf:"name"`
	// +optional
	OrgID *string `json:"orgID,omitempty" tf:"org_id"`
	// +optional
	Password     *string `json:"-" sensitive:"true" tf:"password"`
	ProviderName *string `json:"providerName" tf:"provider_name"`
}

type CertificateIssuerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CertificateIssuerList is a list of CertificateIssuers
type CertificateIssuerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CertificateIssuer CRD objects
	Items []CertificateIssuer `json:"items,omitempty"`
}
