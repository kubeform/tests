/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CloudApp struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudAppSpec   `json:"spec,omitempty"`
	Status            CloudAppStatus `json:"status,omitempty"`
}

type CloudAppSpec struct {
	CloudAppSpec2 `json:",inline"`
	// +optional
	KubeformOutput CloudAppSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CloudAppSpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type CloudAppSpecPersistentDisk struct {
	// +optional
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path"`
	SizeInGb  *int64  `json:"sizeInGb" tf:"size_in_gb"`
}

type CloudAppSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`
	// +optional
	HttpsOnly *bool `json:"httpsOnly,omitempty" tf:"https_only"`
	// +optional
	Identity *CloudAppSpecIdentity `json:"identity,omitempty" tf:"identity"`
	// +optional
	IsPublic *bool   `json:"isPublic,omitempty" tf:"is_public"`
	Name     *string `json:"name" tf:"name"`
	// +optional
	PersistentDisk    *CloudAppSpecPersistentDisk `json:"persistentDisk,omitempty" tf:"persistent_disk"`
	ResourceGroupName *string                     `json:"resourceGroupName" tf:"resource_group_name"`
	ServiceName       *string                     `json:"serviceName" tf:"service_name"`
	// +optional
	TlsEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled"`
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type CloudAppStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CloudAppList is a list of CloudApps
type CloudAppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CloudApp CRD objects
	Items []CloudApp `json:"items,omitempty"`
}
