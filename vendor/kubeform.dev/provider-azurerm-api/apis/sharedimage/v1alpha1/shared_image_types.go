/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SharedImage struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SharedImageSpec   `json:"spec,omitempty"`
	Status            SharedImageStatus `json:"status,omitempty"`
}

type SharedImageSpec struct {
	SharedImageSpec2 `json:",inline"`
	// +optional
	KubeformOutput SharedImageSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type SharedImageSpecIdentifier struct {
	Offer     *string `json:"offer" tf:"offer"`
	Publisher *string `json:"publisher" tf:"publisher"`
	Sku       *string `json:"sku" tf:"sku"`
}

type SharedImageSpecPurchasePlan struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Product *string `json:"product,omitempty" tf:"product"`
	// +optional
	Publisher *string `json:"publisher,omitempty" tf:"publisher"`
}

type SharedImageSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// +optional
	Eula        *string `json:"eula,omitempty" tf:"eula"`
	GalleryName *string `json:"galleryName" tf:"gallery_name"`
	// +optional
	HyperVGeneration *string                    `json:"hyperVGeneration,omitempty" tf:"hyper_v_generation"`
	Identifier       *SharedImageSpecIdentifier `json:"identifier" tf:"identifier"`
	Location         *string                    `json:"location" tf:"location"`
	Name             *string                    `json:"name" tf:"name"`
	OsType           *string                    `json:"osType" tf:"os_type"`
	// +optional
	PrivacyStatementURI *string `json:"privacyStatementURI,omitempty" tf:"privacy_statement_uri"`
	// +optional
	PurchasePlan *SharedImageSpecPurchasePlan `json:"purchasePlan,omitempty" tf:"purchase_plan"`
	// +optional
	ReleaseNoteURI    *string `json:"releaseNoteURI,omitempty" tf:"release_note_uri"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Specialized *bool `json:"specialized,omitempty" tf:"specialized"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type SharedImageStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SharedImageList is a list of SharedImages
type SharedImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of SharedImage CRD objects
	Items []SharedImage `json:"items,omitempty"`
}
