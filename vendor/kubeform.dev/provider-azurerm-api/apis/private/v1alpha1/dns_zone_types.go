/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DnsZone struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsZoneSpec   `json:"spec,omitempty"`
	Status            DnsZoneStatus `json:"status,omitempty"`
}

type DnsZoneSpec struct {
	DnsZoneSpec2 `json:",inline"`
	// +optional
	KubeformOutput DnsZoneSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DnsZoneSpecSoaRecord struct {
	Email *string `json:"email" tf:"email"`
	// +optional
	ExpireTime *int64 `json:"expireTime,omitempty" tf:"expire_time"`
	// +optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`
	// +optional
	HostName *string `json:"hostName,omitempty" tf:"host_name"`
	// +optional
	MinimumTtl *int64 `json:"minimumTtl,omitempty" tf:"minimum_ttl"`
	// +optional
	RefreshTime *int64 `json:"refreshTime,omitempty" tf:"refresh_time"`
	// +optional
	RetryTime *int64 `json:"retryTime,omitempty" tf:"retry_time"`
	// +optional
	SerialNumber *int64 `json:"serialNumber,omitempty" tf:"serial_number"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`
}

type DnsZoneSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	MaxNumberOfRecordSets *int64 `json:"maxNumberOfRecordSets,omitempty" tf:"max_number_of_record_sets"`
	// +optional
	MaxNumberOfVirtualNetworkLinks *int64 `json:"maxNumberOfVirtualNetworkLinks,omitempty" tf:"max_number_of_virtual_network_links"`
	// +optional
	MaxNumberOfVirtualNetworkLinksWithRegistration *int64  `json:"maxNumberOfVirtualNetworkLinksWithRegistration,omitempty" tf:"max_number_of_virtual_network_links_with_registration"`
	Name                                           *string `json:"name" tf:"name"`
	// +optional
	NumberOfRecordSets *int64  `json:"numberOfRecordSets,omitempty" tf:"number_of_record_sets"`
	ResourceGroupName  *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	SoaRecord *DnsZoneSpecSoaRecord `json:"soaRecord,omitempty" tf:"soa_record"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type DnsZoneStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DnsZoneList is a list of DnsZones
type DnsZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DnsZone CRD objects
	Items []DnsZone `json:"items,omitempty"`
}
