/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Endpoint struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointSpec   `json:"spec,omitempty"`
	Status            EndpointStatus `json:"status,omitempty"`
}

type EndpointSpec struct {
	EndpointSpec2 `json:",inline"`
	// +optional
	KubeformOutput EndpointSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type EndpointSpecCustomDNSConfigs struct {
	// +optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
}

type EndpointSpecPrivateDNSZoneConfigsRecordSets struct {
	// +optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type EndpointSpecPrivateDNSZoneConfigs struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	PrivateDNSZoneID *string `json:"privateDNSZoneID,omitempty" tf:"private_dns_zone_id"`
	// +optional
	RecordSets []EndpointSpecPrivateDNSZoneConfigsRecordSets `json:"recordSets,omitempty" tf:"record_sets"`
}

type EndpointSpecPrivateDNSZoneGroup struct {
	// +optional
	ID                *string  `json:"ID,omitempty" tf:"id"`
	Name              *string  `json:"name" tf:"name"`
	PrivateDNSZoneIDS []string `json:"privateDNSZoneIDS" tf:"private_dns_zone_ids"`
}

type EndpointSpecPrivateServiceConnection struct {
	IsManualConnection *bool   `json:"isManualConnection" tf:"is_manual_connection"`
	Name               *string `json:"name" tf:"name"`
	// +optional
	PrivateConnectionResourceAlias *string `json:"privateConnectionResourceAlias,omitempty" tf:"private_connection_resource_alias"`
	// +optional
	PrivateConnectionResourceID *string `json:"privateConnectionResourceID,omitempty" tf:"private_connection_resource_id"`
	// +optional
	PrivateIPAddress *string `json:"privateIPAddress,omitempty" tf:"private_ip_address"`
	// +optional
	RequestMessage *string `json:"requestMessage,omitempty" tf:"request_message"`
	// +optional
	SubresourceNames []string `json:"subresourceNames,omitempty" tf:"subresource_names"`
}

type EndpointSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	CustomDNSConfigs []EndpointSpecCustomDNSConfigs `json:"customDNSConfigs,omitempty" tf:"custom_dns_configs"`
	Location         *string                        `json:"location" tf:"location"`
	Name             *string                        `json:"name" tf:"name"`
	// +optional
	PrivateDNSZoneConfigs []EndpointSpecPrivateDNSZoneConfigs `json:"privateDNSZoneConfigs,omitempty" tf:"private_dns_zone_configs"`
	// +optional
	PrivateDNSZoneGroup      *EndpointSpecPrivateDNSZoneGroup      `json:"privateDNSZoneGroup,omitempty" tf:"private_dns_zone_group"`
	PrivateServiceConnection *EndpointSpecPrivateServiceConnection `json:"privateServiceConnection" tf:"private_service_connection"`
	ResourceGroupName        *string                               `json:"resourceGroupName" tf:"resource_group_name"`
	SubnetID                 *string                               `json:"subnetID" tf:"subnet_id"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type EndpointStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EndpointList is a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Endpoint CRD objects
	Items []Endpoint `json:"items,omitempty"`
}
