/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Namespace_ struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Namespace_Spec   `json:"spec,omitempty"`
	Status            Namespace_Status `json:"status,omitempty"`
}

type Namespace_Spec struct {
	Namespace_Spec2 `json:",inline"`
	// +optional
	KubeformOutput Namespace_Spec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type Namespace_SpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	Type     *string `json:"type" tf:"type"`
}

type Namespace_SpecNetworkRulesetsIpRule struct {
	// +optional
	Action *string `json:"action,omitempty" tf:"action"`
	IpMask *string `json:"ipMask" tf:"ip_mask"`
}

type Namespace_SpecNetworkRulesetsVirtualNetworkRule struct {
	// +optional
	IgnoreMissingVirtualNetworkServiceEndpoint *bool   `json:"ignoreMissingVirtualNetworkServiceEndpoint,omitempty" tf:"ignore_missing_virtual_network_service_endpoint"`
	SubnetID                                   *string `json:"subnetID" tf:"subnet_id"`
}

type Namespace_SpecNetworkRulesets struct {
	DefaultAction *string `json:"defaultAction" tf:"default_action"`
	// +optional
	// +kubebuilder:validation:MaxItems=128
	IpRule []Namespace_SpecNetworkRulesetsIpRule `json:"ipRule,omitempty" tf:"ip_rule"`
	// +optional
	TrustedServiceAccessEnabled *bool `json:"trustedServiceAccessEnabled,omitempty" tf:"trusted_service_access_enabled"`
	// +optional
	// +kubebuilder:validation:MaxItems=128
	VirtualNetworkRule []Namespace_SpecNetworkRulesetsVirtualNetworkRule `json:"virtualNetworkRule,omitempty" tf:"virtual_network_rule"`
}

type Namespace_Spec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AutoInflateEnabled *bool `json:"autoInflateEnabled,omitempty" tf:"auto_inflate_enabled"`
	// +optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity"`
	// +optional
	DedicatedClusterID *string `json:"dedicatedClusterID,omitempty" tf:"dedicated_cluster_id"`
	// +optional
	DefaultPrimaryConnectionString *string `json:"-" sensitive:"true" tf:"default_primary_connection_string"`
	// +optional
	DefaultPrimaryConnectionStringAlias *string `json:"-" sensitive:"true" tf:"default_primary_connection_string_alias"`
	// +optional
	DefaultPrimaryKey *string `json:"-" sensitive:"true" tf:"default_primary_key"`
	// +optional
	DefaultSecondaryConnectionString *string `json:"-" sensitive:"true" tf:"default_secondary_connection_string"`
	// +optional
	DefaultSecondaryConnectionStringAlias *string `json:"-" sensitive:"true" tf:"default_secondary_connection_string_alias"`
	// +optional
	DefaultSecondaryKey *string `json:"-" sensitive:"true" tf:"default_secondary_key"`
	// +optional
	Identity *Namespace_SpecIdentity `json:"identity,omitempty" tf:"identity"`
	Location *string                 `json:"location" tf:"location"`
	// +optional
	MaximumThroughputUnits *int64  `json:"maximumThroughputUnits,omitempty" tf:"maximum_throughput_units"`
	Name                   *string `json:"name" tf:"name"`
	// +optional
	NetworkRulesets   *Namespace_SpecNetworkRulesets `json:"networkRulesets,omitempty" tf:"network_rulesets"`
	ResourceGroupName *string                        `json:"resourceGroupName" tf:"resource_group_name"`
	Sku               *string                        `json:"sku" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type Namespace_Status struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// Namespace_List is a list of Namespace_s
type Namespace_List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Namespace_ CRD objects
	Items []Namespace_ `json:"items,omitempty"`
}
