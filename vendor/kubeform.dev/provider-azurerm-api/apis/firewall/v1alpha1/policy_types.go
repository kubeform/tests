/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Policy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySpec   `json:"spec,omitempty"`
	Status            PolicyStatus `json:"status,omitempty"`
}

type PolicySpec struct {
	PolicySpec2 `json:",inline"`
	// +optional
	KubeformOutput PolicySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PolicySpecDns struct {
	// +optional
	// Deprecated
	NetworkRuleFqdnEnabled *bool `json:"networkRuleFqdnEnabled,omitempty" tf:"network_rule_fqdn_enabled"`
	// +optional
	ProxyEnabled *bool `json:"proxyEnabled,omitempty" tf:"proxy_enabled"`
	// +optional
	Servers []string `json:"servers,omitempty" tf:"servers"`
}

type PolicySpecThreatIntelligenceAllowlist struct {
	// +optional
	Fqdns []string `json:"fqdns,omitempty" tf:"fqdns"`
	// +optional
	IpAddresses []string `json:"ipAddresses,omitempty" tf:"ip_addresses"`
}

type PolicySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	BasePolicyID *string `json:"basePolicyID,omitempty" tf:"base_policy_id"`
	// +optional
	ChildPolicies []string `json:"childPolicies,omitempty" tf:"child_policies"`
	// +optional
	Dns *PolicySpecDns `json:"dns,omitempty" tf:"dns"`
	// +optional
	Firewalls         []string `json:"firewalls,omitempty" tf:"firewalls"`
	Location          *string  `json:"location" tf:"location"`
	Name              *string  `json:"name" tf:"name"`
	ResourceGroupName *string  `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RuleCollectionGroups []string `json:"ruleCollectionGroups,omitempty" tf:"rule_collection_groups"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	ThreatIntelligenceAllowlist *PolicySpecThreatIntelligenceAllowlist `json:"threatIntelligenceAllowlist,omitempty" tf:"threat_intelligence_allowlist"`
	// +optional
	ThreatIntelligenceMode *string `json:"threatIntelligenceMode,omitempty" tf:"threat_intelligence_mode"`
}

type PolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PolicyList is a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Policy CRD objects
	Items []Policy `json:"items,omitempty"`
}
