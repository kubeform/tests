/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ConnectionMonitor struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectionMonitorSpec   `json:"spec,omitempty"`
	Status            ConnectionMonitorStatus `json:"status,omitempty"`
}

type ConnectionMonitorSpec struct {
	ConnectionMonitorSpec2 `json:",inline"`
	// +optional
	KubeformOutput ConnectionMonitorSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ConnectionMonitorSpecDestination struct {
	// +optional
	// Deprecated
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	// Deprecated
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	// Deprecated
	VirtualMachineID *string `json:"virtualMachineID,omitempty" tf:"virtual_machine_id"`
}

type ConnectionMonitorSpecEndpointFilterItem struct {
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ConnectionMonitorSpecEndpointFilter struct {
	// +optional
	Item []ConnectionMonitorSpecEndpointFilterItem `json:"item,omitempty" tf:"item"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type ConnectionMonitorSpecEndpoint struct {
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// +optional
	CoverageLevel *string `json:"coverageLevel,omitempty" tf:"coverage_level"`
	// +optional
	ExcludedIPAddresses []string `json:"excludedIPAddresses,omitempty" tf:"excluded_ip_addresses"`
	// +optional
	Filter *ConnectionMonitorSpecEndpointFilter `json:"filter,omitempty" tf:"filter"`
	// +optional
	IncludedIPAddresses []string `json:"includedIPAddresses,omitempty" tf:"included_ip_addresses"`
	Name                *string  `json:"name" tf:"name"`
	// +optional
	TargetResourceID *string `json:"targetResourceID,omitempty" tf:"target_resource_id"`
	// +optional
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type"`
	// +optional
	// Deprecated
	VirtualMachineID *string `json:"virtualMachineID,omitempty" tf:"virtual_machine_id"`
}

type ConnectionMonitorSpecSource struct {
	// +optional
	// Deprecated
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	// Deprecated
	VirtualMachineID *string `json:"virtualMachineID,omitempty" tf:"virtual_machine_id"`
}

type ConnectionMonitorSpecTestConfigurationHttpConfigurationRequestHeader struct {
	Name  *string `json:"name" tf:"name"`
	Value *string `json:"value" tf:"value"`
}

type ConnectionMonitorSpecTestConfigurationHttpConfiguration struct {
	// +optional
	Method *string `json:"method,omitempty" tf:"method"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// +optional
	PreferHTTPS *bool `json:"preferHTTPS,omitempty" tf:"prefer_https"`
	// +optional
	RequestHeader []ConnectionMonitorSpecTestConfigurationHttpConfigurationRequestHeader `json:"requestHeader,omitempty" tf:"request_header"`
	// +optional
	ValidStatusCodeRanges []string `json:"validStatusCodeRanges,omitempty" tf:"valid_status_code_ranges"`
}

type ConnectionMonitorSpecTestConfigurationIcmpConfiguration struct {
	// +optional
	TraceRouteEnabled *bool `json:"traceRouteEnabled,omitempty" tf:"trace_route_enabled"`
}

type ConnectionMonitorSpecTestConfigurationSuccessThreshold struct {
	// +optional
	ChecksFailedPercent *int64 `json:"checksFailedPercent,omitempty" tf:"checks_failed_percent"`
	// +optional
	RoundTripTimeMs *float64 `json:"roundTripTimeMs,omitempty" tf:"round_trip_time_ms"`
}

type ConnectionMonitorSpecTestConfigurationTcpConfiguration struct {
	Port *int64 `json:"port" tf:"port"`
	// +optional
	TraceRouteEnabled *bool `json:"traceRouteEnabled,omitempty" tf:"trace_route_enabled"`
}

type ConnectionMonitorSpecTestConfiguration struct {
	// +optional
	HttpConfiguration *ConnectionMonitorSpecTestConfigurationHttpConfiguration `json:"httpConfiguration,omitempty" tf:"http_configuration"`
	// +optional
	IcmpConfiguration *ConnectionMonitorSpecTestConfigurationIcmpConfiguration `json:"icmpConfiguration,omitempty" tf:"icmp_configuration"`
	Name              *string                                                  `json:"name" tf:"name"`
	// +optional
	PreferredIPVersion *string `json:"preferredIPVersion,omitempty" tf:"preferred_ip_version"`
	Protocol           *string `json:"protocol" tf:"protocol"`
	// +optional
	SuccessThreshold *ConnectionMonitorSpecTestConfigurationSuccessThreshold `json:"successThreshold,omitempty" tf:"success_threshold"`
	// +optional
	TcpConfiguration *ConnectionMonitorSpecTestConfigurationTcpConfiguration `json:"tcpConfiguration,omitempty" tf:"tcp_configuration"`
	// +optional
	TestFrequencyInSeconds *int64 `json:"testFrequencyInSeconds,omitempty" tf:"test_frequency_in_seconds"`
}

type ConnectionMonitorSpecTestGroup struct {
	DestinationEndpoints []string `json:"destinationEndpoints" tf:"destination_endpoints"`
	// +optional
	Enabled                *bool    `json:"enabled,omitempty" tf:"enabled"`
	Name                   *string  `json:"name" tf:"name"`
	SourceEndpoints        []string `json:"sourceEndpoints" tf:"source_endpoints"`
	TestConfigurationNames []string `json:"testConfigurationNames" tf:"test_configuration_names"`
}

type ConnectionMonitorSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	// Deprecated
	AutoStart *bool `json:"autoStart,omitempty" tf:"auto_start"`
	// +optional
	// Deprecated
	Destination *ConnectionMonitorSpecDestination `json:"destination,omitempty" tf:"destination"`
	Endpoint    []ConnectionMonitorSpecEndpoint   `json:"endpoint" tf:"endpoint"`
	// +optional
	// Deprecated
	IntervalInSeconds *int64  `json:"intervalInSeconds,omitempty" tf:"interval_in_seconds"`
	Location          *string `json:"location" tf:"location"`
	Name              *string `json:"name" tf:"name"`
	NetworkWatcherID  *string `json:"networkWatcherID" tf:"network_watcher_id"`
	// +optional
	Notes *string `json:"notes,omitempty" tf:"notes"`
	// +optional
	OutputWorkspaceResourceIDS []string `json:"outputWorkspaceResourceIDS,omitempty" tf:"output_workspace_resource_ids"`
	// +optional
	// Deprecated
	Source *ConnectionMonitorSpecSource `json:"source,omitempty" tf:"source"`
	// +optional
	Tags              *map[string]string                       `json:"tags,omitempty" tf:"tags"`
	TestConfiguration []ConnectionMonitorSpecTestConfiguration `json:"testConfiguration" tf:"test_configuration"`
	TestGroup         []ConnectionMonitorSpecTestGroup         `json:"testGroup" tf:"test_group"`
}

type ConnectionMonitorStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConnectionMonitorList is a list of ConnectionMonitors
type ConnectionMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ConnectionMonitor CRD objects
	Items []ConnectionMonitor `json:"items,omitempty"`
}
