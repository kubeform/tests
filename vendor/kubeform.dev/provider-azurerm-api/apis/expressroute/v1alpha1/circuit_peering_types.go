/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CircuitPeering struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CircuitPeeringSpec   `json:"spec,omitempty"`
	Status            CircuitPeeringStatus `json:"status,omitempty"`
}

type CircuitPeeringSpec struct {
	CircuitPeeringSpec2 `json:",inline"`
	// +optional
	KubeformOutput CircuitPeeringSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CircuitPeeringSpecIpv6MicrosoftPeering struct {
	// +optional
	// +kubebuilder:validation:MinItems=1
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes,omitempty" tf:"advertised_public_prefixes"`
	// +optional
	CustomerAsn *int64 `json:"customerAsn,omitempty" tf:"customer_asn"`
	// +optional
	RoutingRegistryName *string `json:"routingRegistryName,omitempty" tf:"routing_registry_name"`
}

type CircuitPeeringSpecIpv6 struct {
	MicrosoftPeering         *CircuitPeeringSpecIpv6MicrosoftPeering `json:"microsoftPeering" tf:"microsoft_peering"`
	PrimaryPeerAddressPrefix *string                                 `json:"primaryPeerAddressPrefix" tf:"primary_peer_address_prefix"`
	// +optional
	RouteFilterID              *string `json:"routeFilterID,omitempty" tf:"route_filter_id"`
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix" tf:"secondary_peer_address_prefix"`
}

type CircuitPeeringSpecMicrosoftPeeringConfig struct {
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes" tf:"advertised_public_prefixes"`
	// +optional
	CustomerAsn *int64 `json:"customerAsn,omitempty" tf:"customer_asn"`
	// +optional
	RoutingRegistryName *string `json:"routingRegistryName,omitempty" tf:"routing_registry_name"`
}

type CircuitPeeringSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AzureAsn                *int64  `json:"azureAsn,omitempty" tf:"azure_asn"`
	ExpressRouteCircuitName *string `json:"expressRouteCircuitName" tf:"express_route_circuit_name"`
	// +optional
	Ipv6 *CircuitPeeringSpecIpv6 `json:"ipv6,omitempty" tf:"ipv6"`
	// +optional
	MicrosoftPeeringConfig *CircuitPeeringSpecMicrosoftPeeringConfig `json:"microsoftPeeringConfig,omitempty" tf:"microsoft_peering_config"`
	// +optional
	PeerAsn     *int64  `json:"peerAsn,omitempty" tf:"peer_asn"`
	PeeringType *string `json:"peeringType" tf:"peering_type"`
	// +optional
	PrimaryAzurePort         *string `json:"primaryAzurePort,omitempty" tf:"primary_azure_port"`
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix" tf:"primary_peer_address_prefix"`
	ResourceGroupName        *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RouteFilterID *string `json:"routeFilterID,omitempty" tf:"route_filter_id"`
	// +optional
	SecondaryAzurePort         *string `json:"secondaryAzurePort,omitempty" tf:"secondary_azure_port"`
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix" tf:"secondary_peer_address_prefix"`
	// +optional
	SharedKey *string `json:"-" sensitive:"true" tf:"shared_key"`
	VlanID    *int64  `json:"vlanID" tf:"vlan_id"`
}

type CircuitPeeringStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CircuitPeeringList is a list of CircuitPeerings
type CircuitPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CircuitPeering CRD objects
	Items []CircuitPeering `json:"items,omitempty"`
}
