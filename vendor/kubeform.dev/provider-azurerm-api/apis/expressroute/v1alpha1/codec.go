/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitSpecSku{}).Type1()):                           CircuitSpecSkuCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6{}).Type1()):                   CircuitPeeringSpecIpv6Codec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6MicrosoftPeering{}).Type1()):   CircuitPeeringSpecIpv6MicrosoftPeeringCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecMicrosoftPeeringConfig{}).Type1()): CircuitPeeringSpecMicrosoftPeeringConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PortSpecIdentity{}).Type1()):                         PortSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink1{}).Type1()):                            PortSpecLink1Codec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink2{}).Type1()):                            PortSpecLink2Codec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitSpecSku{}).Type1()):                           CircuitSpecSkuCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6{}).Type1()):                   CircuitPeeringSpecIpv6Codec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6MicrosoftPeering{}).Type1()):   CircuitPeeringSpecIpv6MicrosoftPeeringCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecMicrosoftPeeringConfig{}).Type1()): CircuitPeeringSpecMicrosoftPeeringConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PortSpecIdentity{}).Type1()):                         PortSpecIdentityCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink1{}).Type1()):                            PortSpecLink1Codec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink2{}).Type1()):                            PortSpecLink2Codec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type CircuitSpecSkuCodec struct {
}

func (CircuitSpecSkuCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CircuitSpecSku)(ptr) == nil
}

func (CircuitSpecSkuCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CircuitSpecSku)(ptr)
	var objs []CircuitSpecSku
	if obj != nil {
		objs = []CircuitSpecSku{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitSpecSku{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CircuitSpecSkuCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CircuitSpecSku)(ptr) = CircuitSpecSku{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CircuitSpecSku

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitSpecSku{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CircuitSpecSku)(ptr) = objs[0]
			} else {
				*(*CircuitSpecSku)(ptr) = CircuitSpecSku{}
			}
		} else {
			*(*CircuitSpecSku)(ptr) = CircuitSpecSku{}
		}
	default:
		iter.ReportError("decode CircuitSpecSku", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CircuitPeeringSpecIpv6Codec struct {
}

func (CircuitPeeringSpecIpv6Codec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CircuitPeeringSpecIpv6)(ptr) == nil
}

func (CircuitPeeringSpecIpv6Codec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CircuitPeeringSpecIpv6)(ptr)
	var objs []CircuitPeeringSpecIpv6
	if obj != nil {
		objs = []CircuitPeeringSpecIpv6{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CircuitPeeringSpecIpv6Codec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CircuitPeeringSpecIpv6)(ptr) = CircuitPeeringSpecIpv6{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CircuitPeeringSpecIpv6

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CircuitPeeringSpecIpv6)(ptr) = objs[0]
			} else {
				*(*CircuitPeeringSpecIpv6)(ptr) = CircuitPeeringSpecIpv6{}
			}
		} else {
			*(*CircuitPeeringSpecIpv6)(ptr) = CircuitPeeringSpecIpv6{}
		}
	default:
		iter.ReportError("decode CircuitPeeringSpecIpv6", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CircuitPeeringSpecIpv6MicrosoftPeeringCodec struct {
}

func (CircuitPeeringSpecIpv6MicrosoftPeeringCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CircuitPeeringSpecIpv6MicrosoftPeering)(ptr) == nil
}

func (CircuitPeeringSpecIpv6MicrosoftPeeringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CircuitPeeringSpecIpv6MicrosoftPeering)(ptr)
	var objs []CircuitPeeringSpecIpv6MicrosoftPeering
	if obj != nil {
		objs = []CircuitPeeringSpecIpv6MicrosoftPeering{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6MicrosoftPeering{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CircuitPeeringSpecIpv6MicrosoftPeeringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CircuitPeeringSpecIpv6MicrosoftPeering)(ptr) = CircuitPeeringSpecIpv6MicrosoftPeering{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CircuitPeeringSpecIpv6MicrosoftPeering

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecIpv6MicrosoftPeering{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CircuitPeeringSpecIpv6MicrosoftPeering)(ptr) = objs[0]
			} else {
				*(*CircuitPeeringSpecIpv6MicrosoftPeering)(ptr) = CircuitPeeringSpecIpv6MicrosoftPeering{}
			}
		} else {
			*(*CircuitPeeringSpecIpv6MicrosoftPeering)(ptr) = CircuitPeeringSpecIpv6MicrosoftPeering{}
		}
	default:
		iter.ReportError("decode CircuitPeeringSpecIpv6MicrosoftPeering", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CircuitPeeringSpecMicrosoftPeeringConfigCodec struct {
}

func (CircuitPeeringSpecMicrosoftPeeringConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CircuitPeeringSpecMicrosoftPeeringConfig)(ptr) == nil
}

func (CircuitPeeringSpecMicrosoftPeeringConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CircuitPeeringSpecMicrosoftPeeringConfig)(ptr)
	var objs []CircuitPeeringSpecMicrosoftPeeringConfig
	if obj != nil {
		objs = []CircuitPeeringSpecMicrosoftPeeringConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecMicrosoftPeeringConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CircuitPeeringSpecMicrosoftPeeringConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CircuitPeeringSpecMicrosoftPeeringConfig)(ptr) = CircuitPeeringSpecMicrosoftPeeringConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CircuitPeeringSpecMicrosoftPeeringConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CircuitPeeringSpecMicrosoftPeeringConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CircuitPeeringSpecMicrosoftPeeringConfig)(ptr) = objs[0]
			} else {
				*(*CircuitPeeringSpecMicrosoftPeeringConfig)(ptr) = CircuitPeeringSpecMicrosoftPeeringConfig{}
			}
		} else {
			*(*CircuitPeeringSpecMicrosoftPeeringConfig)(ptr) = CircuitPeeringSpecMicrosoftPeeringConfig{}
		}
	default:
		iter.ReportError("decode CircuitPeeringSpecMicrosoftPeeringConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PortSpecIdentityCodec struct {
}

func (PortSpecIdentityCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PortSpecIdentity)(ptr) == nil
}

func (PortSpecIdentityCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PortSpecIdentity)(ptr)
	var objs []PortSpecIdentity
	if obj != nil {
		objs = []PortSpecIdentity{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PortSpecIdentity{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PortSpecIdentityCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PortSpecIdentity)(ptr) = PortSpecIdentity{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PortSpecIdentity

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PortSpecIdentity{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PortSpecIdentity)(ptr) = objs[0]
			} else {
				*(*PortSpecIdentity)(ptr) = PortSpecIdentity{}
			}
		} else {
			*(*PortSpecIdentity)(ptr) = PortSpecIdentity{}
		}
	default:
		iter.ReportError("decode PortSpecIdentity", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PortSpecLink1Codec struct {
}

func (PortSpecLink1Codec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PortSpecLink1)(ptr) == nil
}

func (PortSpecLink1Codec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PortSpecLink1)(ptr)
	var objs []PortSpecLink1
	if obj != nil {
		objs = []PortSpecLink1{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink1{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PortSpecLink1Codec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PortSpecLink1)(ptr) = PortSpecLink1{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PortSpecLink1

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink1{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PortSpecLink1)(ptr) = objs[0]
			} else {
				*(*PortSpecLink1)(ptr) = PortSpecLink1{}
			}
		} else {
			*(*PortSpecLink1)(ptr) = PortSpecLink1{}
		}
	default:
		iter.ReportError("decode PortSpecLink1", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PortSpecLink2Codec struct {
}

func (PortSpecLink2Codec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PortSpecLink2)(ptr) == nil
}

func (PortSpecLink2Codec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PortSpecLink2)(ptr)
	var objs []PortSpecLink2
	if obj != nil {
		objs = []PortSpecLink2{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink2{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PortSpecLink2Codec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PortSpecLink2)(ptr) = PortSpecLink2{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PortSpecLink2

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PortSpecLink2{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PortSpecLink2)(ptr) = objs[0]
			} else {
				*(*PortSpecLink2)(ptr) = PortSpecLink2{}
			}
		} else {
			*(*PortSpecLink2)(ptr) = PortSpecLink2{}
		}
	default:
		iter.ReportError("decode PortSpecLink2", "unexpected JSON type")
	}
}
