/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Pool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PoolSpec   `json:"spec,omitempty"`
	Status            PoolStatus `json:"status,omitempty"`
}

type PoolSpec struct {
	PoolSpec2 `json:",inline"`
	// +optional
	KubeformOutput PoolSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PoolSpecAutoScale struct {
	// +optional
	EvaluationInterval *string `json:"evaluationInterval,omitempty" tf:"evaluation_interval"`
	Formula            *string `json:"formula" tf:"formula"`
}

type PoolSpecCertificate struct {
	ID            *string `json:"ID" tf:"id"`
	StoreLocation *string `json:"storeLocation" tf:"store_location"`
	// +optional
	StoreName *string `json:"storeName,omitempty" tf:"store_name"`
	// +optional
	Visibility []string `json:"visibility,omitempty" tf:"visibility"`
}

type PoolSpecContainerConfigurationContainerRegistries struct {
	Password       *string `json:"-" sensitive:"true" tf:"password"`
	RegistryServer *string `json:"registryServer" tf:"registry_server"`
	UserName       *string `json:"userName" tf:"user_name"`
}

type PoolSpecContainerConfiguration struct {
	// +optional
	ContainerImageNames []string `json:"containerImageNames,omitempty" tf:"container_image_names"`
	// +optional
	ContainerRegistries []PoolSpecContainerConfigurationContainerRegistries `json:"containerRegistries,omitempty" tf:"container_registries"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type PoolSpecFixedScale struct {
	// +optional
	ResizeTimeout *string `json:"resizeTimeout,omitempty" tf:"resize_timeout"`
	// +optional
	TargetDedicatedNodes *int64 `json:"targetDedicatedNodes,omitempty" tf:"target_dedicated_nodes"`
	// +optional
	TargetLowPriorityNodes *int64 `json:"targetLowPriorityNodes,omitempty" tf:"target_low_priority_nodes"`
}

type PoolSpecNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRules struct {
	Access              *string `json:"access" tf:"access"`
	Priority            *int64  `json:"priority" tf:"priority"`
	SourceAddressPrefix *string `json:"sourceAddressPrefix" tf:"source_address_prefix"`
}

type PoolSpecNetworkConfigurationEndpointConfiguration struct {
	BackendPort       *int64  `json:"backendPort" tf:"backend_port"`
	FrontendPortRange *string `json:"frontendPortRange" tf:"frontend_port_range"`
	Name              *string `json:"name" tf:"name"`
	// +optional
	NetworkSecurityGroupRules []PoolSpecNetworkConfigurationEndpointConfigurationNetworkSecurityGroupRules `json:"networkSecurityGroupRules,omitempty" tf:"network_security_group_rules"`
	Protocol                  *string                                                                      `json:"protocol" tf:"protocol"`
}

type PoolSpecNetworkConfiguration struct {
	// +optional
	EndpointConfiguration []PoolSpecNetworkConfigurationEndpointConfiguration `json:"endpointConfiguration,omitempty" tf:"endpoint_configuration"`
	// +optional
	PublicAddressProvisioningType *string `json:"publicAddressProvisioningType,omitempty" tf:"public_address_provisioning_type"`
	// +optional
	PublicIPS []string `json:"publicIPS,omitempty" tf:"public_ips"`
	SubnetID  *string  `json:"subnetID" tf:"subnet_id"`
}

type PoolSpecStartTaskResourceFile struct {
	// +optional
	AutoStorageContainerName *string `json:"autoStorageContainerName,omitempty" tf:"auto_storage_container_name"`
	// +optional
	BlobPrefix *string `json:"blobPrefix,omitempty" tf:"blob_prefix"`
	// +optional
	FileMode *string `json:"fileMode,omitempty" tf:"file_mode"`
	// +optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path"`
	// +optional
	HttpURL *string `json:"httpURL,omitempty" tf:"http_url"`
	// +optional
	StorageContainerURL *string `json:"storageContainerURL,omitempty" tf:"storage_container_url"`
}

type PoolSpecStartTaskUserIdentityAutoUser struct {
	// +optional
	ElevationLevel *string `json:"elevationLevel,omitempty" tf:"elevation_level"`
	// +optional
	Scope *string `json:"scope,omitempty" tf:"scope"`
}

type PoolSpecStartTaskUserIdentity struct {
	// +optional
	AutoUser *PoolSpecStartTaskUserIdentityAutoUser `json:"autoUser,omitempty" tf:"auto_user"`
	// +optional
	UserName *string `json:"userName,omitempty" tf:"user_name"`
}

type PoolSpecStartTask struct {
	CommandLine *string `json:"commandLine" tf:"command_line"`
	// +optional
	Environment *map[string]string `json:"environment,omitempty" tf:"environment"`
	// +optional
	MaxTaskRetryCount *int64 `json:"maxTaskRetryCount,omitempty" tf:"max_task_retry_count"`
	// +optional
	ResourceFile []PoolSpecStartTaskResourceFile `json:"resourceFile,omitempty" tf:"resource_file"`
	UserIdentity *PoolSpecStartTaskUserIdentity  `json:"userIdentity" tf:"user_identity"`
	// +optional
	WaitForSuccess *bool `json:"waitForSuccess,omitempty" tf:"wait_for_success"`
}

type PoolSpecStorageImageReference struct {
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// +optional
	Offer *string `json:"offer,omitempty" tf:"offer"`
	// +optional
	Publisher *string `json:"publisher,omitempty" tf:"publisher"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type PoolSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	AccountName *string `json:"accountName" tf:"account_name"`
	// +optional
	AutoScale *PoolSpecAutoScale `json:"autoScale,omitempty" tf:"auto_scale"`
	// +optional
	Certificate []PoolSpecCertificate `json:"certificate,omitempty" tf:"certificate"`
	// +optional
	ContainerConfiguration *PoolSpecContainerConfiguration `json:"containerConfiguration,omitempty" tf:"container_configuration"`
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// +optional
	FixedScale *PoolSpecFixedScale `json:"fixedScale,omitempty" tf:"fixed_scale"`
	// +optional
	MaxTasksPerNode *int64 `json:"maxTasksPerNode,omitempty" tf:"max_tasks_per_node"`
	// +optional
	Metadata *map[string]string `json:"metadata,omitempty" tf:"metadata"`
	Name     *string            `json:"name" tf:"name"`
	// +optional
	NetworkConfiguration *PoolSpecNetworkConfiguration `json:"networkConfiguration,omitempty" tf:"network_configuration"`
	NodeAgentSkuID       *string                       `json:"nodeAgentSkuID" tf:"node_agent_sku_id"`
	ResourceGroupName    *string                       `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	StartTask *PoolSpecStartTask `json:"startTask,omitempty" tf:"start_task"`
	// +optional
	StopPendingResizeOperation *bool                          `json:"stopPendingResizeOperation,omitempty" tf:"stop_pending_resize_operation"`
	StorageImageReference      *PoolSpecStorageImageReference `json:"storageImageReference" tf:"storage_image_reference"`
	VmSize                     *string                        `json:"vmSize" tf:"vm_size"`
}

type PoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PoolList is a list of Pools
type PoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Pool CRD objects
	Items []Pool `json:"items,omitempty"`
}
