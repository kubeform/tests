/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Service struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec,omitempty"`
	Status            ServiceStatus `json:"status,omitempty"`
}

type ServiceSpec struct {
	ServiceSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServiceSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServiceSpecAuthenticationConfiguration struct {
	// +optional
	Audience *string `json:"audience,omitempty" tf:"audience"`
	// +optional
	Authority *string `json:"authority,omitempty" tf:"authority"`
	// +optional
	SmartProxyEnabled *bool `json:"smartProxyEnabled,omitempty" tf:"smart_proxy_enabled"`
}

type ServiceSpecCorsConfiguration struct {
	// +optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials"`
	// +optional
	// +kubebuilder:validation:MaxItems=64
	AllowedHeaders []string `json:"allowedHeaders,omitempty" tf:"allowed_headers"`
	// +optional
	// +kubebuilder:validation:MaxItems=64
	AllowedMethods []string `json:"allowedMethods,omitempty" tf:"allowed_methods"`
	// +optional
	// +kubebuilder:validation:MaxItems=64
	AllowedOrigins []string `json:"allowedOrigins,omitempty" tf:"allowed_origins"`
	// +optional
	MaxAgeInSeconds *int64 `json:"maxAgeInSeconds,omitempty" tf:"max_age_in_seconds"`
}

type ServiceSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AccessPolicyObjectIDS []string `json:"accessPolicyObjectIDS,omitempty" tf:"access_policy_object_ids"`
	// +optional
	AuthenticationConfiguration *ServiceSpecAuthenticationConfiguration `json:"authenticationConfiguration,omitempty" tf:"authentication_configuration"`
	// +optional
	CorsConfiguration *ServiceSpecCorsConfiguration `json:"corsConfiguration,omitempty" tf:"cors_configuration"`
	// +optional
	CosmosdbKeyVaultKeyVersionlessID *string `json:"cosmosdbKeyVaultKeyVersionlessID,omitempty" tf:"cosmosdb_key_vault_key_versionless_id"`
	// +optional
	CosmosdbThroughput *int64 `json:"cosmosdbThroughput,omitempty" tf:"cosmosdb_throughput"`
	// +optional
	Kind     *string `json:"kind,omitempty" tf:"kind"`
	Location *string `json:"location" tf:"location"`
	Name     *string `json:"name" tf:"name"`
	// +optional
	PublicNetworkAccessEnabled *bool   `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`
	ResourceGroupName          *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ServiceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServiceList is a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Service CRD objects
	Items []Service `json:"items,omitempty"`
}
