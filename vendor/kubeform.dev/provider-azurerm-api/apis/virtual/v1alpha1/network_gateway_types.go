/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NetworkGateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkGatewaySpec   `json:"spec,omitempty"`
	Status            NetworkGatewayStatus `json:"status,omitempty"`
}

type NetworkGatewaySpec struct {
	NetworkGatewaySpec2 `json:",inline"`
	// +optional
	KubeformOutput NetworkGatewaySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NetworkGatewaySpecBgpSettingsPeeringAddresses struct {
	// +optional
	// +kubebuilder:validation:MinItems=1
	ApipaAddresses []string `json:"apipaAddresses,omitempty" tf:"apipa_addresses"`
	// +optional
	DefaultAddresses []string `json:"defaultAddresses,omitempty" tf:"default_addresses"`
	// +optional
	IpConfigurationName *string `json:"ipConfigurationName,omitempty" tf:"ip_configuration_name"`
	// +optional
	TunnelIPAddresses []string `json:"tunnelIPAddresses,omitempty" tf:"tunnel_ip_addresses"`
}

type NetworkGatewaySpecBgpSettings struct {
	// +optional
	Asn *int64 `json:"asn,omitempty" tf:"asn"`
	// +optional
	PeerWeight *int64 `json:"peerWeight,omitempty" tf:"peer_weight"`
	// +optional
	// Deprecated
	PeeringAddress *string `json:"peeringAddress,omitempty" tf:"peering_address"`
	// +optional
	// +kubebuilder:validation:MaxItems=2
	// +kubebuilder:validation:MinItems=1
	PeeringAddresses []NetworkGatewaySpecBgpSettingsPeeringAddresses `json:"peeringAddresses,omitempty" tf:"peering_addresses"`
}

type NetworkGatewaySpecCustomRoute struct {
	// +optional
	AddressPrefixes []string `json:"addressPrefixes,omitempty" tf:"address_prefixes"`
}

type NetworkGatewaySpecIpConfiguration struct {
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	PrivateIPAddressAllocation *string `json:"privateIPAddressAllocation,omitempty" tf:"private_ip_address_allocation"`
	PublicIPAddressID          *string `json:"publicIPAddressID" tf:"public_ip_address_id"`
	SubnetID                   *string `json:"subnetID" tf:"subnet_id"`
}

type NetworkGatewaySpecVpnClientConfigurationRevokedCertificate struct {
	Name       *string `json:"name" tf:"name"`
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
}

type NetworkGatewaySpecVpnClientConfigurationRootCertificate struct {
	Name           *string `json:"name" tf:"name"`
	PublicCertData *string `json:"publicCertData" tf:"public_cert_data"`
}

type NetworkGatewaySpecVpnClientConfiguration struct {
	// +optional
	AadAudience *string `json:"aadAudience,omitempty" tf:"aad_audience"`
	// +optional
	AadIssuer *string `json:"aadIssuer,omitempty" tf:"aad_issuer"`
	// +optional
	AadTenant    *string  `json:"aadTenant,omitempty" tf:"aad_tenant"`
	AddressSpace []string `json:"addressSpace" tf:"address_space"`
	// +optional
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty" tf:"radius_server_address"`
	// +optional
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty" tf:"radius_server_secret"`
	// +optional
	RevokedCertificate []NetworkGatewaySpecVpnClientConfigurationRevokedCertificate `json:"revokedCertificate,omitempty" tf:"revoked_certificate"`
	// +optional
	RootCertificate []NetworkGatewaySpecVpnClientConfigurationRootCertificate `json:"rootCertificate,omitempty" tf:"root_certificate"`
	// +optional
	VpnClientProtocols []string `json:"vpnClientProtocols,omitempty" tf:"vpn_client_protocols"`
}

type NetworkGatewaySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	ActiveActive *bool `json:"activeActive,omitempty" tf:"active_active"`
	// +optional
	BgpSettings *NetworkGatewaySpecBgpSettings `json:"bgpSettings,omitempty" tf:"bgp_settings"`
	// +optional
	CustomRoute *NetworkGatewaySpecCustomRoute `json:"customRoute,omitempty" tf:"custom_route"`
	// +optional
	DefaultLocalNetworkGatewayID *string `json:"defaultLocalNetworkGatewayID,omitempty" tf:"default_local_network_gateway_id"`
	// +optional
	EnableBGP *bool `json:"enableBGP,omitempty" tf:"enable_bgp"`
	// +optional
	Generation *string `json:"generation,omitempty" tf:"generation"`
	// +kubebuilder:validation:MaxItems=2
	IpConfiguration []NetworkGatewaySpecIpConfiguration `json:"ipConfiguration" tf:"ip_configuration"`
	Location        *string                             `json:"location" tf:"location"`
	Name            *string                             `json:"name" tf:"name"`
	// +optional
	PrivateIPAddressEnabled *bool   `json:"privateIPAddressEnabled,omitempty" tf:"private_ip_address_enabled"`
	ResourceGroupName       *string `json:"resourceGroupName" tf:"resource_group_name"`
	Sku                     *string `json:"sku" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	Type *string            `json:"type" tf:"type"`
	// +optional
	VpnClientConfiguration *NetworkGatewaySpecVpnClientConfiguration `json:"vpnClientConfiguration,omitempty" tf:"vpn_client_configuration"`
	// +optional
	VpnType *string `json:"vpnType,omitempty" tf:"vpn_type"`
}

type NetworkGatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NetworkGatewayList is a list of NetworkGateways
type NetworkGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NetworkGateway CRD objects
	Items []NetworkGateway `json:"items,omitempty"`
}
