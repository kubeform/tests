/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Network struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkSpec   `json:"spec,omitempty"`
	Status            NetworkStatus `json:"status,omitempty"`
}

type NetworkSpec struct {
	NetworkSpec2 `json:",inline"`
	// +optional
	KubeformOutput NetworkSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NetworkSpecDdosProtectionPlan struct {
	Enable *bool   `json:"enable" tf:"enable"`
	ID     *string `json:"ID" tf:"id"`
}

type NetworkSpecSubnet struct {
	AddressPrefix *string `json:"addressPrefix" tf:"address_prefix"`
	// +optional
	ID   *string `json:"ID,omitempty" tf:"id"`
	Name *string `json:"name" tf:"name"`
	// +optional
	SecurityGroup *string `json:"securityGroup,omitempty" tf:"security_group"`
}

type NetworkSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:MinItems=1
	AddressSpace []string `json:"addressSpace" tf:"address_space"`
	// +optional
	BgpCommunity *string `json:"bgpCommunity,omitempty" tf:"bgp_community"`
	// +optional
	DdosProtectionPlan *NetworkSpecDdosProtectionPlan `json:"ddosProtectionPlan,omitempty" tf:"ddos_protection_plan"`
	// +optional
	DnsServers []string `json:"dnsServers,omitempty" tf:"dns_servers"`
	// +optional
	Guid              *string `json:"guid,omitempty" tf:"guid"`
	Location          *string `json:"location" tf:"location"`
	Name              *string `json:"name" tf:"name"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	Subnet []NetworkSpecSubnet `json:"subnet,omitempty" tf:"subnet"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	// Deprecated
	VmProtectionEnabled *bool `json:"vmProtectionEnabled,omitempty" tf:"vm_protection_enabled"`
}

type NetworkStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NetworkList is a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Network CRD objects
	Items []Network `json:"items,omitempty"`
}
