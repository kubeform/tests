/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Configuration struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationSpec   `json:"spec,omitempty"`
	Status            ConfigurationStatus `json:"status,omitempty"`
}

type ConfigurationSpec struct {
	ConfigurationSpec2 `json:",inline"`
	// +optional
	KubeformOutput ConfigurationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ConfigurationSpecIdentity struct {
	// +optional
	PrincipalID *string `json:"principalID,omitempty" tf:"principal_id"`
	// +optional
	TenantID *string `json:"tenantID,omitempty" tf:"tenant_id"`
	Type     *string `json:"type" tf:"type"`
}

type ConfigurationSpecPrimaryReadKey struct {
	// +optional
	ConnectionString *string `json:"-" sensitive:"true" tf:"connection_string"`
	// +optional
	ID *string `json:"-" sensitive:"true" tf:"id"`
	// +optional
	Secret *string `json:"-" sensitive:"true" tf:"secret"`
}

type ConfigurationSpecPrimaryWriteKey struct {
	// +optional
	ConnectionString *string `json:"-" sensitive:"true" tf:"connection_string"`
	// +optional
	ID *string `json:"-" sensitive:"true" tf:"id"`
	// +optional
	Secret *string `json:"-" sensitive:"true" tf:"secret"`
}

type ConfigurationSpecSecondaryReadKey struct {
	// +optional
	ConnectionString *string `json:"-" sensitive:"true" tf:"connection_string"`
	// +optional
	ID *string `json:"-" sensitive:"true" tf:"id"`
	// +optional
	Secret *string `json:"-" sensitive:"true" tf:"secret"`
}

type ConfigurationSpecSecondaryWriteKey struct {
	// +optional
	ConnectionString *string `json:"-" sensitive:"true" tf:"connection_string"`
	// +optional
	ID *string `json:"-" sensitive:"true" tf:"id"`
	// +optional
	Secret *string `json:"-" sensitive:"true" tf:"secret"`
}

type ConfigurationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`
	// +optional
	Identity *ConfigurationSpecIdentity `json:"identity,omitempty" tf:"identity"`
	Location *string                    `json:"location" tf:"location"`
	Name     *string                    `json:"name" tf:"name"`
	// +optional
	PrimaryReadKey []ConfigurationSpecPrimaryReadKey `json:"primaryReadKey,omitempty" tf:"primary_read_key"`
	// +optional
	PrimaryWriteKey   []ConfigurationSpecPrimaryWriteKey `json:"primaryWriteKey,omitempty" tf:"primary_write_key"`
	ResourceGroupName *string                            `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	SecondaryReadKey []ConfigurationSpecSecondaryReadKey `json:"secondaryReadKey,omitempty" tf:"secondary_read_key"`
	// +optional
	SecondaryWriteKey []ConfigurationSpecSecondaryWriteKey `json:"secondaryWriteKey,omitempty" tf:"secondary_write_key"`
	// +optional
	Sku *string `json:"sku,omitempty" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ConfigurationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConfigurationList is a list of Configurations
type ConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Configuration CRD objects
	Items []Configuration `json:"items,omitempty"`
}
