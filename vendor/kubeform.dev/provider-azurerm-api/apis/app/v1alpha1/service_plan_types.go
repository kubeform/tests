/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServicePlan struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicePlanSpec   `json:"spec,omitempty"`
	Status            ServicePlanStatus `json:"status,omitempty"`
}

type ServicePlanSpec struct {
	ServicePlanSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServicePlanSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServicePlanSpecSku struct {
	// +optional
	Capacity *int64  `json:"capacity,omitempty" tf:"capacity"`
	Size     *string `json:"size" tf:"size"`
	Tier     *string `json:"tier" tf:"tier"`
}

type ServicePlanSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AppServiceEnvironmentID *string `json:"appServiceEnvironmentID,omitempty" tf:"app_service_environment_id"`
	// +optional
	IsXenon *bool `json:"isXenon,omitempty" tf:"is_xenon"`
	// +optional
	Kind     *string `json:"kind,omitempty" tf:"kind"`
	Location *string `json:"location" tf:"location"`
	// +optional
	MaximumElasticWorkerCount *int64 `json:"maximumElasticWorkerCount,omitempty" tf:"maximum_elastic_worker_count"`
	// +optional
	MaximumNumberOfWorkers *int64  `json:"maximumNumberOfWorkers,omitempty" tf:"maximum_number_of_workers"`
	Name                   *string `json:"name" tf:"name"`
	// +optional
	PerSiteScaling *bool `json:"perSiteScaling,omitempty" tf:"per_site_scaling"`
	// +optional
	Reserved          *bool               `json:"reserved,omitempty" tf:"reserved"`
	ResourceGroupName *string             `json:"resourceGroupName" tf:"resource_group_name"`
	Sku               *ServicePlanSpecSku `json:"sku" tf:"sku"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ServicePlanStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServicePlanList is a list of ServicePlans
type ServicePlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServicePlan CRD objects
	Items []ServicePlan `json:"items,omitempty"`
}
