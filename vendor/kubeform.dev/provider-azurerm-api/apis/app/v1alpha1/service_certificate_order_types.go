/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServiceCertificateOrder struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceCertificateOrderSpec   `json:"spec,omitempty"`
	Status            ServiceCertificateOrderStatus `json:"status,omitempty"`
}

type ServiceCertificateOrderSpec struct {
	ServiceCertificateOrderSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServiceCertificateOrderSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServiceCertificateOrderSpecCertificates struct {
	// +optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name"`
	// +optional
	KeyVaultID *string `json:"keyVaultID,omitempty" tf:"key_vault_id"`
	// +optional
	KeyVaultSecretName *string `json:"keyVaultSecretName,omitempty" tf:"key_vault_secret_name"`
	// +optional
	ProvisioningState *string `json:"provisioningState,omitempty" tf:"provisioning_state"`
}

type ServiceCertificateOrderSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AppServiceCertificateNotRenewableReasons []string `json:"appServiceCertificateNotRenewableReasons,omitempty" tf:"app_service_certificate_not_renewable_reasons"`
	// +optional
	AutoRenew *bool `json:"autoRenew,omitempty" tf:"auto_renew"`
	// +optional
	Certificates []ServiceCertificateOrderSpecCertificates `json:"certificates,omitempty" tf:"certificates"`
	// +optional
	Csr *string `json:"csr,omitempty" tf:"csr"`
	// +optional
	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name"`
	// +optional
	DomainVerificationToken *string `json:"domainVerificationToken,omitempty" tf:"domain_verification_token"`
	// +optional
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time"`
	// +optional
	IntermediateThumbprint *string `json:"intermediateThumbprint,omitempty" tf:"intermediate_thumbprint"`
	// +optional
	IsPrivateKeyExternal *bool `json:"isPrivateKeyExternal,omitempty" tf:"is_private_key_external"`
	// +optional
	KeySize  *int64  `json:"keySize,omitempty" tf:"key_size"`
	Location *string `json:"location" tf:"location"`
	Name     *string `json:"name" tf:"name"`
	// +optional
	ProductType       *string `json:"productType,omitempty" tf:"product_type"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	RootThumbprint *string `json:"rootThumbprint,omitempty" tf:"root_thumbprint"`
	// +optional
	SignedCertificateThumbprint *string `json:"signedCertificateThumbprint,omitempty" tf:"signed_certificate_thumbprint"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// +optional
	ValidityInYears *int64 `json:"validityInYears,omitempty" tf:"validity_in_years"`
}

type ServiceCertificateOrderStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServiceCertificateOrderList is a list of ServiceCertificateOrders
type ServiceCertificateOrderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServiceCertificateOrder CRD objects
	Items []ServiceCertificateOrder `json:"items,omitempty"`
}
