/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Diagnostic struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiagnosticSpec   `json:"spec,omitempty"`
	Status            DiagnosticStatus `json:"status,omitempty"`
}

type DiagnosticSpec struct {
	DiagnosticSpec2 `json:",inline"`
	// +optional
	KubeformOutput DiagnosticSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DiagnosticSpecBackendRequest struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type DiagnosticSpecBackendResponse struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type DiagnosticSpecFrontendRequest struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type DiagnosticSpecFrontendResponse struct {
	// +optional
	BodyBytes *int64 `json:"bodyBytes,omitempty" tf:"body_bytes"`
	// +optional
	HeadersToLog []string `json:"headersToLog,omitempty" tf:"headers_to_log"`
}

type DiagnosticSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AlwaysLogErrors       *bool   `json:"alwaysLogErrors,omitempty" tf:"always_log_errors"`
	ApiManagementLoggerID *string `json:"apiManagementLoggerID" tf:"api_management_logger_id"`
	ApiManagementName     *string `json:"apiManagementName" tf:"api_management_name"`
	// +optional
	BackendRequest *DiagnosticSpecBackendRequest `json:"backendRequest,omitempty" tf:"backend_request"`
	// +optional
	BackendResponse *DiagnosticSpecBackendResponse `json:"backendResponse,omitempty" tf:"backend_response"`
	// +optional
	// Deprecated
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// +optional
	FrontendRequest *DiagnosticSpecFrontendRequest `json:"frontendRequest,omitempty" tf:"frontend_request"`
	// +optional
	FrontendResponse *DiagnosticSpecFrontendResponse `json:"frontendResponse,omitempty" tf:"frontend_response"`
	// +optional
	HttpCorrelationProtocol *string `json:"httpCorrelationProtocol,omitempty" tf:"http_correlation_protocol"`
	Identifier              *string `json:"identifier" tf:"identifier"`
	// +optional
	LogClientIP       *bool   `json:"logClientIP,omitempty" tf:"log_client_ip"`
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	SamplingPercentage *float64 `json:"samplingPercentage,omitempty" tf:"sampling_percentage"`
	// +optional
	Verbosity *string `json:"verbosity,omitempty" tf:"verbosity"`
}

type DiagnosticStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DiagnosticList is a list of Diagnostics
type DiagnosticList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Diagnostic CRD objects
	Items []Diagnostic `json:"items,omitempty"`
}
