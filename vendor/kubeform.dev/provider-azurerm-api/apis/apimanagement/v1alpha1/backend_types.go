/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Backend struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackendSpec   `json:"spec,omitempty"`
	Status            BackendStatus `json:"status,omitempty"`
}

type BackendSpec struct {
	BackendSpec2 `json:",inline"`
	// +optional
	KubeformOutput BackendSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type BackendSpecCredentialsAuthorization struct {
	// +optional
	Parameter *string `json:"parameter,omitempty" tf:"parameter"`
	// +optional
	Scheme *string `json:"scheme,omitempty" tf:"scheme"`
}

type BackendSpecCredentials struct {
	// +optional
	Authorization *BackendSpecCredentialsAuthorization `json:"authorization,omitempty" tf:"authorization"`
	// +optional
	Certificate []string `json:"certificate,omitempty" tf:"certificate"`
	// +optional
	Header *map[string]string `json:"header,omitempty" tf:"header"`
	// +optional
	Query *map[string]string `json:"query,omitempty" tf:"query"`
}

type BackendSpecProxy struct {
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	Url      *string `json:"url" tf:"url"`
	Username *string `json:"username" tf:"username"`
}

type BackendSpecServiceFabricClusterServerX509Name struct {
	IssuerCertificateThumbprint *string `json:"issuerCertificateThumbprint" tf:"issuer_certificate_thumbprint"`
	Name                        *string `json:"name" tf:"name"`
}

type BackendSpecServiceFabricCluster struct {
	ClientCertificateThumbprint   *string  `json:"clientCertificateThumbprint" tf:"client_certificate_thumbprint"`
	ManagementEndpoints           []string `json:"managementEndpoints" tf:"management_endpoints"`
	MaxPartitionResolutionRetries *int64   `json:"maxPartitionResolutionRetries" tf:"max_partition_resolution_retries"`
	// +optional
	ServerCertificateThumbprints []string `json:"serverCertificateThumbprints,omitempty" tf:"server_certificate_thumbprints"`
	// +optional
	ServerX509Name []BackendSpecServiceFabricClusterServerX509Name `json:"serverX509Name,omitempty" tf:"server_x509_name"`
}

type BackendSpecTls struct {
	// +optional
	ValidateCertificateChain *bool `json:"validateCertificateChain,omitempty" tf:"validate_certificate_chain"`
	// +optional
	ValidateCertificateName *bool `json:"validateCertificateName,omitempty" tf:"validate_certificate_name"`
}

type BackendSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	ApiManagementName *string `json:"apiManagementName" tf:"api_management_name"`
	// +optional
	Credentials *BackendSpecCredentials `json:"credentials,omitempty" tf:"credentials"`
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	Name        *string `json:"name" tf:"name"`
	Protocol    *string `json:"protocol" tf:"protocol"`
	// +optional
	Proxy             *BackendSpecProxy `json:"proxy,omitempty" tf:"proxy"`
	ResourceGroupName *string           `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	ResourceID *string `json:"resourceID,omitempty" tf:"resource_id"`
	// +optional
	ServiceFabricCluster *BackendSpecServiceFabricCluster `json:"serviceFabricCluster,omitempty" tf:"service_fabric_cluster"`
	// +optional
	Title *string `json:"title,omitempty" tf:"title"`
	// +optional
	Tls *BackendSpecTls `json:"tls,omitempty" tf:"tls"`
	Url *string         `json:"url" tf:"url"`
}

type BackendStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BackendList is a list of Backends
type BackendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Backend CRD objects
	Items []Backend `json:"items,omitempty"`
}
