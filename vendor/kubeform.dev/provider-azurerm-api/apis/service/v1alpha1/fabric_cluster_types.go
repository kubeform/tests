/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type FabricCluster struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FabricClusterSpec   `json:"spec,omitempty"`
	Status            FabricClusterStatus `json:"status,omitempty"`
}

type FabricClusterSpec struct {
	FabricClusterSpec2 `json:",inline"`
	// +optional
	KubeformOutput FabricClusterSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type FabricClusterSpecAzureActiveDirectory struct {
	ClientApplicationID  *string `json:"clientApplicationID" tf:"client_application_id"`
	ClusterApplicationID *string `json:"clusterApplicationID" tf:"cluster_application_id"`
	TenantID             *string `json:"tenantID" tf:"tenant_id"`
}

type FabricClusterSpecCertificate struct {
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
	// +optional
	ThumbprintSecondary *string `json:"thumbprintSecondary,omitempty" tf:"thumbprint_secondary"`
	X509StoreName       *string `json:"x509StoreName" tf:"x509_store_name"`
}

type FabricClusterSpecCertificateCommonNamesCommonNames struct {
	CertificateCommonName *string `json:"certificateCommonName" tf:"certificate_common_name"`
	// +optional
	CertificateIssuerThumbprint *string `json:"certificateIssuerThumbprint,omitempty" tf:"certificate_issuer_thumbprint"`
}

type FabricClusterSpecCertificateCommonNames struct {
	// +kubebuilder:validation:MinItems=1
	CommonNames   []FabricClusterSpecCertificateCommonNamesCommonNames `json:"commonNames" tf:"common_names"`
	X509StoreName *string                                              `json:"x509StoreName" tf:"x509_store_name"`
}

type FabricClusterSpecClientCertificateCommonName struct {
	CommonName *string `json:"commonName" tf:"common_name"`
	IsAdmin    *bool   `json:"isAdmin" tf:"is_admin"`
	// +optional
	IssuerThumbprint *string `json:"issuerThumbprint,omitempty" tf:"issuer_thumbprint"`
}

type FabricClusterSpecClientCertificateThumbprint struct {
	IsAdmin    *bool   `json:"isAdmin" tf:"is_admin"`
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
}

type FabricClusterSpecDiagnosticsConfig struct {
	BlobEndpoint            *string `json:"blobEndpoint" tf:"blob_endpoint"`
	ProtectedAccountKeyName *string `json:"protectedAccountKeyName" tf:"protected_account_key_name"`
	QueueEndpoint           *string `json:"queueEndpoint" tf:"queue_endpoint"`
	StorageAccountName      *string `json:"storageAccountName" tf:"storage_account_name"`
	TableEndpoint           *string `json:"tableEndpoint" tf:"table_endpoint"`
}

type FabricClusterSpecFabricSettings struct {
	Name *string `json:"name" tf:"name"`
	// +optional
	Parameters *map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type FabricClusterSpecNodeTypeApplicationPorts struct {
	EndPort   *int64 `json:"endPort" tf:"end_port"`
	StartPort *int64 `json:"startPort" tf:"start_port"`
}

type FabricClusterSpecNodeTypeEphemeralPorts struct {
	EndPort   *int64 `json:"endPort" tf:"end_port"`
	StartPort *int64 `json:"startPort" tf:"start_port"`
}

type FabricClusterSpecNodeType struct {
	// +optional
	ApplicationPorts *FabricClusterSpecNodeTypeApplicationPorts `json:"applicationPorts,omitempty" tf:"application_ports"`
	// +optional
	Capacities         *map[string]string `json:"capacities,omitempty" tf:"capacities"`
	ClientEndpointPort *int64             `json:"clientEndpointPort" tf:"client_endpoint_port"`
	// +optional
	DurabilityLevel *string `json:"durabilityLevel,omitempty" tf:"durability_level"`
	// +optional
	EphemeralPorts   *FabricClusterSpecNodeTypeEphemeralPorts `json:"ephemeralPorts,omitempty" tf:"ephemeral_ports"`
	HttpEndpointPort *int64                                   `json:"httpEndpointPort" tf:"http_endpoint_port"`
	InstanceCount    *int64                                   `json:"instanceCount" tf:"instance_count"`
	IsPrimary        *bool                                    `json:"isPrimary" tf:"is_primary"`
	Name             *string                                  `json:"name" tf:"name"`
	// +optional
	PlacementProperties *map[string]string `json:"placementProperties,omitempty" tf:"placement_properties"`
	// +optional
	ReverseProxyEndpointPort *int64 `json:"reverseProxyEndpointPort,omitempty" tf:"reverse_proxy_endpoint_port"`
}

type FabricClusterSpecReverseProxyCertificate struct {
	Thumbprint *string `json:"thumbprint" tf:"thumbprint"`
	// +optional
	ThumbprintSecondary *string `json:"thumbprintSecondary,omitempty" tf:"thumbprint_secondary"`
	X509StoreName       *string `json:"x509StoreName" tf:"x509_store_name"`
}

type FabricClusterSpecReverseProxyCertificateCommonNamesCommonNames struct {
	CertificateCommonName *string `json:"certificateCommonName" tf:"certificate_common_name"`
	// +optional
	CertificateIssuerThumbprint *string `json:"certificateIssuerThumbprint,omitempty" tf:"certificate_issuer_thumbprint"`
}

type FabricClusterSpecReverseProxyCertificateCommonNames struct {
	// +kubebuilder:validation:MinItems=1
	CommonNames   []FabricClusterSpecReverseProxyCertificateCommonNamesCommonNames `json:"commonNames" tf:"common_names"`
	X509StoreName *string                                                          `json:"x509StoreName" tf:"x509_store_name"`
}

type FabricClusterSpecUpgradePolicyDeltaHealthPolicy struct {
	// +optional
	MaxDeltaUnhealthyApplicationsPercent *int64 `json:"maxDeltaUnhealthyApplicationsPercent,omitempty" tf:"max_delta_unhealthy_applications_percent"`
	// +optional
	MaxDeltaUnhealthyNodesPercent *int64 `json:"maxDeltaUnhealthyNodesPercent,omitempty" tf:"max_delta_unhealthy_nodes_percent"`
	// +optional
	MaxUpgradeDomainDeltaUnhealthyNodesPercent *int64 `json:"maxUpgradeDomainDeltaUnhealthyNodesPercent,omitempty" tf:"max_upgrade_domain_delta_unhealthy_nodes_percent"`
}

type FabricClusterSpecUpgradePolicyHealthPolicy struct {
	// +optional
	MaxUnhealthyApplicationsPercent *int64 `json:"maxUnhealthyApplicationsPercent,omitempty" tf:"max_unhealthy_applications_percent"`
	// +optional
	MaxUnhealthyNodesPercent *int64 `json:"maxUnhealthyNodesPercent,omitempty" tf:"max_unhealthy_nodes_percent"`
}

type FabricClusterSpecUpgradePolicy struct {
	// +optional
	DeltaHealthPolicy *FabricClusterSpecUpgradePolicyDeltaHealthPolicy `json:"deltaHealthPolicy,omitempty" tf:"delta_health_policy"`
	// +optional
	ForceRestartEnabled *bool `json:"forceRestartEnabled,omitempty" tf:"force_restart_enabled"`
	// +optional
	HealthCheckRetryTimeout *string `json:"healthCheckRetryTimeout,omitempty" tf:"health_check_retry_timeout"`
	// +optional
	HealthCheckStableDuration *string `json:"healthCheckStableDuration,omitempty" tf:"health_check_stable_duration"`
	// +optional
	HealthCheckWaitDuration *string `json:"healthCheckWaitDuration,omitempty" tf:"health_check_wait_duration"`
	// +optional
	HealthPolicy *FabricClusterSpecUpgradePolicyHealthPolicy `json:"healthPolicy,omitempty" tf:"health_policy"`
	// +optional
	UpgradeDomainTimeout *string `json:"upgradeDomainTimeout,omitempty" tf:"upgrade_domain_timeout"`
	// +optional
	UpgradeReplicaSetCheckTimeout *string `json:"upgradeReplicaSetCheckTimeout,omitempty" tf:"upgrade_replica_set_check_timeout"`
	// +optional
	UpgradeTimeout *string `json:"upgradeTimeout,omitempty" tf:"upgrade_timeout"`
}

type FabricClusterSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	AddOnFeatures []string `json:"addOnFeatures,omitempty" tf:"add_on_features"`
	// +optional
	AzureActiveDirectory *FabricClusterSpecAzureActiveDirectory `json:"azureActiveDirectory,omitempty" tf:"azure_active_directory"`
	// +optional
	Certificate *FabricClusterSpecCertificate `json:"certificate,omitempty" tf:"certificate"`
	// +optional
	CertificateCommonNames *FabricClusterSpecCertificateCommonNames `json:"certificateCommonNames,omitempty" tf:"certificate_common_names"`
	// +optional
	ClientCertificateCommonName []FabricClusterSpecClientCertificateCommonName `json:"clientCertificateCommonName,omitempty" tf:"client_certificate_common_name"`
	// +optional
	ClientCertificateThumbprint []FabricClusterSpecClientCertificateThumbprint `json:"clientCertificateThumbprint,omitempty" tf:"client_certificate_thumbprint"`
	// +optional
	ClusterCodeVersion *string `json:"clusterCodeVersion,omitempty" tf:"cluster_code_version"`
	// +optional
	ClusterEndpoint *string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint"`
	// +optional
	DiagnosticsConfig *FabricClusterSpecDiagnosticsConfig `json:"diagnosticsConfig,omitempty" tf:"diagnostics_config"`
	// +optional
	FabricSettings     []FabricClusterSpecFabricSettings `json:"fabricSettings,omitempty" tf:"fabric_settings"`
	Location           *string                           `json:"location" tf:"location"`
	ManagementEndpoint *string                           `json:"managementEndpoint" tf:"management_endpoint"`
	Name               *string                           `json:"name" tf:"name"`
	NodeType           []FabricClusterSpecNodeType       `json:"nodeType" tf:"node_type"`
	ReliabilityLevel   *string                           `json:"reliabilityLevel" tf:"reliability_level"`
	ResourceGroupName  *string                           `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	ReverseProxyCertificate *FabricClusterSpecReverseProxyCertificate `json:"reverseProxyCertificate,omitempty" tf:"reverse_proxy_certificate"`
	// +optional
	ReverseProxyCertificateCommonNames *FabricClusterSpecReverseProxyCertificateCommonNames `json:"reverseProxyCertificateCommonNames,omitempty" tf:"reverse_proxy_certificate_common_names"`
	// +optional
	Tags        *map[string]string `json:"tags,omitempty" tf:"tags"`
	UpgradeMode *string            `json:"upgradeMode" tf:"upgrade_mode"`
	// +optional
	UpgradePolicy *FabricClusterSpecUpgradePolicy `json:"upgradePolicy,omitempty" tf:"upgrade_policy"`
	VmImage       *string                         `json:"vmImage" tf:"vm_image"`
}

type FabricClusterStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// FabricClusterList is a list of FabricClusters
type FabricClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of FabricCluster CRD objects
	Items []FabricCluster `json:"items,omitempty"`
}
