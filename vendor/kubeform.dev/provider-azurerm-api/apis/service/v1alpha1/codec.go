/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecAzureActiveDirectory{}).Type1()):                        FabricClusterSpecAzureActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificate{}).Type1()):                                 FabricClusterSpecCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificateCommonNames{}).Type1()):                      FabricClusterSpecCertificateCommonNamesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecDiagnosticsConfig{}).Type1()):                           FabricClusterSpecDiagnosticsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeApplicationPorts{}).Type1()):                    FabricClusterSpecNodeTypeApplicationPortsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeEphemeralPorts{}).Type1()):                      FabricClusterSpecNodeTypeEphemeralPortsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificate{}).Type1()):                     FabricClusterSpecReverseProxyCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificateCommonNames{}).Type1()):          FabricClusterSpecReverseProxyCertificateCommonNamesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicy{}).Type1()):                               FabricClusterSpecUpgradePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyDeltaHealthPolicy{}).Type1()):              FabricClusterSpecUpgradePolicyDeltaHealthPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyHealthPolicy{}).Type1()):                   FabricClusterSpecUpgradePolicyHealthPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResources{}).Type1()):         FabricMeshApplicationSpecServiceCodePackageResourcesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesLimits{}).Type1()):   FabricMeshApplicationSpecServiceCodePackageResourcesLimitsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesRequests{}).Type1()): FabricMeshApplicationSpecServiceCodePackageResourcesRequestsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecAzureActiveDirectory{}).Type1()):                        FabricClusterSpecAzureActiveDirectoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificate{}).Type1()):                                 FabricClusterSpecCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificateCommonNames{}).Type1()):                      FabricClusterSpecCertificateCommonNamesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecDiagnosticsConfig{}).Type1()):                           FabricClusterSpecDiagnosticsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeApplicationPorts{}).Type1()):                    FabricClusterSpecNodeTypeApplicationPortsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeEphemeralPorts{}).Type1()):                      FabricClusterSpecNodeTypeEphemeralPortsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificate{}).Type1()):                     FabricClusterSpecReverseProxyCertificateCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificateCommonNames{}).Type1()):          FabricClusterSpecReverseProxyCertificateCommonNamesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicy{}).Type1()):                               FabricClusterSpecUpgradePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyDeltaHealthPolicy{}).Type1()):              FabricClusterSpecUpgradePolicyDeltaHealthPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyHealthPolicy{}).Type1()):                   FabricClusterSpecUpgradePolicyHealthPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResources{}).Type1()):         FabricMeshApplicationSpecServiceCodePackageResourcesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesLimits{}).Type1()):   FabricMeshApplicationSpecServiceCodePackageResourcesLimitsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesRequests{}).Type1()): FabricMeshApplicationSpecServiceCodePackageResourcesRequestsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecAzureActiveDirectoryCodec struct {
}

func (FabricClusterSpecAzureActiveDirectoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecAzureActiveDirectory)(ptr) == nil
}

func (FabricClusterSpecAzureActiveDirectoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecAzureActiveDirectory)(ptr)
	var objs []FabricClusterSpecAzureActiveDirectory
	if obj != nil {
		objs = []FabricClusterSpecAzureActiveDirectory{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecAzureActiveDirectory{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecAzureActiveDirectoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecAzureActiveDirectory)(ptr) = FabricClusterSpecAzureActiveDirectory{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecAzureActiveDirectory

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecAzureActiveDirectory{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecAzureActiveDirectory)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecAzureActiveDirectory)(ptr) = FabricClusterSpecAzureActiveDirectory{}
			}
		} else {
			*(*FabricClusterSpecAzureActiveDirectory)(ptr) = FabricClusterSpecAzureActiveDirectory{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecAzureActiveDirectory", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecCertificateCodec struct {
}

func (FabricClusterSpecCertificateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecCertificate)(ptr) == nil
}

func (FabricClusterSpecCertificateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecCertificate)(ptr)
	var objs []FabricClusterSpecCertificate
	if obj != nil {
		objs = []FabricClusterSpecCertificate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecCertificateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecCertificate)(ptr) = FabricClusterSpecCertificate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecCertificate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecCertificate)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecCertificate)(ptr) = FabricClusterSpecCertificate{}
			}
		} else {
			*(*FabricClusterSpecCertificate)(ptr) = FabricClusterSpecCertificate{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecCertificate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecCertificateCommonNamesCodec struct {
}

func (FabricClusterSpecCertificateCommonNamesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecCertificateCommonNames)(ptr) == nil
}

func (FabricClusterSpecCertificateCommonNamesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecCertificateCommonNames)(ptr)
	var objs []FabricClusterSpecCertificateCommonNames
	if obj != nil {
		objs = []FabricClusterSpecCertificateCommonNames{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificateCommonNames{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecCertificateCommonNamesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecCertificateCommonNames)(ptr) = FabricClusterSpecCertificateCommonNames{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecCertificateCommonNames

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecCertificateCommonNames{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecCertificateCommonNames)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecCertificateCommonNames)(ptr) = FabricClusterSpecCertificateCommonNames{}
			}
		} else {
			*(*FabricClusterSpecCertificateCommonNames)(ptr) = FabricClusterSpecCertificateCommonNames{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecCertificateCommonNames", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecDiagnosticsConfigCodec struct {
}

func (FabricClusterSpecDiagnosticsConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecDiagnosticsConfig)(ptr) == nil
}

func (FabricClusterSpecDiagnosticsConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecDiagnosticsConfig)(ptr)
	var objs []FabricClusterSpecDiagnosticsConfig
	if obj != nil {
		objs = []FabricClusterSpecDiagnosticsConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecDiagnosticsConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecDiagnosticsConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecDiagnosticsConfig)(ptr) = FabricClusterSpecDiagnosticsConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecDiagnosticsConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecDiagnosticsConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecDiagnosticsConfig)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecDiagnosticsConfig)(ptr) = FabricClusterSpecDiagnosticsConfig{}
			}
		} else {
			*(*FabricClusterSpecDiagnosticsConfig)(ptr) = FabricClusterSpecDiagnosticsConfig{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecDiagnosticsConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecNodeTypeApplicationPortsCodec struct {
}

func (FabricClusterSpecNodeTypeApplicationPortsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecNodeTypeApplicationPorts)(ptr) == nil
}

func (FabricClusterSpecNodeTypeApplicationPortsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecNodeTypeApplicationPorts)(ptr)
	var objs []FabricClusterSpecNodeTypeApplicationPorts
	if obj != nil {
		objs = []FabricClusterSpecNodeTypeApplicationPorts{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeApplicationPorts{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecNodeTypeApplicationPortsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecNodeTypeApplicationPorts)(ptr) = FabricClusterSpecNodeTypeApplicationPorts{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecNodeTypeApplicationPorts

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeApplicationPorts{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecNodeTypeApplicationPorts)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecNodeTypeApplicationPorts)(ptr) = FabricClusterSpecNodeTypeApplicationPorts{}
			}
		} else {
			*(*FabricClusterSpecNodeTypeApplicationPorts)(ptr) = FabricClusterSpecNodeTypeApplicationPorts{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecNodeTypeApplicationPorts", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecNodeTypeEphemeralPortsCodec struct {
}

func (FabricClusterSpecNodeTypeEphemeralPortsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecNodeTypeEphemeralPorts)(ptr) == nil
}

func (FabricClusterSpecNodeTypeEphemeralPortsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecNodeTypeEphemeralPorts)(ptr)
	var objs []FabricClusterSpecNodeTypeEphemeralPorts
	if obj != nil {
		objs = []FabricClusterSpecNodeTypeEphemeralPorts{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeEphemeralPorts{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecNodeTypeEphemeralPortsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecNodeTypeEphemeralPorts)(ptr) = FabricClusterSpecNodeTypeEphemeralPorts{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecNodeTypeEphemeralPorts

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecNodeTypeEphemeralPorts{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecNodeTypeEphemeralPorts)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecNodeTypeEphemeralPorts)(ptr) = FabricClusterSpecNodeTypeEphemeralPorts{}
			}
		} else {
			*(*FabricClusterSpecNodeTypeEphemeralPorts)(ptr) = FabricClusterSpecNodeTypeEphemeralPorts{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecNodeTypeEphemeralPorts", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecReverseProxyCertificateCodec struct {
}

func (FabricClusterSpecReverseProxyCertificateCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecReverseProxyCertificate)(ptr) == nil
}

func (FabricClusterSpecReverseProxyCertificateCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecReverseProxyCertificate)(ptr)
	var objs []FabricClusterSpecReverseProxyCertificate
	if obj != nil {
		objs = []FabricClusterSpecReverseProxyCertificate{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificate{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecReverseProxyCertificateCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecReverseProxyCertificate)(ptr) = FabricClusterSpecReverseProxyCertificate{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecReverseProxyCertificate

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificate{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecReverseProxyCertificate)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecReverseProxyCertificate)(ptr) = FabricClusterSpecReverseProxyCertificate{}
			}
		} else {
			*(*FabricClusterSpecReverseProxyCertificate)(ptr) = FabricClusterSpecReverseProxyCertificate{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecReverseProxyCertificate", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecReverseProxyCertificateCommonNamesCodec struct {
}

func (FabricClusterSpecReverseProxyCertificateCommonNamesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecReverseProxyCertificateCommonNames)(ptr) == nil
}

func (FabricClusterSpecReverseProxyCertificateCommonNamesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecReverseProxyCertificateCommonNames)(ptr)
	var objs []FabricClusterSpecReverseProxyCertificateCommonNames
	if obj != nil {
		objs = []FabricClusterSpecReverseProxyCertificateCommonNames{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificateCommonNames{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecReverseProxyCertificateCommonNamesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecReverseProxyCertificateCommonNames)(ptr) = FabricClusterSpecReverseProxyCertificateCommonNames{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecReverseProxyCertificateCommonNames

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecReverseProxyCertificateCommonNames{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecReverseProxyCertificateCommonNames)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecReverseProxyCertificateCommonNames)(ptr) = FabricClusterSpecReverseProxyCertificateCommonNames{}
			}
		} else {
			*(*FabricClusterSpecReverseProxyCertificateCommonNames)(ptr) = FabricClusterSpecReverseProxyCertificateCommonNames{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecReverseProxyCertificateCommonNames", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecUpgradePolicyCodec struct {
}

func (FabricClusterSpecUpgradePolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecUpgradePolicy)(ptr) == nil
}

func (FabricClusterSpecUpgradePolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecUpgradePolicy)(ptr)
	var objs []FabricClusterSpecUpgradePolicy
	if obj != nil {
		objs = []FabricClusterSpecUpgradePolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecUpgradePolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecUpgradePolicy)(ptr) = FabricClusterSpecUpgradePolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecUpgradePolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecUpgradePolicy)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecUpgradePolicy)(ptr) = FabricClusterSpecUpgradePolicy{}
			}
		} else {
			*(*FabricClusterSpecUpgradePolicy)(ptr) = FabricClusterSpecUpgradePolicy{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecUpgradePolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecUpgradePolicyDeltaHealthPolicyCodec struct {
}

func (FabricClusterSpecUpgradePolicyDeltaHealthPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecUpgradePolicyDeltaHealthPolicy)(ptr) == nil
}

func (FabricClusterSpecUpgradePolicyDeltaHealthPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecUpgradePolicyDeltaHealthPolicy)(ptr)
	var objs []FabricClusterSpecUpgradePolicyDeltaHealthPolicy
	if obj != nil {
		objs = []FabricClusterSpecUpgradePolicyDeltaHealthPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyDeltaHealthPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecUpgradePolicyDeltaHealthPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecUpgradePolicyDeltaHealthPolicy)(ptr) = FabricClusterSpecUpgradePolicyDeltaHealthPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecUpgradePolicyDeltaHealthPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyDeltaHealthPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecUpgradePolicyDeltaHealthPolicy)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecUpgradePolicyDeltaHealthPolicy)(ptr) = FabricClusterSpecUpgradePolicyDeltaHealthPolicy{}
			}
		} else {
			*(*FabricClusterSpecUpgradePolicyDeltaHealthPolicy)(ptr) = FabricClusterSpecUpgradePolicyDeltaHealthPolicy{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecUpgradePolicyDeltaHealthPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricClusterSpecUpgradePolicyHealthPolicyCodec struct {
}

func (FabricClusterSpecUpgradePolicyHealthPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricClusterSpecUpgradePolicyHealthPolicy)(ptr) == nil
}

func (FabricClusterSpecUpgradePolicyHealthPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricClusterSpecUpgradePolicyHealthPolicy)(ptr)
	var objs []FabricClusterSpecUpgradePolicyHealthPolicy
	if obj != nil {
		objs = []FabricClusterSpecUpgradePolicyHealthPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyHealthPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricClusterSpecUpgradePolicyHealthPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricClusterSpecUpgradePolicyHealthPolicy)(ptr) = FabricClusterSpecUpgradePolicyHealthPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricClusterSpecUpgradePolicyHealthPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricClusterSpecUpgradePolicyHealthPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricClusterSpecUpgradePolicyHealthPolicy)(ptr) = objs[0]
			} else {
				*(*FabricClusterSpecUpgradePolicyHealthPolicy)(ptr) = FabricClusterSpecUpgradePolicyHealthPolicy{}
			}
		} else {
			*(*FabricClusterSpecUpgradePolicyHealthPolicy)(ptr) = FabricClusterSpecUpgradePolicyHealthPolicy{}
		}
	default:
		iter.ReportError("decode FabricClusterSpecUpgradePolicyHealthPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricMeshApplicationSpecServiceCodePackageResourcesCodec struct {
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricMeshApplicationSpecServiceCodePackageResources)(ptr) == nil
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricMeshApplicationSpecServiceCodePackageResources)(ptr)
	var objs []FabricMeshApplicationSpecServiceCodePackageResources
	if obj != nil {
		objs = []FabricMeshApplicationSpecServiceCodePackageResources{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResources{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricMeshApplicationSpecServiceCodePackageResources)(ptr) = FabricMeshApplicationSpecServiceCodePackageResources{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricMeshApplicationSpecServiceCodePackageResources

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResources{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricMeshApplicationSpecServiceCodePackageResources)(ptr) = objs[0]
			} else {
				*(*FabricMeshApplicationSpecServiceCodePackageResources)(ptr) = FabricMeshApplicationSpecServiceCodePackageResources{}
			}
		} else {
			*(*FabricMeshApplicationSpecServiceCodePackageResources)(ptr) = FabricMeshApplicationSpecServiceCodePackageResources{}
		}
	default:
		iter.ReportError("decode FabricMeshApplicationSpecServiceCodePackageResources", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricMeshApplicationSpecServiceCodePackageResourcesLimitsCodec struct {
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesLimitsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricMeshApplicationSpecServiceCodePackageResourcesLimits)(ptr) == nil
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesLimitsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricMeshApplicationSpecServiceCodePackageResourcesLimits)(ptr)
	var objs []FabricMeshApplicationSpecServiceCodePackageResourcesLimits
	if obj != nil {
		objs = []FabricMeshApplicationSpecServiceCodePackageResourcesLimits{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesLimits{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesLimitsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricMeshApplicationSpecServiceCodePackageResourcesLimits)(ptr) = FabricMeshApplicationSpecServiceCodePackageResourcesLimits{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricMeshApplicationSpecServiceCodePackageResourcesLimits

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesLimits{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricMeshApplicationSpecServiceCodePackageResourcesLimits)(ptr) = objs[0]
			} else {
				*(*FabricMeshApplicationSpecServiceCodePackageResourcesLimits)(ptr) = FabricMeshApplicationSpecServiceCodePackageResourcesLimits{}
			}
		} else {
			*(*FabricMeshApplicationSpecServiceCodePackageResourcesLimits)(ptr) = FabricMeshApplicationSpecServiceCodePackageResourcesLimits{}
		}
	default:
		iter.ReportError("decode FabricMeshApplicationSpecServiceCodePackageResourcesLimits", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type FabricMeshApplicationSpecServiceCodePackageResourcesRequestsCodec struct {
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesRequestsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*FabricMeshApplicationSpecServiceCodePackageResourcesRequests)(ptr) == nil
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesRequestsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*FabricMeshApplicationSpecServiceCodePackageResourcesRequests)(ptr)
	var objs []FabricMeshApplicationSpecServiceCodePackageResourcesRequests
	if obj != nil {
		objs = []FabricMeshApplicationSpecServiceCodePackageResourcesRequests{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesRequests{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (FabricMeshApplicationSpecServiceCodePackageResourcesRequestsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*FabricMeshApplicationSpecServiceCodePackageResourcesRequests)(ptr) = FabricMeshApplicationSpecServiceCodePackageResourcesRequests{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []FabricMeshApplicationSpecServiceCodePackageResourcesRequests

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(FabricMeshApplicationSpecServiceCodePackageResourcesRequests{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*FabricMeshApplicationSpecServiceCodePackageResourcesRequests)(ptr) = objs[0]
			} else {
				*(*FabricMeshApplicationSpecServiceCodePackageResourcesRequests)(ptr) = FabricMeshApplicationSpecServiceCodePackageResourcesRequests{}
			}
		} else {
			*(*FabricMeshApplicationSpecServiceCodePackageResourcesRequests)(ptr) = FabricMeshApplicationSpecServiceCodePackageResourcesRequests{}
		}
	default:
		iter.ReportError("decode FabricMeshApplicationSpecServiceCodePackageResourcesRequests", "unexpected JSON type")
	}
}
