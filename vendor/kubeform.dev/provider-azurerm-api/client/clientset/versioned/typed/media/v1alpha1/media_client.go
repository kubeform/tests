/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/media/v1alpha1"
	"kubeform.dev/provider-azurerm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type MediaV1alpha1Interface interface {
	RESTClient() rest.Interface
	AssetsGetter
	AssetFiltersGetter
	ContentKeyPoliciesGetter
	JobsGetter
	LiveEventsGetter
	LiveEventOutputsGetter
	ServicesAccountsGetter
	StreamingEndpointsGetter
	StreamingLocatorsGetter
	StreamingPoliciesGetter
	TransformsGetter
}

// MediaV1alpha1Client is used to interact with features provided by the media.azurerm.kubeform.com group.
type MediaV1alpha1Client struct {
	restClient rest.Interface
}

func (c *MediaV1alpha1Client) Assets(namespace string) AssetInterface {
	return newAssets(c, namespace)
}

func (c *MediaV1alpha1Client) AssetFilters(namespace string) AssetFilterInterface {
	return newAssetFilters(c, namespace)
}

func (c *MediaV1alpha1Client) ContentKeyPolicies(namespace string) ContentKeyPolicyInterface {
	return newContentKeyPolicies(c, namespace)
}

func (c *MediaV1alpha1Client) Jobs(namespace string) JobInterface {
	return newJobs(c, namespace)
}

func (c *MediaV1alpha1Client) LiveEvents(namespace string) LiveEventInterface {
	return newLiveEvents(c, namespace)
}

func (c *MediaV1alpha1Client) LiveEventOutputs(namespace string) LiveEventOutputInterface {
	return newLiveEventOutputs(c, namespace)
}

func (c *MediaV1alpha1Client) ServicesAccounts(namespace string) ServicesAccountInterface {
	return newServicesAccounts(c, namespace)
}

func (c *MediaV1alpha1Client) StreamingEndpoints(namespace string) StreamingEndpointInterface {
	return newStreamingEndpoints(c, namespace)
}

func (c *MediaV1alpha1Client) StreamingLocators(namespace string) StreamingLocatorInterface {
	return newStreamingLocators(c, namespace)
}

func (c *MediaV1alpha1Client) StreamingPolicies(namespace string) StreamingPolicyInterface {
	return newStreamingPolicies(c, namespace)
}

func (c *MediaV1alpha1Client) Transforms(namespace string) TransformInterface {
	return newTransforms(c, namespace)
}

// NewForConfig creates a new MediaV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*MediaV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &MediaV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new MediaV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *MediaV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new MediaV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *MediaV1alpha1Client {
	return &MediaV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *MediaV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
