/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"
	"kubeform.dev/provider-azurerm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type AutomationV1alpha1Interface interface {
	RESTClient() rest.Interface
	AccountsGetter
	CertificatesGetter
	ConnectionsGetter
	ConnectionCertificatesGetter
	ConnectionClassicCertificatesGetter
	ConnectionServicePrincipalsGetter
	CredentialsGetter
	DscConfigurationsGetter
	DscNodeconfigurationsGetter
	JobSchedulesGetter
	ModulesGetter
	RunbooksGetter
	SchedulesGetter
	VariableBoolsGetter
	VariableDatetimesGetter
	VariableIntsGetter
	VariableStringsGetter
}

// AutomationV1alpha1Client is used to interact with features provided by the automation.azurerm.kubeform.com group.
type AutomationV1alpha1Client struct {
	restClient rest.Interface
}

func (c *AutomationV1alpha1Client) Accounts(namespace string) AccountInterface {
	return newAccounts(c, namespace)
}

func (c *AutomationV1alpha1Client) Certificates(namespace string) CertificateInterface {
	return newCertificates(c, namespace)
}

func (c *AutomationV1alpha1Client) Connections(namespace string) ConnectionInterface {
	return newConnections(c, namespace)
}

func (c *AutomationV1alpha1Client) ConnectionCertificates(namespace string) ConnectionCertificateInterface {
	return newConnectionCertificates(c, namespace)
}

func (c *AutomationV1alpha1Client) ConnectionClassicCertificates(namespace string) ConnectionClassicCertificateInterface {
	return newConnectionClassicCertificates(c, namespace)
}

func (c *AutomationV1alpha1Client) ConnectionServicePrincipals(namespace string) ConnectionServicePrincipalInterface {
	return newConnectionServicePrincipals(c, namespace)
}

func (c *AutomationV1alpha1Client) Credentials(namespace string) CredentialInterface {
	return newCredentials(c, namespace)
}

func (c *AutomationV1alpha1Client) DscConfigurations(namespace string) DscConfigurationInterface {
	return newDscConfigurations(c, namespace)
}

func (c *AutomationV1alpha1Client) DscNodeconfigurations(namespace string) DscNodeconfigurationInterface {
	return newDscNodeconfigurations(c, namespace)
}

func (c *AutomationV1alpha1Client) JobSchedules(namespace string) JobScheduleInterface {
	return newJobSchedules(c, namespace)
}

func (c *AutomationV1alpha1Client) Modules(namespace string) ModuleInterface {
	return newModules(c, namespace)
}

func (c *AutomationV1alpha1Client) Runbooks(namespace string) RunbookInterface {
	return newRunbooks(c, namespace)
}

func (c *AutomationV1alpha1Client) Schedules(namespace string) ScheduleInterface {
	return newSchedules(c, namespace)
}

func (c *AutomationV1alpha1Client) VariableBools(namespace string) VariableBoolInterface {
	return newVariableBools(c, namespace)
}

func (c *AutomationV1alpha1Client) VariableDatetimes(namespace string) VariableDatetimeInterface {
	return newVariableDatetimes(c, namespace)
}

func (c *AutomationV1alpha1Client) VariableInts(namespace string) VariableIntInterface {
	return newVariableInts(c, namespace)
}

func (c *AutomationV1alpha1Client) VariableStrings(namespace string) VariableStringInterface {
	return newVariableStrings(c, namespace)
}

// NewForConfig creates a new AutomationV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*AutomationV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &AutomationV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new AutomationV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *AutomationV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new AutomationV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *AutomationV1alpha1Client {
	return &AutomationV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *AutomationV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
