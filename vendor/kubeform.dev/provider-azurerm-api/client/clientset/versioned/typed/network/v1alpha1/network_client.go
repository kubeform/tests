/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/network/v1alpha1"
	"kubeform.dev/provider-azurerm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type NetworkV1alpha1Interface interface {
	RESTClient() rest.Interface
	ConnectionMonitorsGetter
	DdosProtectionPlansGetter
	InterfacesGetter
	InterfaceApplicationGatewayBackendAddressPoolAssociationsGetter
	InterfaceApplicationSecurityGroupAssociationsGetter
	InterfaceBackendAddressPoolAssociationsGetter
	InterfaceNATRuleAssociationsGetter
	InterfaceSecurityGroupAssociationsGetter
	PacketCapturesGetter
	ProfilesGetter
	SecurityGroupsGetter
	SecurityRulesGetter
	WatchersGetter
	WatcherFlowLogsGetter
}

// NetworkV1alpha1Client is used to interact with features provided by the network.azurerm.kubeform.com group.
type NetworkV1alpha1Client struct {
	restClient rest.Interface
}

func (c *NetworkV1alpha1Client) ConnectionMonitors(namespace string) ConnectionMonitorInterface {
	return newConnectionMonitors(c, namespace)
}

func (c *NetworkV1alpha1Client) DdosProtectionPlans(namespace string) DdosProtectionPlanInterface {
	return newDdosProtectionPlans(c, namespace)
}

func (c *NetworkV1alpha1Client) Interfaces(namespace string) InterfaceInterface {
	return newInterfaces(c, namespace)
}

func (c *NetworkV1alpha1Client) InterfaceApplicationGatewayBackendAddressPoolAssociations(namespace string) InterfaceApplicationGatewayBackendAddressPoolAssociationInterface {
	return newInterfaceApplicationGatewayBackendAddressPoolAssociations(c, namespace)
}

func (c *NetworkV1alpha1Client) InterfaceApplicationSecurityGroupAssociations(namespace string) InterfaceApplicationSecurityGroupAssociationInterface {
	return newInterfaceApplicationSecurityGroupAssociations(c, namespace)
}

func (c *NetworkV1alpha1Client) InterfaceBackendAddressPoolAssociations(namespace string) InterfaceBackendAddressPoolAssociationInterface {
	return newInterfaceBackendAddressPoolAssociations(c, namespace)
}

func (c *NetworkV1alpha1Client) InterfaceNATRuleAssociations(namespace string) InterfaceNATRuleAssociationInterface {
	return newInterfaceNATRuleAssociations(c, namespace)
}

func (c *NetworkV1alpha1Client) InterfaceSecurityGroupAssociations(namespace string) InterfaceSecurityGroupAssociationInterface {
	return newInterfaceSecurityGroupAssociations(c, namespace)
}

func (c *NetworkV1alpha1Client) PacketCaptures(namespace string) PacketCaptureInterface {
	return newPacketCaptures(c, namespace)
}

func (c *NetworkV1alpha1Client) Profiles(namespace string) ProfileInterface {
	return newProfiles(c, namespace)
}

func (c *NetworkV1alpha1Client) SecurityGroups(namespace string) SecurityGroupInterface {
	return newSecurityGroups(c, namespace)
}

func (c *NetworkV1alpha1Client) SecurityRules(namespace string) SecurityRuleInterface {
	return newSecurityRules(c, namespace)
}

func (c *NetworkV1alpha1Client) Watchers(namespace string) WatcherInterface {
	return newWatchers(c, namespace)
}

func (c *NetworkV1alpha1Client) WatcherFlowLogs(namespace string) WatcherFlowLogInterface {
	return newWatcherFlowLogs(c, namespace)
}

// NewForConfig creates a new NetworkV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*NetworkV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &NetworkV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new NetworkV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *NetworkV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new NetworkV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *NetworkV1alpha1Client {
	return &NetworkV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *NetworkV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
