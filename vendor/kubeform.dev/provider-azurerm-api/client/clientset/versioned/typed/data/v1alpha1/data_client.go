/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"
	"kubeform.dev/provider-azurerm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type DataV1alpha1Interface interface {
	RESTClient() rest.Interface
	FactoriesGetter
	FactoryDatasetAzureBlobsGetter
	FactoryDatasetCosmosdbSqlapisGetter
	FactoryDatasetDelimitedTextsGetter
	FactoryDatasetHTTPsGetter
	FactoryDatasetJSONsGetter
	FactoryDatasetMysqlsGetter
	FactoryDatasetParquetsGetter
	FactoryDatasetPostgresqlsGetter
	FactoryDatasetSQLServerTablesGetter
	FactoryDatasetSnowflakesGetter
	FactoryIntegrationRuntimeAzuresGetter
	FactoryIntegrationRuntimeAzureSsisesGetter
	FactoryIntegrationRuntimeManagedsGetter
	FactoryIntegrationRuntimeSelfHostedsGetter
	FactoryLinkedServiceAzureBlobStoragesGetter
	FactoryLinkedServiceAzureDatabricksesGetter
	FactoryLinkedServiceAzureFileStoragesGetter
	FactoryLinkedServiceAzureFunctionsGetter
	FactoryLinkedServiceAzureSQLDatabasesGetter
	FactoryLinkedServiceAzureTableStoragesGetter
	FactoryLinkedServiceCosmosdbsGetter
	FactoryLinkedServiceDataLakeStorageGen2sGetter
	FactoryLinkedServiceKeyVaultsGetter
	FactoryLinkedServiceMysqlsGetter
	FactoryLinkedServicePostgresqlsGetter
	FactoryLinkedServiceSQLServersGetter
	FactoryLinkedServiceSftpsGetter
	FactoryLinkedServiceSnowflakesGetter
	FactoryLinkedServiceSynapsesGetter
	FactoryLinkedServiceWebsGetter
	FactoryPipelinesGetter
	FactoryTriggerSchedulesGetter
	LakeAnalyticsAccountsGetter
	LakeAnalyticsFirewallRulesGetter
	LakeStoresGetter
	LakeStoreFilesGetter
	LakeStoreFirewallRulesGetter
	LakeStoreVirtualNetworkRulesGetter
	SharesGetter
	ShareAccountsGetter
	ShareDatasetBlobStoragesGetter
	ShareDatasetDataLakeGen1sGetter
	ShareDatasetDataLakeGen2sGetter
	ShareDatasetKustoClustersGetter
	ShareDatasetKustoDatabasesGetter
}

// DataV1alpha1Client is used to interact with features provided by the data.azurerm.kubeform.com group.
type DataV1alpha1Client struct {
	restClient rest.Interface
}

func (c *DataV1alpha1Client) Factories(namespace string) FactoryInterface {
	return newFactories(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetAzureBlobs(namespace string) FactoryDatasetAzureBlobInterface {
	return newFactoryDatasetAzureBlobs(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetCosmosdbSqlapis(namespace string) FactoryDatasetCosmosdbSqlapiInterface {
	return newFactoryDatasetCosmosdbSqlapis(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetDelimitedTexts(namespace string) FactoryDatasetDelimitedTextInterface {
	return newFactoryDatasetDelimitedTexts(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetHTTPs(namespace string) FactoryDatasetHTTPInterface {
	return newFactoryDatasetHTTPs(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetJSONs(namespace string) FactoryDatasetJSONInterface {
	return newFactoryDatasetJSONs(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetMysqls(namespace string) FactoryDatasetMysqlInterface {
	return newFactoryDatasetMysqls(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetParquets(namespace string) FactoryDatasetParquetInterface {
	return newFactoryDatasetParquets(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetPostgresqls(namespace string) FactoryDatasetPostgresqlInterface {
	return newFactoryDatasetPostgresqls(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetSQLServerTables(namespace string) FactoryDatasetSQLServerTableInterface {
	return newFactoryDatasetSQLServerTables(c, namespace)
}

func (c *DataV1alpha1Client) FactoryDatasetSnowflakes(namespace string) FactoryDatasetSnowflakeInterface {
	return newFactoryDatasetSnowflakes(c, namespace)
}

func (c *DataV1alpha1Client) FactoryIntegrationRuntimeAzures(namespace string) FactoryIntegrationRuntimeAzureInterface {
	return newFactoryIntegrationRuntimeAzures(c, namespace)
}

func (c *DataV1alpha1Client) FactoryIntegrationRuntimeAzureSsises(namespace string) FactoryIntegrationRuntimeAzureSsisInterface {
	return newFactoryIntegrationRuntimeAzureSsises(c, namespace)
}

func (c *DataV1alpha1Client) FactoryIntegrationRuntimeManageds(namespace string) FactoryIntegrationRuntimeManagedInterface {
	return newFactoryIntegrationRuntimeManageds(c, namespace)
}

func (c *DataV1alpha1Client) FactoryIntegrationRuntimeSelfHosteds(namespace string) FactoryIntegrationRuntimeSelfHostedInterface {
	return newFactoryIntegrationRuntimeSelfHosteds(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceAzureBlobStorages(namespace string) FactoryLinkedServiceAzureBlobStorageInterface {
	return newFactoryLinkedServiceAzureBlobStorages(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceAzureDatabrickses(namespace string) FactoryLinkedServiceAzureDatabricksInterface {
	return newFactoryLinkedServiceAzureDatabrickses(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceAzureFileStorages(namespace string) FactoryLinkedServiceAzureFileStorageInterface {
	return newFactoryLinkedServiceAzureFileStorages(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceAzureFunctions(namespace string) FactoryLinkedServiceAzureFunctionInterface {
	return newFactoryLinkedServiceAzureFunctions(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceAzureSQLDatabases(namespace string) FactoryLinkedServiceAzureSQLDatabaseInterface {
	return newFactoryLinkedServiceAzureSQLDatabases(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceAzureTableStorages(namespace string) FactoryLinkedServiceAzureTableStorageInterface {
	return newFactoryLinkedServiceAzureTableStorages(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceCosmosdbs(namespace string) FactoryLinkedServiceCosmosdbInterface {
	return newFactoryLinkedServiceCosmosdbs(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceDataLakeStorageGen2s(namespace string) FactoryLinkedServiceDataLakeStorageGen2Interface {
	return newFactoryLinkedServiceDataLakeStorageGen2s(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceKeyVaults(namespace string) FactoryLinkedServiceKeyVaultInterface {
	return newFactoryLinkedServiceKeyVaults(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceMysqls(namespace string) FactoryLinkedServiceMysqlInterface {
	return newFactoryLinkedServiceMysqls(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServicePostgresqls(namespace string) FactoryLinkedServicePostgresqlInterface {
	return newFactoryLinkedServicePostgresqls(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceSQLServers(namespace string) FactoryLinkedServiceSQLServerInterface {
	return newFactoryLinkedServiceSQLServers(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceSftps(namespace string) FactoryLinkedServiceSftpInterface {
	return newFactoryLinkedServiceSftps(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceSnowflakes(namespace string) FactoryLinkedServiceSnowflakeInterface {
	return newFactoryLinkedServiceSnowflakes(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceSynapses(namespace string) FactoryLinkedServiceSynapseInterface {
	return newFactoryLinkedServiceSynapses(c, namespace)
}

func (c *DataV1alpha1Client) FactoryLinkedServiceWebs(namespace string) FactoryLinkedServiceWebInterface {
	return newFactoryLinkedServiceWebs(c, namespace)
}

func (c *DataV1alpha1Client) FactoryPipelines(namespace string) FactoryPipelineInterface {
	return newFactoryPipelines(c, namespace)
}

func (c *DataV1alpha1Client) FactoryTriggerSchedules(namespace string) FactoryTriggerScheduleInterface {
	return newFactoryTriggerSchedules(c, namespace)
}

func (c *DataV1alpha1Client) LakeAnalyticsAccounts(namespace string) LakeAnalyticsAccountInterface {
	return newLakeAnalyticsAccounts(c, namespace)
}

func (c *DataV1alpha1Client) LakeAnalyticsFirewallRules(namespace string) LakeAnalyticsFirewallRuleInterface {
	return newLakeAnalyticsFirewallRules(c, namespace)
}

func (c *DataV1alpha1Client) LakeStores(namespace string) LakeStoreInterface {
	return newLakeStores(c, namespace)
}

func (c *DataV1alpha1Client) LakeStoreFiles(namespace string) LakeStoreFileInterface {
	return newLakeStoreFiles(c, namespace)
}

func (c *DataV1alpha1Client) LakeStoreFirewallRules(namespace string) LakeStoreFirewallRuleInterface {
	return newLakeStoreFirewallRules(c, namespace)
}

func (c *DataV1alpha1Client) LakeStoreVirtualNetworkRules(namespace string) LakeStoreVirtualNetworkRuleInterface {
	return newLakeStoreVirtualNetworkRules(c, namespace)
}

func (c *DataV1alpha1Client) Shares(namespace string) ShareInterface {
	return newShares(c, namespace)
}

func (c *DataV1alpha1Client) ShareAccounts(namespace string) ShareAccountInterface {
	return newShareAccounts(c, namespace)
}

func (c *DataV1alpha1Client) ShareDatasetBlobStorages(namespace string) ShareDatasetBlobStorageInterface {
	return newShareDatasetBlobStorages(c, namespace)
}

func (c *DataV1alpha1Client) ShareDatasetDataLakeGen1s(namespace string) ShareDatasetDataLakeGen1Interface {
	return newShareDatasetDataLakeGen1s(c, namespace)
}

func (c *DataV1alpha1Client) ShareDatasetDataLakeGen2s(namespace string) ShareDatasetDataLakeGen2Interface {
	return newShareDatasetDataLakeGen2s(c, namespace)
}

func (c *DataV1alpha1Client) ShareDatasetKustoClusters(namespace string) ShareDatasetKustoClusterInterface {
	return newShareDatasetKustoClusters(c, namespace)
}

func (c *DataV1alpha1Client) ShareDatasetKustoDatabases(namespace string) ShareDatasetKustoDatabaseInterface {
	return newShareDatasetKustoDatabases(c, namespace)
}

// NewForConfig creates a new DataV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*DataV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &DataV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new DataV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *DataV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new DataV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *DataV1alpha1Client {
	return &DataV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *DataV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
