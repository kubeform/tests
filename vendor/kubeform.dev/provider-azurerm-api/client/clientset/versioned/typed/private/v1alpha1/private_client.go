/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/private/v1alpha1"
	"kubeform.dev/provider-azurerm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type PrivateV1alpha1Interface interface {
	RESTClient() rest.Interface
	DnsARecordsGetter
	DnsAaaaRecordsGetter
	DnsCnameRecordsGetter
	DnsMxRecordsGetter
	DnsPtrRecordsGetter
	DnsSrvRecordsGetter
	DnsTxtRecordsGetter
	DnsZonesGetter
	DnsZoneVirtualNetworkLinksGetter
	EndpointsGetter
	LinkServicesGetter
}

// PrivateV1alpha1Client is used to interact with features provided by the private.azurerm.kubeform.com group.
type PrivateV1alpha1Client struct {
	restClient rest.Interface
}

func (c *PrivateV1alpha1Client) DnsARecords(namespace string) DnsARecordInterface {
	return newDnsARecords(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsAaaaRecords(namespace string) DnsAaaaRecordInterface {
	return newDnsAaaaRecords(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsCnameRecords(namespace string) DnsCnameRecordInterface {
	return newDnsCnameRecords(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsMxRecords(namespace string) DnsMxRecordInterface {
	return newDnsMxRecords(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsPtrRecords(namespace string) DnsPtrRecordInterface {
	return newDnsPtrRecords(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsSrvRecords(namespace string) DnsSrvRecordInterface {
	return newDnsSrvRecords(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsTxtRecords(namespace string) DnsTxtRecordInterface {
	return newDnsTxtRecords(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsZones(namespace string) DnsZoneInterface {
	return newDnsZones(c, namespace)
}

func (c *PrivateV1alpha1Client) DnsZoneVirtualNetworkLinks(namespace string) DnsZoneVirtualNetworkLinkInterface {
	return newDnsZoneVirtualNetworkLinks(c, namespace)
}

func (c *PrivateV1alpha1Client) Endpoints(namespace string) EndpointInterface {
	return newEndpoints(c, namespace)
}

func (c *PrivateV1alpha1Client) LinkServices(namespace string) LinkServiceInterface {
	return newLinkServices(c, namespace)
}

// NewForConfig creates a new PrivateV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*PrivateV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &PrivateV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new PrivateV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *PrivateV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new PrivateV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *PrivateV1alpha1Client {
	return &PrivateV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *PrivateV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
