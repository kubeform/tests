/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"
	"kubeform.dev/provider-azurerm-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type StorageV1alpha1Interface interface {
	RESTClient() rest.Interface
	AccountsGetter
	AccountCustomerManagedKeysGetter
	AccountNetworkRulesesGetter
	BlobsGetter
	BlobInventoryPoliciesGetter
	ContainersGetter
	DataLakeGen2FilesystemsGetter
	DataLakeGen2PathsGetter
	EncryptionScopesGetter
	ManagementPoliciesGetter
	QueuesGetter
	SharesGetter
	ShareDirectoriesGetter
	ShareFilesGetter
	SyncsGetter
	SyncCloudEndpointsGetter
	SyncGroupsGetter
	TablesGetter
	TableEntitiesGetter
}

// StorageV1alpha1Client is used to interact with features provided by the storage.azurerm.kubeform.com group.
type StorageV1alpha1Client struct {
	restClient rest.Interface
}

func (c *StorageV1alpha1Client) Accounts(namespace string) AccountInterface {
	return newAccounts(c, namespace)
}

func (c *StorageV1alpha1Client) AccountCustomerManagedKeys(namespace string) AccountCustomerManagedKeyInterface {
	return newAccountCustomerManagedKeys(c, namespace)
}

func (c *StorageV1alpha1Client) AccountNetworkRuleses(namespace string) AccountNetworkRulesInterface {
	return newAccountNetworkRuleses(c, namespace)
}

func (c *StorageV1alpha1Client) Blobs(namespace string) BlobInterface {
	return newBlobs(c, namespace)
}

func (c *StorageV1alpha1Client) BlobInventoryPolicies(namespace string) BlobInventoryPolicyInterface {
	return newBlobInventoryPolicies(c, namespace)
}

func (c *StorageV1alpha1Client) Containers(namespace string) ContainerInterface {
	return newContainers(c, namespace)
}

func (c *StorageV1alpha1Client) DataLakeGen2Filesystems(namespace string) DataLakeGen2FilesystemInterface {
	return newDataLakeGen2Filesystems(c, namespace)
}

func (c *StorageV1alpha1Client) DataLakeGen2Paths(namespace string) DataLakeGen2PathInterface {
	return newDataLakeGen2Paths(c, namespace)
}

func (c *StorageV1alpha1Client) EncryptionScopes(namespace string) EncryptionScopeInterface {
	return newEncryptionScopes(c, namespace)
}

func (c *StorageV1alpha1Client) ManagementPolicies(namespace string) ManagementPolicyInterface {
	return newManagementPolicies(c, namespace)
}

func (c *StorageV1alpha1Client) Queues(namespace string) QueueInterface {
	return newQueues(c, namespace)
}

func (c *StorageV1alpha1Client) Shares(namespace string) ShareInterface {
	return newShares(c, namespace)
}

func (c *StorageV1alpha1Client) ShareDirectories(namespace string) ShareDirectoryInterface {
	return newShareDirectories(c, namespace)
}

func (c *StorageV1alpha1Client) ShareFiles(namespace string) ShareFileInterface {
	return newShareFiles(c, namespace)
}

func (c *StorageV1alpha1Client) Syncs(namespace string) SyncInterface {
	return newSyncs(c, namespace)
}

func (c *StorageV1alpha1Client) SyncCloudEndpoints(namespace string) SyncCloudEndpointInterface {
	return newSyncCloudEndpoints(c, namespace)
}

func (c *StorageV1alpha1Client) SyncGroups(namespace string) SyncGroupInterface {
	return newSyncGroups(c, namespace)
}

func (c *StorageV1alpha1Client) Tables(namespace string) TableInterface {
	return newTables(c, namespace)
}

func (c *StorageV1alpha1Client) TableEntities(namespace string) TableEntityInterface {
	return newTableEntities(c, namespace)
}

// NewForConfig creates a new StorageV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*StorageV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &StorageV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new StorageV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *StorageV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new StorageV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *StorageV1alpha1Client {
	return &StorageV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *StorageV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
