/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	advancedv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/advanced/v1alpha1"
	analysisv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/analysis/v1alpha1"
	apimanagementv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/apimanagement/v1alpha1"
	appv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/app/v1alpha1"
	applicationv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/application/v1alpha1"
	attestationv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/attestation/v1alpha1"
	automationv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/automation/v1alpha1"
	availabilityv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/availability/v1alpha1"
	backupv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/backup/v1alpha1"
	bastionv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/bastion/v1alpha1"
	batchv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/batch/v1alpha1"
	blueprintv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/blueprint/v1alpha1"
	botv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/bot/v1alpha1"
	cdnv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/cdn/v1alpha1"
	cognitivev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/cognitive/v1alpha1"
	communicationv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/communication/v1alpha1"
	consumptionv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/consumption/v1alpha1"
	containerv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/container/v1alpha1"
	cosmosdbv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/cosmosdb/v1alpha1"
	costv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/cost/v1alpha1"
	customv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/custom/v1alpha1"
	dashboardv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/dashboard/v1alpha1"
	datav1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/data/v1alpha1"
	databasev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/database/v1alpha1"
	databoxv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/databox/v1alpha1"
	databricksv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/databricks/v1alpha1"
	dedicatedhardwarev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/dedicatedhardware/v1alpha1"
	dedicatedhostv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/dedicatedhost/v1alpha1"
	devspacev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/devspace/v1alpha1"
	devtestv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/devtest/v1alpha1"
	digitalv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/digital/v1alpha1"
	diskv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/disk/v1alpha1"
	dnsv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/dns/v1alpha1"
	eventgridv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/eventgrid/v1alpha1"
	eventhubv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/eventhub/v1alpha1"
	expressroutev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/expressroute/v1alpha1"
	firewallv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/firewall/v1alpha1"
	frontdoorv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/frontdoor/v1alpha1"
	functionv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/function/v1alpha1"
	hdinsightv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/hdinsight/v1alpha1"
	healthbotv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/healthbot/v1alpha1"
	healthcarev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/healthcare/v1alpha1"
	hpcv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/hpc/v1alpha1"
	imagev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/image/v1alpha1"
	integrationv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/integration/v1alpha1"
	iotcentralv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/iotcentral/v1alpha1"
	iothubv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/iothub/v1alpha1"
	iotsecurityv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/iotsecurity/v1alpha1"
	iottimev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/iottime/v1alpha1"
	ipv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/ip/v1alpha1"
	keyvaultv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/keyvault/v1alpha1"
	kubernetesclusterv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/kubernetescluster/v1alpha1"
	kustov1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/kusto/v1alpha1"
	lbv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/lb/v1alpha1"
	lighthousev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/lighthouse/v1alpha1"
	linuxv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/linux/v1alpha1"
	localv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/local/v1alpha1"
	loganalyticsv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/loganalytics/v1alpha1"
	logicappv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/logicapp/v1alpha1"
	machinev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/machine/v1alpha1"
	maintenancev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/maintenance/v1alpha1"
	managedv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/managed/v1alpha1"
	managementv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/management/v1alpha1"
	mapsv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/maps/v1alpha1"
	mariadbv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/mariadb/v1alpha1"
	marketplacev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/marketplace/v1alpha1"
	mediav1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/media/v1alpha1"
	monitorv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/monitor/v1alpha1"
	mssqlv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/mssql/v1alpha1"
	mysqlv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/mysql/v1alpha1"
	natv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/nat/v1alpha1"
	netappv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/netapp/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/network/v1alpha1"
	notificationhubv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/notificationhub/v1alpha1"
	orchestratedv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/orchestrated/v1alpha1"
	packetv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/packet/v1alpha1"
	pointv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/point/v1alpha1"
	policyv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/policy/v1alpha1"
	postgresqlv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/postgresql/v1alpha1"
	powerbiv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/powerbi/v1alpha1"
	privatev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/private/v1alpha1"
	proximityv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/proximity/v1alpha1"
	publicipv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/publicip/v1alpha1"
	purviewv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/purview/v1alpha1"
	recoveryv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/recovery/v1alpha1"
	redisv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/redis/v1alpha1"
	relayv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/relay/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/resource/v1alpha1"
	rolev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/role/v1alpha1"
	routev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/route/v1alpha1"
	searchv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/search/v1alpha1"
	securityv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/security/v1alpha1"
	sentinelv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/sentinel/v1alpha1"
	servicev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/service/v1alpha1"
	servicebusv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/servicebus/v1alpha1"
	sharedimagev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/sharedimage/v1alpha1"
	signalrv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/signalr/v1alpha1"
	siterecoveryv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/siterecovery/v1alpha1"
	snapshotv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/snapshot/v1alpha1"
	spatialv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/spatial/v1alpha1"
	springv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/spring/v1alpha1"
	sqlv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/sql/v1alpha1"
	sshv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/ssh/v1alpha1"
	stackv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/stack/v1alpha1"
	staticv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/static/v1alpha1"
	storagev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/storage/v1alpha1"
	streamv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/stream/v1alpha1"
	subnetv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/subnet/v1alpha1"
	subscriptionv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/subscription/v1alpha1"
	synapsev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/synapse/v1alpha1"
	templatev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/template/v1alpha1"
	tenantv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/tenant/v1alpha1"
	trafficmanagerv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/trafficmanager/v1alpha1"
	userv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/user/v1alpha1"
	virtualv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/virtual/v1alpha1"
	vmwarev1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/vmware/v1alpha1"
	vpnv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/vpn/v1alpha1"
	webv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/web/v1alpha1"
	windowsv1alpha1 "kubeform.dev/provider-azurerm-api/client/clientset/versioned/typed/windows/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AdvancedV1alpha1() advancedv1alpha1.AdvancedV1alpha1Interface
	AnalysisV1alpha1() analysisv1alpha1.AnalysisV1alpha1Interface
	ApimanagementV1alpha1() apimanagementv1alpha1.ApimanagementV1alpha1Interface
	AppV1alpha1() appv1alpha1.AppV1alpha1Interface
	ApplicationV1alpha1() applicationv1alpha1.ApplicationV1alpha1Interface
	AttestationV1alpha1() attestationv1alpha1.AttestationV1alpha1Interface
	AutomationV1alpha1() automationv1alpha1.AutomationV1alpha1Interface
	AvailabilityV1alpha1() availabilityv1alpha1.AvailabilityV1alpha1Interface
	BackupV1alpha1() backupv1alpha1.BackupV1alpha1Interface
	BastionV1alpha1() bastionv1alpha1.BastionV1alpha1Interface
	BatchV1alpha1() batchv1alpha1.BatchV1alpha1Interface
	BlueprintV1alpha1() blueprintv1alpha1.BlueprintV1alpha1Interface
	BotV1alpha1() botv1alpha1.BotV1alpha1Interface
	CdnV1alpha1() cdnv1alpha1.CdnV1alpha1Interface
	CognitiveV1alpha1() cognitivev1alpha1.CognitiveV1alpha1Interface
	CommunicationV1alpha1() communicationv1alpha1.CommunicationV1alpha1Interface
	ConsumptionV1alpha1() consumptionv1alpha1.ConsumptionV1alpha1Interface
	ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface
	CosmosdbV1alpha1() cosmosdbv1alpha1.CosmosdbV1alpha1Interface
	CostV1alpha1() costv1alpha1.CostV1alpha1Interface
	CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface
	DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface
	DataV1alpha1() datav1alpha1.DataV1alpha1Interface
	DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface
	DataboxV1alpha1() databoxv1alpha1.DataboxV1alpha1Interface
	DatabricksV1alpha1() databricksv1alpha1.DatabricksV1alpha1Interface
	DedicatedhardwareV1alpha1() dedicatedhardwarev1alpha1.DedicatedhardwareV1alpha1Interface
	DedicatedhostV1alpha1() dedicatedhostv1alpha1.DedicatedhostV1alpha1Interface
	DevspaceV1alpha1() devspacev1alpha1.DevspaceV1alpha1Interface
	DevtestV1alpha1() devtestv1alpha1.DevtestV1alpha1Interface
	DigitalV1alpha1() digitalv1alpha1.DigitalV1alpha1Interface
	DiskV1alpha1() diskv1alpha1.DiskV1alpha1Interface
	DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface
	EventgridV1alpha1() eventgridv1alpha1.EventgridV1alpha1Interface
	EventhubV1alpha1() eventhubv1alpha1.EventhubV1alpha1Interface
	ExpressrouteV1alpha1() expressroutev1alpha1.ExpressrouteV1alpha1Interface
	FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface
	FrontdoorV1alpha1() frontdoorv1alpha1.FrontdoorV1alpha1Interface
	FunctionV1alpha1() functionv1alpha1.FunctionV1alpha1Interface
	HdinsightV1alpha1() hdinsightv1alpha1.HdinsightV1alpha1Interface
	HealthbotV1alpha1() healthbotv1alpha1.HealthbotV1alpha1Interface
	HealthcareV1alpha1() healthcarev1alpha1.HealthcareV1alpha1Interface
	HpcV1alpha1() hpcv1alpha1.HpcV1alpha1Interface
	ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface
	IntegrationV1alpha1() integrationv1alpha1.IntegrationV1alpha1Interface
	IotcentralV1alpha1() iotcentralv1alpha1.IotcentralV1alpha1Interface
	IothubV1alpha1() iothubv1alpha1.IothubV1alpha1Interface
	IotsecurityV1alpha1() iotsecurityv1alpha1.IotsecurityV1alpha1Interface
	IottimeV1alpha1() iottimev1alpha1.IottimeV1alpha1Interface
	IpV1alpha1() ipv1alpha1.IpV1alpha1Interface
	KeyvaultV1alpha1() keyvaultv1alpha1.KeyvaultV1alpha1Interface
	KubernetesclusterV1alpha1() kubernetesclusterv1alpha1.KubernetesclusterV1alpha1Interface
	KustoV1alpha1() kustov1alpha1.KustoV1alpha1Interface
	LbV1alpha1() lbv1alpha1.LbV1alpha1Interface
	LighthouseV1alpha1() lighthousev1alpha1.LighthouseV1alpha1Interface
	LinuxV1alpha1() linuxv1alpha1.LinuxV1alpha1Interface
	LocalV1alpha1() localv1alpha1.LocalV1alpha1Interface
	LoganalyticsV1alpha1() loganalyticsv1alpha1.LoganalyticsV1alpha1Interface
	LogicappV1alpha1() logicappv1alpha1.LogicappV1alpha1Interface
	MachineV1alpha1() machinev1alpha1.MachineV1alpha1Interface
	MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface
	ManagedV1alpha1() managedv1alpha1.ManagedV1alpha1Interface
	ManagementV1alpha1() managementv1alpha1.ManagementV1alpha1Interface
	MapsV1alpha1() mapsv1alpha1.MapsV1alpha1Interface
	MariadbV1alpha1() mariadbv1alpha1.MariadbV1alpha1Interface
	MarketplaceV1alpha1() marketplacev1alpha1.MarketplaceV1alpha1Interface
	MediaV1alpha1() mediav1alpha1.MediaV1alpha1Interface
	MonitorV1alpha1() monitorv1alpha1.MonitorV1alpha1Interface
	MssqlV1alpha1() mssqlv1alpha1.MssqlV1alpha1Interface
	MysqlV1alpha1() mysqlv1alpha1.MysqlV1alpha1Interface
	NatV1alpha1() natv1alpha1.NatV1alpha1Interface
	NetappV1alpha1() netappv1alpha1.NetappV1alpha1Interface
	NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface
	NotificationhubV1alpha1() notificationhubv1alpha1.NotificationhubV1alpha1Interface
	OrchestratedV1alpha1() orchestratedv1alpha1.OrchestratedV1alpha1Interface
	PacketV1alpha1() packetv1alpha1.PacketV1alpha1Interface
	PointV1alpha1() pointv1alpha1.PointV1alpha1Interface
	PolicyV1alpha1() policyv1alpha1.PolicyV1alpha1Interface
	PostgresqlV1alpha1() postgresqlv1alpha1.PostgresqlV1alpha1Interface
	PowerbiV1alpha1() powerbiv1alpha1.PowerbiV1alpha1Interface
	PrivateV1alpha1() privatev1alpha1.PrivateV1alpha1Interface
	ProximityV1alpha1() proximityv1alpha1.ProximityV1alpha1Interface
	PublicipV1alpha1() publicipv1alpha1.PublicipV1alpha1Interface
	PurviewV1alpha1() purviewv1alpha1.PurviewV1alpha1Interface
	RecoveryV1alpha1() recoveryv1alpha1.RecoveryV1alpha1Interface
	RedisV1alpha1() redisv1alpha1.RedisV1alpha1Interface
	RelayV1alpha1() relayv1alpha1.RelayV1alpha1Interface
	ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface
	RoleV1alpha1() rolev1alpha1.RoleV1alpha1Interface
	RouteV1alpha1() routev1alpha1.RouteV1alpha1Interface
	SearchV1alpha1() searchv1alpha1.SearchV1alpha1Interface
	SecurityV1alpha1() securityv1alpha1.SecurityV1alpha1Interface
	SentinelV1alpha1() sentinelv1alpha1.SentinelV1alpha1Interface
	ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface
	ServicebusV1alpha1() servicebusv1alpha1.ServicebusV1alpha1Interface
	SharedimageV1alpha1() sharedimagev1alpha1.SharedimageV1alpha1Interface
	SignalrV1alpha1() signalrv1alpha1.SignalrV1alpha1Interface
	SiterecoveryV1alpha1() siterecoveryv1alpha1.SiterecoveryV1alpha1Interface
	SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface
	SpatialV1alpha1() spatialv1alpha1.SpatialV1alpha1Interface
	SpringV1alpha1() springv1alpha1.SpringV1alpha1Interface
	SqlV1alpha1() sqlv1alpha1.SqlV1alpha1Interface
	SshV1alpha1() sshv1alpha1.SshV1alpha1Interface
	StackV1alpha1() stackv1alpha1.StackV1alpha1Interface
	StaticV1alpha1() staticv1alpha1.StaticV1alpha1Interface
	StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface
	StreamV1alpha1() streamv1alpha1.StreamV1alpha1Interface
	SubnetV1alpha1() subnetv1alpha1.SubnetV1alpha1Interface
	SubscriptionV1alpha1() subscriptionv1alpha1.SubscriptionV1alpha1Interface
	SynapseV1alpha1() synapsev1alpha1.SynapseV1alpha1Interface
	TemplateV1alpha1() templatev1alpha1.TemplateV1alpha1Interface
	TenantV1alpha1() tenantv1alpha1.TenantV1alpha1Interface
	TrafficmanagerV1alpha1() trafficmanagerv1alpha1.TrafficmanagerV1alpha1Interface
	UserV1alpha1() userv1alpha1.UserV1alpha1Interface
	VirtualV1alpha1() virtualv1alpha1.VirtualV1alpha1Interface
	VmwareV1alpha1() vmwarev1alpha1.VmwareV1alpha1Interface
	VpnV1alpha1() vpnv1alpha1.VpnV1alpha1Interface
	WebV1alpha1() webv1alpha1.WebV1alpha1Interface
	WindowsV1alpha1() windowsv1alpha1.WindowsV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	advancedV1alpha1          *advancedv1alpha1.AdvancedV1alpha1Client
	analysisV1alpha1          *analysisv1alpha1.AnalysisV1alpha1Client
	apimanagementV1alpha1     *apimanagementv1alpha1.ApimanagementV1alpha1Client
	appV1alpha1               *appv1alpha1.AppV1alpha1Client
	applicationV1alpha1       *applicationv1alpha1.ApplicationV1alpha1Client
	attestationV1alpha1       *attestationv1alpha1.AttestationV1alpha1Client
	automationV1alpha1        *automationv1alpha1.AutomationV1alpha1Client
	availabilityV1alpha1      *availabilityv1alpha1.AvailabilityV1alpha1Client
	backupV1alpha1            *backupv1alpha1.BackupV1alpha1Client
	bastionV1alpha1           *bastionv1alpha1.BastionV1alpha1Client
	batchV1alpha1             *batchv1alpha1.BatchV1alpha1Client
	blueprintV1alpha1         *blueprintv1alpha1.BlueprintV1alpha1Client
	botV1alpha1               *botv1alpha1.BotV1alpha1Client
	cdnV1alpha1               *cdnv1alpha1.CdnV1alpha1Client
	cognitiveV1alpha1         *cognitivev1alpha1.CognitiveV1alpha1Client
	communicationV1alpha1     *communicationv1alpha1.CommunicationV1alpha1Client
	consumptionV1alpha1       *consumptionv1alpha1.ConsumptionV1alpha1Client
	containerV1alpha1         *containerv1alpha1.ContainerV1alpha1Client
	cosmosdbV1alpha1          *cosmosdbv1alpha1.CosmosdbV1alpha1Client
	costV1alpha1              *costv1alpha1.CostV1alpha1Client
	customV1alpha1            *customv1alpha1.CustomV1alpha1Client
	dashboardV1alpha1         *dashboardv1alpha1.DashboardV1alpha1Client
	dataV1alpha1              *datav1alpha1.DataV1alpha1Client
	databaseV1alpha1          *databasev1alpha1.DatabaseV1alpha1Client
	databoxV1alpha1           *databoxv1alpha1.DataboxV1alpha1Client
	databricksV1alpha1        *databricksv1alpha1.DatabricksV1alpha1Client
	dedicatedhardwareV1alpha1 *dedicatedhardwarev1alpha1.DedicatedhardwareV1alpha1Client
	dedicatedhostV1alpha1     *dedicatedhostv1alpha1.DedicatedhostV1alpha1Client
	devspaceV1alpha1          *devspacev1alpha1.DevspaceV1alpha1Client
	devtestV1alpha1           *devtestv1alpha1.DevtestV1alpha1Client
	digitalV1alpha1           *digitalv1alpha1.DigitalV1alpha1Client
	diskV1alpha1              *diskv1alpha1.DiskV1alpha1Client
	dnsV1alpha1               *dnsv1alpha1.DnsV1alpha1Client
	eventgridV1alpha1         *eventgridv1alpha1.EventgridV1alpha1Client
	eventhubV1alpha1          *eventhubv1alpha1.EventhubV1alpha1Client
	expressrouteV1alpha1      *expressroutev1alpha1.ExpressrouteV1alpha1Client
	firewallV1alpha1          *firewallv1alpha1.FirewallV1alpha1Client
	frontdoorV1alpha1         *frontdoorv1alpha1.FrontdoorV1alpha1Client
	functionV1alpha1          *functionv1alpha1.FunctionV1alpha1Client
	hdinsightV1alpha1         *hdinsightv1alpha1.HdinsightV1alpha1Client
	healthbotV1alpha1         *healthbotv1alpha1.HealthbotV1alpha1Client
	healthcareV1alpha1        *healthcarev1alpha1.HealthcareV1alpha1Client
	hpcV1alpha1               *hpcv1alpha1.HpcV1alpha1Client
	imageV1alpha1             *imagev1alpha1.ImageV1alpha1Client
	integrationV1alpha1       *integrationv1alpha1.IntegrationV1alpha1Client
	iotcentralV1alpha1        *iotcentralv1alpha1.IotcentralV1alpha1Client
	iothubV1alpha1            *iothubv1alpha1.IothubV1alpha1Client
	iotsecurityV1alpha1       *iotsecurityv1alpha1.IotsecurityV1alpha1Client
	iottimeV1alpha1           *iottimev1alpha1.IottimeV1alpha1Client
	ipV1alpha1                *ipv1alpha1.IpV1alpha1Client
	keyvaultV1alpha1          *keyvaultv1alpha1.KeyvaultV1alpha1Client
	kubernetesclusterV1alpha1 *kubernetesclusterv1alpha1.KubernetesclusterV1alpha1Client
	kustoV1alpha1             *kustov1alpha1.KustoV1alpha1Client
	lbV1alpha1                *lbv1alpha1.LbV1alpha1Client
	lighthouseV1alpha1        *lighthousev1alpha1.LighthouseV1alpha1Client
	linuxV1alpha1             *linuxv1alpha1.LinuxV1alpha1Client
	localV1alpha1             *localv1alpha1.LocalV1alpha1Client
	loganalyticsV1alpha1      *loganalyticsv1alpha1.LoganalyticsV1alpha1Client
	logicappV1alpha1          *logicappv1alpha1.LogicappV1alpha1Client
	machineV1alpha1           *machinev1alpha1.MachineV1alpha1Client
	maintenanceV1alpha1       *maintenancev1alpha1.MaintenanceV1alpha1Client
	managedV1alpha1           *managedv1alpha1.ManagedV1alpha1Client
	managementV1alpha1        *managementv1alpha1.ManagementV1alpha1Client
	mapsV1alpha1              *mapsv1alpha1.MapsV1alpha1Client
	mariadbV1alpha1           *mariadbv1alpha1.MariadbV1alpha1Client
	marketplaceV1alpha1       *marketplacev1alpha1.MarketplaceV1alpha1Client
	mediaV1alpha1             *mediav1alpha1.MediaV1alpha1Client
	monitorV1alpha1           *monitorv1alpha1.MonitorV1alpha1Client
	mssqlV1alpha1             *mssqlv1alpha1.MssqlV1alpha1Client
	mysqlV1alpha1             *mysqlv1alpha1.MysqlV1alpha1Client
	natV1alpha1               *natv1alpha1.NatV1alpha1Client
	netappV1alpha1            *netappv1alpha1.NetappV1alpha1Client
	networkV1alpha1           *networkv1alpha1.NetworkV1alpha1Client
	notificationhubV1alpha1   *notificationhubv1alpha1.NotificationhubV1alpha1Client
	orchestratedV1alpha1      *orchestratedv1alpha1.OrchestratedV1alpha1Client
	packetV1alpha1            *packetv1alpha1.PacketV1alpha1Client
	pointV1alpha1             *pointv1alpha1.PointV1alpha1Client
	policyV1alpha1            *policyv1alpha1.PolicyV1alpha1Client
	postgresqlV1alpha1        *postgresqlv1alpha1.PostgresqlV1alpha1Client
	powerbiV1alpha1           *powerbiv1alpha1.PowerbiV1alpha1Client
	privateV1alpha1           *privatev1alpha1.PrivateV1alpha1Client
	proximityV1alpha1         *proximityv1alpha1.ProximityV1alpha1Client
	publicipV1alpha1          *publicipv1alpha1.PublicipV1alpha1Client
	purviewV1alpha1           *purviewv1alpha1.PurviewV1alpha1Client
	recoveryV1alpha1          *recoveryv1alpha1.RecoveryV1alpha1Client
	redisV1alpha1             *redisv1alpha1.RedisV1alpha1Client
	relayV1alpha1             *relayv1alpha1.RelayV1alpha1Client
	resourceV1alpha1          *resourcev1alpha1.ResourceV1alpha1Client
	roleV1alpha1              *rolev1alpha1.RoleV1alpha1Client
	routeV1alpha1             *routev1alpha1.RouteV1alpha1Client
	searchV1alpha1            *searchv1alpha1.SearchV1alpha1Client
	securityV1alpha1          *securityv1alpha1.SecurityV1alpha1Client
	sentinelV1alpha1          *sentinelv1alpha1.SentinelV1alpha1Client
	serviceV1alpha1           *servicev1alpha1.ServiceV1alpha1Client
	servicebusV1alpha1        *servicebusv1alpha1.ServicebusV1alpha1Client
	sharedimageV1alpha1       *sharedimagev1alpha1.SharedimageV1alpha1Client
	signalrV1alpha1           *signalrv1alpha1.SignalrV1alpha1Client
	siterecoveryV1alpha1      *siterecoveryv1alpha1.SiterecoveryV1alpha1Client
	snapshotV1alpha1          *snapshotv1alpha1.SnapshotV1alpha1Client
	spatialV1alpha1           *spatialv1alpha1.SpatialV1alpha1Client
	springV1alpha1            *springv1alpha1.SpringV1alpha1Client
	sqlV1alpha1               *sqlv1alpha1.SqlV1alpha1Client
	sshV1alpha1               *sshv1alpha1.SshV1alpha1Client
	stackV1alpha1             *stackv1alpha1.StackV1alpha1Client
	staticV1alpha1            *staticv1alpha1.StaticV1alpha1Client
	storageV1alpha1           *storagev1alpha1.StorageV1alpha1Client
	streamV1alpha1            *streamv1alpha1.StreamV1alpha1Client
	subnetV1alpha1            *subnetv1alpha1.SubnetV1alpha1Client
	subscriptionV1alpha1      *subscriptionv1alpha1.SubscriptionV1alpha1Client
	synapseV1alpha1           *synapsev1alpha1.SynapseV1alpha1Client
	templateV1alpha1          *templatev1alpha1.TemplateV1alpha1Client
	tenantV1alpha1            *tenantv1alpha1.TenantV1alpha1Client
	trafficmanagerV1alpha1    *trafficmanagerv1alpha1.TrafficmanagerV1alpha1Client
	userV1alpha1              *userv1alpha1.UserV1alpha1Client
	virtualV1alpha1           *virtualv1alpha1.VirtualV1alpha1Client
	vmwareV1alpha1            *vmwarev1alpha1.VmwareV1alpha1Client
	vpnV1alpha1               *vpnv1alpha1.VpnV1alpha1Client
	webV1alpha1               *webv1alpha1.WebV1alpha1Client
	windowsV1alpha1           *windowsv1alpha1.WindowsV1alpha1Client
}

// AdvancedV1alpha1 retrieves the AdvancedV1alpha1Client
func (c *Clientset) AdvancedV1alpha1() advancedv1alpha1.AdvancedV1alpha1Interface {
	return c.advancedV1alpha1
}

// AnalysisV1alpha1 retrieves the AnalysisV1alpha1Client
func (c *Clientset) AnalysisV1alpha1() analysisv1alpha1.AnalysisV1alpha1Interface {
	return c.analysisV1alpha1
}

// ApimanagementV1alpha1 retrieves the ApimanagementV1alpha1Client
func (c *Clientset) ApimanagementV1alpha1() apimanagementv1alpha1.ApimanagementV1alpha1Interface {
	return c.apimanagementV1alpha1
}

// AppV1alpha1 retrieves the AppV1alpha1Client
func (c *Clientset) AppV1alpha1() appv1alpha1.AppV1alpha1Interface {
	return c.appV1alpha1
}

// ApplicationV1alpha1 retrieves the ApplicationV1alpha1Client
func (c *Clientset) ApplicationV1alpha1() applicationv1alpha1.ApplicationV1alpha1Interface {
	return c.applicationV1alpha1
}

// AttestationV1alpha1 retrieves the AttestationV1alpha1Client
func (c *Clientset) AttestationV1alpha1() attestationv1alpha1.AttestationV1alpha1Interface {
	return c.attestationV1alpha1
}

// AutomationV1alpha1 retrieves the AutomationV1alpha1Client
func (c *Clientset) AutomationV1alpha1() automationv1alpha1.AutomationV1alpha1Interface {
	return c.automationV1alpha1
}

// AvailabilityV1alpha1 retrieves the AvailabilityV1alpha1Client
func (c *Clientset) AvailabilityV1alpha1() availabilityv1alpha1.AvailabilityV1alpha1Interface {
	return c.availabilityV1alpha1
}

// BackupV1alpha1 retrieves the BackupV1alpha1Client
func (c *Clientset) BackupV1alpha1() backupv1alpha1.BackupV1alpha1Interface {
	return c.backupV1alpha1
}

// BastionV1alpha1 retrieves the BastionV1alpha1Client
func (c *Clientset) BastionV1alpha1() bastionv1alpha1.BastionV1alpha1Interface {
	return c.bastionV1alpha1
}

// BatchV1alpha1 retrieves the BatchV1alpha1Client
func (c *Clientset) BatchV1alpha1() batchv1alpha1.BatchV1alpha1Interface {
	return c.batchV1alpha1
}

// BlueprintV1alpha1 retrieves the BlueprintV1alpha1Client
func (c *Clientset) BlueprintV1alpha1() blueprintv1alpha1.BlueprintV1alpha1Interface {
	return c.blueprintV1alpha1
}

// BotV1alpha1 retrieves the BotV1alpha1Client
func (c *Clientset) BotV1alpha1() botv1alpha1.BotV1alpha1Interface {
	return c.botV1alpha1
}

// CdnV1alpha1 retrieves the CdnV1alpha1Client
func (c *Clientset) CdnV1alpha1() cdnv1alpha1.CdnV1alpha1Interface {
	return c.cdnV1alpha1
}

// CognitiveV1alpha1 retrieves the CognitiveV1alpha1Client
func (c *Clientset) CognitiveV1alpha1() cognitivev1alpha1.CognitiveV1alpha1Interface {
	return c.cognitiveV1alpha1
}

// CommunicationV1alpha1 retrieves the CommunicationV1alpha1Client
func (c *Clientset) CommunicationV1alpha1() communicationv1alpha1.CommunicationV1alpha1Interface {
	return c.communicationV1alpha1
}

// ConsumptionV1alpha1 retrieves the ConsumptionV1alpha1Client
func (c *Clientset) ConsumptionV1alpha1() consumptionv1alpha1.ConsumptionV1alpha1Interface {
	return c.consumptionV1alpha1
}

// ContainerV1alpha1 retrieves the ContainerV1alpha1Client
func (c *Clientset) ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface {
	return c.containerV1alpha1
}

// CosmosdbV1alpha1 retrieves the CosmosdbV1alpha1Client
func (c *Clientset) CosmosdbV1alpha1() cosmosdbv1alpha1.CosmosdbV1alpha1Interface {
	return c.cosmosdbV1alpha1
}

// CostV1alpha1 retrieves the CostV1alpha1Client
func (c *Clientset) CostV1alpha1() costv1alpha1.CostV1alpha1Interface {
	return c.costV1alpha1
}

// CustomV1alpha1 retrieves the CustomV1alpha1Client
func (c *Clientset) CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface {
	return c.customV1alpha1
}

// DashboardV1alpha1 retrieves the DashboardV1alpha1Client
func (c *Clientset) DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface {
	return c.dashboardV1alpha1
}

// DataV1alpha1 retrieves the DataV1alpha1Client
func (c *Clientset) DataV1alpha1() datav1alpha1.DataV1alpha1Interface {
	return c.dataV1alpha1
}

// DatabaseV1alpha1 retrieves the DatabaseV1alpha1Client
func (c *Clientset) DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface {
	return c.databaseV1alpha1
}

// DataboxV1alpha1 retrieves the DataboxV1alpha1Client
func (c *Clientset) DataboxV1alpha1() databoxv1alpha1.DataboxV1alpha1Interface {
	return c.databoxV1alpha1
}

// DatabricksV1alpha1 retrieves the DatabricksV1alpha1Client
func (c *Clientset) DatabricksV1alpha1() databricksv1alpha1.DatabricksV1alpha1Interface {
	return c.databricksV1alpha1
}

// DedicatedhardwareV1alpha1 retrieves the DedicatedhardwareV1alpha1Client
func (c *Clientset) DedicatedhardwareV1alpha1() dedicatedhardwarev1alpha1.DedicatedhardwareV1alpha1Interface {
	return c.dedicatedhardwareV1alpha1
}

// DedicatedhostV1alpha1 retrieves the DedicatedhostV1alpha1Client
func (c *Clientset) DedicatedhostV1alpha1() dedicatedhostv1alpha1.DedicatedhostV1alpha1Interface {
	return c.dedicatedhostV1alpha1
}

// DevspaceV1alpha1 retrieves the DevspaceV1alpha1Client
func (c *Clientset) DevspaceV1alpha1() devspacev1alpha1.DevspaceV1alpha1Interface {
	return c.devspaceV1alpha1
}

// DevtestV1alpha1 retrieves the DevtestV1alpha1Client
func (c *Clientset) DevtestV1alpha1() devtestv1alpha1.DevtestV1alpha1Interface {
	return c.devtestV1alpha1
}

// DigitalV1alpha1 retrieves the DigitalV1alpha1Client
func (c *Clientset) DigitalV1alpha1() digitalv1alpha1.DigitalV1alpha1Interface {
	return c.digitalV1alpha1
}

// DiskV1alpha1 retrieves the DiskV1alpha1Client
func (c *Clientset) DiskV1alpha1() diskv1alpha1.DiskV1alpha1Interface {
	return c.diskV1alpha1
}

// DnsV1alpha1 retrieves the DnsV1alpha1Client
func (c *Clientset) DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface {
	return c.dnsV1alpha1
}

// EventgridV1alpha1 retrieves the EventgridV1alpha1Client
func (c *Clientset) EventgridV1alpha1() eventgridv1alpha1.EventgridV1alpha1Interface {
	return c.eventgridV1alpha1
}

// EventhubV1alpha1 retrieves the EventhubV1alpha1Client
func (c *Clientset) EventhubV1alpha1() eventhubv1alpha1.EventhubV1alpha1Interface {
	return c.eventhubV1alpha1
}

// ExpressrouteV1alpha1 retrieves the ExpressrouteV1alpha1Client
func (c *Clientset) ExpressrouteV1alpha1() expressroutev1alpha1.ExpressrouteV1alpha1Interface {
	return c.expressrouteV1alpha1
}

// FirewallV1alpha1 retrieves the FirewallV1alpha1Client
func (c *Clientset) FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface {
	return c.firewallV1alpha1
}

// FrontdoorV1alpha1 retrieves the FrontdoorV1alpha1Client
func (c *Clientset) FrontdoorV1alpha1() frontdoorv1alpha1.FrontdoorV1alpha1Interface {
	return c.frontdoorV1alpha1
}

// FunctionV1alpha1 retrieves the FunctionV1alpha1Client
func (c *Clientset) FunctionV1alpha1() functionv1alpha1.FunctionV1alpha1Interface {
	return c.functionV1alpha1
}

// HdinsightV1alpha1 retrieves the HdinsightV1alpha1Client
func (c *Clientset) HdinsightV1alpha1() hdinsightv1alpha1.HdinsightV1alpha1Interface {
	return c.hdinsightV1alpha1
}

// HealthbotV1alpha1 retrieves the HealthbotV1alpha1Client
func (c *Clientset) HealthbotV1alpha1() healthbotv1alpha1.HealthbotV1alpha1Interface {
	return c.healthbotV1alpha1
}

// HealthcareV1alpha1 retrieves the HealthcareV1alpha1Client
func (c *Clientset) HealthcareV1alpha1() healthcarev1alpha1.HealthcareV1alpha1Interface {
	return c.healthcareV1alpha1
}

// HpcV1alpha1 retrieves the HpcV1alpha1Client
func (c *Clientset) HpcV1alpha1() hpcv1alpha1.HpcV1alpha1Interface {
	return c.hpcV1alpha1
}

// ImageV1alpha1 retrieves the ImageV1alpha1Client
func (c *Clientset) ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface {
	return c.imageV1alpha1
}

// IntegrationV1alpha1 retrieves the IntegrationV1alpha1Client
func (c *Clientset) IntegrationV1alpha1() integrationv1alpha1.IntegrationV1alpha1Interface {
	return c.integrationV1alpha1
}

// IotcentralV1alpha1 retrieves the IotcentralV1alpha1Client
func (c *Clientset) IotcentralV1alpha1() iotcentralv1alpha1.IotcentralV1alpha1Interface {
	return c.iotcentralV1alpha1
}

// IothubV1alpha1 retrieves the IothubV1alpha1Client
func (c *Clientset) IothubV1alpha1() iothubv1alpha1.IothubV1alpha1Interface {
	return c.iothubV1alpha1
}

// IotsecurityV1alpha1 retrieves the IotsecurityV1alpha1Client
func (c *Clientset) IotsecurityV1alpha1() iotsecurityv1alpha1.IotsecurityV1alpha1Interface {
	return c.iotsecurityV1alpha1
}

// IottimeV1alpha1 retrieves the IottimeV1alpha1Client
func (c *Clientset) IottimeV1alpha1() iottimev1alpha1.IottimeV1alpha1Interface {
	return c.iottimeV1alpha1
}

// IpV1alpha1 retrieves the IpV1alpha1Client
func (c *Clientset) IpV1alpha1() ipv1alpha1.IpV1alpha1Interface {
	return c.ipV1alpha1
}

// KeyvaultV1alpha1 retrieves the KeyvaultV1alpha1Client
func (c *Clientset) KeyvaultV1alpha1() keyvaultv1alpha1.KeyvaultV1alpha1Interface {
	return c.keyvaultV1alpha1
}

// KubernetesclusterV1alpha1 retrieves the KubernetesclusterV1alpha1Client
func (c *Clientset) KubernetesclusterV1alpha1() kubernetesclusterv1alpha1.KubernetesclusterV1alpha1Interface {
	return c.kubernetesclusterV1alpha1
}

// KustoV1alpha1 retrieves the KustoV1alpha1Client
func (c *Clientset) KustoV1alpha1() kustov1alpha1.KustoV1alpha1Interface {
	return c.kustoV1alpha1
}

// LbV1alpha1 retrieves the LbV1alpha1Client
func (c *Clientset) LbV1alpha1() lbv1alpha1.LbV1alpha1Interface {
	return c.lbV1alpha1
}

// LighthouseV1alpha1 retrieves the LighthouseV1alpha1Client
func (c *Clientset) LighthouseV1alpha1() lighthousev1alpha1.LighthouseV1alpha1Interface {
	return c.lighthouseV1alpha1
}

// LinuxV1alpha1 retrieves the LinuxV1alpha1Client
func (c *Clientset) LinuxV1alpha1() linuxv1alpha1.LinuxV1alpha1Interface {
	return c.linuxV1alpha1
}

// LocalV1alpha1 retrieves the LocalV1alpha1Client
func (c *Clientset) LocalV1alpha1() localv1alpha1.LocalV1alpha1Interface {
	return c.localV1alpha1
}

// LoganalyticsV1alpha1 retrieves the LoganalyticsV1alpha1Client
func (c *Clientset) LoganalyticsV1alpha1() loganalyticsv1alpha1.LoganalyticsV1alpha1Interface {
	return c.loganalyticsV1alpha1
}

// LogicappV1alpha1 retrieves the LogicappV1alpha1Client
func (c *Clientset) LogicappV1alpha1() logicappv1alpha1.LogicappV1alpha1Interface {
	return c.logicappV1alpha1
}

// MachineV1alpha1 retrieves the MachineV1alpha1Client
func (c *Clientset) MachineV1alpha1() machinev1alpha1.MachineV1alpha1Interface {
	return c.machineV1alpha1
}

// MaintenanceV1alpha1 retrieves the MaintenanceV1alpha1Client
func (c *Clientset) MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface {
	return c.maintenanceV1alpha1
}

// ManagedV1alpha1 retrieves the ManagedV1alpha1Client
func (c *Clientset) ManagedV1alpha1() managedv1alpha1.ManagedV1alpha1Interface {
	return c.managedV1alpha1
}

// ManagementV1alpha1 retrieves the ManagementV1alpha1Client
func (c *Clientset) ManagementV1alpha1() managementv1alpha1.ManagementV1alpha1Interface {
	return c.managementV1alpha1
}

// MapsV1alpha1 retrieves the MapsV1alpha1Client
func (c *Clientset) MapsV1alpha1() mapsv1alpha1.MapsV1alpha1Interface {
	return c.mapsV1alpha1
}

// MariadbV1alpha1 retrieves the MariadbV1alpha1Client
func (c *Clientset) MariadbV1alpha1() mariadbv1alpha1.MariadbV1alpha1Interface {
	return c.mariadbV1alpha1
}

// MarketplaceV1alpha1 retrieves the MarketplaceV1alpha1Client
func (c *Clientset) MarketplaceV1alpha1() marketplacev1alpha1.MarketplaceV1alpha1Interface {
	return c.marketplaceV1alpha1
}

// MediaV1alpha1 retrieves the MediaV1alpha1Client
func (c *Clientset) MediaV1alpha1() mediav1alpha1.MediaV1alpha1Interface {
	return c.mediaV1alpha1
}

// MonitorV1alpha1 retrieves the MonitorV1alpha1Client
func (c *Clientset) MonitorV1alpha1() monitorv1alpha1.MonitorV1alpha1Interface {
	return c.monitorV1alpha1
}

// MssqlV1alpha1 retrieves the MssqlV1alpha1Client
func (c *Clientset) MssqlV1alpha1() mssqlv1alpha1.MssqlV1alpha1Interface {
	return c.mssqlV1alpha1
}

// MysqlV1alpha1 retrieves the MysqlV1alpha1Client
func (c *Clientset) MysqlV1alpha1() mysqlv1alpha1.MysqlV1alpha1Interface {
	return c.mysqlV1alpha1
}

// NatV1alpha1 retrieves the NatV1alpha1Client
func (c *Clientset) NatV1alpha1() natv1alpha1.NatV1alpha1Interface {
	return c.natV1alpha1
}

// NetappV1alpha1 retrieves the NetappV1alpha1Client
func (c *Clientset) NetappV1alpha1() netappv1alpha1.NetappV1alpha1Interface {
	return c.netappV1alpha1
}

// NetworkV1alpha1 retrieves the NetworkV1alpha1Client
func (c *Clientset) NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface {
	return c.networkV1alpha1
}

// NotificationhubV1alpha1 retrieves the NotificationhubV1alpha1Client
func (c *Clientset) NotificationhubV1alpha1() notificationhubv1alpha1.NotificationhubV1alpha1Interface {
	return c.notificationhubV1alpha1
}

// OrchestratedV1alpha1 retrieves the OrchestratedV1alpha1Client
func (c *Clientset) OrchestratedV1alpha1() orchestratedv1alpha1.OrchestratedV1alpha1Interface {
	return c.orchestratedV1alpha1
}

// PacketV1alpha1 retrieves the PacketV1alpha1Client
func (c *Clientset) PacketV1alpha1() packetv1alpha1.PacketV1alpha1Interface {
	return c.packetV1alpha1
}

// PointV1alpha1 retrieves the PointV1alpha1Client
func (c *Clientset) PointV1alpha1() pointv1alpha1.PointV1alpha1Interface {
	return c.pointV1alpha1
}

// PolicyV1alpha1 retrieves the PolicyV1alpha1Client
func (c *Clientset) PolicyV1alpha1() policyv1alpha1.PolicyV1alpha1Interface {
	return c.policyV1alpha1
}

// PostgresqlV1alpha1 retrieves the PostgresqlV1alpha1Client
func (c *Clientset) PostgresqlV1alpha1() postgresqlv1alpha1.PostgresqlV1alpha1Interface {
	return c.postgresqlV1alpha1
}

// PowerbiV1alpha1 retrieves the PowerbiV1alpha1Client
func (c *Clientset) PowerbiV1alpha1() powerbiv1alpha1.PowerbiV1alpha1Interface {
	return c.powerbiV1alpha1
}

// PrivateV1alpha1 retrieves the PrivateV1alpha1Client
func (c *Clientset) PrivateV1alpha1() privatev1alpha1.PrivateV1alpha1Interface {
	return c.privateV1alpha1
}

// ProximityV1alpha1 retrieves the ProximityV1alpha1Client
func (c *Clientset) ProximityV1alpha1() proximityv1alpha1.ProximityV1alpha1Interface {
	return c.proximityV1alpha1
}

// PublicipV1alpha1 retrieves the PublicipV1alpha1Client
func (c *Clientset) PublicipV1alpha1() publicipv1alpha1.PublicipV1alpha1Interface {
	return c.publicipV1alpha1
}

// PurviewV1alpha1 retrieves the PurviewV1alpha1Client
func (c *Clientset) PurviewV1alpha1() purviewv1alpha1.PurviewV1alpha1Interface {
	return c.purviewV1alpha1
}

// RecoveryV1alpha1 retrieves the RecoveryV1alpha1Client
func (c *Clientset) RecoveryV1alpha1() recoveryv1alpha1.RecoveryV1alpha1Interface {
	return c.recoveryV1alpha1
}

// RedisV1alpha1 retrieves the RedisV1alpha1Client
func (c *Clientset) RedisV1alpha1() redisv1alpha1.RedisV1alpha1Interface {
	return c.redisV1alpha1
}

// RelayV1alpha1 retrieves the RelayV1alpha1Client
func (c *Clientset) RelayV1alpha1() relayv1alpha1.RelayV1alpha1Interface {
	return c.relayV1alpha1
}

// ResourceV1alpha1 retrieves the ResourceV1alpha1Client
func (c *Clientset) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	return c.resourceV1alpha1
}

// RoleV1alpha1 retrieves the RoleV1alpha1Client
func (c *Clientset) RoleV1alpha1() rolev1alpha1.RoleV1alpha1Interface {
	return c.roleV1alpha1
}

// RouteV1alpha1 retrieves the RouteV1alpha1Client
func (c *Clientset) RouteV1alpha1() routev1alpha1.RouteV1alpha1Interface {
	return c.routeV1alpha1
}

// SearchV1alpha1 retrieves the SearchV1alpha1Client
func (c *Clientset) SearchV1alpha1() searchv1alpha1.SearchV1alpha1Interface {
	return c.searchV1alpha1
}

// SecurityV1alpha1 retrieves the SecurityV1alpha1Client
func (c *Clientset) SecurityV1alpha1() securityv1alpha1.SecurityV1alpha1Interface {
	return c.securityV1alpha1
}

// SentinelV1alpha1 retrieves the SentinelV1alpha1Client
func (c *Clientset) SentinelV1alpha1() sentinelv1alpha1.SentinelV1alpha1Interface {
	return c.sentinelV1alpha1
}

// ServiceV1alpha1 retrieves the ServiceV1alpha1Client
func (c *Clientset) ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface {
	return c.serviceV1alpha1
}

// ServicebusV1alpha1 retrieves the ServicebusV1alpha1Client
func (c *Clientset) ServicebusV1alpha1() servicebusv1alpha1.ServicebusV1alpha1Interface {
	return c.servicebusV1alpha1
}

// SharedimageV1alpha1 retrieves the SharedimageV1alpha1Client
func (c *Clientset) SharedimageV1alpha1() sharedimagev1alpha1.SharedimageV1alpha1Interface {
	return c.sharedimageV1alpha1
}

// SignalrV1alpha1 retrieves the SignalrV1alpha1Client
func (c *Clientset) SignalrV1alpha1() signalrv1alpha1.SignalrV1alpha1Interface {
	return c.signalrV1alpha1
}

// SiterecoveryV1alpha1 retrieves the SiterecoveryV1alpha1Client
func (c *Clientset) SiterecoveryV1alpha1() siterecoveryv1alpha1.SiterecoveryV1alpha1Interface {
	return c.siterecoveryV1alpha1
}

// SnapshotV1alpha1 retrieves the SnapshotV1alpha1Client
func (c *Clientset) SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface {
	return c.snapshotV1alpha1
}

// SpatialV1alpha1 retrieves the SpatialV1alpha1Client
func (c *Clientset) SpatialV1alpha1() spatialv1alpha1.SpatialV1alpha1Interface {
	return c.spatialV1alpha1
}

// SpringV1alpha1 retrieves the SpringV1alpha1Client
func (c *Clientset) SpringV1alpha1() springv1alpha1.SpringV1alpha1Interface {
	return c.springV1alpha1
}

// SqlV1alpha1 retrieves the SqlV1alpha1Client
func (c *Clientset) SqlV1alpha1() sqlv1alpha1.SqlV1alpha1Interface {
	return c.sqlV1alpha1
}

// SshV1alpha1 retrieves the SshV1alpha1Client
func (c *Clientset) SshV1alpha1() sshv1alpha1.SshV1alpha1Interface {
	return c.sshV1alpha1
}

// StackV1alpha1 retrieves the StackV1alpha1Client
func (c *Clientset) StackV1alpha1() stackv1alpha1.StackV1alpha1Interface {
	return c.stackV1alpha1
}

// StaticV1alpha1 retrieves the StaticV1alpha1Client
func (c *Clientset) StaticV1alpha1() staticv1alpha1.StaticV1alpha1Interface {
	return c.staticV1alpha1
}

// StorageV1alpha1 retrieves the StorageV1alpha1Client
func (c *Clientset) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	return c.storageV1alpha1
}

// StreamV1alpha1 retrieves the StreamV1alpha1Client
func (c *Clientset) StreamV1alpha1() streamv1alpha1.StreamV1alpha1Interface {
	return c.streamV1alpha1
}

// SubnetV1alpha1 retrieves the SubnetV1alpha1Client
func (c *Clientset) SubnetV1alpha1() subnetv1alpha1.SubnetV1alpha1Interface {
	return c.subnetV1alpha1
}

// SubscriptionV1alpha1 retrieves the SubscriptionV1alpha1Client
func (c *Clientset) SubscriptionV1alpha1() subscriptionv1alpha1.SubscriptionV1alpha1Interface {
	return c.subscriptionV1alpha1
}

// SynapseV1alpha1 retrieves the SynapseV1alpha1Client
func (c *Clientset) SynapseV1alpha1() synapsev1alpha1.SynapseV1alpha1Interface {
	return c.synapseV1alpha1
}

// TemplateV1alpha1 retrieves the TemplateV1alpha1Client
func (c *Clientset) TemplateV1alpha1() templatev1alpha1.TemplateV1alpha1Interface {
	return c.templateV1alpha1
}

// TenantV1alpha1 retrieves the TenantV1alpha1Client
func (c *Clientset) TenantV1alpha1() tenantv1alpha1.TenantV1alpha1Interface {
	return c.tenantV1alpha1
}

// TrafficmanagerV1alpha1 retrieves the TrafficmanagerV1alpha1Client
func (c *Clientset) TrafficmanagerV1alpha1() trafficmanagerv1alpha1.TrafficmanagerV1alpha1Interface {
	return c.trafficmanagerV1alpha1
}

// UserV1alpha1 retrieves the UserV1alpha1Client
func (c *Clientset) UserV1alpha1() userv1alpha1.UserV1alpha1Interface {
	return c.userV1alpha1
}

// VirtualV1alpha1 retrieves the VirtualV1alpha1Client
func (c *Clientset) VirtualV1alpha1() virtualv1alpha1.VirtualV1alpha1Interface {
	return c.virtualV1alpha1
}

// VmwareV1alpha1 retrieves the VmwareV1alpha1Client
func (c *Clientset) VmwareV1alpha1() vmwarev1alpha1.VmwareV1alpha1Interface {
	return c.vmwareV1alpha1
}

// VpnV1alpha1 retrieves the VpnV1alpha1Client
func (c *Clientset) VpnV1alpha1() vpnv1alpha1.VpnV1alpha1Interface {
	return c.vpnV1alpha1
}

// WebV1alpha1 retrieves the WebV1alpha1Client
func (c *Clientset) WebV1alpha1() webv1alpha1.WebV1alpha1Interface {
	return c.webV1alpha1
}

// WindowsV1alpha1 retrieves the WindowsV1alpha1Client
func (c *Clientset) WindowsV1alpha1() windowsv1alpha1.WindowsV1alpha1Interface {
	return c.windowsV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.advancedV1alpha1, err = advancedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.analysisV1alpha1, err = analysisv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.apimanagementV1alpha1, err = apimanagementv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.appV1alpha1, err = appv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.applicationV1alpha1, err = applicationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.attestationV1alpha1, err = attestationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.automationV1alpha1, err = automationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.availabilityV1alpha1, err = availabilityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.backupV1alpha1, err = backupv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.bastionV1alpha1, err = bastionv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.batchV1alpha1, err = batchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.blueprintV1alpha1, err = blueprintv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.botV1alpha1, err = botv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cdnV1alpha1, err = cdnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cognitiveV1alpha1, err = cognitivev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.communicationV1alpha1, err = communicationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.consumptionV1alpha1, err = consumptionv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.containerV1alpha1, err = containerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cosmosdbV1alpha1, err = cosmosdbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.costV1alpha1, err = costv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.customV1alpha1, err = customv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dashboardV1alpha1, err = dashboardv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dataV1alpha1, err = datav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.databaseV1alpha1, err = databasev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.databoxV1alpha1, err = databoxv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.databricksV1alpha1, err = databricksv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dedicatedhardwareV1alpha1, err = dedicatedhardwarev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dedicatedhostV1alpha1, err = dedicatedhostv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.devspaceV1alpha1, err = devspacev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.devtestV1alpha1, err = devtestv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.digitalV1alpha1, err = digitalv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.diskV1alpha1, err = diskv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dnsV1alpha1, err = dnsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventgridV1alpha1, err = eventgridv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventhubV1alpha1, err = eventhubv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.expressrouteV1alpha1, err = expressroutev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.firewallV1alpha1, err = firewallv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.frontdoorV1alpha1, err = frontdoorv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.functionV1alpha1, err = functionv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.hdinsightV1alpha1, err = hdinsightv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.healthbotV1alpha1, err = healthbotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.healthcareV1alpha1, err = healthcarev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.hpcV1alpha1, err = hpcv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.imageV1alpha1, err = imagev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.integrationV1alpha1, err = integrationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iotcentralV1alpha1, err = iotcentralv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iothubV1alpha1, err = iothubv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iotsecurityV1alpha1, err = iotsecurityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iottimeV1alpha1, err = iottimev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ipV1alpha1, err = ipv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.keyvaultV1alpha1, err = keyvaultv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kubernetesclusterV1alpha1, err = kubernetesclusterv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kustoV1alpha1, err = kustov1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lbV1alpha1, err = lbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lighthouseV1alpha1, err = lighthousev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.linuxV1alpha1, err = linuxv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.localV1alpha1, err = localv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.loganalyticsV1alpha1, err = loganalyticsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.logicappV1alpha1, err = logicappv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.machineV1alpha1, err = machinev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.maintenanceV1alpha1, err = maintenancev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.managedV1alpha1, err = managedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.managementV1alpha1, err = managementv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mapsV1alpha1, err = mapsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mariadbV1alpha1, err = mariadbv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.marketplaceV1alpha1, err = marketplacev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mediaV1alpha1, err = mediav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.monitorV1alpha1, err = monitorv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mssqlV1alpha1, err = mssqlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mysqlV1alpha1, err = mysqlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.natV1alpha1, err = natv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.netappV1alpha1, err = netappv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.networkV1alpha1, err = networkv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.notificationhubV1alpha1, err = notificationhubv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.orchestratedV1alpha1, err = orchestratedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.packetV1alpha1, err = packetv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.pointV1alpha1, err = pointv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.policyV1alpha1, err = policyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.postgresqlV1alpha1, err = postgresqlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.powerbiV1alpha1, err = powerbiv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.privateV1alpha1, err = privatev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.proximityV1alpha1, err = proximityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.publicipV1alpha1, err = publicipv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.purviewV1alpha1, err = purviewv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.recoveryV1alpha1, err = recoveryv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.redisV1alpha1, err = redisv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.relayV1alpha1, err = relayv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.resourceV1alpha1, err = resourcev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.roleV1alpha1, err = rolev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.routeV1alpha1, err = routev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.searchV1alpha1, err = searchv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.securityV1alpha1, err = securityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sentinelV1alpha1, err = sentinelv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.serviceV1alpha1, err = servicev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.servicebusV1alpha1, err = servicebusv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sharedimageV1alpha1, err = sharedimagev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.signalrV1alpha1, err = signalrv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.siterecoveryV1alpha1, err = siterecoveryv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.snapshotV1alpha1, err = snapshotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.spatialV1alpha1, err = spatialv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.springV1alpha1, err = springv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sqlV1alpha1, err = sqlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sshV1alpha1, err = sshv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.stackV1alpha1, err = stackv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.staticV1alpha1, err = staticv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.storageV1alpha1, err = storagev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.streamV1alpha1, err = streamv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.subnetV1alpha1, err = subnetv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.subscriptionV1alpha1, err = subscriptionv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.synapseV1alpha1, err = synapsev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.templateV1alpha1, err = templatev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tenantV1alpha1, err = tenantv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.trafficmanagerV1alpha1, err = trafficmanagerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.userV1alpha1, err = userv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.virtualV1alpha1, err = virtualv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vmwareV1alpha1, err = vmwarev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vpnV1alpha1, err = vpnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.webV1alpha1, err = webv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.windowsV1alpha1, err = windowsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.advancedV1alpha1 = advancedv1alpha1.NewForConfigOrDie(c)
	cs.analysisV1alpha1 = analysisv1alpha1.NewForConfigOrDie(c)
	cs.apimanagementV1alpha1 = apimanagementv1alpha1.NewForConfigOrDie(c)
	cs.appV1alpha1 = appv1alpha1.NewForConfigOrDie(c)
	cs.applicationV1alpha1 = applicationv1alpha1.NewForConfigOrDie(c)
	cs.attestationV1alpha1 = attestationv1alpha1.NewForConfigOrDie(c)
	cs.automationV1alpha1 = automationv1alpha1.NewForConfigOrDie(c)
	cs.availabilityV1alpha1 = availabilityv1alpha1.NewForConfigOrDie(c)
	cs.backupV1alpha1 = backupv1alpha1.NewForConfigOrDie(c)
	cs.bastionV1alpha1 = bastionv1alpha1.NewForConfigOrDie(c)
	cs.batchV1alpha1 = batchv1alpha1.NewForConfigOrDie(c)
	cs.blueprintV1alpha1 = blueprintv1alpha1.NewForConfigOrDie(c)
	cs.botV1alpha1 = botv1alpha1.NewForConfigOrDie(c)
	cs.cdnV1alpha1 = cdnv1alpha1.NewForConfigOrDie(c)
	cs.cognitiveV1alpha1 = cognitivev1alpha1.NewForConfigOrDie(c)
	cs.communicationV1alpha1 = communicationv1alpha1.NewForConfigOrDie(c)
	cs.consumptionV1alpha1 = consumptionv1alpha1.NewForConfigOrDie(c)
	cs.containerV1alpha1 = containerv1alpha1.NewForConfigOrDie(c)
	cs.cosmosdbV1alpha1 = cosmosdbv1alpha1.NewForConfigOrDie(c)
	cs.costV1alpha1 = costv1alpha1.NewForConfigOrDie(c)
	cs.customV1alpha1 = customv1alpha1.NewForConfigOrDie(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.NewForConfigOrDie(c)
	cs.dataV1alpha1 = datav1alpha1.NewForConfigOrDie(c)
	cs.databaseV1alpha1 = databasev1alpha1.NewForConfigOrDie(c)
	cs.databoxV1alpha1 = databoxv1alpha1.NewForConfigOrDie(c)
	cs.databricksV1alpha1 = databricksv1alpha1.NewForConfigOrDie(c)
	cs.dedicatedhardwareV1alpha1 = dedicatedhardwarev1alpha1.NewForConfigOrDie(c)
	cs.dedicatedhostV1alpha1 = dedicatedhostv1alpha1.NewForConfigOrDie(c)
	cs.devspaceV1alpha1 = devspacev1alpha1.NewForConfigOrDie(c)
	cs.devtestV1alpha1 = devtestv1alpha1.NewForConfigOrDie(c)
	cs.digitalV1alpha1 = digitalv1alpha1.NewForConfigOrDie(c)
	cs.diskV1alpha1 = diskv1alpha1.NewForConfigOrDie(c)
	cs.dnsV1alpha1 = dnsv1alpha1.NewForConfigOrDie(c)
	cs.eventgridV1alpha1 = eventgridv1alpha1.NewForConfigOrDie(c)
	cs.eventhubV1alpha1 = eventhubv1alpha1.NewForConfigOrDie(c)
	cs.expressrouteV1alpha1 = expressroutev1alpha1.NewForConfigOrDie(c)
	cs.firewallV1alpha1 = firewallv1alpha1.NewForConfigOrDie(c)
	cs.frontdoorV1alpha1 = frontdoorv1alpha1.NewForConfigOrDie(c)
	cs.functionV1alpha1 = functionv1alpha1.NewForConfigOrDie(c)
	cs.hdinsightV1alpha1 = hdinsightv1alpha1.NewForConfigOrDie(c)
	cs.healthbotV1alpha1 = healthbotv1alpha1.NewForConfigOrDie(c)
	cs.healthcareV1alpha1 = healthcarev1alpha1.NewForConfigOrDie(c)
	cs.hpcV1alpha1 = hpcv1alpha1.NewForConfigOrDie(c)
	cs.imageV1alpha1 = imagev1alpha1.NewForConfigOrDie(c)
	cs.integrationV1alpha1 = integrationv1alpha1.NewForConfigOrDie(c)
	cs.iotcentralV1alpha1 = iotcentralv1alpha1.NewForConfigOrDie(c)
	cs.iothubV1alpha1 = iothubv1alpha1.NewForConfigOrDie(c)
	cs.iotsecurityV1alpha1 = iotsecurityv1alpha1.NewForConfigOrDie(c)
	cs.iottimeV1alpha1 = iottimev1alpha1.NewForConfigOrDie(c)
	cs.ipV1alpha1 = ipv1alpha1.NewForConfigOrDie(c)
	cs.keyvaultV1alpha1 = keyvaultv1alpha1.NewForConfigOrDie(c)
	cs.kubernetesclusterV1alpha1 = kubernetesclusterv1alpha1.NewForConfigOrDie(c)
	cs.kustoV1alpha1 = kustov1alpha1.NewForConfigOrDie(c)
	cs.lbV1alpha1 = lbv1alpha1.NewForConfigOrDie(c)
	cs.lighthouseV1alpha1 = lighthousev1alpha1.NewForConfigOrDie(c)
	cs.linuxV1alpha1 = linuxv1alpha1.NewForConfigOrDie(c)
	cs.localV1alpha1 = localv1alpha1.NewForConfigOrDie(c)
	cs.loganalyticsV1alpha1 = loganalyticsv1alpha1.NewForConfigOrDie(c)
	cs.logicappV1alpha1 = logicappv1alpha1.NewForConfigOrDie(c)
	cs.machineV1alpha1 = machinev1alpha1.NewForConfigOrDie(c)
	cs.maintenanceV1alpha1 = maintenancev1alpha1.NewForConfigOrDie(c)
	cs.managedV1alpha1 = managedv1alpha1.NewForConfigOrDie(c)
	cs.managementV1alpha1 = managementv1alpha1.NewForConfigOrDie(c)
	cs.mapsV1alpha1 = mapsv1alpha1.NewForConfigOrDie(c)
	cs.mariadbV1alpha1 = mariadbv1alpha1.NewForConfigOrDie(c)
	cs.marketplaceV1alpha1 = marketplacev1alpha1.NewForConfigOrDie(c)
	cs.mediaV1alpha1 = mediav1alpha1.NewForConfigOrDie(c)
	cs.monitorV1alpha1 = monitorv1alpha1.NewForConfigOrDie(c)
	cs.mssqlV1alpha1 = mssqlv1alpha1.NewForConfigOrDie(c)
	cs.mysqlV1alpha1 = mysqlv1alpha1.NewForConfigOrDie(c)
	cs.natV1alpha1 = natv1alpha1.NewForConfigOrDie(c)
	cs.netappV1alpha1 = netappv1alpha1.NewForConfigOrDie(c)
	cs.networkV1alpha1 = networkv1alpha1.NewForConfigOrDie(c)
	cs.notificationhubV1alpha1 = notificationhubv1alpha1.NewForConfigOrDie(c)
	cs.orchestratedV1alpha1 = orchestratedv1alpha1.NewForConfigOrDie(c)
	cs.packetV1alpha1 = packetv1alpha1.NewForConfigOrDie(c)
	cs.pointV1alpha1 = pointv1alpha1.NewForConfigOrDie(c)
	cs.policyV1alpha1 = policyv1alpha1.NewForConfigOrDie(c)
	cs.postgresqlV1alpha1 = postgresqlv1alpha1.NewForConfigOrDie(c)
	cs.powerbiV1alpha1 = powerbiv1alpha1.NewForConfigOrDie(c)
	cs.privateV1alpha1 = privatev1alpha1.NewForConfigOrDie(c)
	cs.proximityV1alpha1 = proximityv1alpha1.NewForConfigOrDie(c)
	cs.publicipV1alpha1 = publicipv1alpha1.NewForConfigOrDie(c)
	cs.purviewV1alpha1 = purviewv1alpha1.NewForConfigOrDie(c)
	cs.recoveryV1alpha1 = recoveryv1alpha1.NewForConfigOrDie(c)
	cs.redisV1alpha1 = redisv1alpha1.NewForConfigOrDie(c)
	cs.relayV1alpha1 = relayv1alpha1.NewForConfigOrDie(c)
	cs.resourceV1alpha1 = resourcev1alpha1.NewForConfigOrDie(c)
	cs.roleV1alpha1 = rolev1alpha1.NewForConfigOrDie(c)
	cs.routeV1alpha1 = routev1alpha1.NewForConfigOrDie(c)
	cs.searchV1alpha1 = searchv1alpha1.NewForConfigOrDie(c)
	cs.securityV1alpha1 = securityv1alpha1.NewForConfigOrDie(c)
	cs.sentinelV1alpha1 = sentinelv1alpha1.NewForConfigOrDie(c)
	cs.serviceV1alpha1 = servicev1alpha1.NewForConfigOrDie(c)
	cs.servicebusV1alpha1 = servicebusv1alpha1.NewForConfigOrDie(c)
	cs.sharedimageV1alpha1 = sharedimagev1alpha1.NewForConfigOrDie(c)
	cs.signalrV1alpha1 = signalrv1alpha1.NewForConfigOrDie(c)
	cs.siterecoveryV1alpha1 = siterecoveryv1alpha1.NewForConfigOrDie(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.NewForConfigOrDie(c)
	cs.spatialV1alpha1 = spatialv1alpha1.NewForConfigOrDie(c)
	cs.springV1alpha1 = springv1alpha1.NewForConfigOrDie(c)
	cs.sqlV1alpha1 = sqlv1alpha1.NewForConfigOrDie(c)
	cs.sshV1alpha1 = sshv1alpha1.NewForConfigOrDie(c)
	cs.stackV1alpha1 = stackv1alpha1.NewForConfigOrDie(c)
	cs.staticV1alpha1 = staticv1alpha1.NewForConfigOrDie(c)
	cs.storageV1alpha1 = storagev1alpha1.NewForConfigOrDie(c)
	cs.streamV1alpha1 = streamv1alpha1.NewForConfigOrDie(c)
	cs.subnetV1alpha1 = subnetv1alpha1.NewForConfigOrDie(c)
	cs.subscriptionV1alpha1 = subscriptionv1alpha1.NewForConfigOrDie(c)
	cs.synapseV1alpha1 = synapsev1alpha1.NewForConfigOrDie(c)
	cs.templateV1alpha1 = templatev1alpha1.NewForConfigOrDie(c)
	cs.tenantV1alpha1 = tenantv1alpha1.NewForConfigOrDie(c)
	cs.trafficmanagerV1alpha1 = trafficmanagerv1alpha1.NewForConfigOrDie(c)
	cs.userV1alpha1 = userv1alpha1.NewForConfigOrDie(c)
	cs.virtualV1alpha1 = virtualv1alpha1.NewForConfigOrDie(c)
	cs.vmwareV1alpha1 = vmwarev1alpha1.NewForConfigOrDie(c)
	cs.vpnV1alpha1 = vpnv1alpha1.NewForConfigOrDie(c)
	cs.webV1alpha1 = webv1alpha1.NewForConfigOrDie(c)
	cs.windowsV1alpha1 = windowsv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.advancedV1alpha1 = advancedv1alpha1.New(c)
	cs.analysisV1alpha1 = analysisv1alpha1.New(c)
	cs.apimanagementV1alpha1 = apimanagementv1alpha1.New(c)
	cs.appV1alpha1 = appv1alpha1.New(c)
	cs.applicationV1alpha1 = applicationv1alpha1.New(c)
	cs.attestationV1alpha1 = attestationv1alpha1.New(c)
	cs.automationV1alpha1 = automationv1alpha1.New(c)
	cs.availabilityV1alpha1 = availabilityv1alpha1.New(c)
	cs.backupV1alpha1 = backupv1alpha1.New(c)
	cs.bastionV1alpha1 = bastionv1alpha1.New(c)
	cs.batchV1alpha1 = batchv1alpha1.New(c)
	cs.blueprintV1alpha1 = blueprintv1alpha1.New(c)
	cs.botV1alpha1 = botv1alpha1.New(c)
	cs.cdnV1alpha1 = cdnv1alpha1.New(c)
	cs.cognitiveV1alpha1 = cognitivev1alpha1.New(c)
	cs.communicationV1alpha1 = communicationv1alpha1.New(c)
	cs.consumptionV1alpha1 = consumptionv1alpha1.New(c)
	cs.containerV1alpha1 = containerv1alpha1.New(c)
	cs.cosmosdbV1alpha1 = cosmosdbv1alpha1.New(c)
	cs.costV1alpha1 = costv1alpha1.New(c)
	cs.customV1alpha1 = customv1alpha1.New(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.New(c)
	cs.dataV1alpha1 = datav1alpha1.New(c)
	cs.databaseV1alpha1 = databasev1alpha1.New(c)
	cs.databoxV1alpha1 = databoxv1alpha1.New(c)
	cs.databricksV1alpha1 = databricksv1alpha1.New(c)
	cs.dedicatedhardwareV1alpha1 = dedicatedhardwarev1alpha1.New(c)
	cs.dedicatedhostV1alpha1 = dedicatedhostv1alpha1.New(c)
	cs.devspaceV1alpha1 = devspacev1alpha1.New(c)
	cs.devtestV1alpha1 = devtestv1alpha1.New(c)
	cs.digitalV1alpha1 = digitalv1alpha1.New(c)
	cs.diskV1alpha1 = diskv1alpha1.New(c)
	cs.dnsV1alpha1 = dnsv1alpha1.New(c)
	cs.eventgridV1alpha1 = eventgridv1alpha1.New(c)
	cs.eventhubV1alpha1 = eventhubv1alpha1.New(c)
	cs.expressrouteV1alpha1 = expressroutev1alpha1.New(c)
	cs.firewallV1alpha1 = firewallv1alpha1.New(c)
	cs.frontdoorV1alpha1 = frontdoorv1alpha1.New(c)
	cs.functionV1alpha1 = functionv1alpha1.New(c)
	cs.hdinsightV1alpha1 = hdinsightv1alpha1.New(c)
	cs.healthbotV1alpha1 = healthbotv1alpha1.New(c)
	cs.healthcareV1alpha1 = healthcarev1alpha1.New(c)
	cs.hpcV1alpha1 = hpcv1alpha1.New(c)
	cs.imageV1alpha1 = imagev1alpha1.New(c)
	cs.integrationV1alpha1 = integrationv1alpha1.New(c)
	cs.iotcentralV1alpha1 = iotcentralv1alpha1.New(c)
	cs.iothubV1alpha1 = iothubv1alpha1.New(c)
	cs.iotsecurityV1alpha1 = iotsecurityv1alpha1.New(c)
	cs.iottimeV1alpha1 = iottimev1alpha1.New(c)
	cs.ipV1alpha1 = ipv1alpha1.New(c)
	cs.keyvaultV1alpha1 = keyvaultv1alpha1.New(c)
	cs.kubernetesclusterV1alpha1 = kubernetesclusterv1alpha1.New(c)
	cs.kustoV1alpha1 = kustov1alpha1.New(c)
	cs.lbV1alpha1 = lbv1alpha1.New(c)
	cs.lighthouseV1alpha1 = lighthousev1alpha1.New(c)
	cs.linuxV1alpha1 = linuxv1alpha1.New(c)
	cs.localV1alpha1 = localv1alpha1.New(c)
	cs.loganalyticsV1alpha1 = loganalyticsv1alpha1.New(c)
	cs.logicappV1alpha1 = logicappv1alpha1.New(c)
	cs.machineV1alpha1 = machinev1alpha1.New(c)
	cs.maintenanceV1alpha1 = maintenancev1alpha1.New(c)
	cs.managedV1alpha1 = managedv1alpha1.New(c)
	cs.managementV1alpha1 = managementv1alpha1.New(c)
	cs.mapsV1alpha1 = mapsv1alpha1.New(c)
	cs.mariadbV1alpha1 = mariadbv1alpha1.New(c)
	cs.marketplaceV1alpha1 = marketplacev1alpha1.New(c)
	cs.mediaV1alpha1 = mediav1alpha1.New(c)
	cs.monitorV1alpha1 = monitorv1alpha1.New(c)
	cs.mssqlV1alpha1 = mssqlv1alpha1.New(c)
	cs.mysqlV1alpha1 = mysqlv1alpha1.New(c)
	cs.natV1alpha1 = natv1alpha1.New(c)
	cs.netappV1alpha1 = netappv1alpha1.New(c)
	cs.networkV1alpha1 = networkv1alpha1.New(c)
	cs.notificationhubV1alpha1 = notificationhubv1alpha1.New(c)
	cs.orchestratedV1alpha1 = orchestratedv1alpha1.New(c)
	cs.packetV1alpha1 = packetv1alpha1.New(c)
	cs.pointV1alpha1 = pointv1alpha1.New(c)
	cs.policyV1alpha1 = policyv1alpha1.New(c)
	cs.postgresqlV1alpha1 = postgresqlv1alpha1.New(c)
	cs.powerbiV1alpha1 = powerbiv1alpha1.New(c)
	cs.privateV1alpha1 = privatev1alpha1.New(c)
	cs.proximityV1alpha1 = proximityv1alpha1.New(c)
	cs.publicipV1alpha1 = publicipv1alpha1.New(c)
	cs.purviewV1alpha1 = purviewv1alpha1.New(c)
	cs.recoveryV1alpha1 = recoveryv1alpha1.New(c)
	cs.redisV1alpha1 = redisv1alpha1.New(c)
	cs.relayV1alpha1 = relayv1alpha1.New(c)
	cs.resourceV1alpha1 = resourcev1alpha1.New(c)
	cs.roleV1alpha1 = rolev1alpha1.New(c)
	cs.routeV1alpha1 = routev1alpha1.New(c)
	cs.searchV1alpha1 = searchv1alpha1.New(c)
	cs.securityV1alpha1 = securityv1alpha1.New(c)
	cs.sentinelV1alpha1 = sentinelv1alpha1.New(c)
	cs.serviceV1alpha1 = servicev1alpha1.New(c)
	cs.servicebusV1alpha1 = servicebusv1alpha1.New(c)
	cs.sharedimageV1alpha1 = sharedimagev1alpha1.New(c)
	cs.signalrV1alpha1 = signalrv1alpha1.New(c)
	cs.siterecoveryV1alpha1 = siterecoveryv1alpha1.New(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.New(c)
	cs.spatialV1alpha1 = spatialv1alpha1.New(c)
	cs.springV1alpha1 = springv1alpha1.New(c)
	cs.sqlV1alpha1 = sqlv1alpha1.New(c)
	cs.sshV1alpha1 = sshv1alpha1.New(c)
	cs.stackV1alpha1 = stackv1alpha1.New(c)
	cs.staticV1alpha1 = staticv1alpha1.New(c)
	cs.storageV1alpha1 = storagev1alpha1.New(c)
	cs.streamV1alpha1 = streamv1alpha1.New(c)
	cs.subnetV1alpha1 = subnetv1alpha1.New(c)
	cs.subscriptionV1alpha1 = subscriptionv1alpha1.New(c)
	cs.synapseV1alpha1 = synapsev1alpha1.New(c)
	cs.templateV1alpha1 = templatev1alpha1.New(c)
	cs.tenantV1alpha1 = tenantv1alpha1.New(c)
	cs.trafficmanagerV1alpha1 = trafficmanagerv1alpha1.New(c)
	cs.userV1alpha1 = userv1alpha1.New(c)
	cs.virtualV1alpha1 = virtualv1alpha1.New(c)
	cs.vmwareV1alpha1 = vmwarev1alpha1.New(c)
	cs.vpnV1alpha1 = vpnv1alpha1.New(c)
	cs.webV1alpha1 = webv1alpha1.New(c)
	cs.windowsV1alpha1 = windowsv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
