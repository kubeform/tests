/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Config struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigSpec   `json:"spec,omitempty"`
	Status            ConfigStatus `json:"status,omitempty"`
}

type ConfigSpec struct {
	ConfigSpec2 `json:",inline"`
	// +optional
	KubeformOutput *ConfigSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ConfigSpecNodeStatus struct {
	// The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
	// +optional
	Down *int64 `json:"down,omitempty" tf:"down"`
	// The number of backends considered to be 'UP' and healthy, and that are serving requests.
	// +optional
	Up *int64 `json:"up,omitempty" tf:"up"`
}

type ConfigSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// What algorithm this NodeBalancer should use for routing traffic to backends: roundrobin, leastconn, source
	// +optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm"`
	// The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected.
	// +optional
	Check *string `json:"check,omitempty" tf:"check"`
	// How many times to attempt a check before considering a backend to be down. (1-30)
	// +optional
	CheckAttempts *int64 `json:"checkAttempts,omitempty" tf:"check_attempts"`
	// This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down
	// +optional
	CheckBody *string `json:"checkBody,omitempty" tf:"check_body"`
	// How often, in seconds, to check that backends are up and serving requests.
	// +optional
	CheckInterval *int64 `json:"checkInterval,omitempty" tf:"check_interval"`
	// If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
	// +optional
	CheckPassive *bool `json:"checkPassive,omitempty" tf:"check_passive"`
	// The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
	// +optional
	CheckPath *string `json:"checkPath,omitempty" tf:"check_path"`
	// How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
	// +optional
	CheckTimeout *int64 `json:"checkTimeout,omitempty" tf:"check_timeout"`
	// What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
	// +optional
	CipherSuite *string `json:"cipherSuite,omitempty" tf:"cipher_suite"`
	// +optional
	NodeStatus []ConfigSpecNodeStatus `json:"nodeStatus,omitempty" tf:"node_status"`
	// The ID of the NodeBalancer to access.
	NodebalancerID *int64 `json:"nodebalancerID" tf:"nodebalancer_id"`
	// The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key.
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. Valid values are `none`, `v1`, and `v2`.
	// +optional
	ProxyProtocol *string `json:"proxyProtocol,omitempty" tf:"proxy_protocol"`
	// The certificate this port is serving. This is not returned. If set, this field will come back as `<REDACTED>`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
	// +optional
	SslCert *string `json:"-" sensitive:"true" tf:"ssl_cert"`
	// The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
	// +optional
	SslCommonname *string `json:"sslCommonname,omitempty" tf:"ssl_commonname"`
	// The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
	// +optional
	SslFingerprint *string `json:"sslFingerprint,omitempty" tf:"ssl_fingerprint"`
	// The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `<REDACTED>`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
	// +optional
	SslKey *string `json:"-" sensitive:"true" tf:"ssl_key"`
	// Controls how session stickiness is handled on this port: 'none', 'table', 'http_cookie'
	// +optional
	Stickiness *string `json:"stickiness,omitempty" tf:"stickiness"`
}

type ConfigStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ConfigList is a list of Configs
type ConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Config CRD objects
	Items []Config `json:"items,omitempty"`
}
