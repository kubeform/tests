/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	domainv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/domain/v1alpha1"
	firewallv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/firewall/v1alpha1"
	imagev1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/image/v1alpha1"
	instancev1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/instance/v1alpha1"
	lkev1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/lke/v1alpha1"
	nodebalancerv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/nodebalancer/v1alpha1"
	objectv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/object/v1alpha1"
	rdnsv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/rdns/v1alpha1"
	sshkeyv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/sshkey/v1alpha1"
	stackscriptv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/stackscript/v1alpha1"
	tokenv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/token/v1alpha1"
	userv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/user/v1alpha1"
	vlanv1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/vlan/v1alpha1"
	volumev1alpha1 "kubeform.dev/provider-linode-api/client/clientset/versioned/typed/volume/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	DomainV1alpha1() domainv1alpha1.DomainV1alpha1Interface
	FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface
	ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface
	InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface
	LkeV1alpha1() lkev1alpha1.LkeV1alpha1Interface
	NodebalancerV1alpha1() nodebalancerv1alpha1.NodebalancerV1alpha1Interface
	ObjectV1alpha1() objectv1alpha1.ObjectV1alpha1Interface
	RdnsV1alpha1() rdnsv1alpha1.RdnsV1alpha1Interface
	SshkeyV1alpha1() sshkeyv1alpha1.SshkeyV1alpha1Interface
	StackscriptV1alpha1() stackscriptv1alpha1.StackscriptV1alpha1Interface
	TokenV1alpha1() tokenv1alpha1.TokenV1alpha1Interface
	UserV1alpha1() userv1alpha1.UserV1alpha1Interface
	VlanV1alpha1() vlanv1alpha1.VlanV1alpha1Interface
	VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	domainV1alpha1       *domainv1alpha1.DomainV1alpha1Client
	firewallV1alpha1     *firewallv1alpha1.FirewallV1alpha1Client
	imageV1alpha1        *imagev1alpha1.ImageV1alpha1Client
	instanceV1alpha1     *instancev1alpha1.InstanceV1alpha1Client
	lkeV1alpha1          *lkev1alpha1.LkeV1alpha1Client
	nodebalancerV1alpha1 *nodebalancerv1alpha1.NodebalancerV1alpha1Client
	objectV1alpha1       *objectv1alpha1.ObjectV1alpha1Client
	rdnsV1alpha1         *rdnsv1alpha1.RdnsV1alpha1Client
	sshkeyV1alpha1       *sshkeyv1alpha1.SshkeyV1alpha1Client
	stackscriptV1alpha1  *stackscriptv1alpha1.StackscriptV1alpha1Client
	tokenV1alpha1        *tokenv1alpha1.TokenV1alpha1Client
	userV1alpha1         *userv1alpha1.UserV1alpha1Client
	vlanV1alpha1         *vlanv1alpha1.VlanV1alpha1Client
	volumeV1alpha1       *volumev1alpha1.VolumeV1alpha1Client
}

// DomainV1alpha1 retrieves the DomainV1alpha1Client
func (c *Clientset) DomainV1alpha1() domainv1alpha1.DomainV1alpha1Interface {
	return c.domainV1alpha1
}

// FirewallV1alpha1 retrieves the FirewallV1alpha1Client
func (c *Clientset) FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface {
	return c.firewallV1alpha1
}

// ImageV1alpha1 retrieves the ImageV1alpha1Client
func (c *Clientset) ImageV1alpha1() imagev1alpha1.ImageV1alpha1Interface {
	return c.imageV1alpha1
}

// InstanceV1alpha1 retrieves the InstanceV1alpha1Client
func (c *Clientset) InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface {
	return c.instanceV1alpha1
}

// LkeV1alpha1 retrieves the LkeV1alpha1Client
func (c *Clientset) LkeV1alpha1() lkev1alpha1.LkeV1alpha1Interface {
	return c.lkeV1alpha1
}

// NodebalancerV1alpha1 retrieves the NodebalancerV1alpha1Client
func (c *Clientset) NodebalancerV1alpha1() nodebalancerv1alpha1.NodebalancerV1alpha1Interface {
	return c.nodebalancerV1alpha1
}

// ObjectV1alpha1 retrieves the ObjectV1alpha1Client
func (c *Clientset) ObjectV1alpha1() objectv1alpha1.ObjectV1alpha1Interface {
	return c.objectV1alpha1
}

// RdnsV1alpha1 retrieves the RdnsV1alpha1Client
func (c *Clientset) RdnsV1alpha1() rdnsv1alpha1.RdnsV1alpha1Interface {
	return c.rdnsV1alpha1
}

// SshkeyV1alpha1 retrieves the SshkeyV1alpha1Client
func (c *Clientset) SshkeyV1alpha1() sshkeyv1alpha1.SshkeyV1alpha1Interface {
	return c.sshkeyV1alpha1
}

// StackscriptV1alpha1 retrieves the StackscriptV1alpha1Client
func (c *Clientset) StackscriptV1alpha1() stackscriptv1alpha1.StackscriptV1alpha1Interface {
	return c.stackscriptV1alpha1
}

// TokenV1alpha1 retrieves the TokenV1alpha1Client
func (c *Clientset) TokenV1alpha1() tokenv1alpha1.TokenV1alpha1Interface {
	return c.tokenV1alpha1
}

// UserV1alpha1 retrieves the UserV1alpha1Client
func (c *Clientset) UserV1alpha1() userv1alpha1.UserV1alpha1Interface {
	return c.userV1alpha1
}

// VlanV1alpha1 retrieves the VlanV1alpha1Client
func (c *Clientset) VlanV1alpha1() vlanv1alpha1.VlanV1alpha1Interface {
	return c.vlanV1alpha1
}

// VolumeV1alpha1 retrieves the VolumeV1alpha1Client
func (c *Clientset) VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface {
	return c.volumeV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.domainV1alpha1, err = domainv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.firewallV1alpha1, err = firewallv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.imageV1alpha1, err = imagev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.instanceV1alpha1, err = instancev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.lkeV1alpha1, err = lkev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.nodebalancerV1alpha1, err = nodebalancerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.objectV1alpha1, err = objectv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.rdnsV1alpha1, err = rdnsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sshkeyV1alpha1, err = sshkeyv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.stackscriptV1alpha1, err = stackscriptv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tokenV1alpha1, err = tokenv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.userV1alpha1, err = userv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vlanV1alpha1, err = vlanv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.volumeV1alpha1, err = volumev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.domainV1alpha1 = domainv1alpha1.NewForConfigOrDie(c)
	cs.firewallV1alpha1 = firewallv1alpha1.NewForConfigOrDie(c)
	cs.imageV1alpha1 = imagev1alpha1.NewForConfigOrDie(c)
	cs.instanceV1alpha1 = instancev1alpha1.NewForConfigOrDie(c)
	cs.lkeV1alpha1 = lkev1alpha1.NewForConfigOrDie(c)
	cs.nodebalancerV1alpha1 = nodebalancerv1alpha1.NewForConfigOrDie(c)
	cs.objectV1alpha1 = objectv1alpha1.NewForConfigOrDie(c)
	cs.rdnsV1alpha1 = rdnsv1alpha1.NewForConfigOrDie(c)
	cs.sshkeyV1alpha1 = sshkeyv1alpha1.NewForConfigOrDie(c)
	cs.stackscriptV1alpha1 = stackscriptv1alpha1.NewForConfigOrDie(c)
	cs.tokenV1alpha1 = tokenv1alpha1.NewForConfigOrDie(c)
	cs.userV1alpha1 = userv1alpha1.NewForConfigOrDie(c)
	cs.vlanV1alpha1 = vlanv1alpha1.NewForConfigOrDie(c)
	cs.volumeV1alpha1 = volumev1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.domainV1alpha1 = domainv1alpha1.New(c)
	cs.firewallV1alpha1 = firewallv1alpha1.New(c)
	cs.imageV1alpha1 = imagev1alpha1.New(c)
	cs.instanceV1alpha1 = instancev1alpha1.New(c)
	cs.lkeV1alpha1 = lkev1alpha1.New(c)
	cs.nodebalancerV1alpha1 = nodebalancerv1alpha1.New(c)
	cs.objectV1alpha1 = objectv1alpha1.New(c)
	cs.rdnsV1alpha1 = rdnsv1alpha1.New(c)
	cs.sshkeyV1alpha1 = sshkeyv1alpha1.New(c)
	cs.stackscriptV1alpha1 = stackscriptv1alpha1.New(c)
	cs.tokenV1alpha1 = tokenv1alpha1.New(c)
	cs.userV1alpha1 = userv1alpha1.New(c)
	cs.vlanV1alpha1 = vlanv1alpha1.New(c)
	cs.volumeV1alpha1 = volumev1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
