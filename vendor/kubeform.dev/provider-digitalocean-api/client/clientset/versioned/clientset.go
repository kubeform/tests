/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	appv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/app/v1alpha1"
	cdnv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/cdn/v1alpha1"
	certificatev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/certificate/v1alpha1"
	containerregistryv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/containerregistry/v1alpha1"
	customv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/custom/v1alpha1"
	databasev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/database/v1alpha1"
	domainv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/domain/v1alpha1"
	dropletv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/droplet/v1alpha1"
	firewallv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/firewall/v1alpha1"
	floatingipv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/floatingip/v1alpha1"
	kubernetesv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/kubernetes/v1alpha1"
	loadbalancerv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/loadbalancer/v1alpha1"
	projectv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/project/v1alpha1"
	recordv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/record/v1alpha1"
	spacesbucketv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/spacesbucket/v1alpha1"
	sshv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/ssh/v1alpha1"
	tagv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/tag/v1alpha1"
	volumev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/volume/v1alpha1"
	vpcv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/vpc/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AppV1alpha1() appv1alpha1.AppV1alpha1Interface
	CdnV1alpha1() cdnv1alpha1.CdnV1alpha1Interface
	CertificateV1alpha1() certificatev1alpha1.CertificateV1alpha1Interface
	ContainerregistryV1alpha1() containerregistryv1alpha1.ContainerregistryV1alpha1Interface
	CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface
	DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface
	DomainV1alpha1() domainv1alpha1.DomainV1alpha1Interface
	DropletV1alpha1() dropletv1alpha1.DropletV1alpha1Interface
	FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface
	FloatingipV1alpha1() floatingipv1alpha1.FloatingipV1alpha1Interface
	KubernetesV1alpha1() kubernetesv1alpha1.KubernetesV1alpha1Interface
	LoadbalancerV1alpha1() loadbalancerv1alpha1.LoadbalancerV1alpha1Interface
	ProjectV1alpha1() projectv1alpha1.ProjectV1alpha1Interface
	RecordV1alpha1() recordv1alpha1.RecordV1alpha1Interface
	SpacesbucketV1alpha1() spacesbucketv1alpha1.SpacesbucketV1alpha1Interface
	SshV1alpha1() sshv1alpha1.SshV1alpha1Interface
	TagV1alpha1() tagv1alpha1.TagV1alpha1Interface
	VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface
	VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	appV1alpha1               *appv1alpha1.AppV1alpha1Client
	cdnV1alpha1               *cdnv1alpha1.CdnV1alpha1Client
	certificateV1alpha1       *certificatev1alpha1.CertificateV1alpha1Client
	containerregistryV1alpha1 *containerregistryv1alpha1.ContainerregistryV1alpha1Client
	customV1alpha1            *customv1alpha1.CustomV1alpha1Client
	databaseV1alpha1          *databasev1alpha1.DatabaseV1alpha1Client
	domainV1alpha1            *domainv1alpha1.DomainV1alpha1Client
	dropletV1alpha1           *dropletv1alpha1.DropletV1alpha1Client
	firewallV1alpha1          *firewallv1alpha1.FirewallV1alpha1Client
	floatingipV1alpha1        *floatingipv1alpha1.FloatingipV1alpha1Client
	kubernetesV1alpha1        *kubernetesv1alpha1.KubernetesV1alpha1Client
	loadbalancerV1alpha1      *loadbalancerv1alpha1.LoadbalancerV1alpha1Client
	projectV1alpha1           *projectv1alpha1.ProjectV1alpha1Client
	recordV1alpha1            *recordv1alpha1.RecordV1alpha1Client
	spacesbucketV1alpha1      *spacesbucketv1alpha1.SpacesbucketV1alpha1Client
	sshV1alpha1               *sshv1alpha1.SshV1alpha1Client
	tagV1alpha1               *tagv1alpha1.TagV1alpha1Client
	volumeV1alpha1            *volumev1alpha1.VolumeV1alpha1Client
	vpcV1alpha1               *vpcv1alpha1.VpcV1alpha1Client
}

// AppV1alpha1 retrieves the AppV1alpha1Client
func (c *Clientset) AppV1alpha1() appv1alpha1.AppV1alpha1Interface {
	return c.appV1alpha1
}

// CdnV1alpha1 retrieves the CdnV1alpha1Client
func (c *Clientset) CdnV1alpha1() cdnv1alpha1.CdnV1alpha1Interface {
	return c.cdnV1alpha1
}

// CertificateV1alpha1 retrieves the CertificateV1alpha1Client
func (c *Clientset) CertificateV1alpha1() certificatev1alpha1.CertificateV1alpha1Interface {
	return c.certificateV1alpha1
}

// ContainerregistryV1alpha1 retrieves the ContainerregistryV1alpha1Client
func (c *Clientset) ContainerregistryV1alpha1() containerregistryv1alpha1.ContainerregistryV1alpha1Interface {
	return c.containerregistryV1alpha1
}

// CustomV1alpha1 retrieves the CustomV1alpha1Client
func (c *Clientset) CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface {
	return c.customV1alpha1
}

// DatabaseV1alpha1 retrieves the DatabaseV1alpha1Client
func (c *Clientset) DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface {
	return c.databaseV1alpha1
}

// DomainV1alpha1 retrieves the DomainV1alpha1Client
func (c *Clientset) DomainV1alpha1() domainv1alpha1.DomainV1alpha1Interface {
	return c.domainV1alpha1
}

// DropletV1alpha1 retrieves the DropletV1alpha1Client
func (c *Clientset) DropletV1alpha1() dropletv1alpha1.DropletV1alpha1Interface {
	return c.dropletV1alpha1
}

// FirewallV1alpha1 retrieves the FirewallV1alpha1Client
func (c *Clientset) FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface {
	return c.firewallV1alpha1
}

// FloatingipV1alpha1 retrieves the FloatingipV1alpha1Client
func (c *Clientset) FloatingipV1alpha1() floatingipv1alpha1.FloatingipV1alpha1Interface {
	return c.floatingipV1alpha1
}

// KubernetesV1alpha1 retrieves the KubernetesV1alpha1Client
func (c *Clientset) KubernetesV1alpha1() kubernetesv1alpha1.KubernetesV1alpha1Interface {
	return c.kubernetesV1alpha1
}

// LoadbalancerV1alpha1 retrieves the LoadbalancerV1alpha1Client
func (c *Clientset) LoadbalancerV1alpha1() loadbalancerv1alpha1.LoadbalancerV1alpha1Interface {
	return c.loadbalancerV1alpha1
}

// ProjectV1alpha1 retrieves the ProjectV1alpha1Client
func (c *Clientset) ProjectV1alpha1() projectv1alpha1.ProjectV1alpha1Interface {
	return c.projectV1alpha1
}

// RecordV1alpha1 retrieves the RecordV1alpha1Client
func (c *Clientset) RecordV1alpha1() recordv1alpha1.RecordV1alpha1Interface {
	return c.recordV1alpha1
}

// SpacesbucketV1alpha1 retrieves the SpacesbucketV1alpha1Client
func (c *Clientset) SpacesbucketV1alpha1() spacesbucketv1alpha1.SpacesbucketV1alpha1Interface {
	return c.spacesbucketV1alpha1
}

// SshV1alpha1 retrieves the SshV1alpha1Client
func (c *Clientset) SshV1alpha1() sshv1alpha1.SshV1alpha1Interface {
	return c.sshV1alpha1
}

// TagV1alpha1 retrieves the TagV1alpha1Client
func (c *Clientset) TagV1alpha1() tagv1alpha1.TagV1alpha1Interface {
	return c.tagV1alpha1
}

// VolumeV1alpha1 retrieves the VolumeV1alpha1Client
func (c *Clientset) VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface {
	return c.volumeV1alpha1
}

// VpcV1alpha1 retrieves the VpcV1alpha1Client
func (c *Clientset) VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface {
	return c.vpcV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.appV1alpha1, err = appv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cdnV1alpha1, err = cdnv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.certificateV1alpha1, err = certificatev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.containerregistryV1alpha1, err = containerregistryv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.customV1alpha1, err = customv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.databaseV1alpha1, err = databasev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.domainV1alpha1, err = domainv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dropletV1alpha1, err = dropletv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.firewallV1alpha1, err = firewallv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.floatingipV1alpha1, err = floatingipv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kubernetesV1alpha1, err = kubernetesv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.loadbalancerV1alpha1, err = loadbalancerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.projectV1alpha1, err = projectv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.recordV1alpha1, err = recordv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.spacesbucketV1alpha1, err = spacesbucketv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sshV1alpha1, err = sshv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tagV1alpha1, err = tagv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.volumeV1alpha1, err = volumev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vpcV1alpha1, err = vpcv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.appV1alpha1 = appv1alpha1.NewForConfigOrDie(c)
	cs.cdnV1alpha1 = cdnv1alpha1.NewForConfigOrDie(c)
	cs.certificateV1alpha1 = certificatev1alpha1.NewForConfigOrDie(c)
	cs.containerregistryV1alpha1 = containerregistryv1alpha1.NewForConfigOrDie(c)
	cs.customV1alpha1 = customv1alpha1.NewForConfigOrDie(c)
	cs.databaseV1alpha1 = databasev1alpha1.NewForConfigOrDie(c)
	cs.domainV1alpha1 = domainv1alpha1.NewForConfigOrDie(c)
	cs.dropletV1alpha1 = dropletv1alpha1.NewForConfigOrDie(c)
	cs.firewallV1alpha1 = firewallv1alpha1.NewForConfigOrDie(c)
	cs.floatingipV1alpha1 = floatingipv1alpha1.NewForConfigOrDie(c)
	cs.kubernetesV1alpha1 = kubernetesv1alpha1.NewForConfigOrDie(c)
	cs.loadbalancerV1alpha1 = loadbalancerv1alpha1.NewForConfigOrDie(c)
	cs.projectV1alpha1 = projectv1alpha1.NewForConfigOrDie(c)
	cs.recordV1alpha1 = recordv1alpha1.NewForConfigOrDie(c)
	cs.spacesbucketV1alpha1 = spacesbucketv1alpha1.NewForConfigOrDie(c)
	cs.sshV1alpha1 = sshv1alpha1.NewForConfigOrDie(c)
	cs.tagV1alpha1 = tagv1alpha1.NewForConfigOrDie(c)
	cs.volumeV1alpha1 = volumev1alpha1.NewForConfigOrDie(c)
	cs.vpcV1alpha1 = vpcv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.appV1alpha1 = appv1alpha1.New(c)
	cs.cdnV1alpha1 = cdnv1alpha1.New(c)
	cs.certificateV1alpha1 = certificatev1alpha1.New(c)
	cs.containerregistryV1alpha1 = containerregistryv1alpha1.New(c)
	cs.customV1alpha1 = customv1alpha1.New(c)
	cs.databaseV1alpha1 = databasev1alpha1.New(c)
	cs.domainV1alpha1 = domainv1alpha1.New(c)
	cs.dropletV1alpha1 = dropletv1alpha1.New(c)
	cs.firewallV1alpha1 = firewallv1alpha1.New(c)
	cs.floatingipV1alpha1 = floatingipv1alpha1.New(c)
	cs.kubernetesV1alpha1 = kubernetesv1alpha1.New(c)
	cs.loadbalancerV1alpha1 = loadbalancerv1alpha1.New(c)
	cs.projectV1alpha1 = projectv1alpha1.New(c)
	cs.recordV1alpha1 = recordv1alpha1.New(c)
	cs.spacesbucketV1alpha1 = spacesbucketv1alpha1.New(c)
	cs.sshV1alpha1 = sshv1alpha1.New(c)
	cs.tagV1alpha1 = tagv1alpha1.New(c)
	cs.volumeV1alpha1 = volumev1alpha1.New(c)
	cs.vpcV1alpha1 = vpcv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
