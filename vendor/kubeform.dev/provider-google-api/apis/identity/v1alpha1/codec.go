/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecIdpConfig{}).Type1()):       PlatformInboundSamlConfigSpecIdpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecSpConfig{}).Type1()):        PlatformInboundSamlConfigSpecSpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecIdpConfig{}).Type1()): PlatformTenantInboundSamlConfigSpecIdpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecSpConfig{}).Type1()):  PlatformTenantInboundSamlConfigSpecSpConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecIdpConfig{}).Type1()):       PlatformInboundSamlConfigSpecIdpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecSpConfig{}).Type1()):        PlatformInboundSamlConfigSpecSpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecIdpConfig{}).Type1()): PlatformTenantInboundSamlConfigSpecIdpConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecSpConfig{}).Type1()):  PlatformTenantInboundSamlConfigSpecSpConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type PlatformInboundSamlConfigSpecIdpConfigCodec struct {
}

func (PlatformInboundSamlConfigSpecIdpConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PlatformInboundSamlConfigSpecIdpConfig)(ptr) == nil
}

func (PlatformInboundSamlConfigSpecIdpConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PlatformInboundSamlConfigSpecIdpConfig)(ptr)
	var objs []PlatformInboundSamlConfigSpecIdpConfig
	if obj != nil {
		objs = []PlatformInboundSamlConfigSpecIdpConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecIdpConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PlatformInboundSamlConfigSpecIdpConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PlatformInboundSamlConfigSpecIdpConfig)(ptr) = PlatformInboundSamlConfigSpecIdpConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PlatformInboundSamlConfigSpecIdpConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecIdpConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PlatformInboundSamlConfigSpecIdpConfig)(ptr) = objs[0]
			} else {
				*(*PlatformInboundSamlConfigSpecIdpConfig)(ptr) = PlatformInboundSamlConfigSpecIdpConfig{}
			}
		} else {
			*(*PlatformInboundSamlConfigSpecIdpConfig)(ptr) = PlatformInboundSamlConfigSpecIdpConfig{}
		}
	default:
		iter.ReportError("decode PlatformInboundSamlConfigSpecIdpConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PlatformInboundSamlConfigSpecSpConfigCodec struct {
}

func (PlatformInboundSamlConfigSpecSpConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PlatformInboundSamlConfigSpecSpConfig)(ptr) == nil
}

func (PlatformInboundSamlConfigSpecSpConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PlatformInboundSamlConfigSpecSpConfig)(ptr)
	var objs []PlatformInboundSamlConfigSpecSpConfig
	if obj != nil {
		objs = []PlatformInboundSamlConfigSpecSpConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecSpConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PlatformInboundSamlConfigSpecSpConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PlatformInboundSamlConfigSpecSpConfig)(ptr) = PlatformInboundSamlConfigSpecSpConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PlatformInboundSamlConfigSpecSpConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformInboundSamlConfigSpecSpConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PlatformInboundSamlConfigSpecSpConfig)(ptr) = objs[0]
			} else {
				*(*PlatformInboundSamlConfigSpecSpConfig)(ptr) = PlatformInboundSamlConfigSpecSpConfig{}
			}
		} else {
			*(*PlatformInboundSamlConfigSpecSpConfig)(ptr) = PlatformInboundSamlConfigSpecSpConfig{}
		}
	default:
		iter.ReportError("decode PlatformInboundSamlConfigSpecSpConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PlatformTenantInboundSamlConfigSpecIdpConfigCodec struct {
}

func (PlatformTenantInboundSamlConfigSpecIdpConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PlatformTenantInboundSamlConfigSpecIdpConfig)(ptr) == nil
}

func (PlatformTenantInboundSamlConfigSpecIdpConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PlatformTenantInboundSamlConfigSpecIdpConfig)(ptr)
	var objs []PlatformTenantInboundSamlConfigSpecIdpConfig
	if obj != nil {
		objs = []PlatformTenantInboundSamlConfigSpecIdpConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecIdpConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PlatformTenantInboundSamlConfigSpecIdpConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PlatformTenantInboundSamlConfigSpecIdpConfig)(ptr) = PlatformTenantInboundSamlConfigSpecIdpConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PlatformTenantInboundSamlConfigSpecIdpConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecIdpConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PlatformTenantInboundSamlConfigSpecIdpConfig)(ptr) = objs[0]
			} else {
				*(*PlatformTenantInboundSamlConfigSpecIdpConfig)(ptr) = PlatformTenantInboundSamlConfigSpecIdpConfig{}
			}
		} else {
			*(*PlatformTenantInboundSamlConfigSpecIdpConfig)(ptr) = PlatformTenantInboundSamlConfigSpecIdpConfig{}
		}
	default:
		iter.ReportError("decode PlatformTenantInboundSamlConfigSpecIdpConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type PlatformTenantInboundSamlConfigSpecSpConfigCodec struct {
}

func (PlatformTenantInboundSamlConfigSpecSpConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*PlatformTenantInboundSamlConfigSpecSpConfig)(ptr) == nil
}

func (PlatformTenantInboundSamlConfigSpecSpConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*PlatformTenantInboundSamlConfigSpecSpConfig)(ptr)
	var objs []PlatformTenantInboundSamlConfigSpecSpConfig
	if obj != nil {
		objs = []PlatformTenantInboundSamlConfigSpecSpConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecSpConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (PlatformTenantInboundSamlConfigSpecSpConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*PlatformTenantInboundSamlConfigSpecSpConfig)(ptr) = PlatformTenantInboundSamlConfigSpecSpConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []PlatformTenantInboundSamlConfigSpecSpConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(PlatformTenantInboundSamlConfigSpecSpConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*PlatformTenantInboundSamlConfigSpecSpConfig)(ptr) = objs[0]
			} else {
				*(*PlatformTenantInboundSamlConfigSpecSpConfig)(ptr) = PlatformTenantInboundSamlConfigSpecSpConfig{}
			}
		} else {
			*(*PlatformTenantInboundSamlConfigSpecSpConfig)(ptr) = PlatformTenantInboundSamlConfigSpecSpConfig{}
		}
	default:
		iter.ReportError("decode PlatformTenantInboundSamlConfigSpecSpConfig", "unexpected JSON type")
	}
}
