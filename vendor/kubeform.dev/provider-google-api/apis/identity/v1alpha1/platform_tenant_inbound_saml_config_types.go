/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type PlatformTenantInboundSamlConfig struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PlatformTenantInboundSamlConfigSpec   `json:"spec,omitempty"`
	Status            PlatformTenantInboundSamlConfigStatus `json:"status,omitempty"`
}

type PlatformTenantInboundSamlConfigSpec struct {
	PlatformTenantInboundSamlConfigSpec2 `json:",inline"`
	// +optional
	KubeformOutput PlatformTenantInboundSamlConfigSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PlatformTenantInboundSamlConfigSpecIdpConfigIdpCertificates struct {
	// The x509 certificate
	// +optional
	X509Certificate *string `json:"x509Certificate,omitempty" tf:"x509_certificate"`
}

type PlatformTenantInboundSamlConfigSpecIdpConfig struct {
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	IdpCertificates []PlatformTenantInboundSamlConfigSpecIdpConfigIdpCertificates `json:"idpCertificates" tf:"idp_certificates"`
	// Unique identifier for all SAML entities
	IdpEntityID *string `json:"idpEntityID" tf:"idp_entity_id"`
	// Indicates if outbounding SAMLRequest should be signed.
	// +optional
	SignRequest *bool `json:"signRequest,omitempty" tf:"sign_request"`
	// URL to send Authentication request to.
	SsoURL *string `json:"ssoURL" tf:"sso_url"`
}

type PlatformTenantInboundSamlConfigSpecSpConfigSpCertificates struct {
	// The x509 certificate
	// +optional
	X509Certificate *string `json:"x509Certificate,omitempty" tf:"x509_certificate"`
}

type PlatformTenantInboundSamlConfigSpecSpConfig struct {
	// Callback URI where responses from IDP are handled. Must start with 'https://'.
	CallbackURI *string `json:"callbackURI" tf:"callback_uri"`
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// +optional
	SpCertificates []PlatformTenantInboundSamlConfigSpecSpConfigSpCertificates `json:"spCertificates,omitempty" tf:"sp_certificates"`
	// Unique identifier for all SAML entities.
	SpEntityID *string `json:"spEntityID" tf:"sp_entity_id"`
}

type PlatformTenantInboundSamlConfigSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Human friendly display name.
	DisplayName *string `json:"displayName" tf:"display_name"`
	// If this config allows users to sign in with the provider.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// SAML IdP configuration when the project acts as the relying party
	IdpConfig *PlatformTenantInboundSamlConfigSpecIdpConfig `json:"idpConfig" tf:"idp_config"`
	// The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters,
	// hyphens, underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an
	// alphanumeric character, and have at least 2 characters.
	Name *string `json:"name" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// SAML SP (Service Provider) configuration when the project acts as the relying party to receive
	// and accept an authentication assertion issued by a SAML identity provider.
	SpConfig *PlatformTenantInboundSamlConfigSpecSpConfig `json:"spConfig" tf:"sp_config"`
	// The name of the tenant where this inbound SAML config resource exists
	Tenant *string `json:"tenant" tf:"tenant"`
}

type PlatformTenantInboundSamlConfigStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PlatformTenantInboundSamlConfigList is a list of PlatformTenantInboundSamlConfigs
type PlatformTenantInboundSamlConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of PlatformTenantInboundSamlConfig CRD objects
	Items []PlatformTenantInboundSamlConfig `json:"items,omitempty"`
}
