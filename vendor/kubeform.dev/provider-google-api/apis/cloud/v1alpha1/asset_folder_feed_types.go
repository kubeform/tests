/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AssetFolderFeed struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssetFolderFeedSpec   `json:"spec,omitempty"`
	Status            AssetFolderFeedStatus `json:"status,omitempty"`
}

type AssetFolderFeedSpec struct {
	AssetFolderFeedSpec2 `json:",inline"`
	// +optional
	KubeformOutput AssetFolderFeedSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type AssetFolderFeedSpecCondition struct {
	// Description of the expression. This is a longer text which describes the expression,
	// e.g. when hovered over it in a UI.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `json:"expression" tf:"expression"`
	// String indicating the location of the expression for error reporting, e.g. a file
	// name and a position in the file.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// Title for the expression, i.e. a short string describing its purpose.
	// This can be used e.g. in UIs which allow to enter the expression.
	// +optional
	Title *string `json:"title,omitempty" tf:"title"`
}

type AssetFolderFeedSpecFeedOutputConfigPubsubDestination struct {
	// Destination on Cloud Pubsub topic.
	Topic *string `json:"topic" tf:"topic"`
}

type AssetFolderFeedSpecFeedOutputConfig struct {
	// Destination on Cloud Pubsub.
	PubsubDestination *AssetFolderFeedSpecFeedOutputConfigPubsubDestination `json:"pubsubDestination" tf:"pubsub_destination"`
}

type AssetFolderFeedSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of the full names of the assets to receive updates. You must specify either or both of
	// assetNames and assetTypes. Only asset updates matching specified assetNames and assetTypes are
	// exported to the feed. For example: //compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1.
	// See https://cloud.google.com/apis/design/resourceNames#fullResourceName for more info.
	// +optional
	AssetNames []string `json:"assetNames,omitempty" tf:"asset_names"`
	// A list of types of the assets to receive updates. You must specify either or both of assetNames
	// and assetTypes. Only asset updates matching specified assetNames and assetTypes are exported to
	// the feed. For example: "compute.googleapis.com/Disk"
	// See https://cloud.google.com/asset-inventory/docs/supported-asset-types for a list of all
	// supported asset types.
	// +optional
	AssetTypes []string `json:"assetTypes,omitempty" tf:"asset_types"`
	// The project whose identity will be used when sending messages to the
	// destination pubsub topic. It also specifies the project for API
	// enablement check, quota, and billing.
	BillingProject *string `json:"billingProject" tf:"billing_project"`
	// A condition which determines whether an asset update should be published. If specified, an asset
	// will be returned only when the expression evaluates to true. When set, expression field
	// must be a valid CEL expression on a TemporalAsset with name temporal_asset. Example: a Feed with
	// expression "temporal_asset.deleted == true" will only publish Asset deletions. Other fields of
	// condition are optional.
	// +optional
	Condition *AssetFolderFeedSpecCondition `json:"condition,omitempty" tf:"condition"`
	// Asset content type. If not specified, no content but the asset name and type will be returned. Possible values: ["CONTENT_TYPE_UNSPECIFIED", "RESOURCE", "IAM_POLICY", "ORG_POLICY", "ACCESS_POLICY"]
	// +optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`
	// This is the client-assigned asset feed identifier and it needs to be unique under a specific parent.
	FeedID *string `json:"feedID" tf:"feed_id"`
	// Output configuration for asset feed destination.
	FeedOutputConfig *AssetFolderFeedSpecFeedOutputConfig `json:"feedOutputConfig" tf:"feed_output_config"`
	// The folder this feed should be created in.
	Folder *string `json:"folder" tf:"folder"`
	// The ID of the folder where this feed has been created. Both [FOLDER_NUMBER]
	// and folders/[FOLDER_NUMBER] are accepted.
	// +optional
	FolderID *string `json:"folderID,omitempty" tf:"folder_id"`
	// The format will be folders/{folder_number}/feeds/{client-assigned_feed_identifier}.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type AssetFolderFeedStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AssetFolderFeedList is a list of AssetFolderFeeds
type AssetFolderFeedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AssetFolderFeed CRD objects
	Items []AssetFolderFeed `json:"items,omitempty"`
}
