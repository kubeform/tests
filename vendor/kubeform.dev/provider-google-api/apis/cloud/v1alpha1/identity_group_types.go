/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type IdentityGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityGroupSpec   `json:"spec,omitempty"`
	Status            IdentityGroupStatus `json:"status,omitempty"`
}

type IdentityGroupSpec struct {
	IdentityGroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput IdentityGroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type IdentityGroupSpecGroupKey struct {
	// The ID of the entity.
	//
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	//
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	//
	// Must be unique within a namespace.
	ID *string `json:"ID" tf:"id"`
	// The namespace in which the entity exists.
	//
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	//
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of 'identitysources/{identity_source_id}'.
	// +optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`
}

type IdentityGroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The time when the Group was created.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// An extended description to help users determine the purpose of a Group.
	// Must not be longer than 4,096 characters.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The display name of the Group.
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// EntityKey of the Group.
	GroupKey *IdentityGroupSpecGroupKey `json:"groupKey" tf:"group_key"`
	// The labels that apply to the Group.
	//
	// Must not contain more than one entry. Must contain the entry
	// 'cloudidentity.googleapis.com/groups.discussion_forum': '' if the Group is a Google Group or
	// 'system/groups/external': '' if the Group is an external-identity-mapped group.
	Labels *map[string]string `json:"labels" tf:"labels"`
	// Resource name of the Group in the format: groups/{group_id}, where group_id
	// is the unique ID assigned to the Group.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The resource name of the entity under which this Group resides in the
	// Cloud Identity resource hierarchy.
	//
	// Must be of the form identitysources/{identity_source_id} for external-identity-mapped
	// groups or customers/{customer_id} for Google Groups.
	Parent *string `json:"parent" tf:"parent"`
	// The time when the Group was last updated.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type IdentityGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IdentityGroupList is a list of IdentityGroups
type IdentityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of IdentityGroup CRD objects
	Items []IdentityGroup `json:"items,omitempty"`
}
