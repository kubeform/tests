/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type TasksQueue struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TasksQueueSpec   `json:"spec,omitempty"`
	Status            TasksQueueStatus `json:"status,omitempty"`
}

type TasksQueueSpec struct {
	TasksQueueSpec2 `json:",inline"`
	// +optional
	KubeformOutput TasksQueueSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type TasksQueueSpecAppEngineRoutingOverride struct {
	// The host that the task is sent to.
	// +optional
	Host *string `json:"host,omitempty" tf:"host"`
	// App instance.
	//
	// By default, the task is sent to an instance which is available when the task is attempted.
	// +optional
	Instance *string `json:"instance,omitempty" tf:"instance"`
	// App service.
	//
	// By default, the task is sent to the service which is the default service when the task is attempted.
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
	// App version.
	//
	// By default, the task is sent to the version which is the default version when the task is attempted.
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type TasksQueueSpecRateLimits struct {
	// The max burst size.
	//
	// Max burst size limits how fast tasks in queue are processed when many tasks are
	// in the queue and the rate is high. This field allows the queue to have a high
	// rate so processing starts shortly after a task is enqueued, but still limits
	// resource usage when many tasks are enqueued in a short period of time.
	// +optional
	MaxBurstSize *int64 `json:"maxBurstSize,omitempty" tf:"max_burst_size"`
	// The maximum number of concurrent tasks that Cloud Tasks allows to
	// be dispatched for this queue. After this threshold has been
	// reached, Cloud Tasks stops dispatching tasks until the number of
	// concurrent requests decreases.
	// +optional
	MaxConcurrentDispatches *int64 `json:"maxConcurrentDispatches,omitempty" tf:"max_concurrent_dispatches"`
	// The maximum rate at which tasks are dispatched from this queue.
	//
	// If unspecified when the queue is created, Cloud Tasks will pick the default.
	// +optional
	MaxDispatchesPerSecond *float64 `json:"maxDispatchesPerSecond,omitempty" tf:"max_dispatches_per_second"`
}

type TasksQueueSpecRetryConfig struct {
	// Number of attempts per task.
	//
	// Cloud Tasks will attempt the task maxAttempts times (that is, if
	// the first attempt fails, then there will be maxAttempts - 1
	// retries). Must be >= -1.
	//
	// If unspecified when the queue is created, Cloud Tasks will pick
	// the default.
	//
	// -1 indicates unlimited attempts.
	// +optional
	MaxAttempts *int64 `json:"maxAttempts,omitempty" tf:"max_attempts"`
	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	// +optional
	MaxBackoff *string `json:"maxBackoff,omitempty" tf:"max_backoff"`
	// The time between retries will double maxDoublings times.
	//
	// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
	// then increases linearly, and finally retries retries at intervals of maxBackoff
	// up to maxAttempts times.
	// +optional
	MaxDoublings *int64 `json:"maxDoublings,omitempty" tf:"max_doublings"`
	// If positive, maxRetryDuration specifies the time limit for
	// retrying a failed task, measured from when the task was first
	// attempted. Once maxRetryDuration time has passed and the task has
	// been attempted maxAttempts times, no further attempts will be
	// made and the task will be deleted.
	//
	// If zero, then the task age is unlimited.
	// +optional
	MaxRetryDuration *string `json:"maxRetryDuration,omitempty" tf:"max_retry_duration"`
	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	// +optional
	MinBackoff *string `json:"minBackoff,omitempty" tf:"min_backoff"`
}

type TasksQueueSpecStackdriverLoggingConfig struct {
	// Specifies the fraction of operations to write to Stackdriver Logging.
	// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
	// default and means that no operations are logged.
	SamplingRatio *float64 `json:"samplingRatio" tf:"sampling_ratio"`
}

type TasksQueueSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Overrides for task-level appEngineRouting. These settings apply only
	// to App Engine tasks in this queue
	// +optional
	AppEngineRoutingOverride *TasksQueueSpecAppEngineRoutingOverride `json:"appEngineRoutingOverride,omitempty" tf:"app_engine_routing_override"`
	// The location of the queue
	Location *string `json:"location" tf:"location"`
	// The queue name.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Rate limits for task dispatches.
	//
	// The queue's actual dispatch rate is the result of:
	//
	// * Number of tasks in the queue
	// * User-specified throttling: rateLimits, retryConfig, and the queue's state.
	// * System throttling due to 429 (Too Many Requests) or 503 (Service
	//   Unavailable) responses from the worker, high error rates, or to
	//   smooth sudden large traffic spikes.
	// +optional
	RateLimits *TasksQueueSpecRateLimits `json:"rateLimits,omitempty" tf:"rate_limits"`
	// Settings that determine the retry behavior.
	// +optional
	RetryConfig *TasksQueueSpecRetryConfig `json:"retryConfig,omitempty" tf:"retry_config"`
	// Configuration options for writing logs to Stackdriver Logging.
	// +optional
	StackdriverLoggingConfig *TasksQueueSpecStackdriverLoggingConfig `json:"stackdriverLoggingConfig,omitempty" tf:"stackdriver_logging_config"`
}

type TasksQueueStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TasksQueueList is a list of TasksQueues
type TasksQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of TasksQueue CRD objects
	Items []TasksQueue `json:"items,omitempty"`
}
