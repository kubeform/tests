/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type IdentityGroupMembership struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityGroupMembershipSpec   `json:"spec,omitempty"`
	Status            IdentityGroupMembershipStatus `json:"status,omitempty"`
}

type IdentityGroupMembershipSpec struct {
	IdentityGroupMembershipSpec2 `json:",inline"`
	// +optional
	KubeformOutput IdentityGroupMembershipSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type IdentityGroupMembershipSpecPreferredMemberKey struct {
	// The ID of the entity.
	//
	// For Google-managed entities, the id must be the email address of an existing
	// group or user.
	//
	// For external-identity-mapped entities, the id must be a string conforming
	// to the Identity Source's requirements.
	//
	// Must be unique within a namespace.
	ID *string `json:"ID" tf:"id"`
	// The namespace in which the entity exists.
	//
	// If not specified, the EntityKey represents a Google-managed entity
	// such as a Google user or a Google Group.
	//
	// If specified, the EntityKey represents an external-identity-mapped group.
	// The namespace must correspond to an identity source created in Admin Console
	// and must be in the form of 'identitysources/{identity_source_id}'.
	// +optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`
}

type IdentityGroupMembershipSpecRoles struct {
	// The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER. Possible values: ["OWNER", "MANAGER", "MEMBER"]
	Name *string `json:"name" tf:"name"`
}

type IdentityGroupMembershipSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The time when the Membership was created.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// The name of the Group to create this membership in.
	Group *string `json:"group" tf:"group"`
	// The resource name of the Membership, of the form groups/{group_id}/memberships/{membership_id}.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// EntityKey of the member.
	// +optional
	PreferredMemberKey *IdentityGroupMembershipSpecPreferredMemberKey `json:"preferredMemberKey,omitempty" tf:"preferred_member_key"`
	// The MembershipRoles that apply to the Membership.
	// Must not contain duplicate MembershipRoles with the same name.
	Roles []IdentityGroupMembershipSpecRoles `json:"roles" tf:"roles"`
	// The type of the membership.
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// The time when the Membership was last updated.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type IdentityGroupMembershipStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IdentityGroupMembershipList is a list of IdentityGroupMemberships
type IdentityGroupMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of IdentityGroupMembership CRD objects
	Items []IdentityGroupMembership `json:"items,omitempty"`
}
