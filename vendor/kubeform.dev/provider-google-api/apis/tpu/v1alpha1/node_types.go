/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Node struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodeSpec   `json:"spec,omitempty"`
	Status            NodeStatus `json:"status,omitempty"`
}

type NodeSpec struct {
	NodeSpec2 `json:",inline"`
	// +optional
	KubeformOutput NodeSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NodeSpecNetworkEndpoints struct {
	// The IP address of this network endpoint.
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
	// The port of this network endpoint.
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
}

type NodeSpecSchedulingConfig struct {
	// Defines whether the TPU instance is preemptible.
	Preemptible *bool `json:"preemptible" tf:"preemptible"`
}

type NodeSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The type of hardware accelerators associated with this node.
	AcceleratorType *string `json:"acceleratorType" tf:"accelerator_type"`
	// The CIDR block that the TPU node will use when selecting an IP
	// address. This CIDR block must be a /29 block; the Compute Engine
	// networks API forbids a smaller block, and using a larger block would
	// be wasteful (a node can only consume one IP address).
	//
	// Errors will occur if the CIDR block has already been used for a
	// currently existing TPU node, the CIDR block conflicts with any
	// subnetworks in the user's provided network, or the provided network
	// is peered with another network that is using that CIDR block.
	// +optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Resource labels to represent user provided metadata.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// The immutable name of the TPU.
	Name *string `json:"name" tf:"name"`
	// The name of a network to peer the TPU node to. It must be a
	// preexisting Compute Engine network inside of the project on which
	// this API has been activated. If none is provided, "default" will be
	// used.
	// +optional
	Network *string `json:"network,omitempty" tf:"network"`
	// The network endpoints where TPU workers can be accessed and sent work.
	// It is recommended that Tensorflow clients of the node first reach out
	// to the first (index 0) entry.
	// +optional
	NetworkEndpoints []NodeSpecNetworkEndpoints `json:"networkEndpoints,omitempty" tf:"network_endpoints"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Sets the scheduling options for this TPU instance.
	// +optional
	SchedulingConfig *NodeSpecSchedulingConfig `json:"schedulingConfig,omitempty" tf:"scheduling_config"`
	// The service account used to run the tensor flow services within the
	// node. To share resources, including Google Cloud Storage data, with
	// the Tensorflow job running in the Node, this account must have
	// permissions to that data.
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account"`
	// The version of Tensorflow running in the Node.
	TensorflowVersion *string `json:"tensorflowVersion" tf:"tensorflow_version"`
	// Whether the VPC peering for the node is set up through Service Networking API.
	// The VPC Peering should be set up before provisioning the node. If this field is set,
	// cidr_block field should not be specified. If the network that you want to peer the
	// TPU Node to is a Shared VPC network, the node must be created with this this field enabled.
	// +optional
	UseServiceNetworking *bool `json:"useServiceNetworking,omitempty" tf:"use_service_networking"`
	// The GCP location for the TPU. If it is not provided, the provider zone is used.
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type NodeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NodeList is a list of Nodes
type NodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Node CRD objects
	Items []Node `json:"items,omitempty"`
}
