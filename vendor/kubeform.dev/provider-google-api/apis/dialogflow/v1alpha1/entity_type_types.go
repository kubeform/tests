/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type EntityType struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntityTypeSpec   `json:"spec,omitempty"`
	Status            EntityTypeStatus `json:"status,omitempty"`
}

type EntityTypeSpec struct {
	EntityTypeSpec2 `json:",inline"`
	// +optional
	KubeformOutput EntityTypeSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type EntityTypeSpecEntities struct {
	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
	// could be green onions.
	// For KIND_LIST entity types:
	// * This collection must contain exactly one synonym equal to value.
	Synonyms []string `json:"synonyms" tf:"synonyms"`
	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
	// could be scallions.
	// For KIND_MAP entity types:
	// * A reference value to be used in place of synonyms.
	// For KIND_LIST entity types:
	// * A string that can contain references to other entity types (with or without aliases).
	Value *string `json:"value" tf:"value"`
}

type EntityTypeSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of this entity type to be displayed on the console.
	DisplayName *string `json:"displayName" tf:"display_name"`
	// Enables fuzzy entity extraction during classification.
	// +optional
	EnableFuzzyExtraction *bool `json:"enableFuzzyExtraction,omitempty" tf:"enable_fuzzy_extraction"`
	// The collection of entity entries associated with the entity type.
	// +optional
	Entities []EntityTypeSpecEntities `json:"entities,omitempty" tf:"entities"`
	// Indicates the kind of entity type.
	// * KIND_MAP: Map entity types allow mapping of a group of synonyms to a reference value.
	// * KIND_LIST: List entity types contain a set of entries that do not map to reference values. However, list entity
	// types can contain references to other entity types (with or without aliases).
	// * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values. Possible values: ["KIND_MAP", "KIND_LIST", "KIND_REGEXP"]
	Kind *string `json:"kind" tf:"kind"`
	// The unique identifier of the entity type.
	// Format: projects/<Project ID>/agent/entityTypes/<Entity type ID>.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
}

type EntityTypeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EntityTypeList is a list of EntityTypes
type EntityTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of EntityType CRD objects
	Items []EntityType `json:"items,omitempty"`
}
