/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppProfileSpecSingleClusterRouting{}).Type1()): AppProfileSpecSingleClusterRoutingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GcPolicySpecMaxAge{}).Type1()):                 GcPolicySpecMaxAgeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1()):    InstanceIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1()):     InstanceIamMemberSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TableIamBindingSpecCondition{}).Type1()):       TableIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TableIamMemberSpecCondition{}).Type1()):        TableIamMemberSpecConditionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(AppProfileSpecSingleClusterRouting{}).Type1()): AppProfileSpecSingleClusterRoutingCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(GcPolicySpecMaxAge{}).Type1()):                 GcPolicySpecMaxAgeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1()):    InstanceIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1()):     InstanceIamMemberSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TableIamBindingSpecCondition{}).Type1()):       TableIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(TableIamMemberSpecCondition{}).Type1()):        TableIamMemberSpecConditionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type AppProfileSpecSingleClusterRoutingCodec struct {
}

func (AppProfileSpecSingleClusterRoutingCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AppProfileSpecSingleClusterRouting)(ptr) == nil
}

func (AppProfileSpecSingleClusterRoutingCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AppProfileSpecSingleClusterRouting)(ptr)
	var objs []AppProfileSpecSingleClusterRouting
	if obj != nil {
		objs = []AppProfileSpecSingleClusterRouting{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppProfileSpecSingleClusterRouting{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AppProfileSpecSingleClusterRoutingCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AppProfileSpecSingleClusterRouting)(ptr) = AppProfileSpecSingleClusterRouting{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AppProfileSpecSingleClusterRouting

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AppProfileSpecSingleClusterRouting{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AppProfileSpecSingleClusterRouting)(ptr) = objs[0]
			} else {
				*(*AppProfileSpecSingleClusterRouting)(ptr) = AppProfileSpecSingleClusterRouting{}
			}
		} else {
			*(*AppProfileSpecSingleClusterRouting)(ptr) = AppProfileSpecSingleClusterRouting{}
		}
	default:
		iter.ReportError("decode AppProfileSpecSingleClusterRouting", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type GcPolicySpecMaxAgeCodec struct {
}

func (GcPolicySpecMaxAgeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*GcPolicySpecMaxAge)(ptr) == nil
}

func (GcPolicySpecMaxAgeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*GcPolicySpecMaxAge)(ptr)
	var objs []GcPolicySpecMaxAge
	if obj != nil {
		objs = []GcPolicySpecMaxAge{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GcPolicySpecMaxAge{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (GcPolicySpecMaxAgeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*GcPolicySpecMaxAge)(ptr) = GcPolicySpecMaxAge{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []GcPolicySpecMaxAge

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(GcPolicySpecMaxAge{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*GcPolicySpecMaxAge)(ptr) = objs[0]
			} else {
				*(*GcPolicySpecMaxAge)(ptr) = GcPolicySpecMaxAge{}
			}
		} else {
			*(*GcPolicySpecMaxAge)(ptr) = GcPolicySpecMaxAge{}
		}
	default:
		iter.ReportError("decode GcPolicySpecMaxAge", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceIamBindingSpecConditionCodec struct {
}

func (InstanceIamBindingSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceIamBindingSpecCondition)(ptr) == nil
}

func (InstanceIamBindingSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceIamBindingSpecCondition)(ptr)
	var objs []InstanceIamBindingSpecCondition
	if obj != nil {
		objs = []InstanceIamBindingSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceIamBindingSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceIamBindingSpecCondition)(ptr) = InstanceIamBindingSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceIamBindingSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceIamBindingSpecCondition)(ptr) = objs[0]
			} else {
				*(*InstanceIamBindingSpecCondition)(ptr) = InstanceIamBindingSpecCondition{}
			}
		} else {
			*(*InstanceIamBindingSpecCondition)(ptr) = InstanceIamBindingSpecCondition{}
		}
	default:
		iter.ReportError("decode InstanceIamBindingSpecCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceIamMemberSpecConditionCodec struct {
}

func (InstanceIamMemberSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceIamMemberSpecCondition)(ptr) == nil
}

func (InstanceIamMemberSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceIamMemberSpecCondition)(ptr)
	var objs []InstanceIamMemberSpecCondition
	if obj != nil {
		objs = []InstanceIamMemberSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceIamMemberSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceIamMemberSpecCondition)(ptr) = InstanceIamMemberSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceIamMemberSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceIamMemberSpecCondition)(ptr) = objs[0]
			} else {
				*(*InstanceIamMemberSpecCondition)(ptr) = InstanceIamMemberSpecCondition{}
			}
		} else {
			*(*InstanceIamMemberSpecCondition)(ptr) = InstanceIamMemberSpecCondition{}
		}
	default:
		iter.ReportError("decode InstanceIamMemberSpecCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type TableIamBindingSpecConditionCodec struct {
}

func (TableIamBindingSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*TableIamBindingSpecCondition)(ptr) == nil
}

func (TableIamBindingSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*TableIamBindingSpecCondition)(ptr)
	var objs []TableIamBindingSpecCondition
	if obj != nil {
		objs = []TableIamBindingSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TableIamBindingSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (TableIamBindingSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*TableIamBindingSpecCondition)(ptr) = TableIamBindingSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []TableIamBindingSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TableIamBindingSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*TableIamBindingSpecCondition)(ptr) = objs[0]
			} else {
				*(*TableIamBindingSpecCondition)(ptr) = TableIamBindingSpecCondition{}
			}
		} else {
			*(*TableIamBindingSpecCondition)(ptr) = TableIamBindingSpecCondition{}
		}
	default:
		iter.ReportError("decode TableIamBindingSpecCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type TableIamMemberSpecConditionCodec struct {
}

func (TableIamMemberSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*TableIamMemberSpecCondition)(ptr) == nil
}

func (TableIamMemberSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*TableIamMemberSpecCondition)(ptr)
	var objs []TableIamMemberSpecCondition
	if obj != nil {
		objs = []TableIamMemberSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TableIamMemberSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (TableIamMemberSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*TableIamMemberSpecCondition)(ptr) = TableIamMemberSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []TableIamMemberSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(TableIamMemberSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*TableIamMemberSpecCondition)(ptr) = objs[0]
			} else {
				*(*TableIamMemberSpecCondition)(ptr) = TableIamMemberSpecCondition{}
			}
		} else {
			*(*TableIamMemberSpecCondition)(ptr) = TableIamMemberSpecCondition{}
		}
	default:
		iter.ReportError("decode TableIamMemberSpecCondition", "unexpected JSON type")
	}
}
