/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Service struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec,omitempty"`
	Status            ServiceStatus `json:"status,omitempty"`
}

type ServiceSpec struct {
	ServiceSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServiceSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServiceSpecApisMethods struct {
	// The simple name of this method as described in the provided config.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The type URL for the request to this API.
	// +optional
	RequestType *string `json:"requestType,omitempty" tf:"request_type"`
	// The type URL for the response from this API.
	// +optional
	ResponseType *string `json:"responseType,omitempty" tf:"response_type"`
	// SYNTAX_PROTO2 or SYNTAX_PROTO3.
	// +optional
	Syntax *string `json:"syntax,omitempty" tf:"syntax"`
}

type ServiceSpecApis struct {
	// A list of Method objects.
	// +optional
	Methods []ServiceSpecApisMethods `json:"methods,omitempty" tf:"methods"`
	// The FQDN of the API as described in the provided config.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// SYNTAX_PROTO2 or SYNTAX_PROTO3.
	// +optional
	Syntax *string `json:"syntax,omitempty" tf:"syntax"`
	// A version string for this api. If specified, will have the form major-version.minor-version, e.g. 1.10.
	// +optional
	Version *string `json:"version,omitempty" tf:"version"`
}

type ServiceSpecEndpoints struct {
	// The FQDN of the endpoint as described in the config.
	// +optional
	Address *string `json:"address,omitempty" tf:"address"`
	// The simple name of the endpoint as described in the config.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
}

type ServiceSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of API objects.
	// +optional
	Apis []ServiceSpecApis `json:"apis,omitempty" tf:"apis"`
	// The autogenerated ID for the configuration that is rolled out as part of the creation of this resource. Must be provided to compute engine instances as a tag.
	// +optional
	ConfigID *string `json:"configID,omitempty" tf:"config_id"`
	// The address at which the service can be found - usually the same as the service name.
	// +optional
	DnsAddress *string `json:"dnsAddress,omitempty" tf:"dns_address"`
	// A list of Endpoint objects.
	// +optional
	Endpoints []ServiceSpecEndpoints `json:"endpoints,omitempty" tf:"endpoints"`
	// The full text of the Service Config YAML file (Example located here). If provided, must also provide protoc_output_base64. open_api config must not be provided.
	// +optional
	GrpcConfig *string `json:"grpcConfig,omitempty" tf:"grpc_config"`
	// The full text of the OpenAPI YAML configuration as described here. Either this, or both of grpc_config and protoc_output_base64 must be specified.
	// +optional
	OpenapiConfig *string `json:"openapiConfig,omitempty" tf:"openapi_config"`
	// The project ID that the service belongs to. If not provided, provider project is used.
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The full contents of the Service Descriptor File generated by protoc. This should be a compiled .pb file, base64-encoded.
	// +optional
	ProtocOutputBase64 *string `json:"protocOutputBase64,omitempty" tf:"protoc_output_base64"`
	// The name of the service. Usually of the form $apiname.endpoints.$projectid.cloud.goog.
	ServiceName *string `json:"serviceName" tf:"service_name"`
}

type ServiceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServiceList is a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Service CRD objects
	Items []Service `json:"items,omitempty"`
}
