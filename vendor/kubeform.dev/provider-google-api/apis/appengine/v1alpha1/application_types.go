/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Application struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationSpec   `json:"spec,omitempty"`
	Status            ApplicationStatus `json:"status,omitempty"`
}

type ApplicationSpec struct {
	ApplicationSpec2 `json:",inline"`
	// +optional
	KubeformOutput ApplicationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ApplicationSpecFeatureSettings struct {
	SplitHealthChecks *bool `json:"splitHealthChecks" tf:"split_health_checks"`
}

type ApplicationSpecIap struct {
	// Adapted for use with the app
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientID *string `json:"oauth2ClientID" tf:"oauth2_client_id"`
	// OAuth2 client secret to use for the authentication flow. The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
	Oauth2ClientSecret *string `json:"-" sensitive:"true" tf:"oauth2_client_secret"`
	// Hex-encoded SHA-256 hash of the client secret.
	// +optional
	Oauth2ClientSecretSha256 *string `json:"-" sensitive:"true" tf:"oauth2_client_secret_sha256"`
}

type ApplicationSpecUrlDispatchRule struct {
	// +optional
	Domain *string `json:"domain,omitempty" tf:"domain"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
}

type ApplicationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// Identifier of the app.
	// +optional
	AppID *string `json:"appID,omitempty" tf:"app_id"`
	// The domain to authenticate users with when using App Engine's User API.
	// +optional
	AuthDomain *string `json:"authDomain,omitempty" tf:"auth_domain"`
	// The GCS bucket code is being stored in for this app.
	// +optional
	CodeBucket *string `json:"codeBucket,omitempty" tf:"code_bucket"`
	// +optional
	DatabaseType *string `json:"databaseType,omitempty" tf:"database_type"`
	// The GCS bucket content is being stored in for this app.
	// +optional
	DefaultBucket *string `json:"defaultBucket,omitempty" tf:"default_bucket"`
	// The default hostname for this app.
	// +optional
	DefaultHostname *string `json:"defaultHostname,omitempty" tf:"default_hostname"`
	// A block of optional settings to configure specific App Engine features:
	// +optional
	FeatureSettings *ApplicationSpecFeatureSettings `json:"featureSettings,omitempty" tf:"feature_settings"`
	// The GCR domain used for storing managed Docker images for this app.
	// +optional
	GcrDomain *string `json:"gcrDomain,omitempty" tf:"gcr_domain"`
	// Settings for enabling Cloud Identity Aware Proxy
	// +optional
	Iap *ApplicationSpecIap `json:"iap,omitempty" tf:"iap"`
	// The location to serve the app from.
	LocationID *string `json:"locationID" tf:"location_id"`
	// Unique name of the app.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The project ID to create the application under.
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The serving status of the app.
	// +optional
	ServingStatus *string `json:"servingStatus,omitempty" tf:"serving_status"`
	// A list of dispatch rule blocks. Each block has a domain, path, and service field.
	// +optional
	UrlDispatchRule []ApplicationSpecUrlDispatchRule `json:"urlDispatchRule,omitempty" tf:"url_dispatch_rule"`
}

type ApplicationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ApplicationList is a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Application CRD objects
	Items []Application `json:"items,omitempty"`
}
