/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServiceSplitTraffic struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSplitTrafficSpec   `json:"spec,omitempty"`
	Status            ServiceSplitTrafficStatus `json:"status,omitempty"`
}

type ServiceSplitTrafficSpec struct {
	ServiceSplitTrafficSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServiceSplitTrafficSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServiceSplitTrafficSpecSplit struct {
	// Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
	Allocations *map[string]string `json:"allocations" tf:"allocations"`
	// Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed. Possible values: ["UNSPECIFIED", "COOKIE", "IP", "RANDOM"]
	// +optional
	ShardBy *string `json:"shardBy,omitempty" tf:"shard_by"`
}

type ServiceSplitTrafficSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// If set to true traffic will be migrated to this version.
	// +optional
	MigrateTraffic *bool `json:"migrateTraffic,omitempty" tf:"migrate_traffic"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The name of the service these settings apply to.
	Service *string `json:"service" tf:"service"`
	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	Split *ServiceSplitTrafficSpecSplit `json:"split" tf:"split"`
}

type ServiceSplitTrafficStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServiceSplitTrafficList is a list of ServiceSplitTraffics
type ServiceSplitTrafficList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServiceSplitTraffic CRD objects
	Items []ServiceSplitTraffic `json:"items,omitempty"`
}
