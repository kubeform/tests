/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DomainMapping struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainMappingSpec   `json:"spec,omitempty"`
	Status            DomainMappingStatus `json:"status,omitempty"`
}

type DomainMappingSpec struct {
	DomainMappingSpec2 `json:",inline"`
	// +optional
	KubeformOutput DomainMappingSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DomainMappingSpecResourceRecords struct {
	// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
	// +optional
	Rrdata *string `json:"rrdata,omitempty" tf:"rrdata"`
	// Resource record type. Example: 'AAAA'. Possible values: ["A", "AAAA", "CNAME"]
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type DomainMappingSpecSslSettings struct {
	// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
	// remove SSL support.
	// By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
	// or to configure SSL manually, specify 'SslManagementType.MANUAL' on a 'CREATE' or 'UPDATE' request. You must be
	// authorized to administer the 'AuthorizedCertificate' resource to manually map it to a DomainMapping resource.
	// Example: 12345.
	// +optional
	CertificateID *string `json:"certificateID,omitempty" tf:"certificate_id"`
	// ID of the managed 'AuthorizedCertificate' resource currently being provisioned, if applicable. Until the new
	// managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
	// provisioning process completes, the 'certificateId' field will reflect the new managed certificate and this
	// field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
	// 'certificateId' field with an update request.
	// +optional
	PendingManagedCertificateID *string `json:"pendingManagedCertificateID,omitempty" tf:"pending_managed_certificate_id"`
	// SSL management type for this domain. If 'AUTOMATIC', a managed certificate is automatically provisioned.
	// If 'MANUAL', 'certificateId' must be manually specified in order to configure SSL for this domain. Possible values: ["AUTOMATIC", "MANUAL"]
	SslManagementType *string `json:"sslManagementType" tf:"ssl_management_type"`
}

type DomainMappingSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Relative name of the domain serving the application. Example: example.com.
	DomainName *string `json:"domainName" tf:"domain_name"`
	// Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Whether the domain creation should override any existing mappings for this domain.
	// By default, overrides are rejected. Default value: "STRICT" Possible values: ["STRICT", "OVERRIDE"]
	// +optional
	OverrideStrategy *string `json:"overrideStrategy,omitempty" tf:"override_strategy"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The resource records required to configure this domain mapping. These records must be added to the domain's DNS
	// configuration in order to serve the application via this domain mapping.
	// +optional
	ResourceRecords []DomainMappingSpecResourceRecords `json:"resourceRecords,omitempty" tf:"resource_records"`
	// SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
	// +optional
	SslSettings *DomainMappingSpecSslSettings `json:"sslSettings,omitempty" tf:"ssl_settings"`
}

type DomainMappingStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DomainMappingList is a list of DomainMappings
type DomainMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DomainMapping CRD objects
	Items []DomainMapping `json:"items,omitempty"`
}
