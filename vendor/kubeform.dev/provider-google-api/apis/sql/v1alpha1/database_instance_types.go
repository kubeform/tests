/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DatabaseInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseInstanceSpec   `json:"spec,omitempty"`
	Status            DatabaseInstanceStatus `json:"status,omitempty"`
}

type DatabaseInstanceSpec struct {
	DatabaseInstanceSpec2 `json:",inline"`
	// +optional
	KubeformOutput DatabaseInstanceSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DatabaseInstanceSpecClone struct {
	// The timestamp of the point in time that should be restored.
	PointInTime *string `json:"pointInTime" tf:"point_in_time"`
	// The name of the instance from which the point in time should be restored.
	SourceInstanceName *string `json:"sourceInstanceName" tf:"source_instance_name"`
}

type DatabaseInstanceSpecIpAddress struct {
	// +optional
	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`
	// +optional
	TimeToRetire *string `json:"timeToRetire,omitempty" tf:"time_to_retire"`
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type DatabaseInstanceSpecReplicaConfiguration struct {
	// PEM representation of the trusted CA's x509 certificate.
	// +optional
	CaCertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate"`
	// PEM representation of the replica's x509 certificate.
	// +optional
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate"`
	// PEM representation of the replica's private key. The corresponding public key in encoded in the client_certificate.
	// +optional
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key"`
	// The number of seconds between connect retries.
	// +optional
	ConnectRetryInterval *int64 `json:"connectRetryInterval,omitempty" tf:"connect_retry_interval"`
	// Path to a SQL file in Google Cloud Storage from which replica instances are created. Format is gs://bucket/filename.
	// +optional
	DumpFilePath *string `json:"dumpFilePath,omitempty" tf:"dump_file_path"`
	// Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. If the master instance fails, the replica instance will be promoted as the new master instance.
	// +optional
	FailoverTarget *bool `json:"failoverTarget,omitempty" tf:"failover_target"`
	// Time in ms between replication heartbeats.
	// +optional
	MasterHeartbeatPeriod *int64 `json:"masterHeartbeatPeriod,omitempty" tf:"master_heartbeat_period"`
	// Password for the replication connection.
	// +optional
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// Permissible ciphers for use in SSL encryption.
	// +optional
	SslCipher *string `json:"sslCipher,omitempty" tf:"ssl_cipher"`
	// Username for replication connection.
	// +optional
	Username *string `json:"username,omitempty" tf:"username"`
	// True if the master's common name value is checked during the SSL handshake.
	// +optional
	VerifyServerCertificate *bool `json:"verifyServerCertificate,omitempty" tf:"verify_server_certificate"`
}

type DatabaseInstanceSpecRestoreBackupContext struct {
	// The ID of the backup run to restore from.
	BackupRunID *int64 `json:"backupRunID" tf:"backup_run_id"`
	// The ID of the instance that the backup was taken from.
	// +optional
	InstanceID *string `json:"instanceID,omitempty" tf:"instance_id"`
	// The full project ID of the source instance.
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
}

type DatabaseInstanceSpecServerCaCert struct {
	// The CA Certificate used to connect to the SQL Instance via SSL.
	// +optional
	Cert *string `json:"cert,omitempty" tf:"cert"`
	// The CN valid for the CA Cert.
	// +optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name"`
	// Creation time of the CA Cert.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Expiration time of the CA Cert.
	// +optional
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time"`
	// SHA Fingerprint of the CA Cert.
	// +optional
	Sha1Fingerprint *string `json:"sha1Fingerprint,omitempty" tf:"sha1_fingerprint"`
}

type DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings struct {
	// Number of backups to retain.
	RetainedBackups *int64 `json:"retainedBackups" tf:"retained_backups"`
	// The unit that 'retainedBackups' represents. Defaults to COUNT
	// +optional
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit"`
}

type DatabaseInstanceSpecSettingsBackupConfiguration struct {
	// +optional
	BackupRetentionSettings *DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings `json:"backupRetentionSettings,omitempty" tf:"backup_retention_settings"`
	// True if binary logging is enabled. If settings.backup_configuration.enabled is false, this must be as well. Cannot be used with Postgres.
	// +optional
	BinaryLogEnabled *bool `json:"binaryLogEnabled,omitempty" tf:"binary_log_enabled"`
	// True if backup configuration is enabled.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
	// Location of the backup configuration.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// True if Point-in-time recovery is enabled.
	// +optional
	PointInTimeRecoveryEnabled *bool `json:"pointInTimeRecoveryEnabled,omitempty" tf:"point_in_time_recovery_enabled"`
	// HH:MM format time indicating when backup configuration starts.
	// +optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`
	// The number of days of transaction logs we retain for point in time restore, from 1-7.
	// +optional
	TransactionLogRetentionDays *int64 `json:"transactionLogRetentionDays,omitempty" tf:"transaction_log_retention_days"`
}

type DatabaseInstanceSpecSettingsDatabaseFlags struct {
	// Name of the flag.
	Name *string `json:"name" tf:"name"`
	// Value of the flag.
	Value *string `json:"value" tf:"value"`
}

type DatabaseInstanceSpecSettingsInsightsConfig struct {
	// True if Query Insights feature is enabled.
	// +optional
	QueryInsightsEnabled *bool `json:"queryInsightsEnabled,omitempty" tf:"query_insights_enabled"`
	// Maximum query length stored in bytes. Between 256 and 4500. Default to 1024.
	// +optional
	QueryStringLength *int64 `json:"queryStringLength,omitempty" tf:"query_string_length"`
	// True if Query Insights will record application tags from query when enabled.
	// +optional
	RecordApplicationTags *bool `json:"recordApplicationTags,omitempty" tf:"record_application_tags"`
	// True if Query Insights will record client address when enabled.
	// +optional
	RecordClientAddress *bool `json:"recordClientAddress,omitempty" tf:"record_client_address"`
}

type DatabaseInstanceSpecSettingsIpConfigurationAuthorizedNetworks struct {
	// +optional
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time"`
	// +optional
	Name  *string `json:"name,omitempty" tf:"name"`
	Value *string `json:"value" tf:"value"`
}

type DatabaseInstanceSpecSettingsIpConfiguration struct {
	// +optional
	AuthorizedNetworks []DatabaseInstanceSpecSettingsIpConfigurationAuthorizedNetworks `json:"authorizedNetworks,omitempty" tf:"authorized_networks"`
	// Whether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.
	// +optional
	Ipv4Enabled *bool `json:"ipv4Enabled,omitempty" tf:"ipv4_enabled"`
	// The VPC network from which the Cloud SQL instance is accessible for private IP. For example, projects/myProject/global/networks/default. Specifying a network enables private IP. At least ipv4_enabled must be enabled or a private_network must be configured. This setting can be updated, but it cannot be removed after it is set.
	// +optional
	PrivateNetwork *string `json:"privateNetwork,omitempty" tf:"private_network"`
	// +optional
	RequireSSL *bool `json:"requireSSL,omitempty" tf:"require_ssl"`
}

type DatabaseInstanceSpecSettingsLocationPreference struct {
	// A Google App Engine application whose zone to remain in. Must be in the same region as this instance.
	// +optional
	FollowGaeApplication *string `json:"followGaeApplication,omitempty" tf:"follow_gae_application"`
	// The preferred compute engine zone.
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type DatabaseInstanceSpecSettingsMaintenanceWindow struct {
	// Day of week (1-7), starting on Monday
	// +optional
	Day *int64 `json:"day,omitempty" tf:"day"`
	// Hour of day (0-23), ignored if day not set
	// +optional
	Hour *int64 `json:"hour,omitempty" tf:"hour"`
	// Receive updates earlier (canary) or later (stable)
	// +optional
	UpdateTrack *string `json:"updateTrack,omitempty" tf:"update_track"`
}

type DatabaseInstanceSpecSettings struct {
	// This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
	// +optional
	ActivationPolicy *string `json:"activationPolicy,omitempty" tf:"activation_policy"`
	// This property is only applicable to First Generation instances. First Generation instances are now deprecated, see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances. A list of Google App Engine project names that are allowed to access this instance.
	// +optional
	// Deprecated
	AuthorizedGaeApplications []string `json:"authorizedGaeApplications,omitempty" tf:"authorized_gae_applications"`
	// The availability type of the Cloud SQL instance, high availability
	// (REGIONAL) or single zone (ZONAL). For MySQL instances, ensure that
	// settings.backup_configuration.enabled and
	// settings.backup_configuration.binary_log_enabled are both set to true.
	// +optional
	AvailabilityType *string `json:"availabilityType,omitempty" tf:"availability_type"`
	// +optional
	BackupConfiguration *DatabaseInstanceSpecSettingsBackupConfiguration `json:"backupConfiguration,omitempty" tf:"backup_configuration"`
	// This property is only applicable to First Generation instances. First Generation instances are now deprecated, see here for information on how to upgrade to Second Generation instances. Specific to read instances, indicates when crash-safe replication flags are enabled.
	// +optional
	// Deprecated
	CrashSafeReplication *bool `json:"crashSafeReplication,omitempty" tf:"crash_safe_replication"`
	// +optional
	DatabaseFlags []DatabaseInstanceSpecSettingsDatabaseFlags `json:"databaseFlags,omitempty" tf:"database_flags"`
	// Configuration to increase storage size automatically.  Note that future terraform apply calls will attempt to resize the disk to the value specified in disk_size - if this is set, do not set disk_size.
	// +optional
	DiskAutoresize *bool `json:"diskAutoresize,omitempty" tf:"disk_autoresize"`
	// The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased.
	// +optional
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size"`
	// The type of data disk: PD_SSD or PD_HDD.
	// +optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type"`
	// Configuration of Query Insights.
	// +optional
	InsightsConfig *DatabaseInstanceSpecSettingsInsightsConfig `json:"insightsConfig,omitempty" tf:"insights_config"`
	// +optional
	IpConfiguration *DatabaseInstanceSpecSettingsIpConfiguration `json:"ipConfiguration,omitempty" tf:"ip_configuration"`
	// +optional
	LocationPreference *DatabaseInstanceSpecSettingsLocationPreference `json:"locationPreference,omitempty" tf:"location_preference"`
	// Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
	// +optional
	MaintenanceWindow *DatabaseInstanceSpecSettingsMaintenanceWindow `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`
	// Pricing plan for this instance, can only be PER_USE.
	// +optional
	PricingPlan *string `json:"pricingPlan,omitempty" tf:"pricing_plan"`
	// This property is only applicable to First Generation instances. First Generation instances are now deprecated, see here for information on how to upgrade to Second Generation instances. Replication type for this instance, can be one of ASYNCHRONOUS or SYNCHRONOUS.
	// +optional
	// Deprecated
	ReplicationType *string `json:"replicationType,omitempty" tf:"replication_type"`
	// The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types such as db-f1-micro, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
	Tier *string `json:"tier" tf:"tier"`
	// A set of key/value user label pairs to assign to the instance.
	// +optional
	UserLabels *map[string]string `json:"userLabels,omitempty" tf:"user_labels"`
	// Used to make sure changes to the settings block are atomic.
	// +optional
	Version *int64 `json:"version,omitempty" tf:"version"`
}

type DatabaseInstanceSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// Configuration for creating a new instance as a clone of another instance.
	// +optional
	Clone *DatabaseInstanceSpecClone `json:"clone,omitempty" tf:"clone"`
	// The connection name of the instance to be used in connection strings. For example, when connecting with Cloud SQL Proxy.
	// +optional
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name"`
	// The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6,POSTGRES_11, SQLSERVER_2017_STANDARD, SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB. Database Version Policies includes an up-to-date reference of supported versions.
	// +optional
	DatabaseVersion *string `json:"databaseVersion,omitempty" tf:"database_version"`
	// Used to block Terraform from deleting a SQL Instance.
	// +optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection"`
	// The first IPv4 address of any type assigned. This is to support accessing the first address in the list in a terraform output when the resource is configured with a count.
	// +optional
	FirstIPAddress *string `json:"firstIPAddress,omitempty" tf:"first_ip_address"`
	// +optional
	IpAddress []DatabaseInstanceSpecIpAddress `json:"ipAddress,omitempty" tf:"ip_address"`
	// The name of the instance that will act as the master in the replication setup. Note, this requires the master to have binary_log_enabled set, as well as existing backups.
	// +optional
	MasterInstanceName *string `json:"masterInstanceName,omitempty" tf:"master_instance_name"`
	// The name of the instance. If the name is left blank, Terraform will randomly generate one when the instance is first created. This is done because after a name is used, it cannot be reused for up to one week.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to access an IP of a specific type without performing filtering in a Terraform config.
	// +optional
	PrivateIPAddress *string `json:"privateIPAddress,omitempty" tf:"private_ip_address"`
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// IPv4 address assigned. This is a workaround for an issue fixed in Terraform 0.12 but also provides a convenient way to access an IP of a specific type without performing filtering in a Terraform config.
	// +optional
	PublicIPAddress *string `json:"publicIPAddress,omitempty" tf:"public_ip_address"`
	// The region the instance will sit in. Note, Cloud SQL is not available in all regions. A valid region must be provided to use this resource. If a region is not provided in the resource definition, the provider region will be used instead, but this will be an apply-time error for instances if the provider region is not supported with Cloud SQL. If you choose not to provide the region argument for this resource, make sure you understand this.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// The configuration for replication.
	// +optional
	ReplicaConfiguration *DatabaseInstanceSpecReplicaConfiguration `json:"replicaConfiguration,omitempty" tf:"replica_configuration"`
	// +optional
	RestoreBackupContext *DatabaseInstanceSpecRestoreBackupContext `json:"restoreBackupContext,omitempty" tf:"restore_backup_context"`
	// Initial root password. Required for MS SQL Server, ignored by MySQL and PostgreSQL.
	// +optional
	RootPassword *string `json:"-" sensitive:"true" tf:"root_password"`
	// The URI of the created resource.
	// +optional
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link"`
	// +optional
	ServerCaCert []DatabaseInstanceSpecServerCaCert `json:"serverCaCert,omitempty" tf:"server_ca_cert"`
	// The service account email address assigned to the instance.
	// +optional
	ServiceAccountEmailAddress *string `json:"serviceAccountEmailAddress,omitempty" tf:"service_account_email_address"`
	// The settings to use for the database. The configuration is detailed below.
	// +optional
	Settings *DatabaseInstanceSpecSettings `json:"settings,omitempty" tf:"settings"`
}

type DatabaseInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DatabaseInstanceList is a list of DatabaseInstances
type DatabaseInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DatabaseInstance CRD objects
	Items []DatabaseInstance `json:"items,omitempty"`
}
