/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecClone{}).Type1()):                                              DatabaseInstanceSpecCloneCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecReplicaConfiguration{}).Type1()):                               DatabaseInstanceSpecReplicaConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecRestoreBackupContext{}).Type1()):                               DatabaseInstanceSpecRestoreBackupContextCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettings{}).Type1()):                                           DatabaseInstanceSpecSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfiguration{}).Type1()):                        DatabaseInstanceSpecSettingsBackupConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{}).Type1()): DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsInsightsConfig{}).Type1()):                             DatabaseInstanceSpecSettingsInsightsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsIpConfiguration{}).Type1()):                            DatabaseInstanceSpecSettingsIpConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsLocationPreference{}).Type1()):                         DatabaseInstanceSpecSettingsLocationPreferenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsMaintenanceWindow{}).Type1()):                          DatabaseInstanceSpecSettingsMaintenanceWindowCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecClone{}).Type1()):                                              DatabaseInstanceSpecCloneCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecReplicaConfiguration{}).Type1()):                               DatabaseInstanceSpecReplicaConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecRestoreBackupContext{}).Type1()):                               DatabaseInstanceSpecRestoreBackupContextCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettings{}).Type1()):                                           DatabaseInstanceSpecSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfiguration{}).Type1()):                        DatabaseInstanceSpecSettingsBackupConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{}).Type1()): DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsInsightsConfig{}).Type1()):                             DatabaseInstanceSpecSettingsInsightsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsIpConfiguration{}).Type1()):                            DatabaseInstanceSpecSettingsIpConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsLocationPreference{}).Type1()):                         DatabaseInstanceSpecSettingsLocationPreferenceCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsMaintenanceWindow{}).Type1()):                          DatabaseInstanceSpecSettingsMaintenanceWindowCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecCloneCodec struct {
}

func (DatabaseInstanceSpecCloneCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecClone)(ptr) == nil
}

func (DatabaseInstanceSpecCloneCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecClone)(ptr)
	var objs []DatabaseInstanceSpecClone
	if obj != nil {
		objs = []DatabaseInstanceSpecClone{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecClone{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecCloneCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecClone)(ptr) = DatabaseInstanceSpecClone{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecClone

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecClone{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecClone)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecClone)(ptr) = DatabaseInstanceSpecClone{}
			}
		} else {
			*(*DatabaseInstanceSpecClone)(ptr) = DatabaseInstanceSpecClone{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecClone", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecReplicaConfigurationCodec struct {
}

func (DatabaseInstanceSpecReplicaConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecReplicaConfiguration)(ptr) == nil
}

func (DatabaseInstanceSpecReplicaConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecReplicaConfiguration)(ptr)
	var objs []DatabaseInstanceSpecReplicaConfiguration
	if obj != nil {
		objs = []DatabaseInstanceSpecReplicaConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecReplicaConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecReplicaConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecReplicaConfiguration)(ptr) = DatabaseInstanceSpecReplicaConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecReplicaConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecReplicaConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecReplicaConfiguration)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecReplicaConfiguration)(ptr) = DatabaseInstanceSpecReplicaConfiguration{}
			}
		} else {
			*(*DatabaseInstanceSpecReplicaConfiguration)(ptr) = DatabaseInstanceSpecReplicaConfiguration{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecReplicaConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecRestoreBackupContextCodec struct {
}

func (DatabaseInstanceSpecRestoreBackupContextCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecRestoreBackupContext)(ptr) == nil
}

func (DatabaseInstanceSpecRestoreBackupContextCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecRestoreBackupContext)(ptr)
	var objs []DatabaseInstanceSpecRestoreBackupContext
	if obj != nil {
		objs = []DatabaseInstanceSpecRestoreBackupContext{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecRestoreBackupContext{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecRestoreBackupContextCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecRestoreBackupContext)(ptr) = DatabaseInstanceSpecRestoreBackupContext{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecRestoreBackupContext

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecRestoreBackupContext{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecRestoreBackupContext)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecRestoreBackupContext)(ptr) = DatabaseInstanceSpecRestoreBackupContext{}
			}
		} else {
			*(*DatabaseInstanceSpecRestoreBackupContext)(ptr) = DatabaseInstanceSpecRestoreBackupContext{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecRestoreBackupContext", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecSettingsCodec struct {
}

func (DatabaseInstanceSpecSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecSettings)(ptr) == nil
}

func (DatabaseInstanceSpecSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecSettings)(ptr)
	var objs []DatabaseInstanceSpecSettings
	if obj != nil {
		objs = []DatabaseInstanceSpecSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecSettings)(ptr) = DatabaseInstanceSpecSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecSettings)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecSettings)(ptr) = DatabaseInstanceSpecSettings{}
			}
		} else {
			*(*DatabaseInstanceSpecSettings)(ptr) = DatabaseInstanceSpecSettings{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecSettingsBackupConfigurationCodec struct {
}

func (DatabaseInstanceSpecSettingsBackupConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecSettingsBackupConfiguration)(ptr) == nil
}

func (DatabaseInstanceSpecSettingsBackupConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecSettingsBackupConfiguration)(ptr)
	var objs []DatabaseInstanceSpecSettingsBackupConfiguration
	if obj != nil {
		objs = []DatabaseInstanceSpecSettingsBackupConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecSettingsBackupConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecSettingsBackupConfiguration)(ptr) = DatabaseInstanceSpecSettingsBackupConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecSettingsBackupConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecSettingsBackupConfiguration)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecSettingsBackupConfiguration)(ptr) = DatabaseInstanceSpecSettingsBackupConfiguration{}
			}
		} else {
			*(*DatabaseInstanceSpecSettingsBackupConfiguration)(ptr) = DatabaseInstanceSpecSettingsBackupConfiguration{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecSettingsBackupConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettingsCodec struct {
}

func (DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings)(ptr) == nil
}

func (DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings)(ptr)
	var objs []DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings
	if obj != nil {
		objs = []DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings)(ptr) = DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings)(ptr) = DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{}
			}
		} else {
			*(*DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings)(ptr) = DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecSettingsBackupConfigurationBackupRetentionSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecSettingsInsightsConfigCodec struct {
}

func (DatabaseInstanceSpecSettingsInsightsConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecSettingsInsightsConfig)(ptr) == nil
}

func (DatabaseInstanceSpecSettingsInsightsConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecSettingsInsightsConfig)(ptr)
	var objs []DatabaseInstanceSpecSettingsInsightsConfig
	if obj != nil {
		objs = []DatabaseInstanceSpecSettingsInsightsConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsInsightsConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecSettingsInsightsConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecSettingsInsightsConfig)(ptr) = DatabaseInstanceSpecSettingsInsightsConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecSettingsInsightsConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsInsightsConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecSettingsInsightsConfig)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecSettingsInsightsConfig)(ptr) = DatabaseInstanceSpecSettingsInsightsConfig{}
			}
		} else {
			*(*DatabaseInstanceSpecSettingsInsightsConfig)(ptr) = DatabaseInstanceSpecSettingsInsightsConfig{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecSettingsInsightsConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecSettingsIpConfigurationCodec struct {
}

func (DatabaseInstanceSpecSettingsIpConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecSettingsIpConfiguration)(ptr) == nil
}

func (DatabaseInstanceSpecSettingsIpConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecSettingsIpConfiguration)(ptr)
	var objs []DatabaseInstanceSpecSettingsIpConfiguration
	if obj != nil {
		objs = []DatabaseInstanceSpecSettingsIpConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsIpConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecSettingsIpConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecSettingsIpConfiguration)(ptr) = DatabaseInstanceSpecSettingsIpConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecSettingsIpConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsIpConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecSettingsIpConfiguration)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecSettingsIpConfiguration)(ptr) = DatabaseInstanceSpecSettingsIpConfiguration{}
			}
		} else {
			*(*DatabaseInstanceSpecSettingsIpConfiguration)(ptr) = DatabaseInstanceSpecSettingsIpConfiguration{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecSettingsIpConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecSettingsLocationPreferenceCodec struct {
}

func (DatabaseInstanceSpecSettingsLocationPreferenceCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecSettingsLocationPreference)(ptr) == nil
}

func (DatabaseInstanceSpecSettingsLocationPreferenceCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecSettingsLocationPreference)(ptr)
	var objs []DatabaseInstanceSpecSettingsLocationPreference
	if obj != nil {
		objs = []DatabaseInstanceSpecSettingsLocationPreference{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsLocationPreference{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecSettingsLocationPreferenceCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecSettingsLocationPreference)(ptr) = DatabaseInstanceSpecSettingsLocationPreference{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecSettingsLocationPreference

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsLocationPreference{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecSettingsLocationPreference)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecSettingsLocationPreference)(ptr) = DatabaseInstanceSpecSettingsLocationPreference{}
			}
		} else {
			*(*DatabaseInstanceSpecSettingsLocationPreference)(ptr) = DatabaseInstanceSpecSettingsLocationPreference{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecSettingsLocationPreference", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DatabaseInstanceSpecSettingsMaintenanceWindowCodec struct {
}

func (DatabaseInstanceSpecSettingsMaintenanceWindowCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DatabaseInstanceSpecSettingsMaintenanceWindow)(ptr) == nil
}

func (DatabaseInstanceSpecSettingsMaintenanceWindowCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DatabaseInstanceSpecSettingsMaintenanceWindow)(ptr)
	var objs []DatabaseInstanceSpecSettingsMaintenanceWindow
	if obj != nil {
		objs = []DatabaseInstanceSpecSettingsMaintenanceWindow{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsMaintenanceWindow{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DatabaseInstanceSpecSettingsMaintenanceWindowCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DatabaseInstanceSpecSettingsMaintenanceWindow)(ptr) = DatabaseInstanceSpecSettingsMaintenanceWindow{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DatabaseInstanceSpecSettingsMaintenanceWindow

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DatabaseInstanceSpecSettingsMaintenanceWindow{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DatabaseInstanceSpecSettingsMaintenanceWindow)(ptr) = objs[0]
			} else {
				*(*DatabaseInstanceSpecSettingsMaintenanceWindow)(ptr) = DatabaseInstanceSpecSettingsMaintenanceWindow{}
			}
		} else {
			*(*DatabaseInstanceSpecSettingsMaintenanceWindow)(ptr) = DatabaseInstanceSpecSettingsMaintenanceWindow{}
		}
	default:
		iter.ReportError("decode DatabaseInstanceSpecSettingsMaintenanceWindow", "unexpected JSON type")
	}
}
