/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Document struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DocumentSpec   `json:"spec,omitempty"`
	Status            DocumentStatus `json:"status,omitempty"`
}

type DocumentSpec struct {
	DocumentSpec2 `json:",inline"`
	// +optional
	KubeformOutput DocumentSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DocumentSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The collection ID, relative to database. For example: chatrooms or chatrooms/my-document/private-messages.
	Collection *string `json:"collection" tf:"collection"`
	// Creation timestamp in RFC3339 format.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// The Firestore database id. Defaults to '"(default)"'.
	// +optional
	Database *string `json:"database,omitempty" tf:"database"`
	// The client-assigned document ID to use for this document during creation.
	DocumentID *string `json:"documentID" tf:"document_id"`
	// The document's [fields](https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases.documents) formated as a json string.
	Fields *string `json:"fields" tf:"fields"`
	// A server defined name for this index. Format:
	// 'projects/{{project_id}}/databases/{{database_id}}/documents/{{path}}/{{document_id}}'
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// A relative path to the collection this document exists within
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Last update timestamp in RFC3339 format.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type DocumentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DocumentList is a list of Documents
type DocumentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Document CRD objects
	Items []Document `json:"items,omitempty"`
}
