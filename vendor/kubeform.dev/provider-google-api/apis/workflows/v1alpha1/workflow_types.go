/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Workflow struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkflowSpec   `json:"spec,omitempty"`
	Status            WorkflowStatus `json:"status,omitempty"`
}

type WorkflowSpec struct {
	WorkflowSpec2 `json:",inline"`
	// +optional
	KubeformOutput WorkflowSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type WorkflowSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The timestamp of when the workflow was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// A set of key/value label pairs to assign to this Workflow.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// Name of the Workflow.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The region of the workflow.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// The revision of the workflow. A new one is generated if the service account or source contents is changed.
	// +optional
	RevisionID *string `json:"revisionID,omitempty" tf:"revision_id"`
	// Name of the service account associated with the latest workflow version. This service
	// account represents the identity of the workflow and determines what permissions the workflow has.
	//
	// Format: projects/{project}/serviceAccounts/{account}.
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account"`
	// Workflow code to be executed. The size limit is 32KB.
	// +optional
	SourceContents *string `json:"sourceContents,omitempty" tf:"source_contents"`
	// State of the workflow deployment.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// The timestamp of when the workflow was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
}

type WorkflowStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// WorkflowList is a list of Workflows
type WorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Workflow CRD objects
	Items []Workflow `json:"items,omitempty"`
}
