/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Metric struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MetricSpec   `json:"spec,omitempty"`
	Status            MetricStatus `json:"status,omitempty"`
}

type MetricSpec struct {
	MetricSpec2 `json:",inline"`
	// +optional
	KubeformOutput MetricSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type MetricSpecBucketOptionsExplicitBuckets struct {
	// The values must be monotonically increasing.
	Bounds []float64 `json:"bounds" tf:"bounds"`
}

type MetricSpecBucketOptionsExponentialBuckets struct {
	// Must be greater than 1.
	// +optional
	GrowthFactor *float64 `json:"growthFactor,omitempty" tf:"growth_factor"`
	// Must be greater than 0.
	// +optional
	NumFiniteBuckets *int64 `json:"numFiniteBuckets,omitempty" tf:"num_finite_buckets"`
	// Must be greater than 0.
	// +optional
	Scale *float64 `json:"scale,omitempty" tf:"scale"`
}

type MetricSpecBucketOptionsLinearBuckets struct {
	// Must be greater than 0.
	// +optional
	NumFiniteBuckets *int64 `json:"numFiniteBuckets,omitempty" tf:"num_finite_buckets"`
	// Lower bound of the first bucket.
	// +optional
	Offset *float64 `json:"offset,omitempty" tf:"offset"`
	// Must be greater than 0.
	// +optional
	Width *int64 `json:"width,omitempty" tf:"width"`
}

type MetricSpecBucketOptions struct {
	// Specifies a set of buckets with arbitrary widths.
	// +optional
	ExplicitBuckets *MetricSpecBucketOptionsExplicitBuckets `json:"explicitBuckets,omitempty" tf:"explicit_buckets"`
	// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
	// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
	// +optional
	ExponentialBuckets *MetricSpecBucketOptionsExponentialBuckets `json:"exponentialBuckets,omitempty" tf:"exponential_buckets"`
	// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
	// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
	// +optional
	LinearBuckets *MetricSpecBucketOptionsLinearBuckets `json:"linearBuckets,omitempty" tf:"linear_buckets"`
}

type MetricSpecMetricDescriptorLabels struct {
	// A human-readable description for the label.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The label key.
	Key *string `json:"key" tf:"key"`
	// The type of data that can be assigned to the label. Default value: "STRING" Possible values: ["BOOL", "INT64", "STRING"]
	// +optional
	ValueType *string `json:"valueType,omitempty" tf:"value_type"`
}

type MetricSpecMetricDescriptor struct {
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
	// without an ending period, for example "Request count". This field is optional but it is
	// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// The set of labels that can be used to describe a specific instance of this metric type. For
	// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
	// for the HTTP response code, response_code, so you can look at latencies for successful responses
	// or just for responses that failed.
	// +optional
	Labels []MetricSpecMetricDescriptorLabels `json:"labels,omitempty" tf:"labels"`
	// Whether the metric records instantaneous values, changes to a value, etc.
	// Some combinations of metricKind and valueType might not be supported.
	// For counter metrics, set this to DELTA. Possible values: ["DELTA", "GAUGE", "CUMULATIVE"]
	MetricKind *string `json:"metricKind" tf:"metric_kind"`
	// The unit in which the metric value is reported. It is only applicable if the valueType is
	// 'INT64', 'DOUBLE', or 'DISTRIBUTION'. The supported units are a subset of
	// [The Unified Code for Units of Measure](http://unitsofmeasure.org/ucum.html) standard
	// +optional
	Unit *string `json:"unit,omitempty" tf:"unit"`
	// Whether the measurement is an integer, a floating-point number, etc.
	// Some combinations of metricKind and valueType might not be supported.
	// For counter metrics, set this to INT64. Possible values: ["BOOL", "INT64", "DOUBLE", "STRING", "DISTRIBUTION", "MONEY"]
	ValueType *string `json:"valueType" tf:"value_type"`
}

type MetricSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
	// describes the bucket boundaries used to create a histogram of the extracted values.
	// +optional
	BucketOptions *MetricSpecBucketOptions `json:"bucketOptions,omitempty" tf:"bucket_options"`
	// A description of this metric, which is used in documentation. The maximum length of the
	// description is 8000 characters.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which
	// is used to match log entries.
	Filter *string `json:"filter" tf:"filter"`
	// A map from a label key string to an extractor expression which is used to extract data from a log
	// entry field and assign as the label value. Each label key specified in the LabelDescriptor must
	// have an associated extractor expression in this map. The syntax of the extractor expression is
	// the same as for the valueExtractor field.
	// +optional
	LabelExtractors *map[string]string `json:"labelExtractors,omitempty" tf:"label_extractors"`
	// The metric descriptor associated with the logs-based metric.
	MetricDescriptor *MetricSpecMetricDescriptor `json:"metricDescriptor" tf:"metric_descriptor"`
	// The client-assigned metric identifier. Examples - "error_count", "nginx/requests".
	// Metric identifiers are limited to 100 characters and can include only the following
	// characters A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The forward-slash
	// character (/) denotes a hierarchy of name pieces, and it cannot be the first character
	// of the name.
	Name *string `json:"name" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// A valueExtractor is required when using a distribution logs-based metric to extract the values to
	// record from a log entry. Two functions are supported for value extraction - EXTRACT(field) or
	// REGEXP_EXTRACT(field, regex). The argument are 1. field - The name of the log entry field from which
	// the value is to be extracted. 2. regex - A regular expression using the Google RE2 syntax
	// (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified
	// log entry field. The value of the field is converted to a string before applying the regex. It is an
	// error to specify a regex that does not include exactly one capture group.
	// +optional
	ValueExtractor *string `json:"valueExtractor,omitempty" tf:"value_extractor"`
}

type MetricStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MetricList is a list of Metrics
type MetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Metric CRD objects
	Items []Metric `json:"items,omitempty"`
}
