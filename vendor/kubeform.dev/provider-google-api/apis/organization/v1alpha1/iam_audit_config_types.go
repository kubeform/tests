/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type IamAuditConfig struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IamAuditConfigSpec   `json:"spec,omitempty"`
	Status            IamAuditConfigStatus `json:"status,omitempty"`
}

type IamAuditConfigSpec struct {
	IamAuditConfigSpec2 `json:",inline"`
	// +optional
	KubeformOutput IamAuditConfigSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type IamAuditConfigSpecAuditLogConfig struct {
	// Identities that do not cause logging for this type of permission. Each entry can have one of the following values:user:{emailid}: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com. serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// +optional
	ExemptedMembers []string `json:"exemptedMembers,omitempty" tf:"exempted_members"`
	// Permission type for which logging is to be configured. Must be one of DATA_READ, DATA_WRITE, or ADMIN_READ.
	LogType *string `json:"logType" tf:"log_type"`
}

type IamAuditConfigSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The configuration for logging of each type of permission. This can be specified multiple times.
	AuditLogConfig []IamAuditConfigSpecAuditLogConfig `json:"auditLogConfig" tf:"audit_log_config"`
	// The etag of iam policy
	// +optional
	Etag *string `json:"etag,omitempty" tf:"etag"`
	// The numeric ID of the organization in which you want to manage the audit logging config.
	OrgID *string `json:"orgID" tf:"org_id"`
	// Service which will be enabled for audit logging. The special value allServices covers all services.
	Service *string `json:"service" tf:"service"`
}

type IamAuditConfigStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IamAuditConfigList is a list of IamAuditConfigs
type IamAuditConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of IamAuditConfig CRD objects
	Items []IamAuditConfig `json:"items,omitempty"`
}
