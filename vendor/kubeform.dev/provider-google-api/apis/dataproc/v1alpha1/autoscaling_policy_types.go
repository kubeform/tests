/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AutoscalingPolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoscalingPolicySpec   `json:"spec,omitempty"`
	Status            AutoscalingPolicyStatus `json:"status,omitempty"`
}

type AutoscalingPolicySpec struct {
	AutoscalingPolicySpec2 `json:",inline"`
	// +optional
	KubeformOutput AutoscalingPolicySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type AutoscalingPolicySpecBasicAlgorithmYarnConfig struct {
	// Timeout for YARN graceful decommissioning of Node Managers. Specifies the
	// duration to wait for jobs to complete before forcefully removing workers
	// (and potentially interrupting jobs). Only applicable to downscaling operations.
	//
	// Bounds: [0s, 1d].
	GracefulDecommissionTimeout *string `json:"gracefulDecommissionTimeout" tf:"graceful_decommission_timeout"`
	// Fraction of average pending memory in the last cooldown period for which to
	// remove workers. A scale-down factor of 1 will result in scaling down so that there
	// is no available memory remaining after the update (more aggressive scaling).
	// A scale-down factor of 0 disables removing workers, which can be beneficial for
	// autoscaling a single job.
	//
	// Bounds: [0.0, 1.0].
	ScaleDownFactor *float64 `json:"scaleDownFactor" tf:"scale_down_factor"`
	// Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
	// For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
	// recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
	// means the autoscaler will scale down on any recommended change.
	//
	// Bounds: [0.0, 1.0]. Default: 0.0.
	// +optional
	ScaleDownMinWorkerFraction *float64 `json:"scaleDownMinWorkerFraction,omitempty" tf:"scale_down_min_worker_fraction"`
	// Fraction of average pending memory in the last cooldown period for which to
	// add workers. A scale-up factor of 1.0 will result in scaling up so that there
	// is no pending memory remaining after the update (more aggressive scaling).
	// A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
	// (less aggressive scaling).
	//
	// Bounds: [0.0, 1.0].
	ScaleUpFactor *float64 `json:"scaleUpFactor" tf:"scale_up_factor"`
	// Minimum scale-up threshold as a fraction of total cluster size before scaling
	// occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
	// must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
	// 0 means the autoscaler will scale up on any recommended change.
	//
	// Bounds: [0.0, 1.0]. Default: 0.0.
	// +optional
	ScaleUpMinWorkerFraction *float64 `json:"scaleUpMinWorkerFraction,omitempty" tf:"scale_up_min_worker_fraction"`
}

type AutoscalingPolicySpecBasicAlgorithm struct {
	// Duration between scaling events. A scaling period starts after the
	// update operation from the previous event has completed.
	//
	// Bounds: [2m, 1d]. Default: 2m.
	// +optional
	CooldownPeriod *string `json:"cooldownPeriod,omitempty" tf:"cooldown_period"`
	// YARN autoscaling configuration.
	YarnConfig *AutoscalingPolicySpecBasicAlgorithmYarnConfig `json:"yarnConfig" tf:"yarn_config"`
}

type AutoscalingPolicySpecSecondaryWorkerConfig struct {
	// Maximum number of instances for this group. Note that by default, clusters will not use
	// secondary workers. Required for secondary workers if the minimum secondary instances is set.
	// Bounds: [minInstances, ). Defaults to 0.
	// +optional
	MaxInstances *int64 `json:"maxInstances,omitempty" tf:"max_instances"`
	// Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
	// +optional
	MinInstances *int64 `json:"minInstances,omitempty" tf:"min_instances"`
	// Weight for the instance group, which is used to determine the fraction of total workers
	// in the cluster from this instance group. For example, if primary workers have weight 2,
	// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
	// for each secondary worker.
	//
	// The cluster may not reach the specified balance if constrained by min/max bounds or other
	// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
	// primary workers will be added. The cluster can also be out of balance when created.
	//
	// If weight is not set on any instance group, the cluster will default to equal weight for
	// all groups: the cluster will attempt to maintain an equal number of workers in each group
	// within the configured size bounds for each group. If weight is set for one group only,
	// the cluster will default to zero weight on the unset group. For example if weight is set
	// only on primary workers, the cluster will use primary workers only and no secondary workers.
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type AutoscalingPolicySpecWorkerConfig struct {
	// Maximum number of instances for this group.
	MaxInstances *int64 `json:"maxInstances" tf:"max_instances"`
	// Minimum number of instances for this group. Bounds: [2, maxInstances]. Defaults to 2.
	// +optional
	MinInstances *int64 `json:"minInstances,omitempty" tf:"min_instances"`
	// Weight for the instance group, which is used to determine the fraction of total workers
	// in the cluster from this instance group. For example, if primary workers have weight 2,
	// and secondary workers have weight 1, the cluster will have approximately 2 primary workers
	// for each secondary worker.
	//
	// The cluster may not reach the specified balance if constrained by min/max bounds or other
	// autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
	// primary workers will be added. The cluster can also be out of balance when created.
	//
	// If weight is not set on any instance group, the cluster will default to equal weight for
	// all groups: the cluster will attempt to maintain an equal number of workers in each group
	// within the configured size bounds for each group. If weight is set for one group only,
	// the cluster will default to zero weight on the unset group. For example if weight is set
	// only on primary workers, the cluster will use primary workers only and no secondary workers.
	// +optional
	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type AutoscalingPolicySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Basic algorithm for autoscaling.
	// +optional
	BasicAlgorithm *AutoscalingPolicySpecBasicAlgorithm `json:"basicAlgorithm,omitempty" tf:"basic_algorithm"`
	// The  location where the autoscaling policy should reside.
	// The default value is 'global'.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// The "resource name" of the autoscaling policy.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
	// and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
	// 3 and 50 characters.
	PolicyID *string `json:"policyID" tf:"policy_id"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Describes how the autoscaler will operate for secondary workers.
	// +optional
	SecondaryWorkerConfig *AutoscalingPolicySpecSecondaryWorkerConfig `json:"secondaryWorkerConfig,omitempty" tf:"secondary_worker_config"`
	// Describes how the autoscaler will operate for primary workers.
	// +optional
	WorkerConfig *AutoscalingPolicySpecWorkerConfig `json:"workerConfig,omitempty" tf:"worker_config"`
}

type AutoscalingPolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AutoscalingPolicyList is a list of AutoscalingPolicys
type AutoscalingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AutoscalingPolicy CRD objects
	Items []AutoscalingPolicy `json:"items,omitempty"`
}
