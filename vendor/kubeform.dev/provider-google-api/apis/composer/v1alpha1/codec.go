/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfig{}).Type1()):                             EnvironmentSpecConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfig{}).Type1()):                   EnvironmentSpecConfigNodeConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfigIpAllocationPolicy{}).Type1()): EnvironmentSpecConfigNodeConfigIpAllocationPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigPrivateEnvironmentConfig{}).Type1()):     EnvironmentSpecConfigPrivateEnvironmentConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigSoftwareConfig{}).Type1()):               EnvironmentSpecConfigSoftwareConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfig{}).Type1()):                             EnvironmentSpecConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfig{}).Type1()):                   EnvironmentSpecConfigNodeConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfigIpAllocationPolicy{}).Type1()): EnvironmentSpecConfigNodeConfigIpAllocationPolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigPrivateEnvironmentConfig{}).Type1()):     EnvironmentSpecConfigPrivateEnvironmentConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigSoftwareConfig{}).Type1()):               EnvironmentSpecConfigSoftwareConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type EnvironmentSpecConfigCodec struct {
}

func (EnvironmentSpecConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnvironmentSpecConfig)(ptr) == nil
}

func (EnvironmentSpecConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnvironmentSpecConfig)(ptr)
	var objs []EnvironmentSpecConfig
	if obj != nil {
		objs = []EnvironmentSpecConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnvironmentSpecConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnvironmentSpecConfig)(ptr) = EnvironmentSpecConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnvironmentSpecConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnvironmentSpecConfig)(ptr) = objs[0]
			} else {
				*(*EnvironmentSpecConfig)(ptr) = EnvironmentSpecConfig{}
			}
		} else {
			*(*EnvironmentSpecConfig)(ptr) = EnvironmentSpecConfig{}
		}
	default:
		iter.ReportError("decode EnvironmentSpecConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnvironmentSpecConfigNodeConfigCodec struct {
}

func (EnvironmentSpecConfigNodeConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnvironmentSpecConfigNodeConfig)(ptr) == nil
}

func (EnvironmentSpecConfigNodeConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnvironmentSpecConfigNodeConfig)(ptr)
	var objs []EnvironmentSpecConfigNodeConfig
	if obj != nil {
		objs = []EnvironmentSpecConfigNodeConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnvironmentSpecConfigNodeConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnvironmentSpecConfigNodeConfig)(ptr) = EnvironmentSpecConfigNodeConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnvironmentSpecConfigNodeConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnvironmentSpecConfigNodeConfig)(ptr) = objs[0]
			} else {
				*(*EnvironmentSpecConfigNodeConfig)(ptr) = EnvironmentSpecConfigNodeConfig{}
			}
		} else {
			*(*EnvironmentSpecConfigNodeConfig)(ptr) = EnvironmentSpecConfigNodeConfig{}
		}
	default:
		iter.ReportError("decode EnvironmentSpecConfigNodeConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnvironmentSpecConfigNodeConfigIpAllocationPolicyCodec struct {
}

func (EnvironmentSpecConfigNodeConfigIpAllocationPolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnvironmentSpecConfigNodeConfigIpAllocationPolicy)(ptr) == nil
}

func (EnvironmentSpecConfigNodeConfigIpAllocationPolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnvironmentSpecConfigNodeConfigIpAllocationPolicy)(ptr)
	var objs []EnvironmentSpecConfigNodeConfigIpAllocationPolicy
	if obj != nil {
		objs = []EnvironmentSpecConfigNodeConfigIpAllocationPolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfigIpAllocationPolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnvironmentSpecConfigNodeConfigIpAllocationPolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnvironmentSpecConfigNodeConfigIpAllocationPolicy)(ptr) = EnvironmentSpecConfigNodeConfigIpAllocationPolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnvironmentSpecConfigNodeConfigIpAllocationPolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigNodeConfigIpAllocationPolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnvironmentSpecConfigNodeConfigIpAllocationPolicy)(ptr) = objs[0]
			} else {
				*(*EnvironmentSpecConfigNodeConfigIpAllocationPolicy)(ptr) = EnvironmentSpecConfigNodeConfigIpAllocationPolicy{}
			}
		} else {
			*(*EnvironmentSpecConfigNodeConfigIpAllocationPolicy)(ptr) = EnvironmentSpecConfigNodeConfigIpAllocationPolicy{}
		}
	default:
		iter.ReportError("decode EnvironmentSpecConfigNodeConfigIpAllocationPolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnvironmentSpecConfigPrivateEnvironmentConfigCodec struct {
}

func (EnvironmentSpecConfigPrivateEnvironmentConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnvironmentSpecConfigPrivateEnvironmentConfig)(ptr) == nil
}

func (EnvironmentSpecConfigPrivateEnvironmentConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnvironmentSpecConfigPrivateEnvironmentConfig)(ptr)
	var objs []EnvironmentSpecConfigPrivateEnvironmentConfig
	if obj != nil {
		objs = []EnvironmentSpecConfigPrivateEnvironmentConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigPrivateEnvironmentConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnvironmentSpecConfigPrivateEnvironmentConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnvironmentSpecConfigPrivateEnvironmentConfig)(ptr) = EnvironmentSpecConfigPrivateEnvironmentConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnvironmentSpecConfigPrivateEnvironmentConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigPrivateEnvironmentConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnvironmentSpecConfigPrivateEnvironmentConfig)(ptr) = objs[0]
			} else {
				*(*EnvironmentSpecConfigPrivateEnvironmentConfig)(ptr) = EnvironmentSpecConfigPrivateEnvironmentConfig{}
			}
		} else {
			*(*EnvironmentSpecConfigPrivateEnvironmentConfig)(ptr) = EnvironmentSpecConfigPrivateEnvironmentConfig{}
		}
	default:
		iter.ReportError("decode EnvironmentSpecConfigPrivateEnvironmentConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnvironmentSpecConfigSoftwareConfigCodec struct {
}

func (EnvironmentSpecConfigSoftwareConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnvironmentSpecConfigSoftwareConfig)(ptr) == nil
}

func (EnvironmentSpecConfigSoftwareConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnvironmentSpecConfigSoftwareConfig)(ptr)
	var objs []EnvironmentSpecConfigSoftwareConfig
	if obj != nil {
		objs = []EnvironmentSpecConfigSoftwareConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigSoftwareConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnvironmentSpecConfigSoftwareConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnvironmentSpecConfigSoftwareConfig)(ptr) = EnvironmentSpecConfigSoftwareConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnvironmentSpecConfigSoftwareConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecConfigSoftwareConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnvironmentSpecConfigSoftwareConfig)(ptr) = objs[0]
			} else {
				*(*EnvironmentSpecConfigSoftwareConfig)(ptr) = EnvironmentSpecConfigSoftwareConfig{}
			}
		} else {
			*(*EnvironmentSpecConfigSoftwareConfig)(ptr) = EnvironmentSpecConfigSoftwareConfig{}
		}
	default:
		iter.ReportError("decode EnvironmentSpecConfigSoftwareConfig", "unexpected JSON type")
	}
}
