/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DirectoryDomain struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DirectoryDomainSpec   `json:"spec,omitempty"`
	Status            DirectoryDomainStatus `json:"status,omitempty"`
}

type DirectoryDomainSpec struct {
	DirectoryDomainSpec2 `json:",inline"`
	// +optional
	KubeformOutput DirectoryDomainSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DirectoryDomainSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of delegated administrator account used to perform Active Directory operations.
	// If not specified, setupadmin will be used.
	// +optional
	Admin *string `json:"admin,omitempty" tf:"admin"`
	// The full names of the Google Compute Engine networks the domain instance is connected to. The domain is only available on networks listed in authorizedNetworks.
	// If CIDR subnets overlap between networks, domain creation will fail.
	// +optional
	AuthorizedNetworks []string `json:"authorizedNetworks,omitempty" tf:"authorized_networks"`
	// The fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions,
	// https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.
	DomainName *string `json:"domainName" tf:"domain_name"`
	// The fully-qualified domain name of the exposed domain used by clients to connect to the service.
	// Similar to what would be chosen for an Active Directory set up on an internal network.
	// +optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn"`
	// Resource labels that can contain user-provided metadata
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// Locations where domain needs to be provisioned. [regions][compute/docs/regions-zones/]
	// e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
	Locations []string `json:"locations" tf:"locations"`
	// The unique name of the domain using the format: 'projects/{project}/locations/global/domains/{domainName}'.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger.
	// Ranges must be unique and non-overlapping with existing subnets in authorizedNetworks
	ReservedIPRange *string `json:"reservedIPRange" tf:"reserved_ip_range"`
}

type DirectoryDomainStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DirectoryDomainList is a list of DirectoryDomains
type DirectoryDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DirectoryDomain CRD objects
	Items []DirectoryDomain `json:"items,omitempty"`
}
