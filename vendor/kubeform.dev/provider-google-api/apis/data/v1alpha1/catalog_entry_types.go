/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CatalogEntry struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CatalogEntrySpec   `json:"spec,omitempty"`
	Status            CatalogEntryStatus `json:"status,omitempty"`
}

type CatalogEntrySpec struct {
	CatalogEntrySpec2 `json:",inline"`
	// +optional
	KubeformOutput CatalogEntrySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CatalogEntrySpecBigqueryDateShardedSpec struct {
	// The Data Catalog resource name of the dataset entry the current table belongs to, for example,
	// projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/entries/{entryId}
	// +optional
	Dataset *string `json:"dataset,omitempty" tf:"dataset"`
	// Total number of shards.
	// +optional
	ShardCount *int64 `json:"shardCount,omitempty" tf:"shard_count"`
	// The table name prefix of the shards. The name of any given shard is [tablePrefix]YYYYMMDD,
	// for example, for shard MyTable20180101, the tablePrefix is MyTable.
	// +optional
	TablePrefix *string `json:"tablePrefix,omitempty" tf:"table_prefix"`
}

type CatalogEntrySpecBigqueryTableSpecTableSpec struct {
	// If the table is a dated shard, i.e., with name pattern [prefix]YYYYMMDD, groupedEntry is the
	// Data Catalog resource name of the date sharded grouped entry, for example,
	// projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/entries/{entryId}.
	// Otherwise, groupedEntry is empty.
	// +optional
	GroupedEntry *string `json:"groupedEntry,omitempty" tf:"grouped_entry"`
}

type CatalogEntrySpecBigqueryTableSpecViewSpec struct {
	// The query that defines the table view.
	// +optional
	ViewQuery *string `json:"viewQuery,omitempty" tf:"view_query"`
}

type CatalogEntrySpecBigqueryTableSpec struct {
	// The table source type.
	// +optional
	TableSourceType *string `json:"tableSourceType,omitempty" tf:"table_source_type"`
	// Spec of a BigQuery table. This field should only be populated if tableSourceType is BIGQUERY_TABLE.
	// +optional
	TableSpec []CatalogEntrySpecBigqueryTableSpecTableSpec `json:"tableSpec,omitempty" tf:"table_spec"`
	// Table view specification. This field should only be populated if tableSourceType is BIGQUERY_VIEW.
	// +optional
	ViewSpec []CatalogEntrySpecBigqueryTableSpecViewSpec `json:"viewSpec,omitempty" tf:"view_spec"`
}

type CatalogEntrySpecGcsFilesetSpecSampleGcsFileSpecs struct {
	// The full file path
	// +optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path"`
	// The size of the file, in bytes.
	// +optional
	SizeBytes *int64 `json:"sizeBytes,omitempty" tf:"size_bytes"`
}

type CatalogEntrySpecGcsFilesetSpec struct {
	// Patterns to identify a set of files in Google Cloud Storage.
	// See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames)
	// for more information. Note that bucket wildcards are currently not supported. Examples of valid filePatterns:
	//
	// * gs://bucket_name/dir/*: matches all files within bucket_name/dir directory.
	// * gs://bucket_name/dir/**: matches all files in bucket_name/dir spanning all subdirectories.
	// * gs://bucket_name/file*: matches files prefixed by file in bucket_name
	// * gs://bucket_name/??.txt: matches files with two characters followed by .txt in bucket_name
	// * gs://bucket_name/[aeiou].txt: matches files that contain a single vowel character followed by .txt in bucket_name
	// * gs://bucket_name/[a-m].txt: matches files that contain a, b, ... or m followed by .txt in bucket_name
	// * gs://bucket_name/a/*/b: matches all files in bucket_name that match a/*/b pattern, such as a/c/b, a/d/b
	// * gs://another_bucket/a.txt: matches gs://another_bucket/a.txt
	FilePatterns []string `json:"filePatterns" tf:"file_patterns"`
	// Sample files contained in this fileset, not all files contained in this fileset are represented here.
	// +optional
	SampleGcsFileSpecs []CatalogEntrySpecGcsFilesetSpecSampleGcsFileSpecs `json:"sampleGcsFileSpecs,omitempty" tf:"sample_gcs_file_specs"`
}

type CatalogEntrySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Specification for a group of BigQuery tables with name pattern [prefix]YYYYMMDD.
	// Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding.
	// +optional
	BigqueryDateShardedSpec []CatalogEntrySpecBigqueryDateShardedSpec `json:"bigqueryDateShardedSpec,omitempty" tf:"bigquery_date_sharded_spec"`
	// Specification that applies to a BigQuery table. This is only valid on entries of type TABLE.
	// +optional
	BigqueryTableSpec []CatalogEntrySpecBigqueryTableSpec `json:"bigqueryTableSpec,omitempty" tf:"bigquery_table_spec"`
	// Entry description, which can consist of several sentences or paragraphs that describe entry contents.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display information such as title and description. A short name to identify the entry,
	// for example, "Analytics Data - Jan 2011".
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// The name of the entry group this entry is in.
	EntryGroup *string `json:"entryGroup" tf:"entry_group"`
	// The id of the entry to create.
	EntryID *string `json:"entryID" tf:"entry_id"`
	// Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET.
	// +optional
	GcsFilesetSpec *CatalogEntrySpecGcsFilesetSpec `json:"gcsFilesetSpec,omitempty" tf:"gcs_fileset_spec"`
	// This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.
	// +optional
	IntegratedSystem *string `json:"integratedSystem,omitempty" tf:"integrated_system"`
	// The resource this metadata entry refers to.
	// For Google Cloud Platform resources, linkedResource is the full name of the resource.
	// For example, the linkedResource for a table resource from BigQuery is:
	// //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId
	// Output only when Entry is of type in the EntryType enum. For entries with userSpecifiedType,
	// this field is optional and defaults to an empty string.
	// +optional
	LinkedResource *string `json:"linkedResource,omitempty" tf:"linked_resource"`
	// The Data Catalog resource name of the entry in URL format.
	// Example: projects/{project_id}/locations/{location}/entryGroups/{entryGroupId}/entries/{entryId}.
	// Note that this Entry and its child resources may not actually be stored in the location in this name.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Schema of the entry (e.g. BigQuery, GoogleSQL, Avro schema), as a json string. An entry might not have any schema
	// attached to it. See
	// https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries#schema
	// for what fields this schema can contain.
	// +optional
	Schema *string `json:"schema,omitempty" tf:"schema"`
	// The type of the entry. Only used for Entries with types in the EntryType enum.
	// Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use userSpecifiedType. Possible values: ["FILESET"]
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// This field indicates the entry's source system that Data Catalog does not integrate with.
	// userSpecifiedSystem strings must begin with a letter or underscore and can only contain letters, numbers,
	// and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	// +optional
	UserSpecifiedSystem *string `json:"userSpecifiedSystem,omitempty" tf:"user_specified_system"`
	// Entry type if it does not fit any of the input-allowed values listed in EntryType enum above.
	// When creating an entry, users should check the enum values first, if nothing matches the entry
	// to be created, then provide a custom value, for example "my_special_type".
	// userSpecifiedType strings must begin with a letter or underscore and can only contain letters,
	// numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long.
	// +optional
	UserSpecifiedType *string `json:"userSpecifiedType,omitempty" tf:"user_specified_type"`
}

type CatalogEntryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CatalogEntryList is a list of CatalogEntrys
type CatalogEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CatalogEntry CRD objects
	Items []CatalogEntry `json:"items,omitempty"`
}
