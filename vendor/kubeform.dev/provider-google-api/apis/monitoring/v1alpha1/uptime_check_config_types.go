/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type UptimeCheckConfig struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UptimeCheckConfigSpec   `json:"spec,omitempty"`
	Status            UptimeCheckConfigStatus `json:"status,omitempty"`
}

type UptimeCheckConfigSpec struct {
	UptimeCheckConfigSpec2 `json:",inline"`
	// +optional
	KubeformOutput UptimeCheckConfigSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type UptimeCheckConfigSpecContentMatchers struct {
	// String or regex content to match (max 1024 bytes)
	Content *string `json:"content" tf:"content"`
	// The type of content matcher that will be applied to the server output, compared to the content string when the check is run. Default value: "CONTAINS_STRING" Possible values: ["CONTAINS_STRING", "NOT_CONTAINS_STRING", "MATCHES_REGEX", "NON_MATCHES_REGEX"]
	// +optional
	Matcher *string `json:"matcher,omitempty" tf:"matcher"`
}

type UptimeCheckConfigSpecHttpCheckAuthInfo struct {
	// The password to authenticate.
	Password *string `json:"-" sensitive:"true" tf:"password"`
	// The username to authenticate.
	Username *string `json:"username" tf:"username"`
}

type UptimeCheckConfigSpecHttpCheck struct {
	// The authentication information. Optional when creating an HTTP check; defaults to empty.
	// +optional
	AuthInfo *UptimeCheckConfigSpecHttpCheckAuthInfo `json:"authInfo,omitempty" tf:"auth_info"`
	// The request body associated with the HTTP POST request. If contentType is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the requestMethod is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte. Note - As with all bytes fields JSON representations are base64 encoded. e.g. "foo=bar" in URL-encoded form is "foo%3Dbar" and in base64 encoding is "Zm9vJTI1M0RiYXI=".
	// +optional
	Body *string `json:"body,omitempty" tf:"body"`
	// The content type to use for the check. Possible values: ["TYPE_UNSPECIFIED", "URL_ENCODED"]
	// +optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`
	// The list of headers to send as part of the uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
	// +optional
	Headers *map[string]string `json:"headers,omitempty" tf:"headers"`
	// Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to True then the headers will be obscured with ******.
	// +optional
	MaskHeaders *bool `json:"maskHeaders,omitempty" tf:"mask_headers"`
	// The path to the page to run the check against. Will be combined with the host (specified within the MonitoredResource) and port to construct the full URL. Optional (defaults to "/").
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// The port to the page to run the check against. Will be combined with host (specified within the MonitoredResource) and path to construct the full URL. Optional (defaults to 80 without SSL, or 443 with SSL).
	// +optional
	Port *int64 `json:"port,omitempty" tf:"port"`
	// The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then requestMethod defaults to GET. Default value: "GET" Possible values: ["METHOD_UNSPECIFIED", "GET", "POST"]
	// +optional
	RequestMethod *string `json:"requestMethod,omitempty" tf:"request_method"`
	// If true, use HTTPS instead of HTTP to run the check.
	// +optional
	UseSSL *bool `json:"useSSL,omitempty" tf:"use_ssl"`
	// Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitoredResource is set to uptime_url. If useSsl is false, setting validateSsl to true has no effect.
	// +optional
	ValidateSSL *bool `json:"validateSSL,omitempty" tf:"validate_ssl"`
}

type UptimeCheckConfigSpecMonitoredResource struct {
	// Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
	Labels *map[string]string `json:"labels" tf:"labels"`
	// The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.monitoredResourceDescriptors#MonitoredResourceDescriptor) object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types (https://cloud.google.com/monitoring/api/resources) and Logging resource types (https://cloud.google.com/logging/docs/api/v2/resource-list).
	Type *string `json:"type" tf:"type"`
}

type UptimeCheckConfigSpecResourceGroup struct {
	// The group of resources being monitored. Should be the 'name' of a group
	// +optional
	GroupID *string `json:"groupID,omitempty" tf:"group_id"`
	// The resource type of the group members. Possible values: ["RESOURCE_TYPE_UNSPECIFIED", "INSTANCE", "AWS_ELB_LOAD_BALANCER"]
	// +optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`
}

type UptimeCheckConfigSpecTcpCheck struct {
	// The port to the page to run the check against. Will be combined with host (specified within the MonitoredResource) to construct the full URL.
	Port *int64 `json:"port" tf:"port"`
}

type UptimeCheckConfigSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// The expected content on the page the check is run against. Currently, only the first entry in the list is supported, and other entries will be ignored. The server will look for an exact match of the string in the page response's content. This field is optional and should only be specified if a content match is required.
	// +optional
	ContentMatchers []UptimeCheckConfigSpecContentMatchers `json:"contentMatchers,omitempty" tf:"content_matchers"`
	// A human-friendly name for the uptime check configuration. The display name should be unique within a Stackdriver Workspace in order to make it easier to identify; however, uniqueness is not enforced.
	DisplayName *string `json:"displayName" tf:"display_name"`
	// Contains information needed to make an HTTP or HTTPS check.
	// +optional
	HttpCheck *UptimeCheckConfigSpecHttpCheck `json:"httpCheck,omitempty" tf:"http_check"`
	// The monitored resource (https://cloud.google.com/monitoring/api/resources) associated with the configuration. The following monitored resource types are supported for uptime checks:  uptime_url  gce_instance  gae_app  aws_ec2_instance  aws_elb_load_balancer
	// +optional
	MonitoredResource *UptimeCheckConfigSpecMonitoredResource `json:"monitoredResource,omitempty" tf:"monitored_resource"`
	// A unique resource name for this UptimeCheckConfig. The format is projects/[PROJECT_ID]/uptimeCheckConfigs/[UPTIME_CHECK_ID].
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// How often, in seconds, the uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 300s.
	// +optional
	Period *string `json:"period,omitempty" tf:"period"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The group resource associated with the configuration.
	// +optional
	ResourceGroup *UptimeCheckConfigSpecResourceGroup `json:"resourceGroup,omitempty" tf:"resource_group"`
	// The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions to include a minimum of 3 locations must be provided, or an error message is returned. Not specifying this field will result in uptime checks running from all regions.
	// +optional
	SelectedRegions []string `json:"selectedRegions,omitempty" tf:"selected_regions"`
	// Contains information needed to make a TCP check.
	// +optional
	TcpCheck *UptimeCheckConfigSpecTcpCheck `json:"tcpCheck,omitempty" tf:"tcp_check"`
	// The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). Accepted formats https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration
	Timeout *string `json:"timeout" tf:"timeout"`
	// The id of the uptime check
	// +optional
	UptimeCheckID *string `json:"uptimeCheckID,omitempty" tf:"uptime_check_id"`
}

type UptimeCheckConfigStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// UptimeCheckConfigList is a list of UptimeCheckConfigs
type UptimeCheckConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of UptimeCheckConfig CRD objects
	Items []UptimeCheckConfig `json:"items,omitempty"`
}
