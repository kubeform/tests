/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Slo struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SloSpec   `json:"spec,omitempty"`
	Status            SloStatus `json:"status,omitempty"`
}

type SloSpec struct {
	SloSpec2 `json:",inline"`
	// +optional
	KubeformOutput SloSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type SloSpecBasicSliAvailability struct {
	// Whether an availability SLI is enabled or not. Must be set to true. Defaults to 'true'.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type SloSpecBasicSliLatency struct {
	// A duration string, e.g. 10s.
	// Good service is defined to be the count of requests made to
	// this service that return in no more than threshold.
	Threshold *string `json:"threshold" tf:"threshold"`
}

type SloSpecBasicSli struct {
	// Availability based SLI, dervied from count of requests made to this service that return successfully.
	// +optional
	Availability *SloSpecBasicSliAvailability `json:"availability,omitempty" tf:"availability"`
	// Parameters for a latency threshold SLI.
	// +optional
	Latency *SloSpecBasicSliLatency `json:"latency,omitempty" tf:"latency"`
	// An optional set of locations to which this SLI is relevant.
	// Telemetry from other locations will not be used to calculate
	// performance for this SLI. If omitted, this SLI applies to all
	// locations in which the Service has activity. For service types
	// that don't support breaking down by location, setting this
	// field will result in an error.
	// +optional
	Location []string `json:"location,omitempty" tf:"location"`
	// An optional set of RPCs to which this SLI is relevant.
	// Telemetry from other methods will not be used to calculate
	// performance for this SLI. If omitted, this SLI applies to all
	// the Service's methods. For service types that don't support
	// breaking down by method, setting this field will result in an
	// error.
	// +optional
	Method []string `json:"method,omitempty" tf:"method"`
	// The set of API versions to which this SLI is relevant.
	// Telemetry from other API versions will not be used to
	// calculate performance for this SLI. If omitted,
	// this SLI applies to all API versions. For service types
	// that don't support breaking down by version, setting this
	// field will result in an error.
	// +optional
	Version []string `json:"version,omitempty" tf:"version"`
}

type SloSpecRequestBasedSliDistributionCutRange struct {
	// max value for the range (inclusive). If not given,
	// will be set to "infinity", defining an open range
	// ">= range.min"
	// +optional
	Max *float64 `json:"max,omitempty" tf:"max"`
	// Min value for the range (inclusive). If not given,
	// will be set to "-infinity", defining an open range
	// "< range.max"
	// +optional
	Min *float64 `json:"min,omitempty" tf:"min"`
}

type SloSpecRequestBasedSliDistributionCut struct {
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// aggregating values to quantify the good service provided.
	//
	// Must have ValueType = DISTRIBUTION and
	// MetricKind = DELTA or MetricKind = CUMULATIVE.
	DistributionFilter *string `json:"distributionFilter" tf:"distribution_filter"`
	// Range of numerical values. The computed good_service
	// will be the count of values x in the Distribution such
	// that range.min <= x < range.max. inclusive of min and
	// exclusive of max. Open ranges can be defined by setting
	// just one of min or max.
	Range *SloSpecRequestBasedSliDistributionCutRange `json:"range" tf:"range"`
}

type SloSpecRequestBasedSliGoodTotalRatio struct {
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// quantifying bad service provided, either demanded service that
	// was not provided or demanded service that was of inadequate
	// quality.
	//
	// Must have ValueType = DOUBLE or ValueType = INT64 and
	// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
	//
	// Exactly two of 'good_service_filter','bad_service_filter','total_service_filter'
	// must be set (good + bad = total is assumed).
	// +optional
	BadServiceFilter *string `json:"badServiceFilter,omitempty" tf:"bad_service_filter"`
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// quantifying good service provided.
	// Must have ValueType = DOUBLE or ValueType = INT64 and
	// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
	//
	// Exactly two of 'good_service_filter','bad_service_filter','total_service_filter'
	// must be set (good + bad = total is assumed).
	// +optional
	GoodServiceFilter *string `json:"goodServiceFilter,omitempty" tf:"good_service_filter"`
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// quantifying total demanded service.
	//
	// Must have ValueType = DOUBLE or ValueType = INT64 and
	// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
	//
	// Exactly two of 'good_service_filter','bad_service_filter','total_service_filter'
	// must be set (good + bad = total is assumed).
	// +optional
	TotalServiceFilter *string `json:"totalServiceFilter,omitempty" tf:"total_service_filter"`
}

type SloSpecRequestBasedSli struct {
	// Used when good_service is defined by a count of values aggregated in a
	// Distribution that fall into a good range. The total_service is the
	// total count of all values aggregated in the Distribution.
	// Defines a distribution TimeSeries filter and thresholds used for
	// measuring good service and total service.
	//
	// Exactly one of 'distribution_cut' or 'good_total_ratio' can be set.
	// +optional
	DistributionCut *SloSpecRequestBasedSliDistributionCut `json:"distributionCut,omitempty" tf:"distribution_cut"`
	// A means to compute a ratio of 'good_service' to 'total_service'.
	// Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
	// Must specify exactly two of good, bad, and total service filters.
	// The relationship good_service + bad_service = total_service
	// will be assumed.
	//
	// Exactly one of 'distribution_cut' or 'good_total_ratio' can be set.
	// +optional
	GoodTotalRatio *SloSpecRequestBasedSliGoodTotalRatio `json:"goodTotalRatio,omitempty" tf:"good_total_ratio"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability struct {
	// Whether an availability SLI is enabled or not. Must be set to 'true. Defaults to 'true'.
	// +optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency struct {
	// A duration string, e.g. 10s.
	// Good service is defined to be the count of requests made to
	// this service that return in no more than threshold.
	Threshold *string `json:"threshold" tf:"threshold"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance struct {
	// Availability based SLI, dervied from count of requests made to this service that return successfully.
	// +optional
	Availability *SloSpecWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability `json:"availability,omitempty" tf:"availability"`
	// Parameters for a latency threshold SLI.
	// +optional
	Latency *SloSpecWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency `json:"latency,omitempty" tf:"latency"`
	// An optional set of locations to which this SLI is relevant.
	// Telemetry from other locations will not be used to calculate
	// performance for this SLI. If omitted, this SLI applies to all
	// locations in which the Service has activity. For service types
	// that don't support breaking down by location, setting this
	// field will result in an error.
	// +optional
	Location []string `json:"location,omitempty" tf:"location"`
	// An optional set of RPCs to which this SLI is relevant.
	// Telemetry from other methods will not be used to calculate
	// performance for this SLI. If omitted, this SLI applies to all
	// the Service's methods. For service types that don't support
	// breaking down by method, setting this field will result in an
	// error.
	// +optional
	Method []string `json:"method,omitempty" tf:"method"`
	// The set of API versions to which this SLI is relevant.
	// Telemetry from other API versions will not be used to
	// calculate performance for this SLI. If omitted,
	// this SLI applies to all API versions. For service types
	// that don't support breaking down by version, setting this
	// field will result in an error.
	// +optional
	Version []string `json:"version,omitempty" tf:"version"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange struct {
	// max value for the range (inclusive). If not given,
	// will be set to "infinity", defining an open range
	// ">= range.min"
	// +optional
	Max *float64 `json:"max,omitempty" tf:"max"`
	// Min value for the range (inclusive). If not given,
	// will be set to "-infinity", defining an open range
	// "< range.max"
	// +optional
	Min *float64 `json:"min,omitempty" tf:"min"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut struct {
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// aggregating values to quantify the good service provided.
	//
	// Must have ValueType = DISTRIBUTION and
	// MetricKind = DELTA or MetricKind = CUMULATIVE.
	DistributionFilter *string `json:"distributionFilter" tf:"distribution_filter"`
	// Range of numerical values. The computed good_service
	// will be the count of values x in the Distribution such
	// that range.min <= x < range.max. inclusive of min and
	// exclusive of max. Open ranges can be defined by setting
	// just one of min or max.
	Range *SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange `json:"range" tf:"range"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio struct {
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// quantifying bad service provided, either demanded service that
	// was not provided or demanded service that was of inadequate
	// quality. Exactly two of
	// good, bad, or total service filter must be defined (where
	// good + bad = total is assumed)
	//
	// Must have ValueType = DOUBLE or ValueType = INT64 and
	// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
	// +optional
	BadServiceFilter *string `json:"badServiceFilter,omitempty" tf:"bad_service_filter"`
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// quantifying good service provided. Exactly two of
	// good, bad, or total service filter must be defined (where
	// good + bad = total is assumed)
	//
	// Must have ValueType = DOUBLE or ValueType = INT64 and
	// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
	// +optional
	GoodServiceFilter *string `json:"goodServiceFilter,omitempty" tf:"good_service_filter"`
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// quantifying total demanded service. Exactly two of
	// good, bad, or total service filter must be defined (where
	// good + bad = total is assumed)
	//
	// Must have ValueType = DOUBLE or ValueType = INT64 and
	// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
	// +optional
	TotalServiceFilter *string `json:"totalServiceFilter,omitempty" tf:"total_service_filter"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformance struct {
	// Used when good_service is defined by a count of values aggregated in a
	// Distribution that fall into a good range. The total_service is the
	// total count of all values aggregated in the Distribution.
	// Defines a distribution TimeSeries filter and thresholds used for
	// measuring good service and total service.
	// +optional
	DistributionCut *SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut `json:"distributionCut,omitempty" tf:"distribution_cut"`
	// A means to compute a ratio of 'good_service' to 'total_service'.
	// Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
	// Must specify exactly two of good, bad, and total service filters.
	// The relationship good_service + bad_service = total_service
	// will be assumed.
	// +optional
	GoodTotalRatio *SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio `json:"goodTotalRatio,omitempty" tf:"good_total_ratio"`
}

type SloSpecWindowsBasedSliGoodTotalRatioThreshold struct {
	// Basic SLI to evaluate to judge window quality.
	// +optional
	BasicSliPerformance *SloSpecWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance `json:"basicSliPerformance,omitempty" tf:"basic_sli_performance"`
	// Request-based SLI to evaluate to judge window quality.
	// +optional
	Performance *SloSpecWindowsBasedSliGoodTotalRatioThresholdPerformance `json:"performance,omitempty" tf:"performance"`
	// If window performance >= threshold, the window is counted
	// as good.
	// +optional
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold"`
}

type SloSpecWindowsBasedSliMetricMeanInRangeRange struct {
	// max value for the range (inclusive). If not given,
	// will be set to "infinity", defining an open range
	// ">= range.min"
	// +optional
	Max *float64 `json:"max,omitempty" tf:"max"`
	// Min value for the range (inclusive). If not given,
	// will be set to "-infinity", defining an open range
	// "< range.max"
	// +optional
	Min *float64 `json:"min,omitempty" tf:"min"`
}

type SloSpecWindowsBasedSliMetricMeanInRange struct {
	// Range of numerical values. The computed good_service
	// will be the count of values x in the Distribution such
	// that range.min <= x < range.max. inclusive of min and
	// exclusive of max. Open ranges can be defined by setting
	// just one of min or max. Mean value 'X' of 'time_series'
	// values should satisfy 'range.min <= X < range.max' for a
	// good service.
	Range *SloSpecWindowsBasedSliMetricMeanInRangeRange `json:"range" tf:"range"`
	// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// specifying the TimeSeries to use for evaluating window
	// The provided TimeSeries must have ValueType = INT64 or
	// ValueType = DOUBLE and MetricKind = GAUGE. Mean value 'X'
	// should satisfy 'range.min <= X < range.max'
	// under good service.
	TimeSeries *string `json:"timeSeries" tf:"time_series"`
}

type SloSpecWindowsBasedSliMetricSumInRangeRange struct {
	// max value for the range (inclusive). If not given,
	// will be set to "infinity", defining an open range
	// ">= range.min"
	// +optional
	Max *float64 `json:"max,omitempty" tf:"max"`
	// Min value for the range (inclusive). If not given,
	// will be set to "-infinity", defining an open range
	// "< range.max"
	// +optional
	Min *float64 `json:"min,omitempty" tf:"min"`
}

type SloSpecWindowsBasedSliMetricSumInRange struct {
	// Range of numerical values. The computed good_service
	// will be the count of values x in the Distribution such
	// that range.min <= x < range.max. inclusive of min and
	// exclusive of max. Open ranges can be defined by setting
	// just one of min or max. Summed value 'X' should satisfy
	// 'range.min <= X < range.max' for a good window.
	Range *SloSpecWindowsBasedSliMetricSumInRangeRange `json:"range" tf:"range"`
	// A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// specifying the TimeSeries to use for evaluating window
	// quality. The provided TimeSeries must have
	// ValueType = INT64 or ValueType = DOUBLE and
	// MetricKind = GAUGE.
	//
	// Summed value 'X' should satisfy
	// 'range.min <= X < range.max' for a good window.
	TimeSeries *string `json:"timeSeries" tf:"time_series"`
}

type SloSpecWindowsBasedSli struct {
	// A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
	// with ValueType = BOOL. The window is good if any true values
	// appear in the window. One of 'good_bad_metric_filter',
	// 'good_total_ratio_threshold', 'metric_mean_in_range',
	// 'metric_sum_in_range' must be set for 'windows_based_sli'.
	// +optional
	GoodBadMetricFilter *string `json:"goodBadMetricFilter,omitempty" tf:"good_bad_metric_filter"`
	// Criterion that describes a window as good if its performance is
	// high enough. One of 'good_bad_metric_filter',
	// 'good_total_ratio_threshold', 'metric_mean_in_range',
	// 'metric_sum_in_range' must be set for 'windows_based_sli'.
	// +optional
	GoodTotalRatioThreshold *SloSpecWindowsBasedSliGoodTotalRatioThreshold `json:"goodTotalRatioThreshold,omitempty" tf:"good_total_ratio_threshold"`
	// Criterion that describes a window as good if the metric's value
	// is in a good range, *averaged* across returned streams.
	// One of 'good_bad_metric_filter',
	//
	// 'good_total_ratio_threshold', 'metric_mean_in_range',
	// 'metric_sum_in_range' must be set for 'windows_based_sli'.
	// Average value X of 'time_series' should satisfy
	// 'range.min <= X < range.max' for a good window.
	// +optional
	MetricMeanInRange *SloSpecWindowsBasedSliMetricMeanInRange `json:"metricMeanInRange,omitempty" tf:"metric_mean_in_range"`
	// Criterion that describes a window as good if the metric's value
	// is in a good range, *summed* across returned streams.
	// Summed value 'X' of 'time_series' should satisfy
	// 'range.min <= X < range.max' for a good window.
	//
	// One of 'good_bad_metric_filter',
	// 'good_total_ratio_threshold', 'metric_mean_in_range',
	// 'metric_sum_in_range' must be set for 'windows_based_sli'.
	// +optional
	MetricSumInRange *SloSpecWindowsBasedSliMetricSumInRange `json:"metricSumInRange,omitempty" tf:"metric_sum_in_range"`
	// Duration over which window quality is evaluated, given as a
	// duration string "{X}s" representing X seconds. Must be an
	// integer fraction of a day and at least 60s.
	// +optional
	WindowPeriod *string `json:"windowPeriod,omitempty" tf:"window_period"`
}

type SloSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Basic Service-Level Indicator (SLI) on a well-known service type.
	// Performance will be computed on the basis of pre-defined metrics.
	//
	// SLIs are used to measure and calculate the quality of the Service's
	// performance with respect to a single aspect of service quality.
	//
	// Exactly one of the following must be set:
	// 'basic_sli', 'request_based_sli', 'windows_based_sli'
	// +optional
	BasicSli *SloSpecBasicSli `json:"basicSli,omitempty" tf:"basic_sli"`
	// A calendar period, semantically "since the start of the current
	// <calendarPeriod>". Possible values: ["DAY", "WEEK", "FORTNIGHT", "MONTH"]
	// +optional
	CalendarPeriod *string `json:"calendarPeriod,omitempty" tf:"calendar_period"`
	// Name used for UI elements listing this SLO.
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// The fraction of service that must be good in order for this objective
	// to be met. 0 < goal <= 0.999
	Goal *float64 `json:"goal" tf:"goal"`
	// The full resource name for this service. The syntax is:
	// projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// A request-based SLI defines a SLI for which atomic units of
	// service are counted directly.
	//
	// A SLI describes a good service.
	// It is used to measure and calculate the quality of the Service's
	// performance with respect to a single aspect of service quality.
	// Exactly one of the following must be set:
	// 'basic_sli', 'request_based_sli', 'windows_based_sli'
	// +optional
	RequestBasedSli *SloSpecRequestBasedSli `json:"requestBasedSli,omitempty" tf:"request_based_sli"`
	// A rolling time period, semantically "in the past X days".
	// Must be between 1 to 30 days, inclusive.
	// +optional
	RollingPeriodDays *int64 `json:"rollingPeriodDays,omitempty" tf:"rolling_period_days"`
	// ID of the service to which this SLO belongs.
	Service *string `json:"service" tf:"service"`
	// The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
	// +optional
	SloID *string `json:"sloID,omitempty" tf:"slo_id"`
	// A windows-based SLI defines the criteria for time windows.
	// good_service is defined based off the count of these time windows
	// for which the provided service was of good quality.
	//
	// A SLI describes a good service. It is used to measure and calculate
	// the quality of the Service's performance with respect to a single
	// aspect of service quality.
	//
	// Exactly one of the following must be set:
	// 'basic_sli', 'request_based_sli', 'windows_based_sli'
	// +optional
	WindowsBasedSli *SloSpecWindowsBasedSli `json:"windowsBasedSli,omitempty" tf:"windows_based_sli"`
}

type SloStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SloList is a list of Slos
type SloList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Slo CRD objects
	Items []Slo `json:"items,omitempty"`
}
