/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Trigger struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TriggerSpec   `json:"spec,omitempty"`
	Status            TriggerStatus `json:"status,omitempty"`
}

type TriggerSpec struct {
	TriggerSpec2 `json:",inline"`
	// +optional
	KubeformOutput TriggerSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type TriggerSpecBuildArtifactsObjectsTiming struct {
	// End of time span.
	//
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time"`
	// Start of time span.
	//
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`
}

type TriggerSpecBuildArtifactsObjects struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	//
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// Path globs used to match files in the build's workspace.
	// +optional
	Paths []string `json:"paths,omitempty" tf:"paths"`
	// Output only. Stores timing information for pushing all artifact objects.
	// +optional
	Timing []TriggerSpecBuildArtifactsObjectsTiming `json:"timing,omitempty" tf:"timing"`
}

type TriggerSpecBuildArtifacts struct {
	// A list of images to be pushed upon the successful completion of all build steps.
	//
	// The images will be pushed using the builder service account's credentials.
	//
	// The digests of the pushed images will be stored in the Build resource's results field.
	//
	// If any of the images fail to be pushed, the build is marked FAILURE.
	// +optional
	Images []string `json:"images,omitempty" tf:"images"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	//
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	//
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	//
	// If any objects fail to be pushed, the build is marked FAILURE.
	// +optional
	Objects *TriggerSpecBuildArtifactsObjects `json:"objects,omitempty" tf:"objects"`
}

type TriggerSpecBuildOptionsVolumes struct {
	// Name of the volume to mount.
	//
	// Volume names must be unique per build step and must be valid names for Docker volumes.
	// Each named volume must be used by at least two build steps.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Path at which to mount the volume.
	//
	// Paths must be absolute and cannot conflict with other volume paths on the same
	// build step or with certain reserved volume paths.
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
}

type TriggerSpecBuildOptions struct {
	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	// +optional
	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions.
	//
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	// +optional
	DynamicSubstitutions *bool `json:"dynamicSubstitutions,omitempty" tf:"dynamic_substitutions"`
	// A list of global environment variable definitions that will exist for all build steps
	// in this build. If a variable is defined in both globally and in a build step,
	// the variable will use the build step value.
	//
	// The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	// +optional
	Env []string `json:"env,omitempty" tf:"env"`
	// Option to define build log streaming behavior to Google Cloud Storage. Possible values: ["STREAM_DEFAULT", "STREAM_ON", "STREAM_OFF"]
	// +optional
	LogStreamingOption *string `json:"logStreamingOption,omitempty" tf:"log_streaming_option"`
	// Option to specify the logging mode, which determines if and where build logs are stored. Possible values: ["LOGGING_UNSPECIFIED", "LEGACY", "GCS_ONLY", "STACKDRIVER_ONLY", "NONE"]
	// +optional
	Logging *string `json:"logging,omitempty" tf:"logging"`
	// Compute Engine machine type on which to run the build. Possible values: ["UNSPECIFIED", "N1_HIGHCPU_8", "N1_HIGHCPU_32", "E2_HIGHCPU_8", "E2_HIGHCPU_32"]
	// +optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type"`
	// Requested verifiability options. Possible values: ["NOT_VERIFIED", "VERIFIED"]
	// +optional
	RequestedVerifyOption *string `json:"requestedVerifyOption,omitempty" tf:"requested_verify_option"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management
	// Service crypto key. These values must be specified in the build's Secret. These variables
	// will be available to all build steps in this build.
	// +optional
	SecretEnv []string `json:"secretEnv,omitempty" tf:"secret_env"`
	// Requested hash for SourceProvenance. Possible values: ["NONE", "SHA256", "MD5"]
	// +optional
	SourceProvenanceHash []string `json:"sourceProvenanceHash,omitempty" tf:"source_provenance_hash"`
	// Option to specify behavior when there is an error in the substitution checks.
	//
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file. Possible values: ["MUST_MATCH", "ALLOW_LOOSE"]
	// +optional
	SubstitutionOption *string `json:"substitutionOption,omitempty" tf:"substitution_option"`
	// Global list of volumes to mount for ALL build steps
	//
	// Each volume is created as an empty volume prior to starting the build process.
	// Upon completion of the build, volumes and their contents are discarded. Global
	// volume names and paths cannot conflict with the volumes defined a build step.
	//
	// Using a global volume in a build with only one step is not valid as it is indicative
	// of a build request with an incorrect configuration.
	// +optional
	Volumes []TriggerSpecBuildOptionsVolumes `json:"volumes,omitempty" tf:"volumes"`
	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	//
	// This field is experimental.
	// +optional
	WorkerPool *string `json:"workerPool,omitempty" tf:"worker_pool"`
}

type TriggerSpecBuildSecret struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName *string `json:"kmsKeyName" tf:"kms_key_name"`
	// Map of environment variable name to its encrypted value.
	// Secret environment variables must be unique across all of a build's secrets,
	// and must be used by at least one build step. Values can be at most 64 KB in size.
	// There can be at most 100 secret values across all of a build's secrets.
	// +optional
	SecretEnv *map[string]string `json:"secretEnv,omitempty" tf:"secret_env"`
}

type TriggerSpecBuildSourceRepoSource struct {
	// Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	// +optional
	BranchName *string `json:"branchName,omitempty" tf:"branch_name"`
	// Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// +optional
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha"`
	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and is an absolute path,
	// this value is ignored for that step's execution.
	// +optional
	Dir *string `json:"dir,omitempty" tf:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex"`
	// ID of the project that owns the Cloud Source Repository.
	// If omitted, the project ID requesting the build is assumed.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// Name of the Cloud Source Repository.
	RepoName *string `json:"repoName" tf:"repo_name"`
	// Substitutions to use in a triggered build. Should only be used with triggers.run
	// +optional
	Substitutions *map[string]string `json:"substitutions,omitempty" tf:"substitutions"`
	// Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	// described at https://github.com/google/re2/wiki/Syntax
	// +optional
	TagName *string `json:"tagName,omitempty" tf:"tag_name"`
}

type TriggerSpecBuildSourceStorageSource struct {
	// Google Cloud Storage bucket containing the source.
	Bucket *string `json:"bucket" tf:"bucket"`
	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	// +optional
	Generation *string `json:"generation,omitempty" tf:"generation"`
	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	Object *string `json:"object" tf:"object"`
}

type TriggerSpecBuildSource struct {
	// Location of the source in a Google Cloud Source Repository.
	// +optional
	RepoSource *TriggerSpecBuildSourceRepoSource `json:"repoSource,omitempty" tf:"repo_source"`
	// Location of the source in an archive file in Google Cloud Storage.
	// +optional
	StorageSource *TriggerSpecBuildSourceStorageSource `json:"storageSource,omitempty" tf:"storage_source"`
}

type TriggerSpecBuildStepVolumes struct {
	// Name of the volume to mount.
	//
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `json:"name" tf:"name"`
	// Path at which to mount the volume.
	//
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	Path *string `json:"path" tf:"path"`
}

type TriggerSpecBuildStep struct {
	// A list of arguments that will be presented to the step when it is started.
	//
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	// +optional
	Args []string `json:"args,omitempty" tf:"args"`
	// Working directory to use when running this step's container.
	//
	// If this value is a relative path, it is relative to the build's working
	// directory. If this value is absolute, it may be outside the build's working
	// directory, in which case the contents of the path may not be persisted
	// across build step executions, unless a 'volume' for that path is specified.
	//
	// If the build specifies a 'RepoSource' with 'dir' and a step with a
	// 'dir',
	// which specifies an absolute path, the 'RepoSource' 'dir' is ignored
	// for the step's execution.
	// +optional
	Dir *string `json:"dir,omitempty" tf:"dir"`
	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	// +optional
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint"`
	// A list of environment variable definitions to be used when
	// running a step.
	//
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	// +optional
	Env []string `json:"env,omitempty" tf:"env"`
	// Unique identifier for this build step, used in 'wait_for' to
	// reference this build step as a dependency.
	// +optional
	ID *string `json:"ID,omitempty" tf:"id"`
	// The name of the container image that will run this particular build step.
	//
	// If the image is available in the host's Docker daemon's cache, it will be
	// run directly. If not, the host will attempt to pull the image first, using
	// the builder service account's credentials if necessary.
	//
	// The Docker daemon's cache will already have the latest versions of all of
	// the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
	// for images and examples).
	// The Docker daemon will also have cached many of the layers for some popular
	// images, like "ubuntu", "debian", but they will be refreshed at the time
	// you attempt to use them.
	//
	// If you built an image in a previous build step, it will be stored in the
	// host's Docker daemon's cache and is available to use as the name for a
	// later build step.
	Name *string `json:"name" tf:"name"`
	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's 'Secret'.
	// +optional
	SecretEnv []string `json:"secretEnv,omitempty" tf:"secret_env"`
	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	// +optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout"`
	// Output only. Stores timing information for executing this
	// build step.
	// +optional
	Timing *string `json:"timing,omitempty" tf:"timing"`
	// List of volumes to mount into the build step.
	//
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	//
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// +optional
	Volumes []TriggerSpecBuildStepVolumes `json:"volumes,omitempty" tf:"volumes"`
	// The ID(s) of the step(s) that this build step depends on.
	//
	// This build step will not start until all the build steps in 'wait_for'
	// have completed successfully. If 'wait_for' is empty, this build step
	// will start when all previous build steps in the 'Build.Steps' list
	// have completed successfully.
	// +optional
	WaitFor []string `json:"waitFor,omitempty" tf:"wait_for"`
}

type TriggerSpecBuild struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// +optional
	Artifacts *TriggerSpecBuildArtifacts `json:"artifacts,omitempty" tf:"artifacts"`
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	// +optional
	Images []string `json:"images,omitempty" tf:"images"`
	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	// +optional
	LogsBucket *string `json:"logsBucket,omitempty" tf:"logs_bucket"`
	// Special options for this build.
	// +optional
	Options *TriggerSpecBuildOptions `json:"options,omitempty" tf:"options"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +optional
	QueueTtl *string `json:"queueTtl,omitempty" tf:"queue_ttl"`
	// Secrets to decrypt using Cloud Key Management Service.
	// +optional
	Secret []TriggerSpecBuildSecret `json:"secret,omitempty" tf:"secret"`
	// The location of the source files to build.
	//
	// One of 'storageSource' or 'repoSource' must be provided.
	// +optional
	Source *TriggerSpecBuildSource `json:"source,omitempty" tf:"source"`
	// The operations to be performed on the workspace.
	Step []TriggerSpecBuildStep `json:"step" tf:"step"`
	// Substitutions data for Build resource.
	// +optional
	Substitutions *map[string]string `json:"substitutions,omitempty" tf:"substitutions"`
	// Tags for annotation of a Build. These are not docker tags.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity.
	// If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	// This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	// The expected format is the number of seconds followed by s.
	// Default time is ten minutes (600s).
	// +optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout"`
}

type TriggerSpecGithubPullRequest struct {
	// Regex of branches to match.
	Branch *string `json:"branch" tf:"branch"`
	// Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator. Possible values: ["COMMENTS_DISABLED", "COMMENTS_ENABLED", "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"]
	// +optional
	CommentControl *string `json:"commentControl,omitempty" tf:"comment_control"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex"`
}

type TriggerSpecGithubPush struct {
	// Regex of branches to match.  Specify only one of branch or tag.
	// +optional
	Branch *string `json:"branch,omitempty" tf:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex"`
	// Regex of tags to match.  Specify only one of branch or tag.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
}

type TriggerSpecGithub struct {
	// Name of the repository. For example: The name for
	// https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	// +optional
	Owner *string `json:"owner,omitempty" tf:"owner"`
	// filter to match changes in pull requests.  Specify only one of pullRequest or push.
	// +optional
	PullRequest *TriggerSpecGithubPullRequest `json:"pullRequest,omitempty" tf:"pull_request"`
	// filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
	// +optional
	Push *TriggerSpecGithubPush `json:"push,omitempty" tf:"push"`
}

type TriggerSpecTriggerTemplate struct {
	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +optional
	BranchName *string `json:"branchName,omitempty" tf:"branch_name"`
	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// +optional
	CommitSha *string `json:"commitSha,omitempty" tf:"commit_sha"`
	// Directory, relative to the source root, in which to run the build.
	//
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	// +optional
	Dir *string `json:"dir,omitempty" tf:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty" tf:"invert_regex"`
	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	// +optional
	RepoName *string `json:"repoName,omitempty" tf:"repo_name"`
	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +optional
	TagName *string `json:"tagName,omitempty" tf:"tag_name"`
}

type TriggerSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Contents of the build template. Either a filename or build template must be provided.
	// +optional
	Build *TriggerSpecBuild `json:"build,omitempty" tf:"build"`
	// Time when the trigger was created.
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Human-readable description of the trigger.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	// +optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled"`
	// Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must be provided.
	// +optional
	Filename *string `json:"filename,omitempty" tf:"filename"`
	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	//
	// One of 'trigger_template' or 'github' must be provided.
	// +optional
	Github *TriggerSpecGithub `json:"github,omitempty" tf:"github"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for '**'.
	//
	// If ignoredFiles and changed files are both empty, then they are not
	// used to determine whether or not to trigger a build.
	//
	// If ignoredFiles is not empty, then we ignore any files that match any
	// of the ignored_file globs. If the change has no files that are outside
	// of the ignoredFiles globs, then we do not trigger a build.
	// +optional
	IgnoredFiles []string `json:"ignoredFiles,omitempty" tf:"ignored_files"`
	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for '**'.
	//
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is empty, then as far as this filter is concerned, we
	// should trigger the build.
	//
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is not empty, then we make sure that at least one of
	// those files matches a includedFiles glob. If not, then we do not trigger
	// a build.
	// +optional
	IncludedFiles []string `json:"includedFiles,omitempty" tf:"included_files"`
	// Name of the trigger. Must be unique within the project.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Substitutions data for Build resource.
	// +optional
	Substitutions *map[string]string `json:"substitutions,omitempty" tf:"substitutions"`
	// Tags for annotation of a BuildTrigger
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The unique identifier for the trigger.
	// +optional
	TriggerID *string `json:"triggerID,omitempty" tf:"trigger_id"`
	// Template describing the types of source changes to trigger a build.
	//
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular
	// expression will trigger a build.
	//
	// One of 'trigger_template' or 'github' must be provided.
	// +optional
	TriggerTemplate *TriggerSpecTriggerTemplate `json:"triggerTemplate,omitempty" tf:"trigger_template"`
}

type TriggerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TriggerList is a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Trigger CRD objects
	Items []Trigger `json:"items,omitempty"`
}
