/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Job struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              JobSpec   `json:"spec,omitempty"`
	Status            JobStatus `json:"status,omitempty"`
}

type JobSpec struct {
	JobSpec2 `json:",inline"`
	// +optional
	KubeformOutput JobSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type JobSpecCopyDestinationEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName *string `json:"kmsKeyName" tf:"kms_key_name"`
}

type JobSpecCopyDestinationTable struct {
	// The ID of the dataset containing this table.
	// +optional
	DatasetID *string `json:"datasetID,omitempty" tf:"dataset_id"`
	// The ID of the project containing this table.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// The table. Can be specified '{{table_id}}' if 'project_id' and 'dataset_id' are also set,
	// or of the form 'projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}' if not.
	TableID *string `json:"tableID" tf:"table_id"`
}

type JobSpecCopySourceTables struct {
	// The ID of the dataset containing this table.
	// +optional
	DatasetID *string `json:"datasetID,omitempty" tf:"dataset_id"`
	// The ID of the project containing this table.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// The table. Can be specified '{{table_id}}' if 'project_id' and 'dataset_id' are also set,
	// or of the form 'projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}' if not.
	TableID *string `json:"tableID" tf:"table_id"`
}

type JobSpecCopy struct {
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion Default value: "CREATE_IF_NEEDED" Possible values: ["CREATE_IF_NEEDED", "CREATE_NEVER"]
	// +optional
	CreateDisposition *string `json:"createDisposition,omitempty" tf:"create_disposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// +optional
	DestinationEncryptionConfiguration *JobSpecCopyDestinationEncryptionConfiguration `json:"destinationEncryptionConfiguration,omitempty" tf:"destination_encryption_configuration"`
	// The destination table.
	// +optional
	DestinationTable *JobSpecCopyDestinationTable `json:"destinationTable,omitempty" tf:"destination_table"`
	// Source tables to copy.
	SourceTables []JobSpecCopySourceTables `json:"sourceTables" tf:"source_tables"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion. Default value: "WRITE_EMPTY" Possible values: ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"]
	// +optional
	WriteDisposition *string `json:"writeDisposition,omitempty" tf:"write_disposition"`
}

type JobSpecExtractSourceModel struct {
	// The ID of the dataset containing this model.
	DatasetID *string `json:"datasetID" tf:"dataset_id"`
	// The ID of the model.
	ModelID *string `json:"modelID" tf:"model_id"`
	// The ID of the project containing this model.
	ProjectID *string `json:"projectID" tf:"project_id"`
}

type JobSpecExtractSourceTable struct {
	// The ID of the dataset containing this table.
	// +optional
	DatasetID *string `json:"datasetID,omitempty" tf:"dataset_id"`
	// The ID of the project containing this table.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// The table. Can be specified '{{table_id}}' if 'project_id' and 'dataset_id' are also set,
	// or of the form 'projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}' if not.
	TableID *string `json:"tableID" tf:"table_id"`
}

type JobSpecExtract struct {
	// The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE.
	// The default value is NONE. DEFLATE and SNAPPY are only supported for Avro.
	// +optional
	Compression *string `json:"compression,omitempty" tf:"compression"`
	// The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON and AVRO for tables and SAVED_MODEL for models.
	// The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV.
	// The default value for models is SAVED_MODEL.
	// +optional
	DestinationFormat *string `json:"destinationFormat,omitempty" tf:"destination_format"`
	// A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris []string `json:"destinationUris" tf:"destination_uris"`
	// When extracting data in CSV format, this defines the delimiter to use between fields in the exported data.
	// Default is ','
	// +optional
	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter"`
	// Whether to print out a header row in the results. Default is true.
	// +optional
	PrintHeader *bool `json:"printHeader,omitempty" tf:"print_header"`
	// A reference to the model being exported.
	// +optional
	SourceModel *JobSpecExtractSourceModel `json:"sourceModel,omitempty" tf:"source_model"`
	// A reference to the table being exported.
	// +optional
	SourceTable *JobSpecExtractSourceTable `json:"sourceTable,omitempty" tf:"source_table"`
	// Whether to use logical types when extracting to AVRO format.
	// +optional
	UseAvroLogicalTypes *bool `json:"useAvroLogicalTypes,omitempty" tf:"use_avro_logical_types"`
}

type JobSpecLoadDestinationEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName *string `json:"kmsKeyName" tf:"kms_key_name"`
}

type JobSpecLoadDestinationTable struct {
	// The ID of the dataset containing this table.
	// +optional
	DatasetID *string `json:"datasetID,omitempty" tf:"dataset_id"`
	// The ID of the project containing this table.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// The table. Can be specified '{{table_id}}' if 'project_id' and 'dataset_id' are also set,
	// or of the form 'projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}' if not.
	TableID *string `json:"tableID" tf:"table_id"`
}

type JobSpecLoadTimePartitioning struct {
	// Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
	// +optional
	ExpirationMs *string `json:"expirationMs,omitempty" tf:"expiration_ms"`
	// If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.
	// The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	// A wrapper is used here because an empty string is an invalid value.
	// +optional
	Field *string `json:"field,omitempty" tf:"field"`
	// The only type supported is DAY, which will generate one partition per day. Providing an empty string used to cause an error,
	// but in OnePlatform the field will be treated as unset.
	Type *string `json:"type" tf:"type"`
}

type JobSpecLoad struct {
	// Accept rows that are missing trailing optional columns. The missing values are treated as nulls.
	// If false, records with missing trailing columns are treated as bad records, and if there are too many bad records,
	// an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	// +optional
	AllowJaggedRows *bool `json:"allowJaggedRows,omitempty" tf:"allow_jagged_rows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file.
	// The default value is false.
	// +optional
	AllowQuotedNewlines *bool `json:"allowQuotedNewlines,omitempty" tf:"allow_quoted_newlines"`
	// Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	// +optional
	Autodetect *bool `json:"autodetect,omitempty" tf:"autodetect"`
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion Default value: "CREATE_IF_NEEDED" Possible values: ["CREATE_IF_NEEDED", "CREATE_NEVER"]
	// +optional
	CreateDisposition *string `json:"createDisposition,omitempty" tf:"create_disposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// +optional
	DestinationEncryptionConfiguration *JobSpecLoadDestinationEncryptionConfiguration `json:"destinationEncryptionConfiguration,omitempty" tf:"destination_encryption_configuration"`
	// The destination table to load the data into.
	DestinationTable *JobSpecLoadDestinationTable `json:"destinationTable" tf:"destination_table"`
	// The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.
	// The default value is UTF-8. BigQuery decodes the data after the raw, binary data
	// has been split using the values of the quote and fieldDelimiter properties.
	// +optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding"`
	// The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character.
	// To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts
	// the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the
	// data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator.
	// The default value is a comma (',').
	// +optional
	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter"`
	// Indicates if BigQuery should allow extra values that are not represented in the table schema.
	// If true, the extra values are ignored. If false, records with extra columns are treated as bad records,
	// and if there are too many bad records, an invalid error is returned in the job result.
	// The default value is false. The sourceFormat property determines what BigQuery treats as an extra value:
	// CSV: Trailing columns
	// JSON: Named values that don't match any column names
	// +optional
	IgnoreUnknownValues *bool `json:"ignoreUnknownValues,omitempty" tf:"ignore_unknown_values"`
	// The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value,
	// an invalid error is returned in the job result. The default value is 0, which requires that all records are valid.
	// +optional
	MaxBadRecords *int64 `json:"maxBadRecords,omitempty" tf:"max_bad_records"`
	// Specifies a string that represents a null value in a CSV file. For example, if you specify "\\N", BigQuery interprets "\\N" as a null value
	// when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an
	// empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as
	// an empty value.
	// +optional
	NullMarker *string `json:"nullMarker,omitempty" tf:"null_marker"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup.
	// Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties.
	// If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	// +optional
	ProjectionFields []string `json:"projectionFields,omitempty" tf:"projection_fields"`
	// The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding,
	// and then uses the first byte of the encoded string to split the data in its raw, binary state.
	// The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string.
	// If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	// +optional
	Quote *string `json:"quote,omitempty" tf:"quote"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or
	// supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators.
	// For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified:
	// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	// +optional
	SchemaUpdateOptions []string `json:"schemaUpdateOptions,omitempty" tf:"schema_update_options"`
	// The number of rows at the top of a CSV file that BigQuery will skip when loading the data.
	// The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	// When autodetect is on, the behavior is the following:
	// skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected,
	// the row is read as data. Otherwise data is read starting from the second row.
	// skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row.
	// skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected,
	// row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	// +optional
	SkipLeadingRows *int64 `json:"skipLeadingRows,omitempty" tf:"skip_leading_rows"`
	// The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP".
	// For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET".
	// For orc, specify "ORC". The default value is CSV.
	// +optional
	SourceFormat *string `json:"sourceFormat,omitempty" tf:"source_format"`
	// The fully-qualified URIs that point to your data in Google Cloud.
	// For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character
	// and it must come after the 'bucket' name. Size limits related to load jobs apply
	// to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be
	// specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.
	// For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `json:"sourceUris" tf:"source_uris"`
	// Time-based partitioning specification for the destination table.
	// +optional
	TimePartitioning *JobSpecLoadTimePartitioning `json:"timePartitioning,omitempty" tf:"time_partitioning"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion. Default value: "WRITE_EMPTY" Possible values: ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"]
	// +optional
	WriteDisposition *string `json:"writeDisposition,omitempty" tf:"write_disposition"`
}

type JobSpecQueryDefaultDataset struct {
	// The dataset. Can be specified '{{dataset_id}}' if 'project_id' is also set,
	// or of the form 'projects/{{project}}/datasets/{{dataset_id}}' if not.
	DatasetID *string `json:"datasetID" tf:"dataset_id"`
	// The ID of the project containing this table.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
}

type JobSpecQueryDestinationEncryptionConfiguration struct {
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table.
	// The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName *string `json:"kmsKeyName" tf:"kms_key_name"`
}

type JobSpecQueryDestinationTable struct {
	// The ID of the dataset containing this table.
	// +optional
	DatasetID *string `json:"datasetID,omitempty" tf:"dataset_id"`
	// The ID of the project containing this table.
	// +optional
	ProjectID *string `json:"projectID,omitempty" tf:"project_id"`
	// The table. Can be specified '{{table_id}}' if 'project_id' and 'dataset_id' are also set,
	// or of the form 'projects/{{project}}/datasets/{{dataset_id}}/tables/{{table_id}}' if not.
	TableID *string `json:"tableID" tf:"table_id"`
}

type JobSpecQueryScriptOptions struct {
	// Determines which statement in the script represents the "key result",
	// used to populate the schema and query results of the script job. Possible values: ["LAST", "FIRST_SELECT"]
	// +optional
	KeyResultStatement *string `json:"keyResultStatement,omitempty" tf:"key_result_statement"`
	// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
	// +optional
	StatementByteBudget *string `json:"statementByteBudget,omitempty" tf:"statement_byte_budget"`
	// Timeout period for each statement in a script.
	// +optional
	StatementTimeoutMs *string `json:"statementTimeoutMs,omitempty" tf:"statement_timeout_ms"`
}

type JobSpecQueryUserDefinedFunctionResources struct {
	// An inline resource that contains code for a user-defined function (UDF).
	// Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	// +optional
	InlineCode *string `json:"inlineCode,omitempty" tf:"inline_code"`
	// A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	// +optional
	ResourceURI *string `json:"resourceURI,omitempty" tf:"resource_uri"`
}

type JobSpecQuery struct {
	// If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance.
	// Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed.
	// However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	// +optional
	AllowLargeResults *bool `json:"allowLargeResults,omitempty" tf:"allow_large_results"`
	// Specifies whether the job is allowed to create new tables. The following values are supported:
	// CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table.
	// CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result.
	// Creation, truncation and append actions occur as one atomic update upon job completion Default value: "CREATE_IF_NEEDED" Possible values: ["CREATE_IF_NEEDED", "CREATE_NEVER"]
	// +optional
	CreateDisposition *string `json:"createDisposition,omitempty" tf:"create_disposition"`
	// Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	// +optional
	DefaultDataset *JobSpecQueryDefaultDataset `json:"defaultDataset,omitempty" tf:"default_dataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	// +optional
	DestinationEncryptionConfiguration *JobSpecQueryDestinationEncryptionConfiguration `json:"destinationEncryptionConfiguration,omitempty" tf:"destination_encryption_configuration"`
	// Describes the table where the query results should be stored.
	// This property must be set for large results that exceed the maximum response size.
	// For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
	// +optional
	DestinationTable *JobSpecQueryDestinationTable `json:"destinationTable,omitempty" tf:"destination_table"`
	// If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results.
	// allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	// +optional
	FlattenResults *bool `json:"flattenResults,omitempty" tf:"flatten_results"`
	// Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge).
	// If unspecified, this will be set to your project default.
	// +optional
	MaximumBillingTier *int64 `json:"maximumBillingTier,omitempty" tf:"maximum_billing_tier"`
	// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge).
	// If unspecified, this will be set to your project default.
	// +optional
	MaximumBytesBilled *string `json:"maximumBytesBilled,omitempty" tf:"maximum_bytes_billed"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	// +optional
	ParameterMode *string `json:"parameterMode,omitempty" tf:"parameter_mode"`
	// Specifies a priority for the query. Default value: "INTERACTIVE" Possible values: ["INTERACTIVE", "BATCH"]
	// +optional
	Priority *string `json:"priority,omitempty" tf:"priority"`
	// SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	// *NOTE*: queries containing [DML language](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
	// ('DELETE', 'UPDATE', 'MERGE', 'INSERT') must specify 'create_disposition = ""' and 'write_disposition = ""'.
	Query *string `json:"query" tf:"query"`
	// Allows the schema of the destination table to be updated as a side effect of the query job.
	// Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table,
	// specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.
	// One or more of the following values are specified:
	// ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	// +optional
	SchemaUpdateOptions []string `json:"schemaUpdateOptions,omitempty" tf:"schema_update_options"`
	// Options controlling the execution of scripts.
	// +optional
	ScriptOptions *JobSpecQueryScriptOptions `json:"scriptOptions,omitempty" tf:"script_options"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true.
	// If set to false, the query will use BigQuery's standard SQL.
	// +optional
	UseLegacySQL *bool `json:"useLegacySQL,omitempty" tf:"use_legacy_sql"`
	// Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever
	// tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified.
	// The default value is true.
	// +optional
	UseQueryCache *bool `json:"useQueryCache,omitempty" tf:"use_query_cache"`
	// Describes user-defined function resources used in the query.
	// +optional
	UserDefinedFunctionResources []JobSpecQueryUserDefinedFunctionResources `json:"userDefinedFunctionResources,omitempty" tf:"user_defined_function_resources"`
	// Specifies the action that occurs if the destination table already exists. The following values are supported:
	// WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result.
	// WRITE_APPEND: If the table already exists, BigQuery appends the data to the table.
	// WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result.
	// Each action is atomic and only occurs if BigQuery is able to complete the job successfully.
	// Creation, truncation and append actions occur as one atomic update upon job completion. Default value: "WRITE_EMPTY" Possible values: ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"]
	// +optional
	WriteDisposition *string `json:"writeDisposition,omitempty" tf:"write_disposition"`
}

type JobSpecStatusErrorResult struct {
	// Specifies where the error occurred, if present.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// A human-readable description of the error.
	// +optional
	Message *string `json:"message,omitempty" tf:"message"`
	// A short error code that summarizes the error.
	// +optional
	Reason *string `json:"reason,omitempty" tf:"reason"`
}

type JobSpecStatusErrors struct {
	// Specifies where the error occurred, if present.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// A human-readable description of the error.
	// +optional
	Message *string `json:"message,omitempty" tf:"message"`
	// A short error code that summarizes the error.
	// +optional
	Reason *string `json:"reason,omitempty" tf:"reason"`
}

type JobSpecStatus struct {
	// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
	// +optional
	ErrorResult []JobSpecStatusErrorResult `json:"errorResult,omitempty" tf:"error_result"`
	// The first errors encountered during the running of the job. The final message
	// includes the number of errors that caused the process to stop. Errors here do
	// not necessarily mean that the job has not completed or was unsuccessful.
	// +optional
	Errors []JobSpecStatusErrors `json:"errors,omitempty" tf:"errors"`
	// Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type JobSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Copies a table.
	// +optional
	Copy *JobSpecCopy `json:"copy,omitempty" tf:"copy"`
	// Configures an extract job.
	// +optional
	Extract *JobSpecExtract `json:"extract,omitempty" tf:"extract"`
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobID *string `json:"jobID" tf:"job_id"`
	// Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	// +optional
	JobTimeoutMs *string `json:"jobTimeoutMs,omitempty" tf:"job_timeout_ms"`
	// The type of the job.
	// +optional
	JobType *string `json:"jobType,omitempty" tf:"job_type"`
	// The labels associated with this job. You can use these to organize and group your jobs.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// Configures a load job.
	// +optional
	Load *JobSpecLoad `json:"load,omitempty" tf:"load"`
	// The geographic location of the job. The default value is US.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Configures a query job.
	// +optional
	Query *JobSpecQuery `json:"query,omitempty" tf:"query"`
	// The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
	// +optional
	Status []JobSpecStatus `json:"status,omitempty" tf:"status"`
	// Email address of the user who ran the job.
	// +optional
	UserEmail *string `json:"userEmail,omitempty" tf:"user_email"`
}

type JobStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// JobList is a list of Jobs
type JobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Job CRD objects
	Items []Job `json:"items,omitempty"`
}
