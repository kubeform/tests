/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DatasetAccess struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatasetAccessSpec   `json:"spec,omitempty"`
	Status            DatasetAccessStatus `json:"status,omitempty"`
}

type DatasetAccessSpec struct {
	DatasetAccessSpec2 `json:",inline"`
	// +optional
	KubeformOutput DatasetAccessSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DatasetAccessSpecView struct {
	// The ID of the dataset containing this table.
	DatasetID *string `json:"datasetID" tf:"dataset_id"`
	// The ID of the project containing this table.
	ProjectID *string `json:"projectID" tf:"project_id"`
	// The ID of the table. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 1,024 characters.
	TableID *string `json:"tableID" tf:"table_id"`
}

type DatasetAccessSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// If true, represents that that the iam_member in the config was translated to a different member type by the API, and is stored in state as a different member type
	// +optional
	ApiUpdatedMember *bool `json:"apiUpdatedMember,omitempty" tf:"api_updated_member"`
	// A unique ID for this dataset, without the project name. The ID
	// must contain only letters (a-z, A-Z), numbers (0-9), or
	// underscores (_). The maximum length is 1,024 characters.
	DatasetID *string `json:"datasetID" tf:"dataset_id"`
	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	// +optional
	Domain *string `json:"domain,omitempty" tf:"domain"`
	// An email address of a Google Group to grant access to.
	// +optional
	GroupByEmail *string `json:"groupByEmail,omitempty" tf:"group_by_email"`
	// Some other type of member that appears in the IAM Policy but isn't a user,
	// group, domain, or special group. For example: 'allUsers'
	// +optional
	IamMember *string `json:"iamMember,omitempty" tf:"iam_member"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles are
	// supported. Predefined roles that have equivalent basic roles are
	// swapped by the API to their basic counterparts, and will show a diff
	// post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	// +optional
	Role *string `json:"role,omitempty" tf:"role"`
	// A special group to grant access to. Possible values include:
	//
	//
	// * 'projectOwners': Owners of the enclosing project.
	//
	//
	// * 'projectReaders': Readers of the enclosing project.
	//
	//
	// * 'projectWriters': Writers of the enclosing project.
	//
	//
	// * 'allAuthenticatedUsers': All authenticated BigQuery users.
	// +optional
	SpecialGroup *string `json:"specialGroup,omitempty" tf:"special_group"`
	// An email address of a user to grant access to. For example:
	// fred@example.com
	// +optional
	UserByEmail *string `json:"userByEmail,omitempty" tf:"user_by_email"`
	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// +optional
	View *DatasetAccessSpecView `json:"view,omitempty" tf:"view"`
}

type DatasetAccessStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DatasetAccessList is a list of DatasetAccesss
type DatasetAccessList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DatasetAccess CRD objects
	Items []DatasetAccess `json:"items,omitempty"`
}
