/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type DataTransferConfig struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataTransferConfigSpec   `json:"spec,omitempty"`
	Status            DataTransferConfigStatus `json:"status,omitempty"`
}

type DataTransferConfigSpec struct {
	DataTransferConfigSpec2 `json:",inline"`
	// +optional
	KubeformOutput DataTransferConfigSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type DataTransferConfigSpecEmailPreferences struct {
	// If true, email notifications will be sent on transfer run failures.
	EnableFailureEmail *bool `json:"enableFailureEmail" tf:"enable_failure_email"`
}

type DataTransferConfigSpecScheduleOptions struct {
	// If true, automatic scheduling of data transfer runs for this
	// configuration will be disabled. The runs can be started on ad-hoc
	// basis using transferConfigs.startManualRuns API. When automatic
	// scheduling is disabled, the TransferConfig.schedule field will
	// be ignored.
	// +optional
	DisableAutoScheduling *bool `json:"disableAutoScheduling,omitempty" tf:"disable_auto_scheduling"`
	// Defines time to stop scheduling transfer runs. A transfer run cannot be
	// scheduled at or after the end time. The end time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	// +optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time"`
	// Specifies time to start scheduling transfer runs. The first run will be
	// scheduled at or after the start time according to a recurrence pattern
	// defined in the schedule string. The start time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	// +optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time"`
}

type DataTransferConfigSpecSensitiveParams struct {
	// The Secret Access Key of the AWS account transferring data from.
	SecretAccessKey *string `json:"-" sensitive:"true" tf:"secret_access_key"`
}

type DataTransferConfigSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	// +optional
	DataRefreshWindowDays *int64 `json:"dataRefreshWindowDays,omitempty" tf:"data_refresh_window_days"`
	// The data source id. Cannot be changed once the transfer config is created.
	DataSourceID *string `json:"dataSourceID" tf:"data_source_id"`
	// The BigQuery target dataset id.
	DestinationDatasetID *string `json:"destinationDatasetID" tf:"destination_dataset_id"`
	// When set to true, no runs are scheduled for a given transfer.
	// +optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled"`
	// The user specified display name for the transfer config.
	DisplayName *string `json:"displayName" tf:"display_name"`
	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// +optional
	EmailPreferences *DataTransferConfigSpecEmailPreferences `json:"emailPreferences,omitempty" tf:"email_preferences"`
	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	// The resource name of the transfer config. Transfer config names have the
	// form projects/{projectId}/locations/{location}/transferConfigs/{configId}.
	// Where configId is usually a uuid, but this is not required.
	// The name is ignored when creating a transfer config.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	// +optional
	NotificationPubsubTopic *string `json:"notificationPubsubTopic,omitempty" tf:"notification_pubsub_topic"`
	// These parameters are specific to each data source.
	Params *map[string]string `json:"params" tf:"params"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	// +optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule"`
	// Options customizing the data transfer schedule.
	// +optional
	ScheduleOptions *DataTransferConfigSpecScheduleOptions `json:"scheduleOptions,omitempty" tf:"schedule_options"`
	// Different parameters are configured primarily using the the 'params' field on this
	// resource. This block contains the parameters which contain secrets or passwords so that they can be marked
	// sensitive and hidden from plan output. The name of the field, eg: secret_access_key, will be the key
	// in the 'params' map in the api request.
	//
	// Credentials may not be specified in both locations and will cause an error. Changing from one location
	// to a different credential configuration in the config will require an apply to update state.
	// +optional
	SensitiveParams *DataTransferConfigSpecSensitiveParams `json:"sensitiveParams,omitempty" tf:"sensitive_params"`
	// Optional service account name. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	// +optional
	ServiceAccountName *string `json:"serviceAccountName,omitempty" tf:"service_account_name"`
}

type DataTransferConfigStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DataTransferConfigList is a list of DataTransferConfigs
type DataTransferConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of DataTransferConfig CRD objects
	Items []DataTransferConfig `json:"items,omitempty"`
}
