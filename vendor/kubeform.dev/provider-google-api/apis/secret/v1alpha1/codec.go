/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplication{}).Type1()):            ManagerSecretSpecReplicationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplicationUserManaged{}).Type1()): ManagerSecretSpecReplicationUserManagedCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamBindingSpecCondition{}).Type1()):    ManagerSecretIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamMemberSpecCondition{}).Type1()):     ManagerSecretIamMemberSpecConditionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplication{}).Type1()):            ManagerSecretSpecReplicationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplicationUserManaged{}).Type1()): ManagerSecretSpecReplicationUserManagedCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamBindingSpecCondition{}).Type1()):    ManagerSecretIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamMemberSpecCondition{}).Type1()):     ManagerSecretIamMemberSpecConditionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ManagerSecretSpecReplicationCodec struct {
}

func (ManagerSecretSpecReplicationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerSecretSpecReplication)(ptr) == nil
}

func (ManagerSecretSpecReplicationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerSecretSpecReplication)(ptr)
	var objs []ManagerSecretSpecReplication
	if obj != nil {
		objs = []ManagerSecretSpecReplication{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplication{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerSecretSpecReplicationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerSecretSpecReplication)(ptr) = ManagerSecretSpecReplication{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerSecretSpecReplication

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplication{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerSecretSpecReplication)(ptr) = objs[0]
			} else {
				*(*ManagerSecretSpecReplication)(ptr) = ManagerSecretSpecReplication{}
			}
		} else {
			*(*ManagerSecretSpecReplication)(ptr) = ManagerSecretSpecReplication{}
		}
	default:
		iter.ReportError("decode ManagerSecretSpecReplication", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerSecretSpecReplicationUserManagedCodec struct {
}

func (ManagerSecretSpecReplicationUserManagedCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerSecretSpecReplicationUserManaged)(ptr) == nil
}

func (ManagerSecretSpecReplicationUserManagedCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerSecretSpecReplicationUserManaged)(ptr)
	var objs []ManagerSecretSpecReplicationUserManaged
	if obj != nil {
		objs = []ManagerSecretSpecReplicationUserManaged{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplicationUserManaged{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerSecretSpecReplicationUserManagedCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerSecretSpecReplicationUserManaged)(ptr) = ManagerSecretSpecReplicationUserManaged{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerSecretSpecReplicationUserManaged

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretSpecReplicationUserManaged{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerSecretSpecReplicationUserManaged)(ptr) = objs[0]
			} else {
				*(*ManagerSecretSpecReplicationUserManaged)(ptr) = ManagerSecretSpecReplicationUserManaged{}
			}
		} else {
			*(*ManagerSecretSpecReplicationUserManaged)(ptr) = ManagerSecretSpecReplicationUserManaged{}
		}
	default:
		iter.ReportError("decode ManagerSecretSpecReplicationUserManaged", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerSecretIamBindingSpecConditionCodec struct {
}

func (ManagerSecretIamBindingSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerSecretIamBindingSpecCondition)(ptr) == nil
}

func (ManagerSecretIamBindingSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerSecretIamBindingSpecCondition)(ptr)
	var objs []ManagerSecretIamBindingSpecCondition
	if obj != nil {
		objs = []ManagerSecretIamBindingSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamBindingSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerSecretIamBindingSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerSecretIamBindingSpecCondition)(ptr) = ManagerSecretIamBindingSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerSecretIamBindingSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamBindingSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerSecretIamBindingSpecCondition)(ptr) = objs[0]
			} else {
				*(*ManagerSecretIamBindingSpecCondition)(ptr) = ManagerSecretIamBindingSpecCondition{}
			}
		} else {
			*(*ManagerSecretIamBindingSpecCondition)(ptr) = ManagerSecretIamBindingSpecCondition{}
		}
	default:
		iter.ReportError("decode ManagerSecretIamBindingSpecCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerSecretIamMemberSpecConditionCodec struct {
}

func (ManagerSecretIamMemberSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerSecretIamMemberSpecCondition)(ptr) == nil
}

func (ManagerSecretIamMemberSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerSecretIamMemberSpecCondition)(ptr)
	var objs []ManagerSecretIamMemberSpecCondition
	if obj != nil {
		objs = []ManagerSecretIamMemberSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamMemberSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerSecretIamMemberSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerSecretIamMemberSpecCondition)(ptr) = ManagerSecretIamMemberSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerSecretIamMemberSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerSecretIamMemberSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerSecretIamMemberSpecCondition)(ptr) = objs[0]
			} else {
				*(*ManagerSecretIamMemberSpecCondition)(ptr) = ManagerSecretIamMemberSpecCondition{}
			}
		} else {
			*(*ManagerSecretIamMemberSpecCondition)(ptr) = ManagerSecretIamMemberSpecCondition{}
		}
	default:
		iter.ReportError("decode ManagerSecretIamMemberSpecCondition", "unexpected JSON type")
	}
}
