/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasic{}).Type1()):                                                       ManagerAccessLevelSpecBasicCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasicConditionsDevicePolicy{}).Type1()):                                 ManagerAccessLevelSpecBasicConditionsDevicePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustom{}).Type1()):                                                      ManagerAccessLevelSpecCustomCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustomExpr{}).Type1()):                                                  ManagerAccessLevelSpecCustomExprCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelConditionSpecDevicePolicy{}).Type1()):                                       ManagerAccessLevelConditionSpecDevicePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasic{}).Type1()):                                      ManagerAccessLevelBatchSpecAccessLevelsBasicCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{}).Type1()):                ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustom{}).Type1()):                                     ManagerAccessLevelBatchSpecAccessLevelsCustomCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{}).Type1()):                                 ManagerAccessLevelBatchSpecAccessLevelsCustomExprCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpec{}).Type1()):                                                   ManagerServicePerimeterSpecSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{}).Type1()):                           ManagerServicePerimeterSpecSpecEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{}).Type1()):                             ManagerServicePerimeterSpecSpecEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{}).Type1()):                         ManagerServicePerimeterSpecSpecIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{}).Type1()):                           ManagerServicePerimeterSpecSpecIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecVpcAccessibleServices{}).Type1()):                              ManagerServicePerimeterSpecSpecVpcAccessibleServicesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatus{}).Type1()):                                                 ManagerServicePerimeterSpecStatusCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{}).Type1()):                         ManagerServicePerimeterSpecStatusEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{}).Type1()):                           ManagerServicePerimeterSpecStatusEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{}).Type1()):                       ManagerServicePerimeterSpecStatusIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{}).Type1()):                         ManagerServicePerimeterSpecStatusIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusVpcAccessibleServices{}).Type1()):                            ManagerServicePerimeterSpecStatusVpcAccessibleServicesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpec{}).Type1()):                             ManagerServicePerimeterBatchSpecServicePerimetersSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{}).Type1()):     ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{}).Type1()):       ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{}).Type1()):   ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{}).Type1()):     ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{}).Type1()):        ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServicesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatus{}).Type1()):                           ManagerServicePerimeterBatchSpecServicePerimetersStatusCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{}).Type1()):   ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{}).Type1()):     ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{}).Type1()): ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{}).Type1()):   ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{}).Type1()):      ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServicesCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasic{}).Type1()):                                                       ManagerAccessLevelSpecBasicCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasicConditionsDevicePolicy{}).Type1()):                                 ManagerAccessLevelSpecBasicConditionsDevicePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustom{}).Type1()):                                                      ManagerAccessLevelSpecCustomCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustomExpr{}).Type1()):                                                  ManagerAccessLevelSpecCustomExprCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelConditionSpecDevicePolicy{}).Type1()):                                       ManagerAccessLevelConditionSpecDevicePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasic{}).Type1()):                                      ManagerAccessLevelBatchSpecAccessLevelsBasicCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{}).Type1()):                ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustom{}).Type1()):                                     ManagerAccessLevelBatchSpecAccessLevelsCustomCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{}).Type1()):                                 ManagerAccessLevelBatchSpecAccessLevelsCustomExprCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpec{}).Type1()):                                                   ManagerServicePerimeterSpecSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{}).Type1()):                           ManagerServicePerimeterSpecSpecEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{}).Type1()):                             ManagerServicePerimeterSpecSpecEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{}).Type1()):                         ManagerServicePerimeterSpecSpecIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{}).Type1()):                           ManagerServicePerimeterSpecSpecIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecVpcAccessibleServices{}).Type1()):                              ManagerServicePerimeterSpecSpecVpcAccessibleServicesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatus{}).Type1()):                                                 ManagerServicePerimeterSpecStatusCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{}).Type1()):                         ManagerServicePerimeterSpecStatusEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{}).Type1()):                           ManagerServicePerimeterSpecStatusEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{}).Type1()):                       ManagerServicePerimeterSpecStatusIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{}).Type1()):                         ManagerServicePerimeterSpecStatusIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusVpcAccessibleServices{}).Type1()):                            ManagerServicePerimeterSpecStatusVpcAccessibleServicesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpec{}).Type1()):                             ManagerServicePerimeterBatchSpecServicePerimetersSpecCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{}).Type1()):     ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{}).Type1()):       ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{}).Type1()):   ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{}).Type1()):     ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{}).Type1()):        ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServicesCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatus{}).Type1()):                           ManagerServicePerimeterBatchSpecServicePerimetersStatusCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{}).Type1()):   ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{}).Type1()):     ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{}).Type1()): ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{}).Type1()):   ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressToCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{}).Type1()):      ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServicesCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelSpecBasicCodec struct {
}

func (ManagerAccessLevelSpecBasicCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelSpecBasic)(ptr) == nil
}

func (ManagerAccessLevelSpecBasicCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelSpecBasic)(ptr)
	var objs []ManagerAccessLevelSpecBasic
	if obj != nil {
		objs = []ManagerAccessLevelSpecBasic{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasic{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelSpecBasicCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelSpecBasic)(ptr) = ManagerAccessLevelSpecBasic{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelSpecBasic

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasic{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelSpecBasic)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelSpecBasic)(ptr) = ManagerAccessLevelSpecBasic{}
			}
		} else {
			*(*ManagerAccessLevelSpecBasic)(ptr) = ManagerAccessLevelSpecBasic{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelSpecBasic", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelSpecBasicConditionsDevicePolicyCodec struct {
}

func (ManagerAccessLevelSpecBasicConditionsDevicePolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelSpecBasicConditionsDevicePolicy)(ptr) == nil
}

func (ManagerAccessLevelSpecBasicConditionsDevicePolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelSpecBasicConditionsDevicePolicy)(ptr)
	var objs []ManagerAccessLevelSpecBasicConditionsDevicePolicy
	if obj != nil {
		objs = []ManagerAccessLevelSpecBasicConditionsDevicePolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasicConditionsDevicePolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelSpecBasicConditionsDevicePolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelSpecBasicConditionsDevicePolicy)(ptr) = ManagerAccessLevelSpecBasicConditionsDevicePolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelSpecBasicConditionsDevicePolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecBasicConditionsDevicePolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelSpecBasicConditionsDevicePolicy)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelSpecBasicConditionsDevicePolicy)(ptr) = ManagerAccessLevelSpecBasicConditionsDevicePolicy{}
			}
		} else {
			*(*ManagerAccessLevelSpecBasicConditionsDevicePolicy)(ptr) = ManagerAccessLevelSpecBasicConditionsDevicePolicy{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelSpecBasicConditionsDevicePolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelSpecCustomCodec struct {
}

func (ManagerAccessLevelSpecCustomCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelSpecCustom)(ptr) == nil
}

func (ManagerAccessLevelSpecCustomCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelSpecCustom)(ptr)
	var objs []ManagerAccessLevelSpecCustom
	if obj != nil {
		objs = []ManagerAccessLevelSpecCustom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelSpecCustomCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelSpecCustom)(ptr) = ManagerAccessLevelSpecCustom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelSpecCustom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelSpecCustom)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelSpecCustom)(ptr) = ManagerAccessLevelSpecCustom{}
			}
		} else {
			*(*ManagerAccessLevelSpecCustom)(ptr) = ManagerAccessLevelSpecCustom{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelSpecCustom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelSpecCustomExprCodec struct {
}

func (ManagerAccessLevelSpecCustomExprCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelSpecCustomExpr)(ptr) == nil
}

func (ManagerAccessLevelSpecCustomExprCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelSpecCustomExpr)(ptr)
	var objs []ManagerAccessLevelSpecCustomExpr
	if obj != nil {
		objs = []ManagerAccessLevelSpecCustomExpr{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustomExpr{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelSpecCustomExprCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelSpecCustomExpr)(ptr) = ManagerAccessLevelSpecCustomExpr{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelSpecCustomExpr

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelSpecCustomExpr{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelSpecCustomExpr)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelSpecCustomExpr)(ptr) = ManagerAccessLevelSpecCustomExpr{}
			}
		} else {
			*(*ManagerAccessLevelSpecCustomExpr)(ptr) = ManagerAccessLevelSpecCustomExpr{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelSpecCustomExpr", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelConditionSpecDevicePolicyCodec struct {
}

func (ManagerAccessLevelConditionSpecDevicePolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelConditionSpecDevicePolicy)(ptr) == nil
}

func (ManagerAccessLevelConditionSpecDevicePolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelConditionSpecDevicePolicy)(ptr)
	var objs []ManagerAccessLevelConditionSpecDevicePolicy
	if obj != nil {
		objs = []ManagerAccessLevelConditionSpecDevicePolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelConditionSpecDevicePolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelConditionSpecDevicePolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelConditionSpecDevicePolicy)(ptr) = ManagerAccessLevelConditionSpecDevicePolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelConditionSpecDevicePolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelConditionSpecDevicePolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelConditionSpecDevicePolicy)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelConditionSpecDevicePolicy)(ptr) = ManagerAccessLevelConditionSpecDevicePolicy{}
			}
		} else {
			*(*ManagerAccessLevelConditionSpecDevicePolicy)(ptr) = ManagerAccessLevelConditionSpecDevicePolicy{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelConditionSpecDevicePolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelBatchSpecAccessLevelsBasicCodec struct {
}

func (ManagerAccessLevelBatchSpecAccessLevelsBasicCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelBatchSpecAccessLevelsBasic)(ptr) == nil
}

func (ManagerAccessLevelBatchSpecAccessLevelsBasicCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelBatchSpecAccessLevelsBasic)(ptr)
	var objs []ManagerAccessLevelBatchSpecAccessLevelsBasic
	if obj != nil {
		objs = []ManagerAccessLevelBatchSpecAccessLevelsBasic{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasic{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelBatchSpecAccessLevelsBasicCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelBatchSpecAccessLevelsBasic)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsBasic{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelBatchSpecAccessLevelsBasic

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasic{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelBatchSpecAccessLevelsBasic)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelBatchSpecAccessLevelsBasic)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsBasic{}
			}
		} else {
			*(*ManagerAccessLevelBatchSpecAccessLevelsBasic)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsBasic{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelBatchSpecAccessLevelsBasic", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicyCodec struct {
}

func (ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy)(ptr) == nil
}

func (ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy)(ptr)
	var objs []ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy
	if obj != nil {
		objs = []ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{}
			}
		} else {
			*(*ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelBatchSpecAccessLevelsBasicConditionsDevicePolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelBatchSpecAccessLevelsCustomCodec struct {
}

func (ManagerAccessLevelBatchSpecAccessLevelsCustomCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelBatchSpecAccessLevelsCustom)(ptr) == nil
}

func (ManagerAccessLevelBatchSpecAccessLevelsCustomCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelBatchSpecAccessLevelsCustom)(ptr)
	var objs []ManagerAccessLevelBatchSpecAccessLevelsCustom
	if obj != nil {
		objs = []ManagerAccessLevelBatchSpecAccessLevelsCustom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelBatchSpecAccessLevelsCustomCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelBatchSpecAccessLevelsCustom)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsCustom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelBatchSpecAccessLevelsCustom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelBatchSpecAccessLevelsCustom)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelBatchSpecAccessLevelsCustom)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsCustom{}
			}
		} else {
			*(*ManagerAccessLevelBatchSpecAccessLevelsCustom)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsCustom{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelBatchSpecAccessLevelsCustom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerAccessLevelBatchSpecAccessLevelsCustomExprCodec struct {
}

func (ManagerAccessLevelBatchSpecAccessLevelsCustomExprCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerAccessLevelBatchSpecAccessLevelsCustomExpr)(ptr) == nil
}

func (ManagerAccessLevelBatchSpecAccessLevelsCustomExprCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerAccessLevelBatchSpecAccessLevelsCustomExpr)(ptr)
	var objs []ManagerAccessLevelBatchSpecAccessLevelsCustomExpr
	if obj != nil {
		objs = []ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerAccessLevelBatchSpecAccessLevelsCustomExprCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerAccessLevelBatchSpecAccessLevelsCustomExpr)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerAccessLevelBatchSpecAccessLevelsCustomExpr

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerAccessLevelBatchSpecAccessLevelsCustomExpr)(ptr) = objs[0]
			} else {
				*(*ManagerAccessLevelBatchSpecAccessLevelsCustomExpr)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{}
			}
		} else {
			*(*ManagerAccessLevelBatchSpecAccessLevelsCustomExpr)(ptr) = ManagerAccessLevelBatchSpecAccessLevelsCustomExpr{}
		}
	default:
		iter.ReportError("decode ManagerAccessLevelBatchSpecAccessLevelsCustomExpr", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecSpecCodec struct {
}

func (ManagerServicePerimeterSpecSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecSpec)(ptr) == nil
}

func (ManagerServicePerimeterSpecSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecSpec)(ptr)
	var objs []ManagerServicePerimeterSpecSpec
	if obj != nil {
		objs = []ManagerServicePerimeterSpecSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecSpec)(ptr) = ManagerServicePerimeterSpecSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecSpec)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecSpec)(ptr) = ManagerServicePerimeterSpecSpec{}
			}
		} else {
			*(*ManagerServicePerimeterSpecSpec)(ptr) = ManagerServicePerimeterSpecSpec{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecSpecEgressPoliciesEgressFromCodec struct {
}

func (ManagerServicePerimeterSpecSpecEgressPoliciesEgressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom)(ptr) == nil
}

func (ManagerServicePerimeterSpecSpecEgressPoliciesEgressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom)(ptr)
	var objs []ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecSpecEgressPoliciesEgressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecSpecEgressPoliciesEgressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecSpecEgressPoliciesEgressToCodec struct {
}

func (ManagerServicePerimeterSpecSpecEgressPoliciesEgressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo)(ptr) == nil
}

func (ManagerServicePerimeterSpecSpecEgressPoliciesEgressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo)(ptr)
	var objs []ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo
	if obj != nil {
		objs = []ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecSpecEgressPoliciesEgressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{}
			}
		} else {
			*(*ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecSpecEgressPoliciesEgressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecSpecIngressPoliciesIngressFromCodec struct {
}

func (ManagerServicePerimeterSpecSpecIngressPoliciesIngressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom)(ptr) == nil
}

func (ManagerServicePerimeterSpecSpecIngressPoliciesIngressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom)(ptr)
	var objs []ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecSpecIngressPoliciesIngressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecSpecIngressPoliciesIngressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecSpecIngressPoliciesIngressToCodec struct {
}

func (ManagerServicePerimeterSpecSpecIngressPoliciesIngressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo)(ptr) == nil
}

func (ManagerServicePerimeterSpecSpecIngressPoliciesIngressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo)(ptr)
	var objs []ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo
	if obj != nil {
		objs = []ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecSpecIngressPoliciesIngressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{}
			}
		} else {
			*(*ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecSpecIngressPoliciesIngressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecSpecVpcAccessibleServicesCodec struct {
}

func (ManagerServicePerimeterSpecSpecVpcAccessibleServicesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecSpecVpcAccessibleServices)(ptr) == nil
}

func (ManagerServicePerimeterSpecSpecVpcAccessibleServicesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecSpecVpcAccessibleServices)(ptr)
	var objs []ManagerServicePerimeterSpecSpecVpcAccessibleServices
	if obj != nil {
		objs = []ManagerServicePerimeterSpecSpecVpcAccessibleServices{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecVpcAccessibleServices{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecSpecVpcAccessibleServicesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecSpecVpcAccessibleServices)(ptr) = ManagerServicePerimeterSpecSpecVpcAccessibleServices{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecSpecVpcAccessibleServices

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecSpecVpcAccessibleServices{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecSpecVpcAccessibleServices)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecSpecVpcAccessibleServices)(ptr) = ManagerServicePerimeterSpecSpecVpcAccessibleServices{}
			}
		} else {
			*(*ManagerServicePerimeterSpecSpecVpcAccessibleServices)(ptr) = ManagerServicePerimeterSpecSpecVpcAccessibleServices{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecSpecVpcAccessibleServices", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecStatusCodec struct {
}

func (ManagerServicePerimeterSpecStatusCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecStatus)(ptr) == nil
}

func (ManagerServicePerimeterSpecStatusCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecStatus)(ptr)
	var objs []ManagerServicePerimeterSpecStatus
	if obj != nil {
		objs = []ManagerServicePerimeterSpecStatus{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatus{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecStatusCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecStatus)(ptr) = ManagerServicePerimeterSpecStatus{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecStatus

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatus{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecStatus)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecStatus)(ptr) = ManagerServicePerimeterSpecStatus{}
			}
		} else {
			*(*ManagerServicePerimeterSpecStatus)(ptr) = ManagerServicePerimeterSpecStatus{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecStatus", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecStatusEgressPoliciesEgressFromCodec struct {
}

func (ManagerServicePerimeterSpecStatusEgressPoliciesEgressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom)(ptr) == nil
}

func (ManagerServicePerimeterSpecStatusEgressPoliciesEgressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom)(ptr)
	var objs []ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecStatusEgressPoliciesEgressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecStatusEgressPoliciesEgressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecStatusEgressPoliciesEgressToCodec struct {
}

func (ManagerServicePerimeterSpecStatusEgressPoliciesEgressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo)(ptr) == nil
}

func (ManagerServicePerimeterSpecStatusEgressPoliciesEgressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo)(ptr)
	var objs []ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo
	if obj != nil {
		objs = []ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecStatusEgressPoliciesEgressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{}
			}
		} else {
			*(*ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecStatusEgressPoliciesEgressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecStatusIngressPoliciesIngressFromCodec struct {
}

func (ManagerServicePerimeterSpecStatusIngressPoliciesIngressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom)(ptr) == nil
}

func (ManagerServicePerimeterSpecStatusIngressPoliciesIngressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom)(ptr)
	var objs []ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecStatusIngressPoliciesIngressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecStatusIngressPoliciesIngressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecStatusIngressPoliciesIngressToCodec struct {
}

func (ManagerServicePerimeterSpecStatusIngressPoliciesIngressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo)(ptr) == nil
}

func (ManagerServicePerimeterSpecStatusIngressPoliciesIngressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo)(ptr)
	var objs []ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo
	if obj != nil {
		objs = []ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecStatusIngressPoliciesIngressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{}
			}
		} else {
			*(*ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecStatusIngressPoliciesIngressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterSpecStatusVpcAccessibleServicesCodec struct {
}

func (ManagerServicePerimeterSpecStatusVpcAccessibleServicesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterSpecStatusVpcAccessibleServices)(ptr) == nil
}

func (ManagerServicePerimeterSpecStatusVpcAccessibleServicesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterSpecStatusVpcAccessibleServices)(ptr)
	var objs []ManagerServicePerimeterSpecStatusVpcAccessibleServices
	if obj != nil {
		objs = []ManagerServicePerimeterSpecStatusVpcAccessibleServices{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusVpcAccessibleServices{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterSpecStatusVpcAccessibleServicesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterSpecStatusVpcAccessibleServices)(ptr) = ManagerServicePerimeterSpecStatusVpcAccessibleServices{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterSpecStatusVpcAccessibleServices

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterSpecStatusVpcAccessibleServices{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterSpecStatusVpcAccessibleServices)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterSpecStatusVpcAccessibleServices)(ptr) = ManagerServicePerimeterSpecStatusVpcAccessibleServices{}
			}
		} else {
			*(*ManagerServicePerimeterSpecStatusVpcAccessibleServices)(ptr) = ManagerServicePerimeterSpecStatusVpcAccessibleServices{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterSpecStatusVpcAccessibleServices", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersSpecCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersSpec)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersSpec)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpec
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersSpec{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpec{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersSpec)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpec{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpec

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpec{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpec)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpec)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpec{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersSpec)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpec{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersSpec", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFromCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressToCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersSpecEgressPoliciesEgressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFromCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressToCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersSpecIngressPoliciesIngressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServicesCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServicesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServicesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServicesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersSpecVpcAccessibleServices", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersStatusCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersStatus)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersStatus)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatus
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersStatus{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatus{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersStatus)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatus{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatus

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatus{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatus)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatus)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatus{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersStatus)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatus{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersStatus", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFromCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressToCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersStatusEgressPoliciesEgressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFromCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressFrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressToCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressToCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressToCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressToCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersStatusIngressPoliciesIngressTo", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServicesCodec struct {
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServicesCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices)(ptr) == nil
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServicesCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices)(ptr)
	var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices
	if obj != nil {
		objs = []ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServicesCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices)(ptr) = objs[0]
			} else {
				*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{}
			}
		} else {
			*(*ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices)(ptr) = ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices{}
		}
	default:
		iter.ReportError("decode ManagerServicePerimeterBatchSpecServicePerimetersStatusVpcAccessibleServices", "unexpected JSON type")
	}
}
