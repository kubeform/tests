/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ServicesGameServerDeploymentRollout struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicesGameServerDeploymentRolloutSpec   `json:"spec,omitempty"`
	Status            ServicesGameServerDeploymentRolloutStatus `json:"status,omitempty"`
}

type ServicesGameServerDeploymentRolloutSpec struct {
	ServicesGameServerDeploymentRolloutSpec2 `json:",inline"`
	// +optional
	KubeformOutput ServicesGameServerDeploymentRolloutSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ServicesGameServerDeploymentRolloutSpecGameServerConfigOverridesRealmsSelector struct {
	// List of realms to match against.
	// +optional
	Realms []string `json:"realms,omitempty" tf:"realms"`
}

type ServicesGameServerDeploymentRolloutSpecGameServerConfigOverrides struct {
	// Version of the configuration.
	// +optional
	ConfigVersion *string `json:"configVersion,omitempty" tf:"config_version"`
	// Selection by realms.
	// +optional
	RealmsSelector *ServicesGameServerDeploymentRolloutSpecGameServerConfigOverridesRealmsSelector `json:"realmsSelector,omitempty" tf:"realms_selector"`
}

type ServicesGameServerDeploymentRolloutSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// This field points to the game server config that is
	// applied by default to all realms and clusters. For example,
	//
	// 'projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config'.
	DefaultGameServerConfig *string `json:"defaultGameServerConfig" tf:"default_game_server_config"`
	// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
	DeploymentID *string `json:"deploymentID" tf:"deployment_id"`
	// The game_server_config_overrides contains the per game server config
	// overrides. The overrides are processed in the order they are listed. As
	// soon as a match is found for a cluster, the rest of the list is not
	// processed.
	// +optional
	GameServerConfigOverrides []ServicesGameServerDeploymentRolloutSpecGameServerConfigOverrides `json:"gameServerConfigOverrides,omitempty" tf:"game_server_config_overrides"`
	// The resource id of the game server deployment
	//
	// eg: 'projects/my-project/locations/global/gameServerDeployments/my-deployment/rollout'.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
}

type ServicesGameServerDeploymentRolloutStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServicesGameServerDeploymentRolloutList is a list of ServicesGameServerDeploymentRollouts
type ServicesGameServerDeploymentRolloutList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ServicesGameServerDeploymentRollout CRD objects
	Items []ServicesGameServerDeploymentRollout `json:"items,omitempty"`
}
