/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Registry struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistrySpec   `json:"spec,omitempty"`
	Status            RegistryStatus `json:"status,omitempty"`
}

type RegistrySpec struct {
	RegistrySpec2 `json:",inline"`
	// +optional
	KubeformOutput RegistrySpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RegistrySpecCredentials struct {
	// A public key certificate format and data.
	PublicKeyCertificate map[string]string `json:"publicKeyCertificate" tf:"public_key_certificate"`
}

type RegistrySpecEventNotificationConfigs struct {
	// PubSub topic name to publish device events.
	PubsubTopicName *string `json:"pubsubTopicName" tf:"pubsub_topic_name"`
	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last 'event_notification_configs'
	// item.
	// +optional
	SubfolderMatches *string `json:"subfolderMatches,omitempty" tf:"subfolder_matches"`
}

type RegistrySpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// List of public key certificates to authenticate devices.
	// +optional
	// +kubebuilder:validation:MaxItems=10
	Credentials []RegistrySpecCredentials `json:"credentials,omitempty" tf:"credentials"`
	// List of configurations for event notifications, such as PubSub topics
	// to publish device events to.
	// +optional
	// +kubebuilder:validation:MaxItems=10
	EventNotificationConfigs []RegistrySpecEventNotificationConfigs `json:"eventNotificationConfigs,omitempty" tf:"event_notification_configs"`
	// Activate or deactivate HTTP.
	// +optional
	HttpConfig map[string]string `json:"httpConfig,omitempty" tf:"http_config"`
	// The default logging verbosity for activity from devices in this
	// registry. Specifies which events should be written to logs. For
	// example, if the LogLevel is ERROR, only events that terminate in
	// errors will be logged. LogLevel is inclusive; enabling INFO logging
	// will also enable ERROR logging. Default value: "NONE" Possible values: ["NONE", "ERROR", "INFO", "DEBUG"]
	// +optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level"`
	// Activate or deactivate MQTT.
	// +optional
	MqttConfig map[string]string `json:"mqttConfig,omitempty" tf:"mqtt_config"`
	// A unique name for the resource, required by device registry.
	Name *string `json:"name" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// A PubSub topic to publish device state updates.
	// +optional
	StateNotificationConfig map[string]string `json:"stateNotificationConfig,omitempty" tf:"state_notification_config"`
}

type RegistryStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RegistryList is a list of Registrys
type RegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Registry CRD objects
	Items []Registry `json:"items,omitempty"`
}
