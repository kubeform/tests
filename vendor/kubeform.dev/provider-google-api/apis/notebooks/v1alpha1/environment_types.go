/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Environment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvironmentSpec   `json:"spec,omitempty"`
	Status            EnvironmentStatus `json:"status,omitempty"`
}

type EnvironmentSpec struct {
	EnvironmentSpec2 `json:",inline"`
	// +optional
	KubeformOutput EnvironmentSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type EnvironmentSpecContainerImage struct {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	Repository *string `json:"repository" tf:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
}

type EnvironmentSpecVmImage struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	// +optional
	ImageFamily *string `json:"imageFamily,omitempty" tf:"image_family"`
	// Use VM image name to find the image.
	// +optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name"`
	// The name of the Google Cloud project that this VM image belongs to.
	// Format: projects/{project_id}
	Project *string `json:"project" tf:"project"`
}

type EnvironmentSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Use a container image to start the notebook instance.
	// +optional
	ContainerImage *EnvironmentSpecContainerImage `json:"containerImage,omitempty" tf:"container_image"`
	// Instance creation time
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// A brief description of this environment.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Display name of this environment for the UI.
	// +optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`
	// A reference to the zone where the machine resides.
	Location *string `json:"location" tf:"location"`
	// The name specified for the Environment instance.
	// Format: projects/{project_id}/locations/{location}/environments/{environmentId}
	Name *string `json:"name" tf:"name"`
	// Path to a Bash script that automatically runs after a notebook instance fully boots up.
	// The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name"
	// +optional
	PostStartupScript *string `json:"postStartupScript,omitempty" tf:"post_startup_script"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Use a Compute Engine VM image to start the notebook instance.
	// +optional
	VmImage *EnvironmentSpecVmImage `json:"vmImage,omitempty" tf:"vm_image"`
}

type EnvironmentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EnvironmentList is a list of Environments
type EnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Environment CRD objects
	Items []Environment `json:"items,omitempty"`
}
