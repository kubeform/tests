/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Instance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceSpec   `json:"spec,omitempty"`
	Status            InstanceStatus `json:"status,omitempty"`
}

type InstanceSpec struct {
	InstanceSpec2 `json:",inline"`
	// +optional
	KubeformOutput InstanceSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type InstanceSpecAcceleratorConfig struct {
	// Count of cores of this accelerator.
	CoreCount *int64 `json:"coreCount" tf:"core_count"`
	// Type of this accelerator. Possible values: ["ACCELERATOR_TYPE_UNSPECIFIED", "NVIDIA_TESLA_K80", "NVIDIA_TESLA_P100", "NVIDIA_TESLA_V100", "NVIDIA_TESLA_P4", "NVIDIA_TESLA_T4", "NVIDIA_TESLA_T4_VWS", "NVIDIA_TESLA_P100_VWS", "NVIDIA_TESLA_P4_VWS", "NVIDIA_TESLA_A100", "TPU_V2", "TPU_V3"]
	Type *string `json:"type" tf:"type"`
}

type InstanceSpecContainerImage struct {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	Repository *string `json:"repository" tf:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	// +optional
	Tag *string `json:"tag,omitempty" tf:"tag"`
}

type InstanceSpecShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the
	// boot integrity of the instance. The attestation is performed against the integrity policy baseline.
	// This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	// Enabled by default.
	// +optional
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty" tf:"enable_integrity_monitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs
	// authentic software by verifying the digital signature of all boot components, and halting the boot process
	// if signature verification fails.
	// Disabled by default.
	// +optional
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty" tf:"enable_secure_boot"`
	// Defines whether the instance has the vTPM enabled.
	// Enabled by default.
	// +optional
	EnableVtpm *bool `json:"enableVtpm,omitempty" tf:"enable_vtpm"`
}

type InstanceSpecVmImage struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	// +optional
	ImageFamily *string `json:"imageFamily,omitempty" tf:"image_family"`
	// Use VM image name to find the image.
	// +optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name"`
	// The name of the Google Cloud project that this VM image belongs to.
	// Format: projects/{project_id}
	Project *string `json:"project" tf:"project"`
}

type InstanceSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The hardware accelerator used on this instance. If you use accelerators,
	// make sure that your configuration has enough vCPUs and memory to support the
	// machineType you have selected.
	// +optional
	AcceleratorConfig *InstanceSpecAcceleratorConfig `json:"acceleratorConfig,omitempty" tf:"accelerator_config"`
	// The size of the boot disk in GB attached to this instance,
	// up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
	// If not specified, this defaults to 100.
	// +optional
	BootDiskSizeGb *int64 `json:"bootDiskSizeGb,omitempty" tf:"boot_disk_size_gb"`
	// Possible disk types for notebook instances. Possible values: ["DISK_TYPE_UNSPECIFIED", "PD_STANDARD", "PD_SSD", "PD_BALANCED"]
	// +optional
	BootDiskType *string `json:"bootDiskType,omitempty" tf:"boot_disk_type"`
	// Use a container image to start the notebook instance.
	// +optional
	ContainerImage *InstanceSpecContainerImage `json:"containerImage,omitempty" tf:"container_image"`
	// Instance creation time
	// +optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time"`
	// Specify a custom Cloud Storage path where the GPU driver is stored.
	// If not specified, we'll automatically choose from official GPU drivers.
	// +optional
	CustomGpuDriverPath *string `json:"customGpuDriverPath,omitempty" tf:"custom_gpu_driver_path"`
	// The size of the data disk in GB attached to this instance,
	// up to a maximum of 64000 GB (64 TB).
	// You can choose the size of the data disk based on how big your notebooks and data are.
	// If not specified, this defaults to 100.
	// +optional
	DataDiskSizeGb *int64 `json:"dataDiskSizeGb,omitempty" tf:"data_disk_size_gb"`
	// Possible disk types for notebook instances. Possible values: ["DISK_TYPE_UNSPECIFIED", "PD_STANDARD", "PD_SSD", "PD_BALANCED"]
	// +optional
	DataDiskType *string `json:"dataDiskType,omitempty" tf:"data_disk_type"`
	// Disk encryption method used on the boot and data disks, defaults to GMEK. Possible values: ["DISK_ENCRYPTION_UNSPECIFIED", "GMEK", "CMEK"]
	// +optional
	DiskEncryption *string `json:"diskEncryption,omitempty" tf:"disk_encryption"`
	// Whether the end user authorizes Google Cloud to install GPU driver
	// on this instance. If this field is empty or set to false, the GPU driver
	// won't be installed. Only applicable to instances with GPUs.
	// +optional
	InstallGpuDriver *bool `json:"installGpuDriver,omitempty" tf:"install_gpu_driver"`
	// The list of owners of this instance after creation.
	// Format: alias@example.com.
	// Currently supports one owner only.
	// If not specified, all of the service account users of
	// your VM instance's service account can use the instance.
	// +optional
	InstanceOwners []string `json:"instanceOwners,omitempty" tf:"instance_owners"`
	// The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
	// Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
	// +optional
	KmsKey *string `json:"kmsKey,omitempty" tf:"kms_key"`
	// Labels to apply to this instance. These can be later modified by the setLabels method.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +optional
	Labels *map[string]string `json:"labels,omitempty" tf:"labels"`
	// A reference to the zone where the machine resides.
	Location *string `json:"location" tf:"location"`
	// A reference to a machine type which defines VM kind.
	MachineType *string `json:"machineType" tf:"machine_type"`
	// Custom metadata to apply to this instance.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +optional
	Metadata *map[string]string `json:"metadata,omitempty" tf:"metadata"`
	// The name specified for the Notebook instance.
	Name *string `json:"name" tf:"name"`
	// The name of the VPC that this instance is in.
	// Format: projects/{project_id}/global/networks/{network_id}
	// +optional
	Network *string `json:"network,omitempty" tf:"network"`
	// The notebook instance will not register with the proxy..
	// +optional
	NoProxyAccess *bool `json:"noProxyAccess,omitempty" tf:"no_proxy_access"`
	// No public IP will be assigned to this instance.
	// +optional
	NoPublicIP *bool `json:"noPublicIP,omitempty" tf:"no_public_ip"`
	// If true, the data disk will not be auto deleted when deleting the instance.
	// +optional
	NoRemoveDataDisk *bool `json:"noRemoveDataDisk,omitempty" tf:"no_remove_data_disk"`
	// Path to a Bash script that automatically runs after a
	// notebook instance fully boots up. The path must be a URL
	// or Cloud Storage path (gs://path-to-file/file-name).
	// +optional
	PostStartupScript *string `json:"postStartupScript,omitempty" tf:"post_startup_script"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The proxy endpoint that is used to access the Jupyter notebook.
	// +optional
	ProxyURI *string `json:"proxyURI,omitempty" tf:"proxy_uri"`
	// The service account on this instance, giving access to other
	// Google Cloud services. You can use any service account within
	// the same project, but you must have the service account user
	// permission to use the instance. If not specified,
	// the Compute Engine default service account is used.
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account"`
	// Optional. The URIs of service account scopes to be included in Compute Engine instances.
	// If not specified, the following scopes are defined:
	// - https://www.googleapis.com/auth/cloud-platform
	// - https://www.googleapis.com/auth/userinfo.email
	// +optional
	ServiceAccountScopes []string `json:"serviceAccountScopes,omitempty" tf:"service_account_scopes"`
	// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
	// Not all combinations are valid
	// +optional
	ShieldedInstanceConfig *InstanceSpecShieldedInstanceConfig `json:"shieldedInstanceConfig,omitempty" tf:"shielded_instance_config"`
	// The state of this instance.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// The name of the subnet that this instance is in.
	// Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
	// +optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet"`
	// The Compute Engine tags to add to runtime.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Instance update time.
	// +optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time"`
	// Use a Compute Engine VM image to start the notebook instance.
	// +optional
	VmImage *InstanceSpecVmImage `json:"vmImage,omitempty" tf:"vm_image"`
}

type InstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InstanceList is a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Instance CRD objects
	Items []Instance `json:"items,omitempty"`
}
