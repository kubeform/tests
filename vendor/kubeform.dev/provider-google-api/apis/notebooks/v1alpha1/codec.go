/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecContainerImage{}).Type1()):      EnvironmentSpecContainerImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecVmImage{}).Type1()):             EnvironmentSpecVmImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecAcceleratorConfig{}).Type1()):      InstanceSpecAcceleratorConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecContainerImage{}).Type1()):         InstanceSpecContainerImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecShieldedInstanceConfig{}).Type1()): InstanceSpecShieldedInstanceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecVmImage{}).Type1()):                InstanceSpecVmImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1()):    InstanceIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1()):     InstanceIamMemberSpecConditionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecContainerImage{}).Type1()):      EnvironmentSpecContainerImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecVmImage{}).Type1()):             EnvironmentSpecVmImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecAcceleratorConfig{}).Type1()):      InstanceSpecAcceleratorConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecContainerImage{}).Type1()):         InstanceSpecContainerImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecShieldedInstanceConfig{}).Type1()): InstanceSpecShieldedInstanceConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecVmImage{}).Type1()):                InstanceSpecVmImageCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1()):    InstanceIamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1()):     InstanceIamMemberSpecConditionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type EnvironmentSpecContainerImageCodec struct {
}

func (EnvironmentSpecContainerImageCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnvironmentSpecContainerImage)(ptr) == nil
}

func (EnvironmentSpecContainerImageCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnvironmentSpecContainerImage)(ptr)
	var objs []EnvironmentSpecContainerImage
	if obj != nil {
		objs = []EnvironmentSpecContainerImage{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecContainerImage{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnvironmentSpecContainerImageCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnvironmentSpecContainerImage)(ptr) = EnvironmentSpecContainerImage{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnvironmentSpecContainerImage

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecContainerImage{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnvironmentSpecContainerImage)(ptr) = objs[0]
			} else {
				*(*EnvironmentSpecContainerImage)(ptr) = EnvironmentSpecContainerImage{}
			}
		} else {
			*(*EnvironmentSpecContainerImage)(ptr) = EnvironmentSpecContainerImage{}
		}
	default:
		iter.ReportError("decode EnvironmentSpecContainerImage", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type EnvironmentSpecVmImageCodec struct {
}

func (EnvironmentSpecVmImageCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*EnvironmentSpecVmImage)(ptr) == nil
}

func (EnvironmentSpecVmImageCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*EnvironmentSpecVmImage)(ptr)
	var objs []EnvironmentSpecVmImage
	if obj != nil {
		objs = []EnvironmentSpecVmImage{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecVmImage{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (EnvironmentSpecVmImageCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*EnvironmentSpecVmImage)(ptr) = EnvironmentSpecVmImage{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []EnvironmentSpecVmImage

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(EnvironmentSpecVmImage{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*EnvironmentSpecVmImage)(ptr) = objs[0]
			} else {
				*(*EnvironmentSpecVmImage)(ptr) = EnvironmentSpecVmImage{}
			}
		} else {
			*(*EnvironmentSpecVmImage)(ptr) = EnvironmentSpecVmImage{}
		}
	default:
		iter.ReportError("decode EnvironmentSpecVmImage", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceSpecAcceleratorConfigCodec struct {
}

func (InstanceSpecAcceleratorConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceSpecAcceleratorConfig)(ptr) == nil
}

func (InstanceSpecAcceleratorConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceSpecAcceleratorConfig)(ptr)
	var objs []InstanceSpecAcceleratorConfig
	if obj != nil {
		objs = []InstanceSpecAcceleratorConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecAcceleratorConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceSpecAcceleratorConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceSpecAcceleratorConfig)(ptr) = InstanceSpecAcceleratorConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceSpecAcceleratorConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecAcceleratorConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceSpecAcceleratorConfig)(ptr) = objs[0]
			} else {
				*(*InstanceSpecAcceleratorConfig)(ptr) = InstanceSpecAcceleratorConfig{}
			}
		} else {
			*(*InstanceSpecAcceleratorConfig)(ptr) = InstanceSpecAcceleratorConfig{}
		}
	default:
		iter.ReportError("decode InstanceSpecAcceleratorConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceSpecContainerImageCodec struct {
}

func (InstanceSpecContainerImageCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceSpecContainerImage)(ptr) == nil
}

func (InstanceSpecContainerImageCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceSpecContainerImage)(ptr)
	var objs []InstanceSpecContainerImage
	if obj != nil {
		objs = []InstanceSpecContainerImage{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecContainerImage{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceSpecContainerImageCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceSpecContainerImage)(ptr) = InstanceSpecContainerImage{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceSpecContainerImage

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecContainerImage{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceSpecContainerImage)(ptr) = objs[0]
			} else {
				*(*InstanceSpecContainerImage)(ptr) = InstanceSpecContainerImage{}
			}
		} else {
			*(*InstanceSpecContainerImage)(ptr) = InstanceSpecContainerImage{}
		}
	default:
		iter.ReportError("decode InstanceSpecContainerImage", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceSpecShieldedInstanceConfigCodec struct {
}

func (InstanceSpecShieldedInstanceConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceSpecShieldedInstanceConfig)(ptr) == nil
}

func (InstanceSpecShieldedInstanceConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceSpecShieldedInstanceConfig)(ptr)
	var objs []InstanceSpecShieldedInstanceConfig
	if obj != nil {
		objs = []InstanceSpecShieldedInstanceConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecShieldedInstanceConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceSpecShieldedInstanceConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceSpecShieldedInstanceConfig)(ptr) = InstanceSpecShieldedInstanceConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceSpecShieldedInstanceConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecShieldedInstanceConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceSpecShieldedInstanceConfig)(ptr) = objs[0]
			} else {
				*(*InstanceSpecShieldedInstanceConfig)(ptr) = InstanceSpecShieldedInstanceConfig{}
			}
		} else {
			*(*InstanceSpecShieldedInstanceConfig)(ptr) = InstanceSpecShieldedInstanceConfig{}
		}
	default:
		iter.ReportError("decode InstanceSpecShieldedInstanceConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceSpecVmImageCodec struct {
}

func (InstanceSpecVmImageCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceSpecVmImage)(ptr) == nil
}

func (InstanceSpecVmImageCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceSpecVmImage)(ptr)
	var objs []InstanceSpecVmImage
	if obj != nil {
		objs = []InstanceSpecVmImage{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecVmImage{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceSpecVmImageCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceSpecVmImage)(ptr) = InstanceSpecVmImage{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceSpecVmImage

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceSpecVmImage{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceSpecVmImage)(ptr) = objs[0]
			} else {
				*(*InstanceSpecVmImage)(ptr) = InstanceSpecVmImage{}
			}
		} else {
			*(*InstanceSpecVmImage)(ptr) = InstanceSpecVmImage{}
		}
	default:
		iter.ReportError("decode InstanceSpecVmImage", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceIamBindingSpecConditionCodec struct {
}

func (InstanceIamBindingSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceIamBindingSpecCondition)(ptr) == nil
}

func (InstanceIamBindingSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceIamBindingSpecCondition)(ptr)
	var objs []InstanceIamBindingSpecCondition
	if obj != nil {
		objs = []InstanceIamBindingSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceIamBindingSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceIamBindingSpecCondition)(ptr) = InstanceIamBindingSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceIamBindingSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamBindingSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceIamBindingSpecCondition)(ptr) = objs[0]
			} else {
				*(*InstanceIamBindingSpecCondition)(ptr) = InstanceIamBindingSpecCondition{}
			}
		} else {
			*(*InstanceIamBindingSpecCondition)(ptr) = InstanceIamBindingSpecCondition{}
		}
	default:
		iter.ReportError("decode InstanceIamBindingSpecCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type InstanceIamMemberSpecConditionCodec struct {
}

func (InstanceIamMemberSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*InstanceIamMemberSpecCondition)(ptr) == nil
}

func (InstanceIamMemberSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*InstanceIamMemberSpecCondition)(ptr)
	var objs []InstanceIamMemberSpecCondition
	if obj != nil {
		objs = []InstanceIamMemberSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (InstanceIamMemberSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*InstanceIamMemberSpecCondition)(ptr) = InstanceIamMemberSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []InstanceIamMemberSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(InstanceIamMemberSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*InstanceIamMemberSpecCondition)(ptr) = objs[0]
			} else {
				*(*InstanceIamMemberSpecCondition)(ptr) = InstanceIamMemberSpecCondition{}
			}
		} else {
			*(*InstanceIamMemberSpecCondition)(ptr) = InstanceIamMemberSpecCondition{}
		}
	default:
		iter.ReportError("decode InstanceIamMemberSpecCondition", "unexpected JSON type")
	}
}
