/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CloudfunctionsFunction struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudfunctionsFunctionSpec   `json:"spec,omitempty"`
	Status            CloudfunctionsFunctionStatus `json:"status,omitempty"`
}

type CloudfunctionsFunctionSpec struct {
	CloudfunctionsFunctionSpec2 `json:",inline"`
	// +optional
	KubeformOutput CloudfunctionsFunctionSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type CloudfunctionsFunctionSpecEventTriggerFailurePolicy struct {
	// Whether the function should be retried on failure. Defaults to false.
	Retry *bool `json:"retry" tf:"retry"`
}

type CloudfunctionsFunctionSpecEventTrigger struct {
	// The type of event to observe. For example: "google.storage.object.finalize". See the documentation on calling Cloud Functions for a full reference of accepted triggers.
	EventType *string `json:"eventType" tf:"event_type"`
	// Specifies policy for failed executions
	// +optional
	FailurePolicy *CloudfunctionsFunctionSpecEventTriggerFailurePolicy `json:"failurePolicy,omitempty" tf:"failure_policy"`
	// The name or partial URI of the resource from which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
	Resource *string `json:"resource" tf:"resource"`
}

type CloudfunctionsFunctionSpecSourceRepository struct {
	// The URL pointing to the hosted repository where the function was defined at the time of deployment.
	// +optional
	DeployedURL *string `json:"deployedURL,omitempty" tf:"deployed_url"`
	// The URL pointing to the hosted repository where the function is defined.
	Url *string `json:"url" tf:"url"`
}

type CloudfunctionsFunctionSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Memory (in MB), available to the function. Default value is 256MB. Allowed values are: 128MB, 256MB, 512MB, 1024MB, and 2048MB.
	// +optional
	AvailableMemoryMb *int64 `json:"availableMemoryMb,omitempty" tf:"available_memory_mb"`
	//  A set of key/value environment variable pairs available during build time.
	// +optional
	BuildEnvironmentVariables map[string]string `json:"buildEnvironmentVariables,omitempty" tf:"build_environment_variables"`
	// Description of the function.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Name of the function that will be executed when the Google Cloud Function is triggered.
	// +optional
	EntryPoint *string `json:"entryPoint,omitempty" tf:"entry_point"`
	// A set of key/value environment variable pairs to assign to the function.
	// +optional
	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty" tf:"environment_variables"`
	// A source that fires events in response to a condition in another service. Cannot be used with trigger_http.
	// +optional
	EventTrigger *CloudfunctionsFunctionSpecEventTrigger `json:"eventTrigger,omitempty" tf:"event_trigger"`
	// URL which triggers function execution. Returned only if trigger_http is used.
	// +optional
	HttpsTriggerURL *string `json:"httpsTriggerURL,omitempty" tf:"https_trigger_url"`
	// String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL and ALLOW_INTERNAL_ONLY. Changes to this field will recreate the cloud function.
	// +optional
	IngressSettings *string `json:"ingressSettings,omitempty" tf:"ingress_settings"`
	// A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
	// +optional
	Labels map[string]string `json:"labels,omitempty" tf:"labels"`
	// The limit on the maximum number of function instances that may coexist at a given time.
	// +optional
	MaxInstances *int64 `json:"maxInstances,omitempty" tf:"max_instances"`
	// A user-defined name of the function. Function names must be unique globally.
	Name *string `json:"name" tf:"name"`
	// Project of the function. If it is not provided, the provider project is used.
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Region of function. Currently can be only "us-central1". If it is not provided, the provider region is used.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// The runtime in which the function is going to run. Eg. "nodejs8", "nodejs10", "python37", "go111".
	Runtime *string `json:"runtime" tf:"runtime"`
	//  If provided, the self-provided service account to run the function with.
	// +optional
	ServiceAccountEmail *string `json:"serviceAccountEmail,omitempty" tf:"service_account_email"`
	// The GCS bucket containing the zip archive which contains the function.
	// +optional
	SourceArchiveBucket *string `json:"sourceArchiveBucket,omitempty" tf:"source_archive_bucket"`
	// The source archive object (file) in archive bucket.
	// +optional
	SourceArchiveObject *string `json:"sourceArchiveObject,omitempty" tf:"source_archive_object"`
	// Represents parameters related to source repository where a function is hosted. Cannot be set alongside source_archive_bucket or source_archive_object.
	// +optional
	SourceRepository *CloudfunctionsFunctionSpecSourceRepository `json:"sourceRepository,omitempty" tf:"source_repository"`
	// Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
	// +optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`
	// Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with trigger_bucket and trigger_topic.
	// +optional
	TriggerHTTP *bool `json:"triggerHTTP,omitempty" tf:"trigger_http"`
	// The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.
	// +optional
	VpcConnector *string `json:"vpcConnector,omitempty" tf:"vpc_connector"`
	// The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
	// +optional
	VpcConnectorEgressSettings *string `json:"vpcConnectorEgressSettings,omitempty" tf:"vpc_connector_egress_settings"`
}

type CloudfunctionsFunctionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CloudfunctionsFunctionList is a list of CloudfunctionsFunctions
type CloudfunctionsFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of CloudfunctionsFunction CRD objects
	Items []CloudfunctionsFunction `json:"items,omitempty"`
}
