/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTrigger{}).Type1()):              CloudfunctionsFunctionSpecEventTriggerCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTriggerFailurePolicy{}).Type1()): CloudfunctionsFunctionSpecEventTriggerFailurePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecSourceRepository{}).Type1()):          CloudfunctionsFunctionSpecSourceRepositoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IamBindingSpecCondition{}).Type1()):                             IamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IamMemberSpecCondition{}).Type1()):                              IamMemberSpecConditionCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTrigger{}).Type1()):              CloudfunctionsFunctionSpecEventTriggerCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTriggerFailurePolicy{}).Type1()): CloudfunctionsFunctionSpecEventTriggerFailurePolicyCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecSourceRepository{}).Type1()):          CloudfunctionsFunctionSpecSourceRepositoryCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IamBindingSpecCondition{}).Type1()):                             IamBindingSpecConditionCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IamMemberSpecCondition{}).Type1()):                              IamMemberSpecConditionCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type CloudfunctionsFunctionSpecEventTriggerCodec struct {
}

func (CloudfunctionsFunctionSpecEventTriggerCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CloudfunctionsFunctionSpecEventTrigger)(ptr) == nil
}

func (CloudfunctionsFunctionSpecEventTriggerCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CloudfunctionsFunctionSpecEventTrigger)(ptr)
	var objs []CloudfunctionsFunctionSpecEventTrigger
	if obj != nil {
		objs = []CloudfunctionsFunctionSpecEventTrigger{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTrigger{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CloudfunctionsFunctionSpecEventTriggerCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CloudfunctionsFunctionSpecEventTrigger)(ptr) = CloudfunctionsFunctionSpecEventTrigger{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CloudfunctionsFunctionSpecEventTrigger

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTrigger{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CloudfunctionsFunctionSpecEventTrigger)(ptr) = objs[0]
			} else {
				*(*CloudfunctionsFunctionSpecEventTrigger)(ptr) = CloudfunctionsFunctionSpecEventTrigger{}
			}
		} else {
			*(*CloudfunctionsFunctionSpecEventTrigger)(ptr) = CloudfunctionsFunctionSpecEventTrigger{}
		}
	default:
		iter.ReportError("decode CloudfunctionsFunctionSpecEventTrigger", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CloudfunctionsFunctionSpecEventTriggerFailurePolicyCodec struct {
}

func (CloudfunctionsFunctionSpecEventTriggerFailurePolicyCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CloudfunctionsFunctionSpecEventTriggerFailurePolicy)(ptr) == nil
}

func (CloudfunctionsFunctionSpecEventTriggerFailurePolicyCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CloudfunctionsFunctionSpecEventTriggerFailurePolicy)(ptr)
	var objs []CloudfunctionsFunctionSpecEventTriggerFailurePolicy
	if obj != nil {
		objs = []CloudfunctionsFunctionSpecEventTriggerFailurePolicy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTriggerFailurePolicy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CloudfunctionsFunctionSpecEventTriggerFailurePolicyCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CloudfunctionsFunctionSpecEventTriggerFailurePolicy)(ptr) = CloudfunctionsFunctionSpecEventTriggerFailurePolicy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CloudfunctionsFunctionSpecEventTriggerFailurePolicy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecEventTriggerFailurePolicy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CloudfunctionsFunctionSpecEventTriggerFailurePolicy)(ptr) = objs[0]
			} else {
				*(*CloudfunctionsFunctionSpecEventTriggerFailurePolicy)(ptr) = CloudfunctionsFunctionSpecEventTriggerFailurePolicy{}
			}
		} else {
			*(*CloudfunctionsFunctionSpecEventTriggerFailurePolicy)(ptr) = CloudfunctionsFunctionSpecEventTriggerFailurePolicy{}
		}
	default:
		iter.ReportError("decode CloudfunctionsFunctionSpecEventTriggerFailurePolicy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type CloudfunctionsFunctionSpecSourceRepositoryCodec struct {
}

func (CloudfunctionsFunctionSpecSourceRepositoryCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*CloudfunctionsFunctionSpecSourceRepository)(ptr) == nil
}

func (CloudfunctionsFunctionSpecSourceRepositoryCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*CloudfunctionsFunctionSpecSourceRepository)(ptr)
	var objs []CloudfunctionsFunctionSpecSourceRepository
	if obj != nil {
		objs = []CloudfunctionsFunctionSpecSourceRepository{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecSourceRepository{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (CloudfunctionsFunctionSpecSourceRepositoryCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*CloudfunctionsFunctionSpecSourceRepository)(ptr) = CloudfunctionsFunctionSpecSourceRepository{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []CloudfunctionsFunctionSpecSourceRepository

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(CloudfunctionsFunctionSpecSourceRepository{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*CloudfunctionsFunctionSpecSourceRepository)(ptr) = objs[0]
			} else {
				*(*CloudfunctionsFunctionSpecSourceRepository)(ptr) = CloudfunctionsFunctionSpecSourceRepository{}
			}
		} else {
			*(*CloudfunctionsFunctionSpecSourceRepository)(ptr) = CloudfunctionsFunctionSpecSourceRepository{}
		}
	default:
		iter.ReportError("decode CloudfunctionsFunctionSpecSourceRepository", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type IamBindingSpecConditionCodec struct {
}

func (IamBindingSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*IamBindingSpecCondition)(ptr) == nil
}

func (IamBindingSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*IamBindingSpecCondition)(ptr)
	var objs []IamBindingSpecCondition
	if obj != nil {
		objs = []IamBindingSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IamBindingSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (IamBindingSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*IamBindingSpecCondition)(ptr) = IamBindingSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []IamBindingSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IamBindingSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*IamBindingSpecCondition)(ptr) = objs[0]
			} else {
				*(*IamBindingSpecCondition)(ptr) = IamBindingSpecCondition{}
			}
		} else {
			*(*IamBindingSpecCondition)(ptr) = IamBindingSpecCondition{}
		}
	default:
		iter.ReportError("decode IamBindingSpecCondition", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type IamMemberSpecConditionCodec struct {
}

func (IamMemberSpecConditionCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*IamMemberSpecCondition)(ptr) == nil
}

func (IamMemberSpecConditionCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*IamMemberSpecCondition)(ptr)
	var objs []IamMemberSpecCondition
	if obj != nil {
		objs = []IamMemberSpecCondition{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IamMemberSpecCondition{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (IamMemberSpecConditionCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*IamMemberSpecCondition)(ptr) = IamMemberSpecCondition{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []IamMemberSpecCondition

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IamMemberSpecCondition{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*IamMemberSpecCondition)(ptr) = objs[0]
			} else {
				*(*IamMemberSpecCondition)(ptr) = IamMemberSpecCondition{}
			}
		} else {
			*(*IamMemberSpecCondition)(ptr) = IamMemberSpecCondition{}
		}
	default:
		iter.ReportError("decode IamMemberSpecCondition", "unexpected JSON type")
	}
}
