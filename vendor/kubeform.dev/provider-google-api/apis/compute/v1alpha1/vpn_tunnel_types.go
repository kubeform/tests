/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VpnTunnel struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnTunnelSpec   `json:"spec,omitempty"`
	Status            VpnTunnelStatus `json:"status,omitempty"`
}

type VpnTunnelSpec struct {
	VpnTunnelSpec2 `json:",inline"`
	// +optional
	KubeformOutput VpnTunnelSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type VpnTunnelSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// Creation timestamp in RFC3339 text format.
	// +optional
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp"`
	// An optional description of this resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Detailed status message for the VPN tunnel.
	// +optional
	DetailedStatus *string `json:"detailedStatus,omitempty" tf:"detailed_status"`
	// IKE protocol version to use when establishing the VPN tunnel with
	// peer VPN gateway.
	// Acceptable IKE versions are 1 or 2. Default version is 2.
	// +optional
	IkeVersion *int64 `json:"ikeVersion,omitempty" tf:"ike_version"`
	// Local traffic selector to use when establishing the VPN tunnel with
	// peer VPN gateway. The value should be a CIDR formatted string,
	// for example '192.168.0.0/16'. The ranges should be disjoint.
	// Only IPv4 is supported.
	// +optional
	LocalTrafficSelector []string `json:"localTrafficSelector,omitempty" tf:"local_traffic_selector"`
	// Name of the resource. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63
	// characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character
	// must be a lowercase letter, and all following characters must
	// be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	Name *string `json:"name" tf:"name"`
	// URL of the peer side external VPN gateway to which this VPN tunnel is connected.
	// +optional
	PeerExternalGateway *string `json:"peerExternalGateway,omitempty" tf:"peer_external_gateway"`
	// The interface ID of the external VPN gateway to which this VPN tunnel is connected.
	// +optional
	PeerExternalGatewayInterface *int64 `json:"peerExternalGatewayInterface,omitempty" tf:"peer_external_gateway_interface"`
	// URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
	// If provided, the VPN tunnel will automatically use the same vpn_gateway_interface
	// ID in the peer GCP VPN gateway.
	// This field must reference a 'google_compute_ha_vpn_gateway' resource.
	// +optional
	PeerGcpGateway *string `json:"peerGcpGateway,omitempty" tf:"peer_gcp_gateway"`
	// IP address of the peer VPN gateway. Only IPv4 is supported.
	// +optional
	PeerIP *string `json:"peerIP,omitempty" tf:"peer_ip"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The region where the tunnel is located. If unset, is set to the region of 'target_vpn_gateway'.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// Remote traffic selector to use when establishing the VPN tunnel with
	// peer VPN gateway. The value should be a CIDR formatted string,
	// for example '192.168.0.0/16'. The ranges should be disjoint.
	// Only IPv4 is supported.
	// +optional
	RemoteTrafficSelector []string `json:"remoteTrafficSelector,omitempty" tf:"remote_traffic_selector"`
	// URL of router resource to be used for dynamic routing.
	// +optional
	Router *string `json:"router,omitempty" tf:"router"`
	// +optional
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link"`
	// Shared secret used to set the secure session between the Cloud VPN
	// gateway and the peer VPN gateway.
	SharedSecret *string `json:"-" sensitive:"true" tf:"shared_secret"`
	// Hash of the shared secret.
	// +optional
	SharedSecretHash *string `json:"sharedSecretHash,omitempty" tf:"shared_secret_hash"`
	// URL of the Target VPN gateway with which this VPN tunnel is
	// associated.
	// +optional
	TargetVPNGateway *string `json:"targetVPNGateway,omitempty" tf:"target_vpn_gateway"`
	// The unique identifier for the resource. This identifier is defined by the server.
	// +optional
	TunnelID *string `json:"tunnelID,omitempty" tf:"tunnel_id"`
	// URL of the VPN gateway with which this VPN tunnel is associated.
	// This must be used if a High Availability VPN gateway resource is created.
	// This field must reference a 'google_compute_ha_vpn_gateway' resource.
	// +optional
	VpnGateway *string `json:"vpnGateway,omitempty" tf:"vpn_gateway"`
	// The interface ID of the VPN gateway with which this VPN tunnel is associated.
	// +optional
	VpnGatewayInterface *int64 `json:"vpnGatewayInterface,omitempty" tf:"vpn_gateway_interface"`
}

type VpnTunnelStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VpnTunnelList is a list of VpnTunnels
type VpnTunnelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VpnTunnel CRD objects
	Items []VpnTunnel `json:"items,omitempty"`
}
