/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type PacketMirroring struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PacketMirroringSpec   `json:"spec,omitempty"`
	Status            PacketMirroringStatus `json:"status,omitempty"`
}

type PacketMirroringSpec struct {
	PacketMirroringSpec2 `json:",inline"`
	// +optional
	KubeformOutput PacketMirroringSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type PacketMirroringSpecCollectorIlb struct {
	// The URL of the forwarding rule.
	Url *string `json:"url" tf:"url"`
}

type PacketMirroringSpecFilter struct {
	// IP CIDR ranges that apply as a filter on the source (ingress) or
	// destination (egress) IP in the IP header. Only IPv4 is supported.
	// +optional
	CidrRanges []string `json:"cidrRanges,omitempty" tf:"cidr_ranges"`
	// Direction of traffic to mirror. Default value: "BOTH" Possible values: ["INGRESS", "EGRESS", "BOTH"]
	// +optional
	Direction *string `json:"direction,omitempty" tf:"direction"`
	// Protocols that apply as a filter on mirrored traffic. Possible values: ["tcp", "udp", "icmp"]
	// +optional
	IpProtocols []string `json:"ipProtocols,omitempty" tf:"ip_protocols"`
}

type PacketMirroringSpecMirroredResourcesInstances struct {
	// The URL of the instances where this rule should be active.
	Url *string `json:"url" tf:"url"`
}

type PacketMirroringSpecMirroredResourcesSubnetworks struct {
	// The URL of the subnetwork where this rule should be active.
	Url *string `json:"url" tf:"url"`
}

type PacketMirroringSpecMirroredResources struct {
	// All the listed instances will be mirrored.  Specify at most 50.
	// +optional
	Instances []PacketMirroringSpecMirroredResourcesInstances `json:"instances,omitempty" tf:"instances"`
	// All instances in one of these subnetworks will be mirrored.
	// +optional
	Subnetworks []PacketMirroringSpecMirroredResourcesSubnetworks `json:"subnetworks,omitempty" tf:"subnetworks"`
	// All instances with these tags will be mirrored.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
}

type PacketMirroringSpecNetwork struct {
	// The full self_link URL of the network where this rule is active.
	Url *string `json:"url" tf:"url"`
}

type PacketMirroringSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
	// that will be used as collector for mirrored traffic. The
	// specified forwarding rule must have is_mirroring_collector
	// set to true.
	CollectorIlb *PacketMirroringSpecCollectorIlb `json:"collectorIlb" tf:"collector_ilb"`
	// A human-readable description of the rule.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// A filter for mirrored traffic.  If unset, all traffic is mirrored.
	// +optional
	Filter *PacketMirroringSpecFilter `json:"filter,omitempty" tf:"filter"`
	// A means of specifying which resources to mirror.
	MirroredResources *PacketMirroringSpecMirroredResources `json:"mirroredResources" tf:"mirrored_resources"`
	// The name of the packet mirroring rule
	Name *string `json:"name" tf:"name"`
	// Specifies the mirrored VPC network. Only packets in this network
	// will be mirrored. All mirrored VMs should have a NIC in the given
	// network. All mirrored subnetworks should belong to the given network.
	Network *PacketMirroringSpecNetwork `json:"network" tf:"network"`
	// Since only one rule can be active at a time, priority is
	// used to break ties in the case of two rules that apply to
	// the same instances.
	// +optional
	Priority *int64 `json:"priority,omitempty" tf:"priority"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The Region in which the created address should reside.
	// If it is not provided, the provider region is used.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
}

type PacketMirroringStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PacketMirroringList is a list of PacketMirrorings
type PacketMirroringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of PacketMirroring CRD objects
	Items []PacketMirroring `json:"items,omitempty"`
}
