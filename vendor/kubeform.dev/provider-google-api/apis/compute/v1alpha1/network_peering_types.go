/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NetworkPeering struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkPeeringSpec   `json:"spec,omitempty"`
	Status            NetworkPeeringStatus `json:"status,omitempty"`
}

type NetworkPeeringSpec struct {
	NetworkPeeringSpec2 `json:",inline"`
	// +optional
	KubeformOutput NetworkPeeringSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NetworkPeeringSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether to export the custom routes to the peer network. Defaults to false.
	// +optional
	ExportCustomRoutes *bool `json:"exportCustomRoutes,omitempty" tf:"export_custom_routes"`
	// +optional
	ExportSubnetRoutesWithPublicIP *bool `json:"exportSubnetRoutesWithPublicIP,omitempty" tf:"export_subnet_routes_with_public_ip"`
	// Whether to export the custom routes from the peer network. Defaults to false.
	// +optional
	ImportCustomRoutes *bool `json:"importCustomRoutes,omitempty" tf:"import_custom_routes"`
	// +optional
	ImportSubnetRoutesWithPublicIP *bool `json:"importSubnetRoutesWithPublicIP,omitempty" tf:"import_subnet_routes_with_public_ip"`
	// Name of the peering.
	Name *string `json:"name" tf:"name"`
	// The primary network of the peering.
	Network *string `json:"network" tf:"network"`
	// The peer network in the peering. The peer network may belong to a different project.
	PeerNetwork *string `json:"peerNetwork" tf:"peer_network"`
	// State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the peer network.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// Details about the current state of the peering.
	// +optional
	StateDetails *string `json:"stateDetails,omitempty" tf:"state_details"`
}

type NetworkPeeringStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NetworkPeeringList is a list of NetworkPeerings
type NetworkPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NetworkPeering CRD objects
	Items []NetworkPeering `json:"items,omitempty"`
}
