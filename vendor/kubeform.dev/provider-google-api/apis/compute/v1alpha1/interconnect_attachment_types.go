/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type InterconnectAttachment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterconnectAttachmentSpec   `json:"spec,omitempty"`
	Status            InterconnectAttachmentStatus `json:"status,omitempty"`
}

type InterconnectAttachmentSpec struct {
	InterconnectAttachmentSpec2 `json:",inline"`
	// +optional
	KubeformOutput InterconnectAttachmentSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type InterconnectAttachmentSpecPrivateInterconnectInfo struct {
	// 802.1q encapsulation tag to be used for traffic between
	// Google and the customer, going to and from this network and region.
	// +optional
	Tag8021q *int64 `json:"tag8021q,omitempty" tf:"tag8021q"`
}

type InterconnectAttachmentSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether the VLAN attachment is enabled or disabled.  When using
	// PARTNER type this will Pre-Activate the interconnect attachment
	// +optional
	AdminEnabled *bool `json:"adminEnabled,omitempty" tf:"admin_enabled"`
	// Provisioned bandwidth capacity for the interconnect attachment.
	// For attachments of type DEDICATED, the user can set the bandwidth.
	// For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth.
	// Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED,
	// Defaults to BPS_10G Possible values: ["BPS_50M", "BPS_100M", "BPS_200M", "BPS_300M", "BPS_400M", "BPS_500M", "BPS_1G", "BPS_2G", "BPS_5G", "BPS_10G", "BPS_20G", "BPS_50G"]
	// +optional
	Bandwidth *string `json:"bandwidth,omitempty" tf:"bandwidth"`
	// Up to 16 candidate prefixes that can be used to restrict the allocation
	// of cloudRouterIpAddress and customerRouterIpAddress for this attachment.
	// All prefixes must be within link-local address space (169.254.0.0/16)
	// and must be /29 or shorter (/28, /27, etc). Google will attempt to select
	// an unused /29 from the supplied candidate prefix(es). The request will
	// fail if all possible /29s are in use on Google's edge. If not supplied,
	// Google will randomly select an unused /29 from all of link-local space.
	// +optional
	CandidateSubnets []string `json:"candidateSubnets,omitempty" tf:"candidate_subnets"`
	// IPv4 address + prefix length to be configured on Cloud Router
	// Interface for this interconnect attachment.
	// +optional
	CloudRouterIPAddress *string `json:"cloudRouterIPAddress,omitempty" tf:"cloud_router_ip_address"`
	// Creation timestamp in RFC3339 text format.
	// +optional
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp"`
	// IPv4 address + prefix length to be configured on the customer
	// router subinterface for this interconnect attachment.
	// +optional
	CustomerRouterIPAddress *string `json:"customerRouterIPAddress,omitempty" tf:"customer_router_ip_address"`
	// An optional description of this resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Desired availability domain for the attachment. Only available for type
	// PARTNER, at creation time. For improved reliability, customers should
	// configure a pair of attachments with one per availability domain. The
	// selected availability domain will be provided to the Partner via the
	// pairing key so that the provisioned circuit will lie in the specified
	// domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
	// +optional
	EdgeAvailabilityDomain *string `json:"edgeAvailabilityDomain,omitempty" tf:"edge_availability_domain"`
	// Google reference ID, to be used when raising support tickets with
	// Google or otherwise to debug backend connectivity issues.
	// +optional
	GoogleReferenceID *string `json:"googleReferenceID,omitempty" tf:"google_reference_id"`
	// URL of the underlying Interconnect object that this attachment's
	// traffic will traverse through. Required if type is DEDICATED, must not
	// be set if type is PARTNER.
	// +optional
	Interconnect *string `json:"interconnect,omitempty" tf:"interconnect"`
	// Maximum Transmission Unit (MTU), in bytes, of packets passing through
	// this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
	// +optional
	Mtu *string `json:"mtu,omitempty" tf:"mtu"`
	// Name of the resource. Provided by the client when the resource is created. The
	// name must be 1-63 characters long, and comply with RFC1035. Specifically, the
	// name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a
	// lowercase letter, and all following characters must be a dash, lowercase
	// letter, or digit, except the last character, which cannot be a dash.
	Name *string `json:"name" tf:"name"`
	// [Output only for type PARTNER. Not present for DEDICATED]. The opaque
	// identifier of an PARTNER attachment used to initiate provisioning with
	// a selected partner. Of the form "XXXXX/region/domain"
	// +optional
	PairingKey *string `json:"pairingKey,omitempty" tf:"pairing_key"`
	// [Output only for type PARTNER. Not present for DEDICATED]. Optional
	// BGP ASN for the router that should be supplied by a layer 3 Partner if
	// they configured BGP on behalf of the customer.
	// +optional
	PartnerAsn *string `json:"partnerAsn,omitempty" tf:"partner_asn"`
	// Information specific to an InterconnectAttachment. This property
	// is populated if the interconnect that this is attached to is of type DEDICATED.
	// +optional
	PrivateInterconnectInfo []InterconnectAttachmentSpecPrivateInterconnectInfo `json:"privateInterconnectInfo,omitempty" tf:"private_interconnect_info"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Region where the regional interconnect attachment resides.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// URL of the cloud router to be used for dynamic routing. This router must be in
	// the same region as this InterconnectAttachment. The InterconnectAttachment will
	// automatically connect the Interconnect to the network & region within which the
	// Cloud Router is configured.
	Router *string `json:"router" tf:"router"`
	// +optional
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link"`
	// [Output Only] The current state of this attachment's functionality.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
	// The type of InterconnectAttachment you wish to create. Defaults to
	// DEDICATED. Possible values: ["DEDICATED", "PARTNER", "PARTNER_PROVIDER"]
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When
	// using PARTNER type this will be managed upstream.
	// +optional
	VlanTag8021q *int64 `json:"vlanTag8021q,omitempty" tf:"vlan_tag8021q"`
}

type InterconnectAttachmentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// InterconnectAttachmentList is a list of InterconnectAttachments
type InterconnectAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of InterconnectAttachment CRD objects
	Items []InterconnectAttachment `json:"items,omitempty"`
}
