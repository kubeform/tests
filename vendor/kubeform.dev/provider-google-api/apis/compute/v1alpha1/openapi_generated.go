// +build !ignore_autogenerated

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	resource "k8s.io/apimachinery/pkg/api/resource"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource":                                                  schema_k8sio_api_core_v1_AWSElasticBlockStoreVolumeSource(ref),
		"k8s.io/api/core/v1.Affinity":                                                                          schema_k8sio_api_core_v1_Affinity(ref),
		"k8s.io/api/core/v1.AttachedVolume":                                                                    schema_k8sio_api_core_v1_AttachedVolume(ref),
		"k8s.io/api/core/v1.AvoidPods":                                                                         schema_k8sio_api_core_v1_AvoidPods(ref),
		"k8s.io/api/core/v1.AzureDiskVolumeSource":                                                             schema_k8sio_api_core_v1_AzureDiskVolumeSource(ref),
		"k8s.io/api/core/v1.AzureFilePersistentVolumeSource":                                                   schema_k8sio_api_core_v1_AzureFilePersistentVolumeSource(ref),
		"k8s.io/api/core/v1.AzureFileVolumeSource":                                                             schema_k8sio_api_core_v1_AzureFileVolumeSource(ref),
		"k8s.io/api/core/v1.Binding":                                                                           schema_k8sio_api_core_v1_Binding(ref),
		"k8s.io/api/core/v1.CSIPersistentVolumeSource":                                                         schema_k8sio_api_core_v1_CSIPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.CSIVolumeSource":                                                                   schema_k8sio_api_core_v1_CSIVolumeSource(ref),
		"k8s.io/api/core/v1.Capabilities":                                                                      schema_k8sio_api_core_v1_Capabilities(ref),
		"k8s.io/api/core/v1.CephFSPersistentVolumeSource":                                                      schema_k8sio_api_core_v1_CephFSPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.CephFSVolumeSource":                                                                schema_k8sio_api_core_v1_CephFSVolumeSource(ref),
		"k8s.io/api/core/v1.CinderPersistentVolumeSource":                                                      schema_k8sio_api_core_v1_CinderPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.CinderVolumeSource":                                                                schema_k8sio_api_core_v1_CinderVolumeSource(ref),
		"k8s.io/api/core/v1.ClientIPConfig":                                                                    schema_k8sio_api_core_v1_ClientIPConfig(ref),
		"k8s.io/api/core/v1.ComponentCondition":                                                                schema_k8sio_api_core_v1_ComponentCondition(ref),
		"k8s.io/api/core/v1.ComponentStatus":                                                                   schema_k8sio_api_core_v1_ComponentStatus(ref),
		"k8s.io/api/core/v1.ComponentStatusList":                                                               schema_k8sio_api_core_v1_ComponentStatusList(ref),
		"k8s.io/api/core/v1.ConfigMap":                                                                         schema_k8sio_api_core_v1_ConfigMap(ref),
		"k8s.io/api/core/v1.ConfigMapEnvSource":                                                                schema_k8sio_api_core_v1_ConfigMapEnvSource(ref),
		"k8s.io/api/core/v1.ConfigMapKeySelector":                                                              schema_k8sio_api_core_v1_ConfigMapKeySelector(ref),
		"k8s.io/api/core/v1.ConfigMapList":                                                                     schema_k8sio_api_core_v1_ConfigMapList(ref),
		"k8s.io/api/core/v1.ConfigMapNodeConfigSource":                                                         schema_k8sio_api_core_v1_ConfigMapNodeConfigSource(ref),
		"k8s.io/api/core/v1.ConfigMapProjection":                                                               schema_k8sio_api_core_v1_ConfigMapProjection(ref),
		"k8s.io/api/core/v1.ConfigMapVolumeSource":                                                             schema_k8sio_api_core_v1_ConfigMapVolumeSource(ref),
		"k8s.io/api/core/v1.Container":                                                                         schema_k8sio_api_core_v1_Container(ref),
		"k8s.io/api/core/v1.ContainerImage":                                                                    schema_k8sio_api_core_v1_ContainerImage(ref),
		"k8s.io/api/core/v1.ContainerPort":                                                                     schema_k8sio_api_core_v1_ContainerPort(ref),
		"k8s.io/api/core/v1.ContainerState":                                                                    schema_k8sio_api_core_v1_ContainerState(ref),
		"k8s.io/api/core/v1.ContainerStateRunning":                                                             schema_k8sio_api_core_v1_ContainerStateRunning(ref),
		"k8s.io/api/core/v1.ContainerStateTerminated":                                                          schema_k8sio_api_core_v1_ContainerStateTerminated(ref),
		"k8s.io/api/core/v1.ContainerStateWaiting":                                                             schema_k8sio_api_core_v1_ContainerStateWaiting(ref),
		"k8s.io/api/core/v1.ContainerStatus":                                                                   schema_k8sio_api_core_v1_ContainerStatus(ref),
		"k8s.io/api/core/v1.DaemonEndpoint":                                                                    schema_k8sio_api_core_v1_DaemonEndpoint(ref),
		"k8s.io/api/core/v1.DownwardAPIProjection":                                                             schema_k8sio_api_core_v1_DownwardAPIProjection(ref),
		"k8s.io/api/core/v1.DownwardAPIVolumeFile":                                                             schema_k8sio_api_core_v1_DownwardAPIVolumeFile(ref),
		"k8s.io/api/core/v1.DownwardAPIVolumeSource":                                                           schema_k8sio_api_core_v1_DownwardAPIVolumeSource(ref),
		"k8s.io/api/core/v1.EmptyDirVolumeSource":                                                              schema_k8sio_api_core_v1_EmptyDirVolumeSource(ref),
		"k8s.io/api/core/v1.EndpointAddress":                                                                   schema_k8sio_api_core_v1_EndpointAddress(ref),
		"k8s.io/api/core/v1.EndpointPort":                                                                      schema_k8sio_api_core_v1_EndpointPort(ref),
		"k8s.io/api/core/v1.EndpointSubset":                                                                    schema_k8sio_api_core_v1_EndpointSubset(ref),
		"k8s.io/api/core/v1.Endpoints":                                                                         schema_k8sio_api_core_v1_Endpoints(ref),
		"k8s.io/api/core/v1.EndpointsList":                                                                     schema_k8sio_api_core_v1_EndpointsList(ref),
		"k8s.io/api/core/v1.EnvFromSource":                                                                     schema_k8sio_api_core_v1_EnvFromSource(ref),
		"k8s.io/api/core/v1.EnvVar":                                                                            schema_k8sio_api_core_v1_EnvVar(ref),
		"k8s.io/api/core/v1.EnvVarSource":                                                                      schema_k8sio_api_core_v1_EnvVarSource(ref),
		"k8s.io/api/core/v1.EphemeralContainer":                                                                schema_k8sio_api_core_v1_EphemeralContainer(ref),
		"k8s.io/api/core/v1.EphemeralContainerCommon":                                                          schema_k8sio_api_core_v1_EphemeralContainerCommon(ref),
		"k8s.io/api/core/v1.EphemeralContainers":                                                               schema_k8sio_api_core_v1_EphemeralContainers(ref),
		"k8s.io/api/core/v1.EphemeralVolumeSource":                                                             schema_k8sio_api_core_v1_EphemeralVolumeSource(ref),
		"k8s.io/api/core/v1.Event":                                                                             schema_k8sio_api_core_v1_Event(ref),
		"k8s.io/api/core/v1.EventList":                                                                         schema_k8sio_api_core_v1_EventList(ref),
		"k8s.io/api/core/v1.EventSeries":                                                                       schema_k8sio_api_core_v1_EventSeries(ref),
		"k8s.io/api/core/v1.EventSource":                                                                       schema_k8sio_api_core_v1_EventSource(ref),
		"k8s.io/api/core/v1.ExecAction":                                                                        schema_k8sio_api_core_v1_ExecAction(ref),
		"k8s.io/api/core/v1.FCVolumeSource":                                                                    schema_k8sio_api_core_v1_FCVolumeSource(ref),
		"k8s.io/api/core/v1.FlexPersistentVolumeSource":                                                        schema_k8sio_api_core_v1_FlexPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.FlexVolumeSource":                                                                  schema_k8sio_api_core_v1_FlexVolumeSource(ref),
		"k8s.io/api/core/v1.FlockerVolumeSource":                                                               schema_k8sio_api_core_v1_FlockerVolumeSource(ref),
		"k8s.io/api/core/v1.GCEPersistentDiskVolumeSource":                                                     schema_k8sio_api_core_v1_GCEPersistentDiskVolumeSource(ref),
		"k8s.io/api/core/v1.GitRepoVolumeSource":                                                               schema_k8sio_api_core_v1_GitRepoVolumeSource(ref),
		"k8s.io/api/core/v1.GlusterfsPersistentVolumeSource":                                                   schema_k8sio_api_core_v1_GlusterfsPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.GlusterfsVolumeSource":                                                             schema_k8sio_api_core_v1_GlusterfsVolumeSource(ref),
		"k8s.io/api/core/v1.HTTPGetAction":                                                                     schema_k8sio_api_core_v1_HTTPGetAction(ref),
		"k8s.io/api/core/v1.HTTPHeader":                                                                        schema_k8sio_api_core_v1_HTTPHeader(ref),
		"k8s.io/api/core/v1.Handler":                                                                           schema_k8sio_api_core_v1_Handler(ref),
		"k8s.io/api/core/v1.HostAlias":                                                                         schema_k8sio_api_core_v1_HostAlias(ref),
		"k8s.io/api/core/v1.HostPathVolumeSource":                                                              schema_k8sio_api_core_v1_HostPathVolumeSource(ref),
		"k8s.io/api/core/v1.ISCSIPersistentVolumeSource":                                                       schema_k8sio_api_core_v1_ISCSIPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.ISCSIVolumeSource":                                                                 schema_k8sio_api_core_v1_ISCSIVolumeSource(ref),
		"k8s.io/api/core/v1.KeyToPath":                                                                         schema_k8sio_api_core_v1_KeyToPath(ref),
		"k8s.io/api/core/v1.Lifecycle":                                                                         schema_k8sio_api_core_v1_Lifecycle(ref),
		"k8s.io/api/core/v1.LimitRange":                                                                        schema_k8sio_api_core_v1_LimitRange(ref),
		"k8s.io/api/core/v1.LimitRangeItem":                                                                    schema_k8sio_api_core_v1_LimitRangeItem(ref),
		"k8s.io/api/core/v1.LimitRangeList":                                                                    schema_k8sio_api_core_v1_LimitRangeList(ref),
		"k8s.io/api/core/v1.LimitRangeSpec":                                                                    schema_k8sio_api_core_v1_LimitRangeSpec(ref),
		"k8s.io/api/core/v1.List":                                                                              schema_k8sio_api_core_v1_List(ref),
		"k8s.io/api/core/v1.LoadBalancerIngress":                                                               schema_k8sio_api_core_v1_LoadBalancerIngress(ref),
		"k8s.io/api/core/v1.LoadBalancerStatus":                                                                schema_k8sio_api_core_v1_LoadBalancerStatus(ref),
		"k8s.io/api/core/v1.LocalObjectReference":                                                              schema_k8sio_api_core_v1_LocalObjectReference(ref),
		"k8s.io/api/core/v1.LocalVolumeSource":                                                                 schema_k8sio_api_core_v1_LocalVolumeSource(ref),
		"k8s.io/api/core/v1.NFSVolumeSource":                                                                   schema_k8sio_api_core_v1_NFSVolumeSource(ref),
		"k8s.io/api/core/v1.Namespace":                                                                         schema_k8sio_api_core_v1_Namespace(ref),
		"k8s.io/api/core/v1.NamespaceCondition":                                                                schema_k8sio_api_core_v1_NamespaceCondition(ref),
		"k8s.io/api/core/v1.NamespaceList":                                                                     schema_k8sio_api_core_v1_NamespaceList(ref),
		"k8s.io/api/core/v1.NamespaceSpec":                                                                     schema_k8sio_api_core_v1_NamespaceSpec(ref),
		"k8s.io/api/core/v1.NamespaceStatus":                                                                   schema_k8sio_api_core_v1_NamespaceStatus(ref),
		"k8s.io/api/core/v1.Node":                                                                              schema_k8sio_api_core_v1_Node(ref),
		"k8s.io/api/core/v1.NodeAddress":                                                                       schema_k8sio_api_core_v1_NodeAddress(ref),
		"k8s.io/api/core/v1.NodeAffinity":                                                                      schema_k8sio_api_core_v1_NodeAffinity(ref),
		"k8s.io/api/core/v1.NodeCondition":                                                                     schema_k8sio_api_core_v1_NodeCondition(ref),
		"k8s.io/api/core/v1.NodeConfigSource":                                                                  schema_k8sio_api_core_v1_NodeConfigSource(ref),
		"k8s.io/api/core/v1.NodeConfigStatus":                                                                  schema_k8sio_api_core_v1_NodeConfigStatus(ref),
		"k8s.io/api/core/v1.NodeDaemonEndpoints":                                                               schema_k8sio_api_core_v1_NodeDaemonEndpoints(ref),
		"k8s.io/api/core/v1.NodeList":                                                                          schema_k8sio_api_core_v1_NodeList(ref),
		"k8s.io/api/core/v1.NodeProxyOptions":                                                                  schema_k8sio_api_core_v1_NodeProxyOptions(ref),
		"k8s.io/api/core/v1.NodeResources":                                                                     schema_k8sio_api_core_v1_NodeResources(ref),
		"k8s.io/api/core/v1.NodeSelector":                                                                      schema_k8sio_api_core_v1_NodeSelector(ref),
		"k8s.io/api/core/v1.NodeSelectorRequirement":                                                           schema_k8sio_api_core_v1_NodeSelectorRequirement(ref),
		"k8s.io/api/core/v1.NodeSelectorTerm":                                                                  schema_k8sio_api_core_v1_NodeSelectorTerm(ref),
		"k8s.io/api/core/v1.NodeSpec":                                                                          schema_k8sio_api_core_v1_NodeSpec(ref),
		"k8s.io/api/core/v1.NodeStatus":                                                                        schema_k8sio_api_core_v1_NodeStatus(ref),
		"k8s.io/api/core/v1.NodeSystemInfo":                                                                    schema_k8sio_api_core_v1_NodeSystemInfo(ref),
		"k8s.io/api/core/v1.ObjectFieldSelector":                                                               schema_k8sio_api_core_v1_ObjectFieldSelector(ref),
		"k8s.io/api/core/v1.ObjectReference":                                                                   schema_k8sio_api_core_v1_ObjectReference(ref),
		"k8s.io/api/core/v1.PersistentVolume":                                                                  schema_k8sio_api_core_v1_PersistentVolume(ref),
		"k8s.io/api/core/v1.PersistentVolumeClaim":                                                             schema_k8sio_api_core_v1_PersistentVolumeClaim(ref),
		"k8s.io/api/core/v1.PersistentVolumeClaimCondition":                                                    schema_k8sio_api_core_v1_PersistentVolumeClaimCondition(ref),
		"k8s.io/api/core/v1.PersistentVolumeClaimList":                                                         schema_k8sio_api_core_v1_PersistentVolumeClaimList(ref),
		"k8s.io/api/core/v1.PersistentVolumeClaimSpec":                                                         schema_k8sio_api_core_v1_PersistentVolumeClaimSpec(ref),
		"k8s.io/api/core/v1.PersistentVolumeClaimStatus":                                                       schema_k8sio_api_core_v1_PersistentVolumeClaimStatus(ref),
		"k8s.io/api/core/v1.PersistentVolumeClaimTemplate":                                                     schema_k8sio_api_core_v1_PersistentVolumeClaimTemplate(ref),
		"k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource":                                                 schema_k8sio_api_core_v1_PersistentVolumeClaimVolumeSource(ref),
		"k8s.io/api/core/v1.PersistentVolumeList":                                                              schema_k8sio_api_core_v1_PersistentVolumeList(ref),
		"k8s.io/api/core/v1.PersistentVolumeSource":                                                            schema_k8sio_api_core_v1_PersistentVolumeSource(ref),
		"k8s.io/api/core/v1.PersistentVolumeSpec":                                                              schema_k8sio_api_core_v1_PersistentVolumeSpec(ref),
		"k8s.io/api/core/v1.PersistentVolumeStatus":                                                            schema_k8sio_api_core_v1_PersistentVolumeStatus(ref),
		"k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource":                                                  schema_k8sio_api_core_v1_PhotonPersistentDiskVolumeSource(ref),
		"k8s.io/api/core/v1.Pod":                                                                               schema_k8sio_api_core_v1_Pod(ref),
		"k8s.io/api/core/v1.PodAffinity":                                                                       schema_k8sio_api_core_v1_PodAffinity(ref),
		"k8s.io/api/core/v1.PodAffinityTerm":                                                                   schema_k8sio_api_core_v1_PodAffinityTerm(ref),
		"k8s.io/api/core/v1.PodAntiAffinity":                                                                   schema_k8sio_api_core_v1_PodAntiAffinity(ref),
		"k8s.io/api/core/v1.PodAttachOptions":                                                                  schema_k8sio_api_core_v1_PodAttachOptions(ref),
		"k8s.io/api/core/v1.PodCondition":                                                                      schema_k8sio_api_core_v1_PodCondition(ref),
		"k8s.io/api/core/v1.PodDNSConfig":                                                                      schema_k8sio_api_core_v1_PodDNSConfig(ref),
		"k8s.io/api/core/v1.PodDNSConfigOption":                                                                schema_k8sio_api_core_v1_PodDNSConfigOption(ref),
		"k8s.io/api/core/v1.PodExecOptions":                                                                    schema_k8sio_api_core_v1_PodExecOptions(ref),
		"k8s.io/api/core/v1.PodIP":                                                                             schema_k8sio_api_core_v1_PodIP(ref),
		"k8s.io/api/core/v1.PodList":                                                                           schema_k8sio_api_core_v1_PodList(ref),
		"k8s.io/api/core/v1.PodLogOptions":                                                                     schema_k8sio_api_core_v1_PodLogOptions(ref),
		"k8s.io/api/core/v1.PodPortForwardOptions":                                                             schema_k8sio_api_core_v1_PodPortForwardOptions(ref),
		"k8s.io/api/core/v1.PodProxyOptions":                                                                   schema_k8sio_api_core_v1_PodProxyOptions(ref),
		"k8s.io/api/core/v1.PodReadinessGate":                                                                  schema_k8sio_api_core_v1_PodReadinessGate(ref),
		"k8s.io/api/core/v1.PodSecurityContext":                                                                schema_k8sio_api_core_v1_PodSecurityContext(ref),
		"k8s.io/api/core/v1.PodSignature":                                                                      schema_k8sio_api_core_v1_PodSignature(ref),
		"k8s.io/api/core/v1.PodSpec":                                                                           schema_k8sio_api_core_v1_PodSpec(ref),
		"k8s.io/api/core/v1.PodStatus":                                                                         schema_k8sio_api_core_v1_PodStatus(ref),
		"k8s.io/api/core/v1.PodStatusResult":                                                                   schema_k8sio_api_core_v1_PodStatusResult(ref),
		"k8s.io/api/core/v1.PodTemplate":                                                                       schema_k8sio_api_core_v1_PodTemplate(ref),
		"k8s.io/api/core/v1.PodTemplateList":                                                                   schema_k8sio_api_core_v1_PodTemplateList(ref),
		"k8s.io/api/core/v1.PodTemplateSpec":                                                                   schema_k8sio_api_core_v1_PodTemplateSpec(ref),
		"k8s.io/api/core/v1.PortStatus":                                                                        schema_k8sio_api_core_v1_PortStatus(ref),
		"k8s.io/api/core/v1.PortworxVolumeSource":                                                              schema_k8sio_api_core_v1_PortworxVolumeSource(ref),
		"k8s.io/api/core/v1.PreferAvoidPodsEntry":                                                              schema_k8sio_api_core_v1_PreferAvoidPodsEntry(ref),
		"k8s.io/api/core/v1.PreferredSchedulingTerm":                                                           schema_k8sio_api_core_v1_PreferredSchedulingTerm(ref),
		"k8s.io/api/core/v1.Probe":                                                                             schema_k8sio_api_core_v1_Probe(ref),
		"k8s.io/api/core/v1.ProjectedVolumeSource":                                                             schema_k8sio_api_core_v1_ProjectedVolumeSource(ref),
		"k8s.io/api/core/v1.QuobyteVolumeSource":                                                               schema_k8sio_api_core_v1_QuobyteVolumeSource(ref),
		"k8s.io/api/core/v1.RBDPersistentVolumeSource":                                                         schema_k8sio_api_core_v1_RBDPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.RBDVolumeSource":                                                                   schema_k8sio_api_core_v1_RBDVolumeSource(ref),
		"k8s.io/api/core/v1.RangeAllocation":                                                                   schema_k8sio_api_core_v1_RangeAllocation(ref),
		"k8s.io/api/core/v1.ReplicationController":                                                             schema_k8sio_api_core_v1_ReplicationController(ref),
		"k8s.io/api/core/v1.ReplicationControllerCondition":                                                    schema_k8sio_api_core_v1_ReplicationControllerCondition(ref),
		"k8s.io/api/core/v1.ReplicationControllerList":                                                         schema_k8sio_api_core_v1_ReplicationControllerList(ref),
		"k8s.io/api/core/v1.ReplicationControllerSpec":                                                         schema_k8sio_api_core_v1_ReplicationControllerSpec(ref),
		"k8s.io/api/core/v1.ReplicationControllerStatus":                                                       schema_k8sio_api_core_v1_ReplicationControllerStatus(ref),
		"k8s.io/api/core/v1.ResourceFieldSelector":                                                             schema_k8sio_api_core_v1_ResourceFieldSelector(ref),
		"k8s.io/api/core/v1.ResourceQuota":                                                                     schema_k8sio_api_core_v1_ResourceQuota(ref),
		"k8s.io/api/core/v1.ResourceQuotaList":                                                                 schema_k8sio_api_core_v1_ResourceQuotaList(ref),
		"k8s.io/api/core/v1.ResourceQuotaSpec":                                                                 schema_k8sio_api_core_v1_ResourceQuotaSpec(ref),
		"k8s.io/api/core/v1.ResourceQuotaStatus":                                                               schema_k8sio_api_core_v1_ResourceQuotaStatus(ref),
		"k8s.io/api/core/v1.ResourceRequirements":                                                              schema_k8sio_api_core_v1_ResourceRequirements(ref),
		"k8s.io/api/core/v1.SELinuxOptions":                                                                    schema_k8sio_api_core_v1_SELinuxOptions(ref),
		"k8s.io/api/core/v1.ScaleIOPersistentVolumeSource":                                                     schema_k8sio_api_core_v1_ScaleIOPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.ScaleIOVolumeSource":                                                               schema_k8sio_api_core_v1_ScaleIOVolumeSource(ref),
		"k8s.io/api/core/v1.ScopeSelector":                                                                     schema_k8sio_api_core_v1_ScopeSelector(ref),
		"k8s.io/api/core/v1.ScopedResourceSelectorRequirement":                                                 schema_k8sio_api_core_v1_ScopedResourceSelectorRequirement(ref),
		"k8s.io/api/core/v1.SeccompProfile":                                                                    schema_k8sio_api_core_v1_SeccompProfile(ref),
		"k8s.io/api/core/v1.Secret":                                                                            schema_k8sio_api_core_v1_Secret(ref),
		"k8s.io/api/core/v1.SecretEnvSource":                                                                   schema_k8sio_api_core_v1_SecretEnvSource(ref),
		"k8s.io/api/core/v1.SecretKeySelector":                                                                 schema_k8sio_api_core_v1_SecretKeySelector(ref),
		"k8s.io/api/core/v1.SecretList":                                                                        schema_k8sio_api_core_v1_SecretList(ref),
		"k8s.io/api/core/v1.SecretProjection":                                                                  schema_k8sio_api_core_v1_SecretProjection(ref),
		"k8s.io/api/core/v1.SecretReference":                                                                   schema_k8sio_api_core_v1_SecretReference(ref),
		"k8s.io/api/core/v1.SecretVolumeSource":                                                                schema_k8sio_api_core_v1_SecretVolumeSource(ref),
		"k8s.io/api/core/v1.SecurityContext":                                                                   schema_k8sio_api_core_v1_SecurityContext(ref),
		"k8s.io/api/core/v1.SerializedReference":                                                               schema_k8sio_api_core_v1_SerializedReference(ref),
		"k8s.io/api/core/v1.Service":                                                                           schema_k8sio_api_core_v1_Service(ref),
		"k8s.io/api/core/v1.ServiceAccount":                                                                    schema_k8sio_api_core_v1_ServiceAccount(ref),
		"k8s.io/api/core/v1.ServiceAccountList":                                                                schema_k8sio_api_core_v1_ServiceAccountList(ref),
		"k8s.io/api/core/v1.ServiceAccountTokenProjection":                                                     schema_k8sio_api_core_v1_ServiceAccountTokenProjection(ref),
		"k8s.io/api/core/v1.ServiceList":                                                                       schema_k8sio_api_core_v1_ServiceList(ref),
		"k8s.io/api/core/v1.ServicePort":                                                                       schema_k8sio_api_core_v1_ServicePort(ref),
		"k8s.io/api/core/v1.ServiceProxyOptions":                                                               schema_k8sio_api_core_v1_ServiceProxyOptions(ref),
		"k8s.io/api/core/v1.ServiceSpec":                                                                       schema_k8sio_api_core_v1_ServiceSpec(ref),
		"k8s.io/api/core/v1.ServiceStatus":                                                                     schema_k8sio_api_core_v1_ServiceStatus(ref),
		"k8s.io/api/core/v1.SessionAffinityConfig":                                                             schema_k8sio_api_core_v1_SessionAffinityConfig(ref),
		"k8s.io/api/core/v1.StorageOSPersistentVolumeSource":                                                   schema_k8sio_api_core_v1_StorageOSPersistentVolumeSource(ref),
		"k8s.io/api/core/v1.StorageOSVolumeSource":                                                             schema_k8sio_api_core_v1_StorageOSVolumeSource(ref),
		"k8s.io/api/core/v1.Sysctl":                                                                            schema_k8sio_api_core_v1_Sysctl(ref),
		"k8s.io/api/core/v1.TCPSocketAction":                                                                   schema_k8sio_api_core_v1_TCPSocketAction(ref),
		"k8s.io/api/core/v1.Taint":                                                                             schema_k8sio_api_core_v1_Taint(ref),
		"k8s.io/api/core/v1.Toleration":                                                                        schema_k8sio_api_core_v1_Toleration(ref),
		"k8s.io/api/core/v1.TopologySelectorLabelRequirement":                                                  schema_k8sio_api_core_v1_TopologySelectorLabelRequirement(ref),
		"k8s.io/api/core/v1.TopologySelectorTerm":                                                              schema_k8sio_api_core_v1_TopologySelectorTerm(ref),
		"k8s.io/api/core/v1.TopologySpreadConstraint":                                                          schema_k8sio_api_core_v1_TopologySpreadConstraint(ref),
		"k8s.io/api/core/v1.TypedLocalObjectReference":                                                         schema_k8sio_api_core_v1_TypedLocalObjectReference(ref),
		"k8s.io/api/core/v1.Volume":                                                                            schema_k8sio_api_core_v1_Volume(ref),
		"k8s.io/api/core/v1.VolumeDevice":                                                                      schema_k8sio_api_core_v1_VolumeDevice(ref),
		"k8s.io/api/core/v1.VolumeMount":                                                                       schema_k8sio_api_core_v1_VolumeMount(ref),
		"k8s.io/api/core/v1.VolumeNodeAffinity":                                                                schema_k8sio_api_core_v1_VolumeNodeAffinity(ref),
		"k8s.io/api/core/v1.VolumeProjection":                                                                  schema_k8sio_api_core_v1_VolumeProjection(ref),
		"k8s.io/api/core/v1.VolumeSource":                                                                      schema_k8sio_api_core_v1_VolumeSource(ref),
		"k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource":                                                    schema_k8sio_api_core_v1_VsphereVirtualDiskVolumeSource(ref),
		"k8s.io/api/core/v1.WeightedPodAffinityTerm":                                                           schema_k8sio_api_core_v1_WeightedPodAffinityTerm(ref),
		"k8s.io/api/core/v1.WindowsSecurityContextOptions":                                                     schema_k8sio_api_core_v1_WindowsSecurityContextOptions(ref),
		"k8s.io/apimachinery/pkg/api/resource.Quantity":                                                        schema_apimachinery_pkg_api_resource_Quantity(ref),
		"k8s.io/apimachinery/pkg/api/resource.int64Amount":                                                     schema_apimachinery_pkg_api_resource_int64Amount(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup":                                                        schema_pkg_apis_meta_v1_APIGroup(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroupList":                                                    schema_pkg_apis_meta_v1_APIGroupList(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource":                                                     schema_pkg_apis_meta_v1_APIResource(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResourceList":                                                 schema_pkg_apis_meta_v1_APIResourceList(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIVersions":                                                     schema_pkg_apis_meta_v1_APIVersions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ApplyOptions":                                                    schema_pkg_apis_meta_v1_ApplyOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Condition":                                                       schema_pkg_apis_meta_v1_Condition(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.CreateOptions":                                                   schema_pkg_apis_meta_v1_CreateOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.DeleteOptions":                                                   schema_pkg_apis_meta_v1_DeleteOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Duration":                                                        schema_pkg_apis_meta_v1_Duration(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.FieldsV1":                                                        schema_pkg_apis_meta_v1_FieldsV1(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GetOptions":                                                      schema_pkg_apis_meta_v1_GetOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupKind":                                                       schema_pkg_apis_meta_v1_GroupKind(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupResource":                                                   schema_pkg_apis_meta_v1_GroupResource(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersion":                                                    schema_pkg_apis_meta_v1_GroupVersion(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery":                                        schema_pkg_apis_meta_v1_GroupVersionForDiscovery(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionKind":                                                schema_pkg_apis_meta_v1_GroupVersionKind(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionResource":                                            schema_pkg_apis_meta_v1_GroupVersionResource(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.InternalEvent":                                                   schema_pkg_apis_meta_v1_InternalEvent(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector":                                                   schema_pkg_apis_meta_v1_LabelSelector(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement":                                        schema_pkg_apis_meta_v1_LabelSelectorRequirement(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.List":                                                            schema_pkg_apis_meta_v1_List(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta":                                                        schema_pkg_apis_meta_v1_ListMeta(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListOptions":                                                     schema_pkg_apis_meta_v1_ListOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry":                                              schema_pkg_apis_meta_v1_ManagedFieldsEntry(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime":                                                       schema_pkg_apis_meta_v1_MicroTime(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta":                                                      schema_pkg_apis_meta_v1_ObjectMeta(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference":                                                  schema_pkg_apis_meta_v1_OwnerReference(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadata":                                           schema_pkg_apis_meta_v1_PartialObjectMetadata(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadataList":                                       schema_pkg_apis_meta_v1_PartialObjectMetadataList(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Patch":                                                           schema_pkg_apis_meta_v1_Patch(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.PatchOptions":                                                    schema_pkg_apis_meta_v1_PatchOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions":                                                   schema_pkg_apis_meta_v1_Preconditions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.RootPaths":                                                       schema_pkg_apis_meta_v1_RootPaths(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR":                                       schema_pkg_apis_meta_v1_ServerAddressByClientCIDR(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Status":                                                          schema_pkg_apis_meta_v1_Status(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause":                                                     schema_pkg_apis_meta_v1_StatusCause(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails":                                                   schema_pkg_apis_meta_v1_StatusDetails(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Table":                                                           schema_pkg_apis_meta_v1_Table(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableColumnDefinition":                                           schema_pkg_apis_meta_v1_TableColumnDefinition(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableOptions":                                                    schema_pkg_apis_meta_v1_TableOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableRow":                                                        schema_pkg_apis_meta_v1_TableRow(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableRowCondition":                                               schema_pkg_apis_meta_v1_TableRowCondition(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Time":                                                            schema_pkg_apis_meta_v1_Time(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Timestamp":                                                       schema_pkg_apis_meta_v1_Timestamp(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta":                                                        schema_pkg_apis_meta_v1_TypeMeta(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.UpdateOptions":                                                   schema_pkg_apis_meta_v1_UpdateOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.WatchEvent":                                                      schema_pkg_apis_meta_v1_WatchEvent(ref),
		"k8s.io/apimachinery/pkg/runtime.RawExtension":                                                         schema_k8sio_apimachinery_pkg_runtime_RawExtension(ref),
		"k8s.io/apimachinery/pkg/runtime.TypeMeta":                                                             schema_k8sio_apimachinery_pkg_runtime_TypeMeta(ref),
		"k8s.io/apimachinery/pkg/runtime.Unknown":                                                              schema_k8sio_apimachinery_pkg_runtime_Unknown(ref),
		"k8s.io/apimachinery/pkg/util/intstr.IntOrString":                                                      schema_apimachinery_pkg_util_intstr_IntOrString(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Address":                                       schema_provider_google_api_apis_compute_v1alpha1_Address(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressList":                                   schema_provider_google_api_apis_compute_v1alpha1_AddressList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressSpec":                                   schema_provider_google_api_apis_compute_v1alpha1_AddressSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressSpec2":                                  schema_provider_google_api_apis_compute_v1alpha1_AddressSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressStatus":                                 schema_provider_google_api_apis_compute_v1alpha1_AddressStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDisk":                                  schema_provider_google_api_apis_compute_v1alpha1_AttachedDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskList":                              schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskSpec":                              schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskSpec2":                             schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskStatus":                            schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Autoscaler":                                    schema_provider_google_api_apis_compute_v1alpha1_Autoscaler(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerList":                                schema_provider_google_api_apis_compute_v1alpha1_AutoscalerList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpec":                                schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpec2":                               schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicy":               schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyCodec":          schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyCpuUtilization": schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyCpuUtilization(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyCpuUtilizationCodec":                                                      schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyCpuUtilizationCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyLoadBalancingUtilization":                                                 schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyLoadBalancingUtilization(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyLoadBalancingUtilizationCodec":                                            schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyLoadBalancingUtilizationCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyMetric":                                                                   schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyMetric(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControl":                                                           schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControl(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControlCodec":                                                      schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControlCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas":                                        schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicasCodec":                                   schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicasCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerStatus":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_AutoscalerStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucket":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_BackendBucket(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketList":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_BackendBucketList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKey":                                                                               schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeyList":                                                                           schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeySpec":                                                                           schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeySpec2":                                                                          schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeyStatus":                                                                         schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpec":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpec2":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpecCdnPolicy":                                                                              schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpecCdnPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpecCdnPolicyCodec":                                                                         schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpecCdnPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketStatus":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_BackendBucketStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendService":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_BackendService(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_BackendServiceList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKey":                                                                              schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeyList":                                                                          schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeySpec":                                                                          schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeySpec2":                                                                         schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeyStatus":                                                                        schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecBackend":                                                                               schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecBackend(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicy":                                                                             schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicyCacheKeyPolicy":                                                               schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicyCacheKeyPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicyCacheKeyPolicyCodec":                                                          schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicyCacheKeyPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicyCodec":                                                                        schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCircuitBreakers":                                                                       schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCircuitBreakers(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCircuitBreakersCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCircuitBreakersCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHash":                                                                        schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHash(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashCodec":                                                                   schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookie":                                                              schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookie(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookieCodec":                                                         schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookieCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookieTtl":                                                           schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookieTtl(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookieTtlCodec":                                                      schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookieTtlCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecIap":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecIap(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecIapCodec":                                                                              schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecIapCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecLogConfig":                                                                             schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecLogConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecLogConfigCodec":                                                                        schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecLogConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetection":                                                                      schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetection(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionBaseEjectionTime":                                                      schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionBaseEjectionTime(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionBaseEjectionTimeCodec":                                                 schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionBaseEjectionTimeCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionCodec":                                                                 schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionInterval":                                                              schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionInterval(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionIntervalCodec":                                                         schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionIntervalCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_BackendServiceStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Disk":                                                                                                    schema_provider_google_api_apis_compute_v1alpha1_Disk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBinding":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_DiskIamBinding(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpecCondition":                                                                             schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpecConditionCodec":                                                                        schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMember":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_DiskIamMember(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberList":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpec":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpec2":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpecCondition":                                                                              schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpecConditionCodec":                                                                         schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberStatus":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicy":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicyList":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicySpec":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicySpec2":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicyStatus":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskList":                                                                                                schema_provider_google_api_apis_compute_v1alpha1_DiskList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachment":                                                                            schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachment(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentList":                                                                        schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentSpec":                                                                        schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentSpec2":                                                                       schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentStatus":                                                                      schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpec":                                                                                                schema_provider_google_api_apis_compute_v1alpha1_DiskSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpec2":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_DiskSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecDiskEncryptionKey":                                                                               schema_provider_google_api_apis_compute_v1alpha1_DiskSpecDiskEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecDiskEncryptionKeyCodec":                                                                          schema_provider_google_api_apis_compute_v1alpha1_DiskSpecDiskEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceImageEncryptionKey":                                                                        schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceImageEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceImageEncryptionKeyCodec":                                                                   schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceImageEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceSnapshotEncryptionKey":                                                                     schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceSnapshotEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceSnapshotEncryptionKeyCodec":                                                                schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceSnapshotEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskStatus":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_DiskStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGateway":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGateway(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewayList":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewayList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpec":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewaySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpec2":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewaySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpecInterface":                                                                         schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewaySpecInterface(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewayStatus":                                                                                schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewayStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Firewall":                                                                                                schema_provider_google_api_apis_compute_v1alpha1_Firewall(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallList":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_FirewallList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpec":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_FirewallSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpec2":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_FirewallSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecAllow":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecAllow(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecDeny":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecDeny(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecLogConfig":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecLogConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecLogConfigCodec":                                                                              schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecLogConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallStatus":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_FirewallStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRule":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_ForwardingRule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleSpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleSpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddress":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_GlobalAddress(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressList":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressSpec":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressSpec2":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressStatus":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRule":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFilters":                                                                 schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpecMetadataFilters(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFiltersFilterLabels":                                                     schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpecMetadataFiltersFilterLabels(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpoint":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpoint(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroup":                                                                              schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroup(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupList":                                                                          schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupSpec":                                                                          schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupSpec2":                                                                         schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupStatus":                                                                        schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointList":                                                                               schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointSpec":                                                                               schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointSpec2":                                                                              schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointStatus":                                                                             schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGateway":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_HaVPNGateway(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewayList":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewayList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpec":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewaySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpec2":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewaySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpecVpnInterfaces":                                                                           schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewaySpecVpnInterfaces(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewayStatus":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewayStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheck":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_HealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckList":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_HealthCheckList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpec":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpec2":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecGrpcHealthCheck":                                                                          schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecGrpcHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecGrpcHealthCheckCodec":                                                                     schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecGrpcHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttp2HealthCheck":                                                                         schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttp2HealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttp2HealthCheckCodec":                                                                    schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttp2HealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpHealthCheck":                                                                          schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpHealthCheckCodec":                                                                     schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpsHealthCheck":                                                                         schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpsHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpsHealthCheckCodec":                                                                    schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpsHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecSslHealthCheck":                                                                           schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecSslHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecSslHealthCheckCodec":                                                                      schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecSslHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecTcpHealthCheck":                                                                           schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecTcpHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecTcpHealthCheckCodec":                                                                      schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecTcpHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckStatus":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_HealthCheckStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheck":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckSpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckSpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheck":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckList":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckSpec":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckSpec2":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckStatus":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Image":                                                                                                   schema_provider_google_api_apis_compute_v1alpha1_Image(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBinding":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_ImageIamBinding(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpecCondition":                                                                            schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpecConditionCodec":                                                                       schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMember":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_ImageIamMember(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpecCondition":                                                                             schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpecConditionCodec":                                                                        schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicy":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicyList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicySpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicySpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicyStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageList":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_ImageList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpec":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_ImageSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpec2":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_ImageSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecGuestOsFeatures":                                                                                schema_provider_google_api_apis_compute_v1alpha1_ImageSpecGuestOsFeatures(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecRawDisk":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_ImageSpecRawDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecRawDiskCodec":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_ImageSpecRawDiskCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageStatus":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_ImageStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Instance":                                                                                                schema_provider_google_api_apis_compute_v1alpha1_Instance(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplate":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplate(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecAttachedDisk":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecAttachedDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDisk":                                                                        schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDiskCodec":                                                                   schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDiskCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDiskInitializeParams":                                                        schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDiskInitializeParams(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDiskInitializeParamsCodec":                                                   schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDiskInitializeParamsCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecConfidentialInstanceConfig":                                                      schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecConfidentialInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecConfidentialInstanceConfigCodec":                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecConfidentialInstanceConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecGuestAccelerator":                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecGuestAccelerator(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterface":                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecNetworkInterface(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterfaceAccessConfig":                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecNetworkInterfaceAccessConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterfaceAliasIPRange":                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecNetworkInterfaceAliasIPRange(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScheduling":                                                                      schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecScheduling(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecSchedulingCodec":                                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecSchedulingCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecSchedulingNodeAffinities":                                                        schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecSchedulingNodeAffinities(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScratchDisk":                                                                     schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecScratchDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecServiceAccount":                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecServiceAccount(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecServiceAccountCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecServiceAccountCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecShieldedInstanceConfig":                                                          schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecShieldedInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecShieldedInstanceConfigCodec":                                                     schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecShieldedInstanceConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroup":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_InstanceGroup(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupList":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManager":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManager(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecAutoHealingPolicies":                                                             schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecAutoHealingPolicies(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecAutoHealingPoliciesCodec":                                                        schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecAutoHealingPoliciesCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecNamedPort":                                                                       schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecNamedPort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecStatefulDisk":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecStatefulDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecUpdatePolicy":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecUpdatePolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecUpdatePolicyCodec":                                                               schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecUpdatePolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersion":                                                                         schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecVersion(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersionTargetSize":                                                               schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecVersionTargetSize(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersionTargetSizeCodec":                                                          schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecVersionTargetSizeCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPort":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortList":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortSpec":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortSpec2":                                                                             schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortStatus":                                                                            schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpec":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpec2":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpecNamedPort":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupSpecNamedPort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupStatus":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBinding":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBinding(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingList":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpec":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpec2":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpecCondition":                                                                         schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpecConditionCodec":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingStatus":                                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMember":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMember(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberList":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpec":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpec2":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpecCondition":                                                                          schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpecConditionCodec":                                                                     schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberStatus":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicy":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicyList":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicySpec":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicySpec2":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicyStatus":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceList":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_InstanceList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpec":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_InstanceSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpec2":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_InstanceSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecAttachedDisk":                                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecAttachedDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDisk":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDiskCodec":                                                                               schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDiskCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDiskInitializeParams":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDiskInitializeParams(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDiskInitializeParamsCodec":                                                               schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDiskInitializeParamsCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecConfidentialInstanceConfig":                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecConfidentialInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecConfidentialInstanceConfigCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecConfidentialInstanceConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecGuestAccelerator":                                                                            schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecGuestAccelerator(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterface":                                                                            schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecNetworkInterface(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterfaceAccessConfig":                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecNetworkInterfaceAccessConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterfaceAliasIPRange":                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecNetworkInterfaceAliasIPRange(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScheduling":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecScheduling(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecSchedulingCodec":                                                                             schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecSchedulingCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecSchedulingNodeAffinities":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecSchedulingNodeAffinities(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScratchDisk":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecScratchDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecServiceAccount":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecServiceAccount(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecServiceAccountCodec":                                                                         schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecServiceAccountCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecShieldedInstanceConfig":                                                                      schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecShieldedInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecShieldedInstanceConfigCodec":                                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecShieldedInstanceConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceStatus":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_InstanceStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplate":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplate(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateList":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpec":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpec2":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecConfidentialInstanceConfig":                                                          schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecConfidentialInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecConfidentialInstanceConfigCodec":                                                     schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecConfidentialInstanceConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDisk":                                                                                schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDiskDiskEncryptionKey":                                                               schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecDiskDiskEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDiskDiskEncryptionKeyCodec":                                                          schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecDiskDiskEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecGuestAccelerator":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecGuestAccelerator(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterface":                                                                    schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecNetworkInterface(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterfaceAccessConfig":                                                        schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecNetworkInterfaceAccessConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterfaceAliasIPRange":                                                        schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecNetworkInterfaceAliasIPRange(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecScheduling":                                                                          schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecScheduling(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecSchedulingCodec":                                                                     schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecSchedulingCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecSchedulingNodeAffinities":                                                            schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecSchedulingNodeAffinities(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecServiceAccount":                                                                      schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecServiceAccount(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecServiceAccountCodec":                                                                 schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecServiceAccountCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecShieldedInstanceConfig":                                                              schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecShieldedInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecShieldedInstanceConfigCodec":                                                         schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecShieldedInstanceConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateStatus":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachment":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachment(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentList":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpec":                                                                              schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpec2":                                                                             schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpecPrivateInterconnectInfo":                                                       schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentSpecPrivateInterconnectInfo(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentStatus":                                                                            schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificate":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificate(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateList":                                                                               schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpec":                                                                               schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpec2":                                                                              schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpecManaged":                                                                        schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpecManaged(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpecManagedCodec":                                                                   schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpecManagedCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateStatus":                                                                             schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Network":                                                                                                 schema_provider_google_api_apis_compute_v1alpha1_Network(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpoint":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpoint(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroup":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroup(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointSpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointSpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkList":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_NetworkList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeering":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_NetworkPeering(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfig":                                                                              schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigList":                                                                          schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigSpec":                                                                          schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigSpec2":                                                                         schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigStatus":                                                                        schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringSpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringSpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkSpec":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_NetworkSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkSpec2":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_NetworkSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkStatus":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_NetworkStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroup":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_NodeGroup(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupList":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_NodeGroupList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpec":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpec2":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecAutoscalingPolicy":                                                                          schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecAutoscalingPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecAutoscalingPolicyCodec":                                                                     schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecAutoscalingPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecMaintenanceWindow":                                                                          schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecMaintenanceWindow(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecMaintenanceWindowCodec":                                                                     schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecMaintenanceWindowCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupStatus":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_NodeGroupStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplate":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_NodeTemplate(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateList":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpec":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpec2":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecNodeTypeFlexibility":                                                                     schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecNodeTypeFlexibility(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecNodeTypeFlexibilityCodec":                                                                schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecNodeTypeFlexibilityCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecServerBinding":                                                                           schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecServerBinding(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecServerBindingCodec":                                                                      schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecServerBindingCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateStatus":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroring":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_PacketMirroring(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecCollectorIlb":                                                                         schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecCollectorIlb(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecCollectorIlbCodec":                                                                    schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecCollectorIlbCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecFilter":                                                                               schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecFilter(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecFilterCodec":                                                                          schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecFilterCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResources":                                                                    schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResources(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResourcesCodec":                                                               schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResourcesCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResourcesInstances":                                                           schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResourcesInstances(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResourcesSubnetworks":                                                         schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResourcesSubnetworks(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecNetwork":                                                                              schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecNetwork(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecNetworkCodec":                                                                         schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecNetworkCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfig":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigList":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpec":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpec2":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedState":                                                                     schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpecPreservedState(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedStateCodec":                                                                schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpecPreservedStateCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedStateDisk":                                                                 schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpecPreservedStateDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigStatus":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTier":                                                                               schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTier(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierList":                                                                           schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierSpec":                                                                           schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierSpec2":                                                                          schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierStatus":                                                                         schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadata":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadata(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItem":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItem(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemList":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemSpec":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemSpec2":                                                                                schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemStatus":                                                                               schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataSpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataSpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscaler":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscaler(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerList":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpec":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpec2":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicy":                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyCodec":                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyCpuUtilization":                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyCpuUtilization(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyCpuUtilizationCodec":                                                schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyCpuUtilizationCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilization":                                           schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilization(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilizationCodec":                                      schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilizationCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyMetric":                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyMetric(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControl":                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControl(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControlCodec":                                                schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControlCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas":                                  schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicasCodec":                             schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicasCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerStatus":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendService":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionBackendService(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecBackend":                                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecBackend(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicy":                                                                       schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicyCacheKeyPolicy":                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicyCacheKeyPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicyCacheKeyPolicyCodec":                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicyCacheKeyPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicyCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCircuitBreakers":                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCircuitBreakers(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCircuitBreakersCodec":                                                            schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCircuitBreakersCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHash":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHash(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookie":                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookie(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookieCodec":                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookieCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookieTtl":                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookieTtl(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookieTtlCodec":                                                schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookieTtlCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecFailoverPolicy":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecFailoverPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecFailoverPolicyCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecFailoverPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecLogConfig":                                                                       schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecLogConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecLogConfigCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecLogConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetection":                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetection(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionBaseEjectionTime":                                                schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionBaseEjectionTime(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionBaseEjectionTimeCodec":                                           schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionBaseEjectionTimeCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionCodec":                                                           schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionInterval":                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionInterval(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionIntervalCodec":                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionIntervalCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDisk":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBinding":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBinding(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpecCondition":                                                                       schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpecConditionCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMember":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMember(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberList":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpec":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpec2":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpecCondition":                                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpecConditionCodec":                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberStatus":                                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicy":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicyList":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicySpec":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicySpec2":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicyStatus":                                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskList":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionDiskList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachment":                                                                      schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachment(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentList":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentSpec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentSpec2":                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentStatus":                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpec":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpec2":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecDiskEncryptionKey":                                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecDiskEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecDiskEncryptionKeyCodec":                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecDiskEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecSourceSnapshotEncryptionKey":                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecSourceSnapshotEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecSourceSnapshotEncryptionKeyCodec":                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecSourceSnapshotEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskStatus":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionDiskStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheck":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckList":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpec":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpec2":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecGrpcHealthCheck":                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecGrpcHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecGrpcHealthCheckCodec":                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecGrpcHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttp2HealthCheck":                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttp2HealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttp2HealthCheckCodec":                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttp2HealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpHealthCheck":                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpHealthCheckCodec":                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpsHealthCheck":                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpsHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpsHealthCheckCodec":                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpsHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecSslHealthCheck":                                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecSslHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecSslHealthCheckCodec":                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecSslHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecTcpHealthCheck":                                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecTcpHealthCheck(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecTcpHealthCheckCodec":                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecTcpHealthCheckCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckStatus":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManager":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManager(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerList":                                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpec":                                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpec2":                                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecAutoHealingPolicies":                                                       schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecAutoHealingPolicies(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecAutoHealingPoliciesCodec":                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecAutoHealingPoliciesCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecNamedPort":                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecNamedPort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecStatefulDisk":                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecStatefulDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecUpdatePolicy":                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecUpdatePolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecUpdatePolicyCodec":                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecUpdatePolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersion":                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecVersion(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersionTargetSize":                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecVersionTargetSize(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersionTargetSizeCodec":                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecVersionTargetSizeCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerStatus":                                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroup":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroup(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupList":                                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpec":                                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpec2":                                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecAppEngine":                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecAppEngine(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecAppEngineCodec":                                                            schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecAppEngineCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudFunction":                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudFunction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudFunctionCodec":                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudFunctionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudRun":                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudRun(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudRunCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudRunCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupStatus":                                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfig":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigList":                                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpec":                                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpec2":                                                                            schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedState":                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpecPreservedState(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedStateCodec":                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpecPreservedStateCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedStateDisk":                                                           schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpecPreservedStateDisk(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigStatus":                                                                           schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificate":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificate(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxy":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxyList":                                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxySpec":                                                                               schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxySpec2":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxyStatus":                                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxy":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxyList":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxySpec":                                                                              schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxySpec2":                                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxyStatus":                                                                            schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMap":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_RegionURLMap(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapList":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpec":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpec2":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecDefaultURLRedirect":                                                                      schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecDefaultURLRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecDefaultURLRedirectCodec":                                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecDefaultURLRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecHostRule":                                                                                schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecHostRule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcher":                                                                             schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcher(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherDefaultURLRedirect":                                                           schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherDefaultURLRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherDefaultURLRedirectCodec":                                                      schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherDefaultURLRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRule":                                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteAction":                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionCodec":                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicy":                                                schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicyCodec":                                           schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy":                                      schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort":                                 schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortCodec":                            schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyCodec":                                 schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay":                                 schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayCodec":                            schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay":                       schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayCodec":                  schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy":                                       schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicyCodec":                                  schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicy":                                               schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyCodec":                                          schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout":                                  schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutCodec":                             schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionTimeout":                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionTimeoutCodec":                                              schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewrite":                                                schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewrite(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewriteCodec":                                           schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewriteCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices":                                   schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction":                       schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionCodec":                  schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd":    schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd":   schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleUrlRedirect":                                                          schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleUrlRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleUrlRedirectCodec":                                                     schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleUrlRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRules":                                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRules(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderAction":                                                       schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderActionCodec":                                                  schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd":                                    schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd":                                   schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRules":                                                         schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRules(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches":                                            schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch":                                  schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchCodec":                             schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters":                                          schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels":                              schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches":                                    schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteAction":                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionCodec":                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicy":                                              schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicyCodec":                                         schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy":                                    schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort":                               schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortCodec":                          schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyCodec":                               schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay":                               schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayCodec":                          schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay":                     schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayCodec":                schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy":                                     schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicyCodec":                                schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicy":                                             schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyCodec":                                        schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout":                                schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutCodec":                           schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeout":                                                 schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeoutCodec":                                            schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewrite":                                              schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewrite(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewriteCodec":                                         schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewriteCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices":                                 schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction":                     schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionCodec":                schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd":  schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd": schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesUrlRedirect":                                                        schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesUrlRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesUrlRedirectCodec":                                                   schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesUrlRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecTest":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecTest(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapStatus":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Reservation":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_Reservation(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationList":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_ReservationList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpec":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_ReservationSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpec2":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_ReservationSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservation":                                                                      schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservation(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationCodec":                                                                 schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstanceProperties":                                                    schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstanceProperties(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstancePropertiesCodec":                                               schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstancePropertiesCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstancePropertiesGuestAccelerators":                                   schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstancePropertiesGuestAccelerators(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstancePropertiesLocalSsds":                                           schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstancePropertiesLocalSsds(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationStatus":                                                                                       schema_provider_google_api_apis_compute_v1alpha1_ReservationStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicy":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicyList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecGroupPlacementPolicy":                                                                  schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecGroupPlacementPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecGroupPlacementPolicyCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecGroupPlacementPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicy":                                                                schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyCodec":                                                           schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicy":                                                 schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicyCodec":                                            schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicySchedule":                                                        schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicySchedule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleCodec":                                                   schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleDailySchedule":                                           schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleDailySchedule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleDailyScheduleCodec":                                      schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleDailyScheduleCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlySchedule":                                          schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlySchedule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlyScheduleCodec":                                     schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlyScheduleCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklySchedule":                                          schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklySchedule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleCodec":                                     schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks":                                schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicySnapshotProperties":                                              schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicySnapshotProperties(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicySnapshotPropertiesCodec":                                         schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicySnapshotPropertiesCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicyStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Route":                                                                                                   schema_provider_google_api_apis_compute_v1alpha1_Route(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteList":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_RouteList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteSpec":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_RouteSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteSpec2":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_RouteSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteStatus":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_RouteStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Router":                                                                                                  schema_provider_google_api_apis_compute_v1alpha1_Router(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterface":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_RouterInterface(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceSpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceSpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterList":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_RouterList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNAT":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_RouterNAT(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATList":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_RouterNATList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpec":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpec2":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecLogConfig":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpecLogConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecLogConfigCodec":                                                                             schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpecLogConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecSubnetwork":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpecSubnetwork(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATStatus":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_RouterNATStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeer":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_RouterPeer(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerList":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_RouterPeerList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpec":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_RouterPeerSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpec2":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_RouterPeerSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpecAdvertisedIPRanges":                                                                        schema_provider_google_api_apis_compute_v1alpha1_RouterPeerSpecAdvertisedIPRanges(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerStatus":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_RouterPeerStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpec":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_RouterSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpec2":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_RouterSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgp":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_RouterSpecBgp(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgpAdvertisedIPRanges":                                                                         schema_provider_google_api_apis_compute_v1alpha1_RouterSpecBgpAdvertisedIPRanges(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgpCodec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_RouterSpecBgpCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterStatus":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_RouterStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicy":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicyList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRule":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatch":                                                                             schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatch(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchCodec":                                                                        schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchConfig":                                                                       schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchConfigCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchExpr":                                                                         schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchExpr(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchExprCodec":                                                                    schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchExprCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicyStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProject":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProject(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProject":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProject(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectList":                                                                             schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectSpec":                                                                             schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectSpec2":                                                                            schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectStatus":                                                                           schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Snapshot":                                                                                                schema_provider_google_api_apis_compute_v1alpha1_Snapshot(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotList":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_SnapshotList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpec":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpec2":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSnapshotEncryptionKey":                                                                       schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSnapshotEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSnapshotEncryptionKeyCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSnapshotEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSourceDiskEncryptionKey":                                                                     schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSourceDiskEncryptionKey(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSourceDiskEncryptionKeyCodec":                                                                schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSourceDiskEncryptionKeyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotStatus":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_SnapshotStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificate":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_SslCertificate(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_SslCertificateList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateSpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_SslCertificateSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateSpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_SslCertificateSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_SslCertificateStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicy":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_SslPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicyList":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_SslPolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicySpec":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_SslPolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicySpec2":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_SslPolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicyStatus":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_SslPolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.Subnetwork":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_Subnetwork(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBinding":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBinding(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingList":                                                                                schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpec":                                                                                schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpec2":                                                                               schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpecCondition":                                                                       schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpecConditionCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingStatus":                                                                              schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMember":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMember(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberList":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpec":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpec2":                                                                                schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpecCondition":                                                                        schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpecCondition(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpecConditionCodec":                                                                   schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpecConditionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberStatus":                                                                               schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicy":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicyList":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicySpec":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicySpec2":                                                                                schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicyStatus":                                                                               schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkList":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_SubnetworkList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpec":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpec2":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecLogConfig":                                                                                 schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpecLogConfig(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecLogConfigCodec":                                                                            schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpecLogConfigCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecSecondaryIPRange":                                                                          schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpecSecondaryIPRange(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkStatus":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_SubnetworkStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxy":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxyList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxySpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxySpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxyStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxy":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxyList":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxySpec":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxySpec2":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxyStatus":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxy":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxyList":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxySpec":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxySpec2":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxyStatus":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstance":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_TargetInstance(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceSpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceSpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPool":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_TargetPool(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolList":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_TargetPoolList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolSpec":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_TargetPoolSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolSpec2":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_TargetPoolSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolStatus":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_TargetPoolStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxy":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxyList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxySpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxySpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxyStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxy":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxyList":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxyList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxySpec":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxySpec2":                                                                                     schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxyStatus":                                                                                    schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxyStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMap":                                                                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMap(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapList":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpec":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpec2":                                                                                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteAction":                                                                            schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionCodec":                                                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionCorsPolicy":                                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionCorsPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionCorsPolicyCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionCorsPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicy":                                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbort":                                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbortCodec":                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbortCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyCodec":                                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelay":                                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayCodec":                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelay":                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelayCodec":                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRequestMirrorPolicy":                                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRequestMirrorPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRequestMirrorPolicyCodec":                                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRequestMirrorPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicy":                                                                 schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicyCodec":                                                            schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeout":                                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeoutCodec":                                               schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionTimeout":                                                                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionTimeoutCodec":                                                                schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionUrlRewrite":                                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionUrlRewrite(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionUrlRewriteCodec":                                                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionUrlRewriteCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServices":                                                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServices(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderAction":                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionCodec":                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd":                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd":                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultURLRedirect":                                                                            schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultURLRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultURLRedirectCodec":                                                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultURLRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderAction":                                                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderActionCodec":                                                                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderActionRequestHeadersToAdd":                                                               schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderActionResponseHeadersToAdd":                                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHostRule":                                                                                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHostRule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcher":                                                                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcher(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteAction":                                                                 schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionCodec":                                                            schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionCorsPolicy":                                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionCorsPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionCorsPolicyCodec":                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionCorsPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicy":                                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbort":                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbortCodec":                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbortCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyCodec":                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelay":                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayCodec":                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay":                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayCodec":                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicy":                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicyCodec":                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicy":                                                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyCodec":                                                 schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeout":                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutCodec":                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionTimeout":                                                          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionTimeoutCodec":                                                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionUrlRewrite":                                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionUrlRewrite(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionUrlRewriteCodec":                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionUrlRewriteCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServices":                                          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServices(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction":                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionCodec":                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd":           schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd":          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultURLRedirect":                                                                 schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultURLRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultURLRedirectCodec":                                                            schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultURLRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderAction":                                                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderActionCodec":                                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderActionRequestHeadersToAdd":                                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderActionResponseHeadersToAdd":                                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRule":                                                                           schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRule(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteAction":                                                                schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionCodec":                                                           schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicy":                                                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicyCodec":                                                 schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy":                                            schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort":                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortCodec":                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyCodec":                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay":                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayCodec":                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay":                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayCodec":                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy":                                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicyCodec":                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicy":                                                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyCodec":                                                schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout":                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutCodec":                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionTimeout":                                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionTimeoutCodec":                                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionUrlRewrite":                                                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionUrlRewrite(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionUrlRewriteCodec":                                                 schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionUrlRewriteCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices":                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction":                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionCodec":                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd":          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd":         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleUrlRedirect":                                                                schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleUrlRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleUrlRedirectCodec":                                                           schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleUrlRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRules":                                                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRules(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderAction":                                                             schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderActionCodec":                                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd":                                          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd":                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRules":                                                               schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRules(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches":                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch":                                        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchCodec":                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters":                                                schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels":                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches":                                          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteAction":                                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionCodec":                                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicy":                                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicyCodec":                                               schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy":                                          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort":                                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortCodec":                                schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyCodec":                                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay":                                     schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayCodec":                                schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay":                           schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayCodec":                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy":                                           schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicyCodec":                                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicy":                                                   schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicy(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyCodec":                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout":                                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutCodec":                                 schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionTimeout":                                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionTimeout(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionTimeoutCodec":                                                  schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionTimeoutCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewrite":                                                    schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewrite(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewriteCodec":                                               schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewriteCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices":                                       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction":                           schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionCodec":                      schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd":        schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd":       schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesUrlRedirect":                                                              schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesUrlRedirect(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesUrlRedirectCodec":                                                         schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesUrlRedirectCodec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecTest":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecTest(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapStatus":                                                                                            schema_provider_google_api_apis_compute_v1alpha1_UrlMapStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGateway":                                                                                              schema_provider_google_api_apis_compute_v1alpha1_VpnGateway(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewayList":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_VpnGatewayList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewaySpec":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_VpnGatewaySpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewaySpec2":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_VpnGatewaySpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewayStatus":                                                                                        schema_provider_google_api_apis_compute_v1alpha1_VpnGatewayStatus(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnel":                                                                                               schema_provider_google_api_apis_compute_v1alpha1_VpnTunnel(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelList":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelList(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelSpec":                                                                                           schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelSpec(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelSpec2":                                                                                          schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelSpec2(ref),
		"kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelStatus":                                                                                         schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelStatus(ref),
	}
}

func schema_k8sio_api_core_v1_AWSElasticBlockStoreVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumeID": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partition": {
						SchemaProps: spec.SchemaProps{
							Description: "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"volumeID"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Affinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Affinity is a group of affinity scheduling rules.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Describes node affinity scheduling rules for the pod.",
							Ref:         ref("k8s.io/api/core/v1.NodeAffinity"),
						},
					},
					"podAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
							Ref:         ref("k8s.io/api/core/v1.PodAffinity"),
						},
					},
					"podAntiAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
							Ref:         ref("k8s.io/api/core/v1.PodAntiAffinity"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeAffinity", "k8s.io/api/core/v1.PodAffinity", "k8s.io/api/core/v1.PodAntiAffinity"},
	}
}

func schema_k8sio_api_core_v1_AttachedVolume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AttachedVolume describes a volume attached to a node",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the attached volume",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devicePath": {
						SchemaProps: spec.SchemaProps{
							Description: "DevicePath represents the device path where the volume should be available",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "devicePath"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_AvoidPods(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AvoidPods describes pods that should avoid this node. This is the value for a Node annotation with key scheduler.alpha.kubernetes.io/preferAvoidPods and will eventually become a field of NodeStatus.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"preferAvoidPods": {
						SchemaProps: spec.SchemaProps{
							Description: "Bounded-sized list of signatures of pods that should avoid this node, sorted in timestamp order from oldest to newest. Size of the slice is unspecified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PreferAvoidPodsEntry"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PreferAvoidPodsEntry"},
	}
}

func schema_k8sio_api_core_v1_AzureDiskVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"diskName": {
						SchemaProps: spec.SchemaProps{
							Description: "The Name of the data disk in the blob storage",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskURI": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI the data disk in the blob storage",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cachingMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Host Caching mode: None, Read Only, Read Write.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"diskName", "diskURI"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_AzureFilePersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "the name of secret that contains Azure Storage Account Name and Key",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"shareName": {
						SchemaProps: spec.SchemaProps{
							Description: "Share Name",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"secretName", "shareName"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_AzureFileVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "the name of secret that contains Azure Storage Account Name and Key",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"shareName": {
						SchemaProps: spec.SchemaProps{
							Description: "Share Name",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"secretName", "shareName"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Binding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The target object that you want to bind to the standard object.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
				Required: []string{"target"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_CSIPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents storage that is managed by an external CSI volume driver (Beta feature)",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"driver": {
						SchemaProps: spec.SchemaProps{
							Description: "Driver is the name of the driver to use for this volume. Required.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeHandle": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeAttributes": {
						SchemaProps: spec.SchemaProps{
							Description: "Attributes of the volume to publish.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"controllerPublishSecretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"nodeStageSecretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"nodePublishSecretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"controllerExpandSecretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
				},
				Required: []string{"driver", "volumeHandle"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_k8sio_api_core_v1_CSIVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a source location of a volume to mount, managed by an external CSI driver",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"driver": {
						SchemaProps: spec.SchemaProps{
							Description: "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeAttributes": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"nodePublishSecretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
				Required: []string{"driver"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_Capabilities(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Adds and removes POSIX capabilities from running containers.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"add": {
						SchemaProps: spec.SchemaProps{
							Description: "Added capabilities",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"drop": {
						SchemaProps: spec.SchemaProps{
							Description: "Removed capabilities",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_CephFSPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"monitors": {
						SchemaProps: spec.SchemaProps{
							Description: "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretFile": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"monitors"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_k8sio_api_core_v1_CephFSVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"monitors": {
						SchemaProps: spec.SchemaProps{
							Description: "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretFile": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"monitors"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_CinderPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumeID": {
						SchemaProps: spec.SchemaProps{
							Description: "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: points to a secret object containing parameters used to connect to OpenStack.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
				},
				Required: []string{"volumeID"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_k8sio_api_core_v1_CinderVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumeID": {
						SchemaProps: spec.SchemaProps{
							Description: "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: points to a secret object containing parameters used to connect to OpenStack.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
				Required: []string{"volumeID"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_ClientIPConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClientIPConfig represents the configurations of Client IP based session affinity.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ComponentCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Information about the condition of a component.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of condition for a component. Valid value: \"Healthy\"",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message about the condition for a component. For example, information about a health check.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"error": {
						SchemaProps: spec.SchemaProps{
							Description: "Condition error code for a component. For example, a health check error code.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ComponentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of component conditions observed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ComponentCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ComponentCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_ComponentStatusList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of ComponentStatus objects.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ComponentStatus"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ComponentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_ConfigMap(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigMap holds configuration data for pods to consume.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"immutable": {
						SchemaProps: spec.SchemaProps{
							Description: "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"binaryData": {
						SchemaProps: spec.SchemaProps{
							Description: "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "byte",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_ConfigMapEnvSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the ConfigMap must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ConfigMapKeySelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Selects a key from a ConfigMap.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The key to select.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the ConfigMap or its key must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"key"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ConfigMapList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigMapList is a resource containing a list of ConfigMap objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of ConfigMaps.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ConfigMap"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMap", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_ConfigMapNodeConfigSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeletConfigKey": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"namespace", "name", "kubeletConfigKey"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ConfigMapProjection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.KeyToPath"),
									},
								},
							},
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the ConfigMap or its keys must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.KeyToPath"},
	}
}

func schema_k8sio_api_core_v1_ConfigMapVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.KeyToPath"),
									},
								},
							},
						},
					},
					"defaultMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the ConfigMap or its keys must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.KeyToPath"},
	}
}

func schema_k8sio_api_core_v1_Container(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A single application container that you want to run within a pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"workingDir": {
						SchemaProps: spec.SchemaProps{
							Description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"containerPort",
									"protocol",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "containerPort",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerPort"),
									},
								},
							},
						},
					},
					"envFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvFromSource"),
									},
								},
							},
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the container. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "mountPath",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"volumeDevices": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "devicePath",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "volumeDevices is the list of block devices to be used by the container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeDevice"),
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"startupProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"lifecycle": {
						SchemaProps: spec.SchemaProps{
							Description: "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
							Ref:         ref("k8s.io/api/core/v1.Lifecycle"),
						},
					},
					"terminationMessagePath": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"terminationMessagePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
							Ref:         ref("k8s.io/api/core/v1.SecurityContext"),
						},
					},
					"stdin": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stdinOnce": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tty": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerPort", "k8s.io/api/core/v1.EnvFromSource", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Lifecycle", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecurityContext", "k8s.io/api/core/v1.VolumeDevice", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_k8sio_api_core_v1_ContainerImage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Describe a container image",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"names": {
						SchemaProps: spec.SchemaProps{
							Description: "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "The size of the image in bytes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"names"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ContainerPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerPort represents a network port in a single container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"containerPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
							Default:     "TCP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostIP": {
						SchemaProps: spec.SchemaProps{
							Description: "What host IP to bind the external port to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"containerPort"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ContainerState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"waiting": {
						SchemaProps: spec.SchemaProps{
							Description: "Details about a waiting container",
							Ref:         ref("k8s.io/api/core/v1.ContainerStateWaiting"),
						},
					},
					"running": {
						SchemaProps: spec.SchemaProps{
							Description: "Details about a running container",
							Ref:         ref("k8s.io/api/core/v1.ContainerStateRunning"),
						},
					},
					"terminated": {
						SchemaProps: spec.SchemaProps{
							Description: "Details about a terminated container",
							Ref:         ref("k8s.io/api/core/v1.ContainerStateTerminated"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerStateRunning", "k8s.io/api/core/v1.ContainerStateTerminated", "k8s.io/api/core/v1.ContainerStateWaiting"},
	}
}

func schema_k8sio_api_core_v1_ContainerStateRunning(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerStateRunning is a running state of a container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"startedAt": {
						SchemaProps: spec.SchemaProps{
							Description: "Time at which the container was last (re-)started",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_ContainerStateTerminated(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerStateTerminated is a terminated state of a container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exitCode": {
						SchemaProps: spec.SchemaProps{
							Description: "Exit status from the last termination of the container",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"signal": {
						SchemaProps: spec.SchemaProps{
							Description: "Signal from the last termination of the container",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "(brief) reason from the last termination of the container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message regarding the last termination of the container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startedAt": {
						SchemaProps: spec.SchemaProps{
							Description: "Time at which previous execution of the container started",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"finishedAt": {
						SchemaProps: spec.SchemaProps{
							Description: "Time at which the container last terminated",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"containerID": {
						SchemaProps: spec.SchemaProps{
							Description: "Container's ID in the format 'docker://<container_id>'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"exitCode"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_ContainerStateWaiting(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerStateWaiting is a waiting state of a container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "(brief) reason the container is not yet running.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message regarding why the container is not yet running.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ContainerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerStatus contains details for the current status of this container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "Details about the container's current condition.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ContainerState"),
						},
					},
					"lastState": {
						SchemaProps: spec.SchemaProps{
							Description: "Details about the container's last termination condition.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ContainerState"),
						},
					},
					"ready": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies whether the container has passed its readiness probe.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"restartCount": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageID": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageID of the container's image.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerID": {
						SchemaProps: spec.SchemaProps{
							Description: "Container's ID in the format 'docker://<container_id>'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"started": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "ready", "restartCount", "image", "imageID"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerState"},
	}
}

func schema_k8sio_api_core_v1_DaemonEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DaemonEndpoint contains information about a single Daemon endpoint.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port number of the given endpoint.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"Port"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_DownwardAPIProjection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of DownwardAPIVolume file",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.DownwardAPIVolumeFile"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.DownwardAPIVolumeFile"},
	}
}

func schema_k8sio_api_core_v1_DownwardAPIVolumeFile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DownwardAPIVolumeFile represents information to create the file containing the pod field",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
							Ref:         ref("k8s.io/api/core/v1.ObjectFieldSelector"),
						},
					},
					"resourceFieldRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
							Ref:         ref("k8s.io/api/core/v1.ResourceFieldSelector"),
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"path"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectFieldSelector", "k8s.io/api/core/v1.ResourceFieldSelector"},
	}
}

func schema_k8sio_api_core_v1_DownwardAPIVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of downward API volume file",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.DownwardAPIVolumeFile"),
									},
								},
							},
						},
					},
					"defaultMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.DownwardAPIVolumeFile"},
	}
}

func schema_k8sio_api_core_v1_EmptyDirVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"medium": {
						SchemaProps: spec.SchemaProps{
							Description: "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sizeLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_EndpointAddress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EndpointAddress is a tuple that describes single IP address.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ip": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "The Hostname of this endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to object providing the endpoint.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
				Required: []string{"ip"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_k8sio_api_core_v1_EndpointPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EndpointPort is a tuple that describes a single port.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number of the endpoint.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"port"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_EndpointSubset(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"addresses": {
						SchemaProps: spec.SchemaProps{
							Description: "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EndpointAddress"),
									},
								},
							},
						},
					},
					"notReadyAddresses": {
						SchemaProps: spec.SchemaProps{
							Description: "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EndpointAddress"),
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Port numbers available on the related IP addresses.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EndpointPort"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EndpointAddress", "k8s.io/api/core/v1.EndpointPort"},
	}
}

func schema_k8sio_api_core_v1_Endpoints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"subsets": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EndpointSubset"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EndpointSubset", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_EndpointsList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EndpointsList is a list of endpoints.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of endpoints.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Endpoints"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Endpoints", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_EnvFromSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvFromSource represents the source of a set of ConfigMaps",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"prefix": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The ConfigMap to select from",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapEnvSource"),
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "The Secret to select from",
							Ref:         ref("k8s.io/api/core/v1.SecretEnvSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapEnvSource", "k8s.io/api/core/v1.SecretEnvSource"},
	}
}

func schema_k8sio_api_core_v1_EnvVar(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvVar represents an environment variable present in a Container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"valueFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "Source for the environment variable's value. Cannot be used if value is not empty.",
							Ref:         ref("k8s.io/api/core/v1.EnvVarSource"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVarSource"},
	}
}

func schema_k8sio_api_core_v1_EnvVarSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvVarSource represents a source for the value of an EnvVar.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"fieldRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
							Ref:         ref("k8s.io/api/core/v1.ObjectFieldSelector"),
						},
					},
					"resourceFieldRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
							Ref:         ref("k8s.io/api/core/v1.ResourceFieldSelector"),
						},
					},
					"configMapKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a ConfigMap.",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapKeySelector"),
						},
					},
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a secret in the pod's namespace",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapKeySelector", "k8s.io/api/core/v1.ObjectFieldSelector", "k8s.io/api/core/v1.ResourceFieldSelector", "k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_k8sio_api_core_v1_EphemeralContainer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"workingDir": {
						SchemaProps: spec.SchemaProps{
							Description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports are not allowed for ephemeral containers.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerPort"),
									},
								},
							},
						},
					},
					"envFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvFromSource"),
									},
								},
							},
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the container. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "mountPath",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"volumeDevices": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "devicePath",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "volumeDevices is the list of block devices to be used by the container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeDevice"),
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Probes are not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Probes are not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"startupProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Probes are not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"lifecycle": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifecycle is not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Lifecycle"),
						},
					},
					"terminationMessagePath": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"terminationMessagePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext is not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.SecurityContext"),
						},
					},
					"stdin": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stdinOnce": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tty": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"targetContainerName": {
						SchemaProps: spec.SchemaProps{
							Description: "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerPort", "k8s.io/api/core/v1.EnvFromSource", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Lifecycle", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecurityContext", "k8s.io/api/core/v1.VolumeDevice", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_k8sio_api_core_v1_EphemeralContainerCommon(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EphemeralContainerCommon is a copy of all fields in Container to be inlined in EphemeralContainer. This separate type allows easy conversion from EphemeralContainer to Container and allows separate documentation for the fields of EphemeralContainer. When a new field is added to Container it must be added here as well.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"workingDir": {
						SchemaProps: spec.SchemaProps{
							Description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports are not allowed for ephemeral containers.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerPort"),
									},
								},
							},
						},
					},
					"envFrom": {
						SchemaProps: spec.SchemaProps{
							Description: "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvFromSource"),
									},
								},
							},
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the container. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "mountPath",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"volumeDevices": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "devicePath",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "volumeDevices is the list of block devices to be used by the container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeDevice"),
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Probes are not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Probes are not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"startupProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Probes are not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"lifecycle": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifecycle is not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.Lifecycle"),
						},
					},
					"terminationMessagePath": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"terminationMessagePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext is not allowed for ephemeral containers.",
							Ref:         ref("k8s.io/api/core/v1.SecurityContext"),
						},
					},
					"stdin": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stdinOnce": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tty": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerPort", "k8s.io/api/core/v1.EnvFromSource", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Lifecycle", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecurityContext", "k8s.io/api/core/v1.VolumeDevice", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_k8sio_api_core_v1_EphemeralContainers(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A list of ephemeral containers used with the Pod ephemeralcontainers subresource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"ephemeralContainers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of ephemeral containers associated with this pod. New ephemeral containers may be appended to this list, but existing ephemeral containers may not be removed or modified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EphemeralContainer"),
									},
								},
							},
						},
					},
				},
				Required: []string{"ephemeralContainers"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EphemeralContainer", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_EphemeralVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents an ephemeral volume that is handled by a normal storage driver.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumeClaimTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil.",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimTemplate"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaimTemplate"},
	}
}

func schema_k8sio_api_core_v1_Event(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"involvedObject": {
						SchemaProps: spec.SchemaProps{
							Description: "The object that this event is about.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable description of the status of this operation.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The component reporting this event. Should be a short machine understandable string.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.EventSource"),
						},
					},
					"firstTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "The time at which the most recent occurrence of this event was recorded.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"count": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of times this event has occurred.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of this event (Normal, Warning), new types could be added in the future",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"eventTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Time when this Event was first observed.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"),
						},
					},
					"series": {
						SchemaProps: spec.SchemaProps{
							Description: "Data about the Event series this event represents or nil if it's a singleton Event.",
							Ref:         ref("k8s.io/api/core/v1.EventSeries"),
						},
					},
					"action": {
						SchemaProps: spec.SchemaProps{
							Description: "What action was taken/failed regarding to the Regarding object.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"related": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional secondary object for more complex actions.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"reportingComponent": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reportingInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "ID of the controller instance, e.g. `kubelet-xyzf`.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"metadata", "involvedObject"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EventSeries", "k8s.io/api/core/v1.EventSource", "k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_EventList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventList is a list of events.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of events",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Event"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Event", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_EventSeries(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"count": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of occurrences in this series up to the last heartbeat time",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"lastObservedTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Time of the last occurrence observed",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime"},
	}
}

func schema_k8sio_api_core_v1_EventSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EventSource contains information for an event.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"component": {
						SchemaProps: spec.SchemaProps{
							Description: "Component from which the event is generated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Node name on which the event is generated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ExecAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExecAction describes a \"run in container\" action.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_FCVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetWWNs": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: FC target worldwide names (WWNs)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"lun": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: FC target lun number",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"wwids": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_FlexPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"driver": {
						SchemaProps: spec.SchemaProps{
							Description: "Driver is the name of the driver to use for this volume.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Extra command options if any.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"driver"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_k8sio_api_core_v1_FlexVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"driver": {
						SchemaProps: spec.SchemaProps{
							Description: "Driver is the name of the driver to use for this volume.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Extra command options if any.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"driver"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_FlockerVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"datasetName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"datasetUUID": {
						SchemaProps: spec.SchemaProps{
							Description: "UUID of the dataset. This is unique identifier of a Flocker dataset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_GCEPersistentDiskVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pdName": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partition": {
						SchemaProps: spec.SchemaProps{
							Description: "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"pdName"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_GitRepoVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "Repository URL",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Description: "Commit hash for the specified revision.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"directory": {
						SchemaProps: spec.SchemaProps{
							Description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"repository"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_GlusterfsPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"endpointsNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"endpoints", "path"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_GlusterfsVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"endpoints", "path"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_HTTPGetAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HTTPGetAction describes an action based on HTTP Get requests.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to access on the HTTP server.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scheme": {
						SchemaProps: spec.SchemaProps{
							Description: "Scheme to use for connecting to the host. Defaults to HTTP.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Custom headers to set in the request. HTTP allows repeated headers.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.HTTPHeader"),
									},
								},
							},
						},
					},
				},
				Required: []string{"port"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.HTTPHeader", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_k8sio_api_core_v1_HTTPHeader(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HTTPHeader describes a custom header to be used in HTTP probes",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The header field name",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "The header field value",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Handler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Handler defines a specific action that should be taken",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exec": {
						SchemaProps: spec.SchemaProps{
							Description: "One and only one of the following should be specified. Exec specifies the action to take.",
							Ref:         ref("k8s.io/api/core/v1.ExecAction"),
						},
					},
					"httpGet": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPGet specifies the http request to perform.",
							Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
						},
					},
					"tcpSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
							Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
	}
}

func schema_k8sio_api_core_v1_HostAlias(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ip": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the host file entry.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostnames": {
						SchemaProps: spec.SchemaProps{
							Description: "Hostnames for the above IP address.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_HostPathVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ISCSIPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetPortal": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"iqn": {
						SchemaProps: spec.SchemaProps{
							Description: "Target iSCSI Qualified Name.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lun": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Target Lun number.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"iscsiInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"portals": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"chapAuthDiscovery": {
						SchemaProps: spec.SchemaProps{
							Description: "whether support iSCSI Discovery CHAP authentication",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"chapAuthSession": {
						SchemaProps: spec.SchemaProps{
							Description: "whether support iSCSI Session CHAP authentication",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CHAP Secret for iSCSI target and initiator authentication",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"initiatorName": {
						SchemaProps: spec.SchemaProps{
							Description: "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"targetPortal", "iqn", "lun"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_k8sio_api_core_v1_ISCSIVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetPortal": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"iqn": {
						SchemaProps: spec.SchemaProps{
							Description: "Target iSCSI Qualified Name.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lun": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Target Lun number.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"iscsiInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"portals": {
						SchemaProps: spec.SchemaProps{
							Description: "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"chapAuthDiscovery": {
						SchemaProps: spec.SchemaProps{
							Description: "whether support iSCSI Discovery CHAP authentication",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"chapAuthSession": {
						SchemaProps: spec.SchemaProps{
							Description: "whether support iSCSI Session CHAP authentication",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CHAP Secret for iSCSI target and initiator authentication",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"initiatorName": {
						SchemaProps: spec.SchemaProps{
							Description: "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"targetPortal", "iqn", "lun"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_KeyToPath(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Maps a string key to a path within a volume.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The key to project.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"key", "path"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Lifecycle(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"postStart": {
						SchemaProps: spec.SchemaProps{
							Description: "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
							Ref:         ref("k8s.io/api/core/v1.Handler"),
						},
					},
					"preStop": {
						SchemaProps: spec.SchemaProps{
							Description: "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
							Ref:         ref("k8s.io/api/core/v1.Handler"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Handler"},
	}
}

func schema_k8sio_api_core_v1_LimitRange(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.LimitRangeSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LimitRangeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_LimitRangeItem(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of resource that this limit applies to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"max": {
						SchemaProps: spec.SchemaProps{
							Description: "Max usage constraints on this kind by resource name.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"min": {
						SchemaProps: spec.SchemaProps{
							Description: "Min usage constraints on this kind by resource name.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"default": {
						SchemaProps: spec.SchemaProps{
							Description: "Default resource requirement limit value by resource name if resource limit is omitted.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"defaultRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"maxLimitRequestRatio": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
				},
				Required: []string{"type"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_LimitRangeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LimitRangeList is a list of LimitRange items.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LimitRange"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LimitRange", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_LimitRangeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"limits": {
						SchemaProps: spec.SchemaProps{
							Description: "Limits is the list of LimitRangeItem objects that are enforced.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LimitRangeItem"),
									},
								},
							},
						},
					},
				},
				Required: []string{"limits"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LimitRangeItem"},
	}
}

func schema_k8sio_api_core_v1_List(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "List holds a list of objects, which may not be known by the server.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_k8sio_api_core_v1_LoadBalancerIngress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ip": {
						SchemaProps: spec.SchemaProps{
							Description: "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PortStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PortStatus"},
	}
}

func schema_k8sio_api_core_v1_LoadBalancerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LoadBalancerStatus represents the status of a load-balancer.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LoadBalancerIngress"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LoadBalancerIngress"},
	}
}

func schema_k8sio_api_core_v1_LocalObjectReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_LocalVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Local represents directly-attached storage with node affinity (Beta feature)",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_NFSVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"server": {
						SchemaProps: spec.SchemaProps{
							Description: "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"server", "path"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Namespace(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.NamespaceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.NamespaceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NamespaceSpec", "k8s.io/api/core/v1.NamespaceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_NamespaceCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NamespaceCondition contains details about state of namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of namespace controller condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_NamespaceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NamespaceList is a list of Namespaces.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Namespace"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Namespace", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_NamespaceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NamespaceSpec describes the attributes on a Namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"finalizers": {
						SchemaProps: spec.SchemaProps{
							Description: "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_NamespaceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NamespaceStatus is information about the current status of a Namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a namespace's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.NamespaceCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NamespaceCondition"},
	}
}

func schema_k8sio_api_core_v1_Node(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.NodeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.NodeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSpec", "k8s.io/api/core/v1.NodeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_NodeAddress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeAddress contains information for the node's address.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Node address type, one of Hostname, ExternalIP or InternalIP.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "The node address.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "address"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_NodeAffinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Node affinity is a group of node affinity scheduling rules.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"requiredDuringSchedulingIgnoredDuringExecution": {
						SchemaProps: spec.SchemaProps{
							Description: "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
							Ref:         ref("k8s.io/api/core/v1.NodeSelector"),
						},
					},
					"preferredDuringSchedulingIgnoredDuringExecution": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PreferredSchedulingTerm"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSelector", "k8s.io/api/core/v1.PreferredSchedulingTerm"},
	}
}

func schema_k8sio_api_core_v1_NodeCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeCondition contains condition information for a node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of node condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastHeartbeatTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time we got an update on a given condition.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transit from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "(brief) reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human readable message indicating details about last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_NodeConfigSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"configMap": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMap is a reference to a Node's ConfigMap",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapNodeConfigSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapNodeConfigSource"},
	}
}

func schema_k8sio_api_core_v1_NodeConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"assigned": {
						SchemaProps: spec.SchemaProps{
							Description: "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.",
							Ref:         ref("k8s.io/api/core/v1.NodeConfigSource"),
						},
					},
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.",
							Ref:         ref("k8s.io/api/core/v1.NodeConfigSource"),
						},
					},
					"lastKnownGood": {
						SchemaProps: spec.SchemaProps{
							Description: "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.",
							Ref:         ref("k8s.io/api/core/v1.NodeConfigSource"),
						},
					},
					"error": {
						SchemaProps: spec.SchemaProps{
							Description: "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeConfigSource"},
	}
}

func schema_k8sio_api_core_v1_NodeDaemonEndpoints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kubeletEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint on which Kubelet is listening.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.DaemonEndpoint"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.DaemonEndpoint"},
	}
}

func schema_k8sio_api_core_v1_NodeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeList is the whole list of all Nodes which have been registered with master.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of nodes",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Node"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Node", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_NodeProxyOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeProxyOptions is the query options to a Node's proxy call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the URL path to use for the current proxy request to node.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_NodeResources(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeResources is an object for conveying resource information about a node. see https://kubernetes.io/docs/concepts/architecture/nodes/#capacity for more details.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Capacity": {
						SchemaProps: spec.SchemaProps{
							Description: "Capacity represents the available resources of a node",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
				},
				Required: []string{"Capacity"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_NodeSelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeSelectorTerms": {
						SchemaProps: spec.SchemaProps{
							Description: "Required. A list of node selector terms. The terms are ORed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.NodeSelectorTerm"),
									},
								},
							},
						},
					},
				},
				Required: []string{"nodeSelectorTerms"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSelectorTerm"},
	}
}

func schema_k8sio_api_core_v1_NodeSelectorRequirement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The label key that the selector applies to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"key", "operator"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_NodeSelectorTerm(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"matchExpressions": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of node selector requirements by node's labels.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.NodeSelectorRequirement"),
									},
								},
							},
						},
					},
					"matchFields": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of node selector requirements by node's fields.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.NodeSelectorRequirement"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSelectorRequirement"},
	}
}

func schema_k8sio_api_core_v1_NodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeSpec describes the attributes that a node is created with.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"podCIDR": {
						SchemaProps: spec.SchemaProps{
							Description: "PodCIDR represents the pod IP range assigned to the node.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"podCIDRs": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-strategy": "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"providerID": {
						SchemaProps: spec.SchemaProps{
							Description: "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"unschedulable": {
						SchemaProps: spec.SchemaProps{
							Description: "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the node's taints.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"configSource": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field",
							Ref:         ref("k8s.io/api/core/v1.NodeConfigSource"),
						},
					},
					"externalID": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeConfigSource", "k8s.io/api/core/v1.Taint"},
	}
}

func schema_k8sio_api_core_v1_NodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeStatus is information about the current status of a node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"capacity": {
						SchemaProps: spec.SchemaProps{
							Description: "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"allocatable": {
						SchemaProps: spec.SchemaProps{
							Description: "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.NodeCondition"),
									},
								},
							},
						},
					},
					"addresses": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.NodeAddress"),
									},
								},
							},
						},
					},
					"daemonEndpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoints of daemons running on the Node.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.NodeDaemonEndpoints"),
						},
					},
					"nodeInfo": {
						SchemaProps: spec.SchemaProps{
							Description: "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.NodeSystemInfo"),
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "List of container images on this node",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerImage"),
									},
								},
							},
						},
					},
					"volumesInUse": {
						SchemaProps: spec.SchemaProps{
							Description: "List of attachable volumes in use (mounted) by the node.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"volumesAttached": {
						SchemaProps: spec.SchemaProps{
							Description: "List of volumes that are attached to the node.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.AttachedVolume"),
									},
								},
							},
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the config assigned to the node via the dynamic Kubelet config feature.",
							Ref:         ref("k8s.io/api/core/v1.NodeConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.AttachedVolume", "k8s.io/api/core/v1.ContainerImage", "k8s.io/api/core/v1.NodeAddress", "k8s.io/api/core/v1.NodeCondition", "k8s.io/api/core/v1.NodeConfigStatus", "k8s.io/api/core/v1.NodeDaemonEndpoints", "k8s.io/api/core/v1.NodeSystemInfo", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_NodeSystemInfo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"machineID": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"systemUUID": {
						SchemaProps: spec.SchemaProps{
							Description: "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bootID": {
						SchemaProps: spec.SchemaProps{
							Description: "Boot ID reported by the node.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kernelVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"osImage": {
						SchemaProps: spec.SchemaProps{
							Description: "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerRuntimeVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeletVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet Version reported by the node.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeProxyVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeProxy Version reported by the node.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operatingSystem": {
						SchemaProps: spec.SchemaProps{
							Description: "The Operating System reported by the node",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"architecture": {
						SchemaProps: spec.SchemaProps{
							Description: "The Architecture reported by the node",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"machineID", "systemUUID", "bootID", "kernelVersion", "osImage", "containerRuntimeVersion", "kubeletVersion", "kubeProxyVersion", "operatingSystem", "architecture"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ObjectFieldSelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ObjectFieldSelector selects an APIVersioned field of an object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path of the field to select in the specified API version.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"fieldPath"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ObjectReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ObjectReference contains enough information to let you inspect or modify the referred object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldPath": {
						SchemaProps: spec.SchemaProps{
							Description: "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PersistentVolume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeSpec", "k8s.io/api/core/v1.PersistentVolumeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeClaim(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.PersistentVolumeClaimStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeClaimCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaimCondition contails details about state of pvc",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time we probed the condition.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human-readable message indicating details about last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeClaimList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeClaimSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"accessModes": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "A label query over volumes to consider for binding.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"volumeName": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeName is the binding reference to the PersistentVolume backing this claim.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeMode": {
						SchemaProps: spec.SchemaProps{
							Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataSource": {
						SchemaProps: spec.SchemaProps{
							Description: "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
							Ref:         ref("k8s.io/api/core/v1.TypedLocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.TypedLocalObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeClaimStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase represents the current phase of PersistentVolumeClaim.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessModes": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"capacity": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the actual resources of the underlying volume.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PersistentVolumeClaimCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaimCondition", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeClaimTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeClaimVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"claimName": {
						SchemaProps: spec.SchemaProps{
							Description: "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Will force the ReadOnly setting in VolumeMounts. Default false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"claimName"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeList is a list of PersistentVolume items.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PersistentVolume"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolume", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeSource is similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"gcePersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
						},
					},
					"awsElasticBlockStore": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
						},
					},
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
							Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
						},
					},
					"glusterfs": {
						SchemaProps: spec.SchemaProps{
							Description: "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
							Ref:         ref("k8s.io/api/core/v1.GlusterfsPersistentVolumeSource"),
						},
					},
					"nfs": {
						SchemaProps: spec.SchemaProps{
							Description: "NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
						},
					},
					"rbd": {
						SchemaProps: spec.SchemaProps{
							Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
							Ref:         ref("k8s.io/api/core/v1.RBDPersistentVolumeSource"),
						},
					},
					"iscsi": {
						SchemaProps: spec.SchemaProps{
							Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
							Ref:         ref("k8s.io/api/core/v1.ISCSIPersistentVolumeSource"),
						},
					},
					"cinder": {
						SchemaProps: spec.SchemaProps{
							Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Ref:         ref("k8s.io/api/core/v1.CinderPersistentVolumeSource"),
						},
					},
					"cephfs": {
						SchemaProps: spec.SchemaProps{
							Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.CephFSPersistentVolumeSource"),
						},
					},
					"fc": {
						SchemaProps: spec.SchemaProps{
							Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
							Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
						},
					},
					"flocker": {
						SchemaProps: spec.SchemaProps{
							Description: "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
							Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
						},
					},
					"flexVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
							Ref:         ref("k8s.io/api/core/v1.FlexPersistentVolumeSource"),
						},
					},
					"azureFile": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureFilePersistentVolumeSource"),
						},
					},
					"vsphereVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
						},
					},
					"quobyte": {
						SchemaProps: spec.SchemaProps{
							Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
						},
					},
					"azureDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
						},
					},
					"photonPersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
						},
					},
					"portworxVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
						},
					},
					"scaleIO": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.ScaleIOPersistentVolumeSource"),
						},
					},
					"local": {
						SchemaProps: spec.SchemaProps{
							Description: "Local represents directly-attached storage with node affinity",
							Ref:         ref("k8s.io/api/core/v1.LocalVolumeSource"),
						},
					},
					"storageos": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md",
							Ref:         ref("k8s.io/api/core/v1.StorageOSPersistentVolumeSource"),
						},
					},
					"csi": {
						SchemaProps: spec.SchemaProps{
							Description: "CSI represents storage that is handled by an external CSI driver (Beta feature).",
							Ref:         ref("k8s.io/api/core/v1.CSIPersistentVolumeSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFilePersistentVolumeSource", "k8s.io/api/core/v1.CSIPersistentVolumeSource", "k8s.io/api/core/v1.CephFSPersistentVolumeSource", "k8s.io/api/core/v1.CinderPersistentVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexPersistentVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GlusterfsPersistentVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIPersistentVolumeSource", "k8s.io/api/core/v1.LocalVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDPersistentVolumeSource", "k8s.io/api/core/v1.ScaleIOPersistentVolumeSource", "k8s.io/api/core/v1.StorageOSPersistentVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeSpec is the specification of a persistent volume.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"capacity": {
						SchemaProps: spec.SchemaProps{
							Description: "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"gcePersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
						},
					},
					"awsElasticBlockStore": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
						},
					},
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
							Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
						},
					},
					"glusterfs": {
						SchemaProps: spec.SchemaProps{
							Description: "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
							Ref:         ref("k8s.io/api/core/v1.GlusterfsPersistentVolumeSource"),
						},
					},
					"nfs": {
						SchemaProps: spec.SchemaProps{
							Description: "NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
						},
					},
					"rbd": {
						SchemaProps: spec.SchemaProps{
							Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
							Ref:         ref("k8s.io/api/core/v1.RBDPersistentVolumeSource"),
						},
					},
					"iscsi": {
						SchemaProps: spec.SchemaProps{
							Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
							Ref:         ref("k8s.io/api/core/v1.ISCSIPersistentVolumeSource"),
						},
					},
					"cinder": {
						SchemaProps: spec.SchemaProps{
							Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Ref:         ref("k8s.io/api/core/v1.CinderPersistentVolumeSource"),
						},
					},
					"cephfs": {
						SchemaProps: spec.SchemaProps{
							Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.CephFSPersistentVolumeSource"),
						},
					},
					"fc": {
						SchemaProps: spec.SchemaProps{
							Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
							Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
						},
					},
					"flocker": {
						SchemaProps: spec.SchemaProps{
							Description: "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
							Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
						},
					},
					"flexVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
							Ref:         ref("k8s.io/api/core/v1.FlexPersistentVolumeSource"),
						},
					},
					"azureFile": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureFilePersistentVolumeSource"),
						},
					},
					"vsphereVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
						},
					},
					"quobyte": {
						SchemaProps: spec.SchemaProps{
							Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
						},
					},
					"azureDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
						},
					},
					"photonPersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
						},
					},
					"portworxVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
						},
					},
					"scaleIO": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.ScaleIOPersistentVolumeSource"),
						},
					},
					"local": {
						SchemaProps: spec.SchemaProps{
							Description: "Local represents directly-attached storage with node affinity",
							Ref:         ref("k8s.io/api/core/v1.LocalVolumeSource"),
						},
					},
					"storageos": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md",
							Ref:         ref("k8s.io/api/core/v1.StorageOSPersistentVolumeSource"),
						},
					},
					"csi": {
						SchemaProps: spec.SchemaProps{
							Description: "CSI represents storage that is handled by an external CSI driver (Beta feature).",
							Ref:         ref("k8s.io/api/core/v1.CSIPersistentVolumeSource"),
						},
					},
					"accessModes": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"claimRef": {
						SchemaProps: spec.SchemaProps{
							Description: "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"persistentVolumeReclaimPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mountOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"volumeMode": {
						SchemaProps: spec.SchemaProps{
							Description: "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.",
							Ref:         ref("k8s.io/api/core/v1.VolumeNodeAffinity"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFilePersistentVolumeSource", "k8s.io/api/core/v1.CSIPersistentVolumeSource", "k8s.io/api/core/v1.CephFSPersistentVolumeSource", "k8s.io/api/core/v1.CinderPersistentVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexPersistentVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GlusterfsPersistentVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIPersistentVolumeSource", "k8s.io/api/core/v1.LocalVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.ObjectReference", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDPersistentVolumeSource", "k8s.io/api/core/v1.ScaleIOPersistentVolumeSource", "k8s.io/api/core/v1.StorageOSPersistentVolumeSource", "k8s.io/api/core/v1.VolumeNodeAffinity", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_PersistentVolumeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeStatus is the current status of a persistent volume.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable message indicating details about why the volume is in this state.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PhotonPersistentDiskVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Photon Controller persistent disk resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pdID": {
						SchemaProps: spec.SchemaProps{
							Description: "ID that identifies Photon Controller persistent disk",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"pdID"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Pod(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PodSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PodStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodSpec", "k8s.io/api/core/v1.PodStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_PodAffinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pod affinity is a group of inter pod affinity scheduling rules.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"requiredDuringSchedulingIgnoredDuringExecution": {
						SchemaProps: spec.SchemaProps{
							Description: "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PodAffinityTerm"),
									},
								},
							},
						},
					},
					"preferredDuringSchedulingIgnoredDuringExecution": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.WeightedPodAffinityTerm"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodAffinityTerm", "k8s.io/api/core/v1.WeightedPodAffinityTerm"},
	}
}

func schema_k8sio_api_core_v1_PodAffinityTerm(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"labelSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "A label query over a set of resources, in this case pods.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
					"namespaces": {
						SchemaProps: spec.SchemaProps{
							Description: "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"topologyKey": {
						SchemaProps: spec.SchemaProps{
							Description: "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaceSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
				},
				Required: []string{"topologyKey"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema_k8sio_api_core_v1_PodAntiAffinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"requiredDuringSchedulingIgnoredDuringExecution": {
						SchemaProps: spec.SchemaProps{
							Description: "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PodAffinityTerm"),
									},
								},
							},
						},
					},
					"preferredDuringSchedulingIgnoredDuringExecution": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.WeightedPodAffinityTerm"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodAffinityTerm", "k8s.io/api/core/v1.WeightedPodAffinityTerm"},
	}
}

func schema_k8sio_api_core_v1_PodAttachOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodAttachOptions is the query options to a Pod's remote attach call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stdin": {
						SchemaProps: spec.SchemaProps{
							Description: "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stdout": {
						SchemaProps: spec.SchemaProps{
							Description: "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stderr": {
						SchemaProps: spec.SchemaProps{
							Description: "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tty": {
						SchemaProps: spec.SchemaProps{
							Description: "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"container": {
						SchemaProps: spec.SchemaProps{
							Description: "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PodCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodCondition contains details for the current condition of this pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time we probed the condition.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique, one-word, CamelCase reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human-readable message indicating details about last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_PodDNSConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nameservers": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"searches": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PodDNSConfigOption"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodDNSConfigOption"},
	}
}

func schema_k8sio_api_core_v1_PodDNSConfigOption(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Required.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PodExecOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodExecOptions is the query options to a Pod's remote exec call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stdin": {
						SchemaProps: spec.SchemaProps{
							Description: "Redirect the standard input stream of the pod for this call. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stdout": {
						SchemaProps: spec.SchemaProps{
							Description: "Redirect the standard output stream of the pod for this call. Defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"stderr": {
						SchemaProps: spec.SchemaProps{
							Description: "Redirect the standard error stream of the pod for this call. Defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tty": {
						SchemaProps: spec.SchemaProps{
							Description: "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"container": {
						SchemaProps: spec.SchemaProps{
							Description: "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Command is the remote command to execute. argv array. Not executed within a shell.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"command"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PodIP(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IP address information for entries in the (plural) PodIPs field. Each entry includes:\n   IP: An IP address allocated to the pod. Routable at least within the cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ip": {
						SchemaProps: spec.SchemaProps{
							Description: "ip is an IP address (IPv4 or IPv6) assigned to the pod",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PodList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodList is a list of Pods.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Pod"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Pod", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_PodLogOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodLogOptions is the query options for a Pod's logs REST call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"container": {
						SchemaProps: spec.SchemaProps{
							Description: "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"follow": {
						SchemaProps: spec.SchemaProps{
							Description: "Follow the log stream of the pod. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"previous": {
						SchemaProps: spec.SchemaProps{
							Description: "Return previous terminated container logs. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"sinceSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"sinceTime": {
						SchemaProps: spec.SchemaProps{
							Description: "An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"timestamps": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tailLines": {
						SchemaProps: spec.SchemaProps{
							Description: "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"limitBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"insecureSkipTLSVerifyBackend": {
						SchemaProps: spec.SchemaProps{
							Description: "insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_PodPortForwardOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodPortForwardOptions is the query options to a Pod's port forward call when using WebSockets. The `port` query parameter must specify the port or ports (comma separated) to forward over. Port forwarding over SPDY does not use these options. It requires the port to be passed in the `port` header as part of request.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "List of ports to forward Required when using WebSockets",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PodProxyOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodProxyOptions is the query options to a Pod's proxy call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the URL path to use for the current proxy request to pod.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PodReadinessGate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodReadinessGate contains the reference to a pod condition",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditionType": {
						SchemaProps: spec.SchemaProps{
							Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"conditionType"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PodSecurityContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"seLinuxOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
							Ref:         ref("k8s.io/api/core/v1.SELinuxOptions"),
						},
					},
					"windowsOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Ref:         ref("k8s.io/api/core/v1.WindowsSecurityContextOptions"),
						},
					},
					"runAsUser": {
						SchemaProps: spec.SchemaProps{
							Description: "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"runAsGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"runAsNonRoot": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"supplementalGroups": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int64",
									},
								},
							},
						},
					},
					"fsGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"sysctls": {
						SchemaProps: spec.SchemaProps{
							Description: "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Sysctl"),
									},
								},
							},
						},
					},
					"fsGroupChangePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"seccompProfile": {
						SchemaProps: spec.SchemaProps{
							Description: "The seccomp options to use by the containers in this pod.",
							Ref:         ref("k8s.io/api/core/v1.SeccompProfile"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SELinuxOptions", "k8s.io/api/core/v1.SeccompProfile", "k8s.io/api/core/v1.Sysctl", "k8s.io/api/core/v1.WindowsSecurityContextOptions"},
	}
}

func schema_k8sio_api_core_v1_PodSignature(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Describes the class of pods that should avoid this node. Exactly one field should be set.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"podController": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to controller whose pods should avoid this node.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"},
	}
}

func schema_k8sio_api_core_v1_PodSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodSpec is a description of a pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge,retainKeys",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"initContainers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"containers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"ephemeralContainers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EphemeralContainer"),
									},
								},
							},
						},
					},
					"restartPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"terminationGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"activeDeadlineSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"dnsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"automountServiceAccountToken": {
						SchemaProps: spec.SchemaProps{
							Description: "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostPID": {
						SchemaProps: spec.SchemaProps{
							Description: "Use the host's pid namespace. Optional: Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostIPC": {
						SchemaProps: spec.SchemaProps{
							Description: "Use the host's ipc namespace. Optional: Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"shareProcessNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"imagePullSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subdomain": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"schedulerName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"hostAliases": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "ip",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.HostAlias"),
									},
								},
							},
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"dnsConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
							Ref:         ref("k8s.io/api/core/v1.PodDNSConfig"),
						},
					},
					"readinessGates": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PodReadinessGate"),
									},
								},
							},
						},
					},
					"runtimeClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableServiceLinks": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"preemptionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overhead": {
						SchemaProps: spec.SchemaProps{
							Description: "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"topologySpreadConstraints": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"topologyKey",
									"whenUnsatisfiable",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "topologyKey",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.TopologySpreadConstraint"),
									},
								},
							},
						},
					},
					"setHostnameAsFQDN": {
						SchemaProps: spec.SchemaProps{
							Description: "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"containers"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.EphemeralContainer", "k8s.io/api/core/v1.HostAlias", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PodDNSConfig", "k8s.io/api/core/v1.PodReadinessGate", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.TopologySpreadConstraint", "k8s.io/api/core/v1.Volume", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_PodStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PodCondition"),
									},
								},
							},
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about why the pod is in this condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nominatedNodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostIP": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"podIP": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"podIPs": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "ip",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PodIP"),
									},
								},
							},
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"initContainerStatuses": {
						SchemaProps: spec.SchemaProps{
							Description: "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerStatus"),
									},
								},
							},
						},
					},
					"containerStatuses": {
						SchemaProps: spec.SchemaProps{
							Description: "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerStatus"),
									},
								},
							},
						},
					},
					"qosClass": {
						SchemaProps: spec.SchemaProps{
							Description: "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ephemeralContainerStatuses": {
						SchemaProps: spec.SchemaProps{
							Description: "Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ContainerStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerStatus", "k8s.io/api/core/v1.PodCondition", "k8s.io/api/core/v1.PodIP", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_PodStatusResult(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodStatusResult is a wrapper for PodStatus returned by kubelet that can be encode/decoded",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PodStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_PodTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodTemplate describes a template for creating copies of a predefined pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PodTemplateSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodTemplateSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_PodTemplateList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodTemplateList is a list of PodTemplates.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of pod templates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.PodTemplate"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodTemplate", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_PodTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodTemplateSpec describes the data a pod should have when created from a template",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PodSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_PortStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port is the port number of the service port of which status is recorded here",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"error": {
						SchemaProps: spec.SchemaProps{
							Description: "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"port", "protocol"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PortworxVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PortworxVolumeSource represents a Portworx volume resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumeID": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeID uniquely identifies a Portworx volume",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"volumeID"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_PreferAvoidPodsEntry(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Describes a class of pods that should avoid this node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"podSignature": {
						SchemaProps: spec.SchemaProps{
							Description: "The class of pods.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PodSignature"),
						},
					},
					"evictionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Time at which this entry was added to the list.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "(brief) reason why this entry was added to the list.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human readable message indicating why this entry was added to the list.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"podSignature"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodSignature", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_PreferredSchedulingTerm(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"preference": {
						SchemaProps: spec.SchemaProps{
							Description: "A node selector term, associated with the corresponding weight.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.NodeSelectorTerm"),
						},
					},
				},
				Required: []string{"weight", "preference"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSelectorTerm"},
	}
}

func schema_k8sio_api_core_v1_Probe(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exec": {
						SchemaProps: spec.SchemaProps{
							Description: "One and only one of the following should be specified. Exec specifies the action to take.",
							Ref:         ref("k8s.io/api/core/v1.ExecAction"),
						},
					},
					"httpGet": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPGet specifies the http request to perform.",
							Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
						},
					},
					"tcpSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
							Ref:         ref("k8s.io/api/core/v1.TCPSocketAction"),
						},
					},
					"initialDelaySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"periodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"successThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"failureThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"terminationGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ExecAction", "k8s.io/api/core/v1.HTTPGetAction", "k8s.io/api/core/v1.TCPSocketAction"},
	}
}

func schema_k8sio_api_core_v1_ProjectedVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a projected volume source",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"sources": {
						SchemaProps: spec.SchemaProps{
							Description: "list of volume projections",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeProjection"),
									},
								},
							},
						},
					},
					"defaultMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.VolumeProjection"},
	}
}

func schema_k8sio_api_core_v1_QuobyteVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volume": {
						SchemaProps: spec.SchemaProps{
							Description: "Volume is a string that references an already created Quobyte volume by name.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "User to map volume access to Defaults to serivceaccount user",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "Group to map volume access to Default is no group",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tenant": {
						SchemaProps: spec.SchemaProps{
							Description: "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"registry", "volume"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_RBDPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"monitors": {
						SchemaProps: spec.SchemaProps{
							Description: "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pool": {
						SchemaProps: spec.SchemaProps{
							Description: "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyring": {
						SchemaProps: spec.SchemaProps{
							Description: "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"monitors", "image"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_k8sio_api_core_v1_RBDVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"monitors": {
						SchemaProps: spec.SchemaProps{
							Description: "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pool": {
						SchemaProps: spec.SchemaProps{
							Description: "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyring": {
						SchemaProps: spec.SchemaProps{
							Description: "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"monitors", "image"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_RangeAllocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RangeAllocation is not a public type.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"range": {
						SchemaProps: spec.SchemaProps{
							Description: "Range is string that identifies the range represented by 'data'.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Data is a bit array containing all allocated addresses in the previous segment.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
				},
				Required: []string{"range", "data"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_ReplicationController(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplicationController represents the configuration of a replication controller.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ReplicationControllerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ReplicationControllerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ReplicationControllerSpec", "k8s.io/api/core/v1.ReplicationControllerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_ReplicationControllerCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplicationControllerCondition describes the state of a replication controller at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of replication controller condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_ReplicationControllerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplicationControllerList is a collection of replication controllers.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ReplicationController"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ReplicationController", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_ReplicationControllerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplicationControllerSpec is the specification of a replication controller.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"minReadySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
							Ref:         ref("k8s.io/api/core/v1.PodTemplateSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodTemplateSpec"},
	}
}

func schema_k8sio_api_core_v1_ReplicationControllerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplicationControllerStatus represents the current status of a replication controller.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fullyLabeledReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pods that have labels matching the labels of the pod template of the replication controller.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readyReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of ready replicas for this replication controller.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"availableReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration reflects the generation of the most recently observed replication controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Represents the latest available observations of a replication controller's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ReplicationControllerCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"replicas"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ReplicationControllerCondition"},
	}
}

func schema_k8sio_api_core_v1_ResourceFieldSelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"containerName": {
						SchemaProps: spec.SchemaProps{
							Description: "Container name: required for volumes, optional for env vars",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Required: resource to select",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"divisor": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the output format of the exposed resources, defaults to \"1\"",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
				},
				Required: []string{"resource"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_ResourceQuota(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceQuota sets aggregate quota restrictions enforced per namespace",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceQuotaSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ResourceQuotaStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceQuotaSpec", "k8s.io/api/core/v1.ResourceQuotaStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_ResourceQuotaList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceQuotaList is a list of ResourceQuota items.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ResourceQuota"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ResourceQuota", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_ResourceQuotaSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hard": {
						SchemaProps: spec.SchemaProps{
							Description: "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"scopes": {
						SchemaProps: spec.SchemaProps{
							Description: "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"scopeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
							Ref:         ref("k8s.io/api/core/v1.ScopeSelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ScopeSelector", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_ResourceQuotaStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceQuotaStatus defines the enforced hard limits and observed use.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hard": {
						SchemaProps: spec.SchemaProps{
							Description: "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"used": {
						SchemaProps: spec.SchemaProps{
							Description: "Used is the current observed total usage of the resource in the namespace.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_ResourceRequirements(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceRequirements describes the compute resource requirements.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"limits": {
						SchemaProps: spec.SchemaProps{
							Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"requests": {
						SchemaProps: spec.SchemaProps{
							Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_k8sio_api_core_v1_SELinuxOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SELinuxOptions are the labels to be applied to the container",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "User is a SELinux user label that applies to the container.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "Role is a SELinux role label that applies to the container.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is a SELinux type label that applies to the container.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"level": {
						SchemaProps: spec.SchemaProps{
							Description: "Level is SELinux level label that applies to the container.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ScaleIOPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "The host address of the ScaleIO API Gateway.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"system": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the storage system as configured in ScaleIO.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"sslEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Flag to enable/disable SSL communication with Gateway, default false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"protectionDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the ScaleIO Protection Domain for the configured storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storagePool": {
						SchemaProps: spec.SchemaProps{
							Description: "The ScaleIO Storage Pool associated with the protection domain.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"gateway", "system", "secretRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_k8sio_api_core_v1_ScaleIOVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ScaleIOVolumeSource represents a persistent ScaleIO volume",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "The host address of the ScaleIO API Gateway.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"system": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the storage system as configured in ScaleIO.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"sslEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Flag to enable/disable SSL communication with Gateway, default false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"protectionDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the ScaleIO Protection Domain for the configured storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storagePool": {
						SchemaProps: spec.SchemaProps{
							Description: "The ScaleIO Storage Pool associated with the protection domain.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"gateway", "system", "secretRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_ScopeSelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"matchExpressions": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of scope selector requirements by scope of the resources.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ScopedResourceSelectorRequirement"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ScopedResourceSelectorRequirement"},
	}
}

func schema_k8sio_api_core_v1_ScopedResourceSelectorRequirement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"scopeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the scope that the selector applies to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"scopeName", "operator"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_SeccompProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localhostProfile": {
						SchemaProps: spec.SchemaProps{
							Description: "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type"},
			},
			VendorExtensible: spec.VendorExtensible{
				Extensions: spec.Extensions{
					"x-kubernetes-unions": []interface{}{
						map[string]interface{}{
							"discriminator": "type",
							"fields-to-discriminateBy": map[string]interface{}{
								"localhostProfile": "LocalhostProfile",
							},
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Secret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"immutable": {
						SchemaProps: spec.SchemaProps{
							Description: "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "byte",
									},
								},
							},
						},
					},
					"stringData": {
						SchemaProps: spec.SchemaProps{
							Description: "stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to facilitate programmatic handling of secret data.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_SecretEnvSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the Secret must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_SecretKeySelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretKeySelector selects a key of a Secret.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The key of the secret to select from.  Must be a valid secret key.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the Secret or its key must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"key"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_SecretList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretList is a list of Secret.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Secret"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Secret", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_SecretProjection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.KeyToPath"),
									},
								},
							},
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the Secret or its key must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.KeyToPath"},
	}
}

func schema_k8sio_api_core_v1_SecretReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is unique within a namespace to reference a secret resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace defines the space within which the secret name must be unique.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_SecretVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.KeyToPath"),
									},
								},
							},
						},
					},
					"defaultMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify whether the Secret or its keys must be defined",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.KeyToPath"},
	}
}

func schema_k8sio_api_core_v1_SecurityContext(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"capabilities": {
						SchemaProps: spec.SchemaProps{
							Description: "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
							Ref:         ref("k8s.io/api/core/v1.Capabilities"),
						},
					},
					"privileged": {
						SchemaProps: spec.SchemaProps{
							Description: "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"seLinuxOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Ref:         ref("k8s.io/api/core/v1.SELinuxOptions"),
						},
					},
					"windowsOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Ref:         ref("k8s.io/api/core/v1.WindowsSecurityContextOptions"),
						},
					},
					"runAsUser": {
						SchemaProps: spec.SchemaProps{
							Description: "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"runAsGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"runAsNonRoot": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"readOnlyRootFilesystem": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether this container has a read-only root filesystem. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowPrivilegeEscalation": {
						SchemaProps: spec.SchemaProps{
							Description: "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"procMount": {
						SchemaProps: spec.SchemaProps{
							Description: "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"seccompProfile": {
						SchemaProps: spec.SchemaProps{
							Description: "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.",
							Ref:         ref("k8s.io/api/core/v1.SeccompProfile"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Capabilities", "k8s.io/api/core/v1.SELinuxOptions", "k8s.io/api/core/v1.SeccompProfile", "k8s.io/api/core/v1.WindowsSecurityContextOptions"},
	}
}

func schema_k8sio_api_core_v1_SerializedReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SerializedReference is a reference to serialized object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reference": {
						SchemaProps: spec.SchemaProps{
							Description: "The reference to an object in the system.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_k8sio_api_core_v1_Service(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ServiceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ServiceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ServiceSpec", "k8s.io/api/core/v1.ServiceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_ServiceAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"secrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ObjectReference"),
									},
								},
							},
						},
					},
					"imagePullSecrets": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"automountServiceAccountToken": {
						SchemaProps: spec.SchemaProps{
							Description: "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_k8sio_api_core_v1_ServiceAccountList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccountList is a list of ServiceAccount objects",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ServiceAccount"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ServiceAccount", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_ServiceAccountTokenProjection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"audience": {
						SchemaProps: spec.SchemaProps{
							Description: "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expirationSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the path relative to the mount point of the file to project the token into.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ServiceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceList holds a list of services.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of services",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Service"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Service", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_k8sio_api_core_v1_ServicePort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServicePort contains information on service's port.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.",
							Default:     "TCP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port that will be exposed by this service.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"targetPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"port"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_k8sio_api_core_v1_ServiceProxyOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceProxyOptions is the query options to a Service's proxy call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_ServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceSpec describes the attributes that a user creates on a service.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ports": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"port",
									"protocol",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "port",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.ServicePort"),
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"clusterIP": {
						SchemaProps: spec.SchemaProps{
							Description: "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterIPs": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nUnless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalIPs": {
						SchemaProps: spec.SchemaProps{
							Description: "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerIP": {
						SchemaProps: spec.SchemaProps{
							Description: "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerSourceRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"externalName": {
						SchemaProps: spec.SchemaProps{
							Description: "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalTrafficPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthCheckNodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"publishNotReadyAddresses": {
						SchemaProps: spec.SchemaProps{
							Description: "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"sessionAffinityConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "sessionAffinityConfig contains the configurations of session affinity.",
							Ref:         ref("k8s.io/api/core/v1.SessionAffinityConfig"),
						},
					},
					"topologyKeys": {
						SchemaProps: spec.SchemaProps{
							Description: "topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"ipFamilies": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"ipFamilyPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the \"IPv6DualStack\" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"allocateLoadBalancerNodePorts": {
						SchemaProps: spec.SchemaProps{
							Description: "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"loadBalancerClass": {
						SchemaProps: spec.SchemaProps{
							Description: "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"internalTrafficPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. \"Cluster\" routes internal traffic to a Service to all endpoints. \"Local\" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is \"Cluster\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ServicePort", "k8s.io/api/core/v1.SessionAffinityConfig"},
	}
}

func schema_k8sio_api_core_v1_ServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceStatus represents the current status of a service.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"loadBalancer": {
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancer contains the current status of the load-balancer, if one is present.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.LoadBalancerStatus"),
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Current service state",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LoadBalancerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Condition"},
	}
}

func schema_k8sio_api_core_v1_SessionAffinityConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SessionAffinityConfig represents the configurations of session affinity.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clientIP": {
						SchemaProps: spec.SchemaProps{
							Description: "clientIP contains the configurations of Client IP based session affinity.",
							Ref:         ref("k8s.io/api/core/v1.ClientIPConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ClientIPConfig"},
	}
}

func schema_k8sio_api_core_v1_StorageOSPersistentVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a StorageOS persistent volume resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumeName": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_k8sio_api_core_v1_StorageOSVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a StorageOS persistent volume resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumeName": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_k8sio_api_core_v1_Sysctl(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Sysctl defines a kernel parameter to be set",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of a property to set",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Value of a property to set",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_TCPSocketAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TCPSocketAction describes an action based on opening a socket",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional: Host name to connect to, defaults to the pod IP.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"port"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_k8sio_api_core_v1_Taint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "Required. The taint key to be applied to a node.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "The taint value corresponding to the taint key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"effect": {
						SchemaProps: spec.SchemaProps{
							Description: "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeAdded": {
						SchemaProps: spec.SchemaProps{
							Description: "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"key", "effect"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_k8sio_api_core_v1_Toleration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"effect": {
						SchemaProps: spec.SchemaProps{
							Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tolerationSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_api_core_v1_TopologySelectorLabelRequirement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The label key that the selector applies to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"key", "values"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_TopologySelectorTerm(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"matchLabelExpressions": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of topology selector requirements by labels.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.TopologySelectorLabelRequirement"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.TopologySelectorLabelRequirement"},
	}
}

func schema_k8sio_api_core_v1_TopologySpreadConstraint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"maxSkew": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"topologyKey": {
						SchemaProps: spec.SchemaProps{
							Description: "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"whenUnsatisfiable": {
						SchemaProps: spec.SchemaProps{
							Description: "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assigment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
				},
				Required: []string{"maxSkew", "topologyKey", "whenUnsatisfiable"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema_k8sio_api_core_v1_TypedLocalObjectReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is the type of resource being referenced",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of resource being referenced",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"kind", "name"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_Volume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
							Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
						},
					},
					"emptyDir": {
						SchemaProps: spec.SchemaProps{
							Description: "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
							Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
						},
					},
					"gcePersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
						},
					},
					"awsElasticBlockStore": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
						},
					},
					"gitRepo": {
						SchemaProps: spec.SchemaProps{
							Description: "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
							Ref:         ref("k8s.io/api/core/v1.GitRepoVolumeSource"),
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
							Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
						},
					},
					"nfs": {
						SchemaProps: spec.SchemaProps{
							Description: "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
						},
					},
					"iscsi": {
						SchemaProps: spec.SchemaProps{
							Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
							Ref:         ref("k8s.io/api/core/v1.ISCSIVolumeSource"),
						},
					},
					"glusterfs": {
						SchemaProps: spec.SchemaProps{
							Description: "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
							Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
						},
					},
					"persistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"),
						},
					},
					"rbd": {
						SchemaProps: spec.SchemaProps{
							Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
							Ref:         ref("k8s.io/api/core/v1.RBDVolumeSource"),
						},
					},
					"flexVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
							Ref:         ref("k8s.io/api/core/v1.FlexVolumeSource"),
						},
					},
					"cinder": {
						SchemaProps: spec.SchemaProps{
							Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
						},
					},
					"cephfs": {
						SchemaProps: spec.SchemaProps{
							Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.CephFSVolumeSource"),
						},
					},
					"flocker": {
						SchemaProps: spec.SchemaProps{
							Description: "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
							Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
						},
					},
					"downwardAPI": {
						SchemaProps: spec.SchemaProps{
							Description: "DownwardAPI represents downward API about the pod that should populate this volume",
							Ref:         ref("k8s.io/api/core/v1.DownwardAPIVolumeSource"),
						},
					},
					"fc": {
						SchemaProps: spec.SchemaProps{
							Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
							Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
						},
					},
					"azureFile": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureFileVolumeSource"),
						},
					},
					"configMap": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMap represents a configMap that should populate this volume",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapVolumeSource"),
						},
					},
					"vsphereVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
						},
					},
					"quobyte": {
						SchemaProps: spec.SchemaProps{
							Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
						},
					},
					"azureDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
						},
					},
					"photonPersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
						},
					},
					"projected": {
						SchemaProps: spec.SchemaProps{
							Description: "Items for all in one resources secrets, configmaps, and downward API",
							Ref:         ref("k8s.io/api/core/v1.ProjectedVolumeSource"),
						},
					},
					"portworxVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
						},
					},
					"scaleIO": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.ScaleIOVolumeSource"),
						},
					},
					"storageos": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.StorageOSVolumeSource"),
						},
					},
					"csi": {
						SchemaProps: spec.SchemaProps{
							Description: "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
							Ref:         ref("k8s.io/api/core/v1.CSIVolumeSource"),
						},
					},
					"ephemeral": {
						SchemaProps: spec.SchemaProps{
							Description: "Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.\n\nThis is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.",
							Ref:         ref("k8s.io/api/core/v1.EphemeralVolumeSource"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFileVolumeSource", "k8s.io/api/core/v1.CSIVolumeSource", "k8s.io/api/core/v1.CephFSVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.ConfigMapVolumeSource", "k8s.io/api/core/v1.DownwardAPIVolumeSource", "k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.EphemeralVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GitRepoVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.ProjectedVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDVolumeSource", "k8s.io/api/core/v1.ScaleIOVolumeSource", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.StorageOSVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
	}
}

func schema_k8sio_api_core_v1_VolumeDevice(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "volumeDevice describes a mapping of a raw block device within a container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "name must match the name of a persistentVolumeClaim in the pod",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devicePath": {
						SchemaProps: spec.SchemaProps{
							Description: "devicePath is the path inside of the container that the device will be mapped to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "devicePath"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_VolumeMount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VolumeMount describes a mounting of a Volume within a container.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "This must match the Name of a Volume.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"mountPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mountPropagation": {
						SchemaProps: spec.SchemaProps{
							Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subPathExpr": {
						SchemaProps: spec.SchemaProps{
							Description: "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "mountPath"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_VolumeNodeAffinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"required": {
						SchemaProps: spec.SchemaProps{
							Description: "Required specifies hard node constraints that must be met.",
							Ref:         ref("k8s.io/api/core/v1.NodeSelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.NodeSelector"},
	}
}

func schema_k8sio_api_core_v1_VolumeProjection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Projection that may be projected along with other supported volume types",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "information about the secret data to project",
							Ref:         ref("k8s.io/api/core/v1.SecretProjection"),
						},
					},
					"downwardAPI": {
						SchemaProps: spec.SchemaProps{
							Description: "information about the downwardAPI data to project",
							Ref:         ref("k8s.io/api/core/v1.DownwardAPIProjection"),
						},
					},
					"configMap": {
						SchemaProps: spec.SchemaProps{
							Description: "information about the configMap data to project",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapProjection"),
						},
					},
					"serviceAccountToken": {
						SchemaProps: spec.SchemaProps{
							Description: "information about the serviceAccountToken data to project",
							Ref:         ref("k8s.io/api/core/v1.ServiceAccountTokenProjection"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ConfigMapProjection", "k8s.io/api/core/v1.DownwardAPIProjection", "k8s.io/api/core/v1.SecretProjection", "k8s.io/api/core/v1.ServiceAccountTokenProjection"},
	}
}

func schema_k8sio_api_core_v1_VolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents the source of a volume to mount. Only one of its members may be specified.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
							Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
						},
					},
					"emptyDir": {
						SchemaProps: spec.SchemaProps{
							Description: "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
							Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
						},
					},
					"gcePersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
							Ref:         ref("k8s.io/api/core/v1.GCEPersistentDiskVolumeSource"),
						},
					},
					"awsElasticBlockStore": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
							Ref:         ref("k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource"),
						},
					},
					"gitRepo": {
						SchemaProps: spec.SchemaProps{
							Description: "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
							Ref:         ref("k8s.io/api/core/v1.GitRepoVolumeSource"),
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
							Ref:         ref("k8s.io/api/core/v1.SecretVolumeSource"),
						},
					},
					"nfs": {
						SchemaProps: spec.SchemaProps{
							Description: "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
							Ref:         ref("k8s.io/api/core/v1.NFSVolumeSource"),
						},
					},
					"iscsi": {
						SchemaProps: spec.SchemaProps{
							Description: "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
							Ref:         ref("k8s.io/api/core/v1.ISCSIVolumeSource"),
						},
					},
					"glusterfs": {
						SchemaProps: spec.SchemaProps{
							Description: "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
							Ref:         ref("k8s.io/api/core/v1.GlusterfsVolumeSource"),
						},
					},
					"persistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource"),
						},
					},
					"rbd": {
						SchemaProps: spec.SchemaProps{
							Description: "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
							Ref:         ref("k8s.io/api/core/v1.RBDVolumeSource"),
						},
					},
					"flexVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
							Ref:         ref("k8s.io/api/core/v1.FlexVolumeSource"),
						},
					},
					"cinder": {
						SchemaProps: spec.SchemaProps{
							Description: "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
							Ref:         ref("k8s.io/api/core/v1.CinderVolumeSource"),
						},
					},
					"cephfs": {
						SchemaProps: spec.SchemaProps{
							Description: "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.CephFSVolumeSource"),
						},
					},
					"flocker": {
						SchemaProps: spec.SchemaProps{
							Description: "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
							Ref:         ref("k8s.io/api/core/v1.FlockerVolumeSource"),
						},
					},
					"downwardAPI": {
						SchemaProps: spec.SchemaProps{
							Description: "DownwardAPI represents downward API about the pod that should populate this volume",
							Ref:         ref("k8s.io/api/core/v1.DownwardAPIVolumeSource"),
						},
					},
					"fc": {
						SchemaProps: spec.SchemaProps{
							Description: "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
							Ref:         ref("k8s.io/api/core/v1.FCVolumeSource"),
						},
					},
					"azureFile": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureFileVolumeSource"),
						},
					},
					"configMap": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMap represents a configMap that should populate this volume",
							Ref:         ref("k8s.io/api/core/v1.ConfigMapVolumeSource"),
						},
					},
					"vsphereVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"),
						},
					},
					"quobyte": {
						SchemaProps: spec.SchemaProps{
							Description: "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
							Ref:         ref("k8s.io/api/core/v1.QuobyteVolumeSource"),
						},
					},
					"azureDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
							Ref:         ref("k8s.io/api/core/v1.AzureDiskVolumeSource"),
						},
					},
					"photonPersistentDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource"),
						},
					},
					"projected": {
						SchemaProps: spec.SchemaProps{
							Description: "Items for all in one resources secrets, configmaps, and downward API",
							Ref:         ref("k8s.io/api/core/v1.ProjectedVolumeSource"),
						},
					},
					"portworxVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
							Ref:         ref("k8s.io/api/core/v1.PortworxVolumeSource"),
						},
					},
					"scaleIO": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.ScaleIOVolumeSource"),
						},
					},
					"storageos": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
							Ref:         ref("k8s.io/api/core/v1.StorageOSVolumeSource"),
						},
					},
					"csi": {
						SchemaProps: spec.SchemaProps{
							Description: "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).",
							Ref:         ref("k8s.io/api/core/v1.CSIVolumeSource"),
						},
					},
					"ephemeral": {
						SchemaProps: spec.SchemaProps{
							Description: "Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.\n\nThis is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.",
							Ref:         ref("k8s.io/api/core/v1.EphemeralVolumeSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.AWSElasticBlockStoreVolumeSource", "k8s.io/api/core/v1.AzureDiskVolumeSource", "k8s.io/api/core/v1.AzureFileVolumeSource", "k8s.io/api/core/v1.CSIVolumeSource", "k8s.io/api/core/v1.CephFSVolumeSource", "k8s.io/api/core/v1.CinderVolumeSource", "k8s.io/api/core/v1.ConfigMapVolumeSource", "k8s.io/api/core/v1.DownwardAPIVolumeSource", "k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.EphemeralVolumeSource", "k8s.io/api/core/v1.FCVolumeSource", "k8s.io/api/core/v1.FlexVolumeSource", "k8s.io/api/core/v1.FlockerVolumeSource", "k8s.io/api/core/v1.GCEPersistentDiskVolumeSource", "k8s.io/api/core/v1.GitRepoVolumeSource", "k8s.io/api/core/v1.GlusterfsVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.ISCSIVolumeSource", "k8s.io/api/core/v1.NFSVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimVolumeSource", "k8s.io/api/core/v1.PhotonPersistentDiskVolumeSource", "k8s.io/api/core/v1.PortworxVolumeSource", "k8s.io/api/core/v1.ProjectedVolumeSource", "k8s.io/api/core/v1.QuobyteVolumeSource", "k8s.io/api/core/v1.RBDVolumeSource", "k8s.io/api/core/v1.ScaleIOVolumeSource", "k8s.io/api/core/v1.SecretVolumeSource", "k8s.io/api/core/v1.StorageOSVolumeSource", "k8s.io/api/core/v1.VsphereVirtualDiskVolumeSource"},
	}
}

func schema_k8sio_api_core_v1_VsphereVirtualDiskVolumeSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Represents a vSphere volume resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumePath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path that identifies vSphere volume vmdk",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fsType": {
						SchemaProps: spec.SchemaProps{
							Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storagePolicyName": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage Policy Based Management (SPBM) profile name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storagePolicyID": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"volumePath"},
			},
		},
	}
}

func schema_k8sio_api_core_v1_WeightedPodAffinityTerm(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"podAffinityTerm": {
						SchemaProps: spec.SchemaProps{
							Description: "Required. A pod affinity term, associated with the corresponding weight.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.PodAffinityTerm"),
						},
					},
				},
				Required: []string{"weight", "podAffinityTerm"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PodAffinityTerm"},
	}
}

func schema_k8sio_api_core_v1_WindowsSecurityContextOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"gmsaCredentialSpecName": {
						SchemaProps: spec.SchemaProps{
							Description: "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gmsaCredentialSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runAsUserName": {
						SchemaProps: spec.SchemaProps{
							Description: "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_apimachinery_pkg_api_resource_Quantity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
				Type:        resource.Quantity{}.OpenAPISchemaType(),
				Format:      resource.Quantity{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_apimachinery_pkg_api_resource_int64Amount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "int64Amount represents a fixed precision numerator and arbitrary scale exponent. It is faster than operations on inf.Dec for values that can be represented as int64.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"value": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int64",
						},
					},
					"scale": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
				},
				Required: []string{"value", "scale"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_APIGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIGroup contains the name, the supported versions, and the preferred version of a group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "name is the name of the group.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versions": {
						SchemaProps: spec.SchemaProps{
							Description: "versions are the versions supported in this group.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
									},
								},
							},
						},
					},
					"preferredVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "preferredVersion is the version preferred by the API server, which probably is the storage version.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
						},
					},
					"serverAddressByClientCIDRs": {
						SchemaProps: spec.SchemaProps{
							Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "versions"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery", "k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
	}
}

func schema_pkg_apis_meta_v1_APIGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groups": {
						SchemaProps: spec.SchemaProps{
							Description: "groups is a list of APIGroup.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"groups"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"},
	}
}

func schema_pkg_apis_meta_v1_APIResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIResource specifies the name of a resource and whether it is namespaced.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "name is the plural name of the resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"singularName": {
						SchemaProps: spec.SchemaProps{
							Description: "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaced": {
						SchemaProps: spec.SchemaProps{
							Description: "namespaced indicates if a resource is namespaced or not.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"verbs": {
						SchemaProps: spec.SchemaProps{
							Description: "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"shortNames": {
						SchemaProps: spec.SchemaProps{
							Description: "shortNames is a list of suggested short names of the resource.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"categories": {
						SchemaProps: spec.SchemaProps{
							Description: "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"storageVersionHash": {
						SchemaProps: spec.SchemaProps{
							Description: "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "singularName", "namespaced", "kind", "verbs"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_APIResourceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groupVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "groupVersion is the group and version this APIResourceList is for.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "resources contains the name of the resources and if they are namespaced.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"),
									},
								},
							},
						},
					},
				},
				Required: []string{"groupVersion", "resources"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"},
	}
}

func schema_pkg_apis_meta_v1_APIVersions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versions": {
						SchemaProps: spec.SchemaProps{
							Description: "versions are the api versions that are available.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"serverAddressByClientCIDRs": {
						SchemaProps: spec.SchemaProps{
							Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
									},
								},
							},
						},
					},
				},
				Required: []string{"versions", "serverAddressByClientCIDRs"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
	}
}

func schema_pkg_apis_meta_v1_ApplyOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplyOptions may be provided when applying an API object. FieldManager is required for apply requests. ApplyOptions is equivalent to PatchOptions. It is provided as a convenience with documentation that speaks specifically to how the options fields relate to apply.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"force": {
						SchemaProps: spec.SchemaProps{
							Description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"force", "fieldManager"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Condition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Condition contains details for one aspect of the current state of this API Resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type of condition in CamelCase or in foo.example.com/CamelCase.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "message is a human readable message indicating details about the transition. This may be an empty string.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status", "lastTransitionTime", "reason", "message"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_meta_v1_CreateOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CreateOptions may be provided when creating an API object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_DeleteOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeleteOptions may be provided when deleting an API object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"preconditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"),
						},
					},
					"orphanDependents": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"propagationPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"},
	}
}

func schema_pkg_apis_meta_v1_Duration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
				Type:        v1.Duration{}.OpenAPISchemaType(),
				Format:      v1.Duration{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_pkg_apis_meta_v1_FieldsV1(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GetOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GetOptions is the standard query options to the standard REST get call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupKind(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"group", "kind"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupResource specifies a Group and a Resource, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"group", "resource"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersion(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersion contains the \"group\" and the \"version\", which uniquely identifies the API.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"group", "version"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersionForDiscovery(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"groupVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "groupVersion specifies the API group and version in the form \"group/version\"",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"groupVersion", "version"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersionKind(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"group", "version", "kind"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersionResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersionResource unambiguously identifies a resource.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"group", "version", "resource"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_InternalEvent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InternalEvent makes watch.Event versioned",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Type": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"Object": {
						SchemaProps: spec.SchemaProps{
							Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Bookmark: the object (instance of a type being watched) where\n   only ResourceVersion field is set. On successful restart of watch from a\n   bookmark resourceVersion, client is guaranteed to not get repeat event\n   nor miss any events.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.",
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.Object"),
						},
					},
				},
				Required: []string{"Type", "Object"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/runtime.Object"},
	}
}

func schema_pkg_apis_meta_v1_LabelSelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"matchLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"matchExpressions": {
						SchemaProps: spec.SchemaProps{
							Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"),
									},
								},
							},
						},
					},
				},
			},
			VendorExtensible: spec.VendorExtensible{
				Extensions: spec.Extensions{
					"x-kubernetes-map-type": "atomic",
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"},
	}
}

func schema_pkg_apis_meta_v1_LabelSelectorRequirement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "key",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "key is the label key that the selector applies to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"key", "operator"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_List(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "List holds a list of objects, which may not be known by the server.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_pkg_apis_meta_v1_ListMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"continue": {
						SchemaProps: spec.SchemaProps{
							Description: "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remainingItemCount": {
						SchemaProps: spec.SchemaProps{
							Description: "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ListOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ListOptions is the query options to a standard REST list call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"watch": {
						SchemaProps: spec.SchemaProps{
							Description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowWatchBookmarks": {
						SchemaProps: spec.SchemaProps{
							Description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersionMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"limit": {
						SchemaProps: spec.SchemaProps{
							Description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"continue": {
						SchemaProps: spec.SchemaProps{
							Description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ManagedFieldsEntry(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"manager": {
						SchemaProps: spec.SchemaProps{
							Description: "Manager is an identifier of the workflow managing these fields.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operation": {
						SchemaProps: spec.SchemaProps{
							Description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"time": {
						SchemaProps: spec.SchemaProps{
							Description: "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"fieldsType": {
						SchemaProps: spec.SchemaProps{
							Description: "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldsV1": {
						SchemaProps: spec.SchemaProps{
							Description: "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.FieldsV1"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.FieldsV1", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_meta_v1_MicroTime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MicroTime is version of Time with microsecond level precision.",
				Type:        v1.MicroTime{}.OpenAPISchemaType(),
				Format:      v1.MicroTime{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ObjectMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"generateName": {
						SchemaProps: spec.SchemaProps{
							Description: "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"deletionTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"deletionGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"ownerReferences": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "uid",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
									},
								},
							},
						},
					},
					"finalizers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-strategy": "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"managedFields": {
						SchemaProps: spec.SchemaProps{
							Description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry", "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_meta_v1_OwnerReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"controller": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, this reference points to the managing controller.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"blockOwnerDeletion": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"apiVersion", "kind", "name", "uid"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_PartialObjectMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PartialObjectMetadata is a generic representation of any object with ObjectMeta. It allows clients to get access to a particular ObjectMeta schema without knowing the details of the version.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_meta_v1_PartialObjectMetadataList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PartialObjectMetadataList contains a list of objects containing only their metadata",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "items contains each of the included items.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadata"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadata"},
	}
}

func schema_pkg_apis_meta_v1_Patch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_PatchOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PatchOptions may be provided when patching an API object. PatchOptions is meant to be a superset of UpdateOptions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"force": {
						SchemaProps: spec.SchemaProps{
							Description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Preconditions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the target UID.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the target ResourceVersion",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_RootPaths(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"paths": {
						SchemaProps: spec.SchemaProps{
							Description: "paths are the paths available at root.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"paths"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ServerAddressByClientCIDR(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clientCIDR": {
						SchemaProps: spec.SchemaProps{
							Description: "The CIDR with which clients can match their IP to figure out the server address that they should use.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"clientCIDR", "serverAddress"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Status(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Status is a return value for calls that don't return other objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable description of the status of this operation.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"details": {
						SchemaProps: spec.SchemaProps{
							Description: "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"),
						},
					},
					"code": {
						SchemaProps: spec.SchemaProps{
							Description: "Suggested HTTP return code for this status, 0 if not set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"},
	}
}

func schema_pkg_apis_meta_v1_StatusCause(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"field": {
						SchemaProps: spec.SchemaProps{
							Description: "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_StatusDetails(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The group attribute of the resource associated with the status StatusReason.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"causes": {
						SchemaProps: spec.SchemaProps{
							Description: "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"),
									},
								},
							},
						},
					},
					"retryAfterSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"},
	}
}

func schema_pkg_apis_meta_v1_Table(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Table is a tabular representation of a set of API resources. The server transforms the object into a set of preferred columns for quickly reviewing the objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"columnDefinitions": {
						SchemaProps: spec.SchemaProps{
							Description: "columnDefinitions describes each column in the returned items array. The number of cells per row will always match the number of column definitions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.TableColumnDefinition"),
									},
								},
							},
						},
					},
					"rows": {
						SchemaProps: spec.SchemaProps{
							Description: "rows is the list of items in the table.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.TableRow"),
									},
								},
							},
						},
					},
				},
				Required: []string{"columnDefinitions", "rows"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TableColumnDefinition", "k8s.io/apimachinery/pkg/apis/meta/v1.TableRow"},
	}
}

func schema_pkg_apis_meta_v1_TableColumnDefinition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableColumnDefinition contains information about a column returned in the Table.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "name is a human readable name for the column.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type is an OpenAPI type definition for this column, such as number, integer, string, or array. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"format": {
						SchemaProps: spec.SchemaProps{
							Description: "format is an optional OpenAPI type modifier for this column. A format modifies the type and imposes additional rules, like date or time formatting for a string. The 'name' format is applied to the primary identifier column which has type 'string' to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "description is a human readable description of this column.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a higher priority.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"name", "type", "format", "description", "priority"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_TableOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableOptions are used when a Table is requested by the caller.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"includeObject": {
						SchemaProps: spec.SchemaProps{
							Description: "includeObject decides whether to include each object along with its columnar information. Specifying \"None\" will return no object, specifying \"Object\" will return the full object contents, and specifying \"Metadata\" (the default) will return the object's metadata in the PartialObjectMetadata kind in version v1beta1 of the meta.k8s.io API group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_TableRow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableRow is an individual row in a table.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cells": {
						SchemaProps: spec.SchemaProps{
							Description: "cells will be as wide as the column definitions array and may contain strings, numbers (float64 or int64), booleans, simple maps, lists, or null. See the type field of the column definition for a more detailed description.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "conditions describe additional status of a row that are relevant for a human user. These conditions apply to the row, not to the object, and will be specific to table output. The only defined condition type is 'Completed', for a row that indicates a resource that has run to completion and can be given less visual priority.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.TableRowCondition"),
									},
								},
							},
						},
					},
					"object": {
						SchemaProps: spec.SchemaProps{
							Description: "This field contains the requested additional information about each object based on the includeObject policy when requesting the Table. If \"None\", this field is empty, if \"Object\" this will be the default serialization of the object for the current API version, and if \"Metadata\" (the default) will contain the object metadata. Check the returned kind and apiVersion of the object before parsing. The media type of the object will always match the enclosing list - if this as a JSON table, these will be JSON encoded objects.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
						},
					},
				},
				Required: []string{"cells"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.TableRowCondition", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_pkg_apis_meta_v1_TableRowCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableRowCondition allows a row to be marked with additional information.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of row condition. The only defined value is 'Completed' indicating that the object this row represents has reached a completed state and may be given less visual priority than other rows. Clients are not required to honor any conditions but should be consistent where possible about handling the conditions.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "(brief) machine readable reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human readable message indicating details about last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Time(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
				Type:        v1.Time{}.OpenAPISchemaType(),
				Format:      v1.Time{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Timestamp(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Timestamp is a struct that is equivalent to Time, but intended for protobuf marshalling/unmarshalling. It is generated into a serialization that matches Time. Do not use in Go structs.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"seconds", "nanos"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_TypeMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_UpdateOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UpdateOptions may be provided when updating an API object. All fields in UpdateOptions should also be present in PatchOptions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_WatchEvent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Event represents a single event to a watched resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"object": {
						SchemaProps: spec.SchemaProps{
							Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
						},
					},
				},
				Required: []string{"type", "object"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_k8sio_apimachinery_pkg_runtime_RawExtension(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
				Type:        runtime.RawExtension{}.OpenAPISchemaType(),
				Format:      runtime.RawExtension{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_k8sio_apimachinery_pkg_runtime_TypeMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this: type MyAwesomeAPIObject struct {\n     runtime.TypeMeta    `json:\",inline\"`\n     ... // other fields\n} func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_apimachinery_pkg_runtime_Unknown(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Raw": {
						SchemaProps: spec.SchemaProps{
							Description: "Raw will hold the complete serialized object which couldn't be matched with a registered type. Most likely, nothing should be done with this except for passing it through the system.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
					"ContentEncoding": {
						SchemaProps: spec.SchemaProps{
							Description: "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ContentType": {
						SchemaProps: spec.SchemaProps{
							Description: "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"Raw", "ContentEncoding", "ContentType"},
			},
		},
	}
}

func schema_apimachinery_pkg_util_intstr_IntOrString(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
				Type:        intstr.IntOrString{}.OpenAPISchemaType(),
				Format:      intstr.IntOrString{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Address(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AddressList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AddressList is a list of Addresss",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Address CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Address"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Address"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AddressSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "The static external IP address represented by this resource. Only IPv4 is supported. An address may only be specified for INTERNAL address types. The IP address must be inside the specified subnetwork, if any.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"addressType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of address to reserve. Default value: \"EXTERNAL\" Possible values: [\"INTERNAL\", \"EXTERNAL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The networking tier used for configuring this address. If this field is not specified, it is assumed to be PREMIUM. Possible values: [\"PREMIUM\", \"STANDARD\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"purpose": {
						SchemaProps: spec.SchemaProps{
							Description: "The purpose of this resource. Possible values include:\n\n* GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.\n\n* SHARED_LOADBALANCER_VIP for an address that can be used by multiple internal load balancers.\n\n* VPC_PEERING for addresses that are reserved for VPC peer networks.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created address should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"users": {
						SchemaProps: spec.SchemaProps{
							Description: "The URLs of the resources that are using this address.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AddressSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AddressSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "The static external IP address represented by this resource. Only IPv4 is supported. An address may only be specified for INTERNAL address types. The IP address must be inside the specified subnetwork, if any.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"addressType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of address to reserve. Default value: \"EXTERNAL\" Possible values: [\"INTERNAL\", \"EXTERNAL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The networking tier used for configuring this address. If this field is not specified, it is assumed to be PREMIUM. Possible values: [\"PREMIUM\", \"STANDARD\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"purpose": {
						SchemaProps: spec.SchemaProps{
							Description: "The purpose of this resource. Possible values include:\n\n* GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.\n\n* SHARED_LOADBALANCER_VIP for an address that can be used by multiple internal load balancers.\n\n* VPC_PEERING for addresses that are reserved for VPC peer networks.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created address should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"users": {
						SchemaProps: spec.SchemaProps{
							Description: "The URLs of the resources that are using this address.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AddressStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AttachedDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AttachedDiskList is a list of AttachedDisks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of AttachedDisk CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDisk"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDisk"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disks-x, where x is a number assigned by Google Compute Engine.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "name or self_link of the disk that will be attached.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instance": {
						SchemaProps: spec.SchemaProps{
							Description: "name or self_link of the compute instance that the disk will be attached to. If the self_link is provided then zone and project are extracted from the self link. If only the name is used then zone and project must be defined as properties on the resource or provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The project that the referenced compute instance is a part of. If instance is referenced by its self_link the project defined in the link will take precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone that the referenced compute instance is located within. If instance is referenced by its self_link the zone defined in the link will take precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "disk", "instance"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AttachedDiskSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disks-x, where x is a number assigned by Google Compute Engine.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "name or self_link of the disk that will be attached.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instance": {
						SchemaProps: spec.SchemaProps{
							Description: "name or self_link of the compute instance that the disk will be attached to. If the self_link is provided then zone and project are extracted from the self link. If only the name is used then zone and project must be defined as properties on the resource or provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The project that the referenced compute instance is a part of. If instance is referenced by its self_link the project defined in the link will take precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone that the referenced compute instance is located within. If instance is referenced by its self_link the zone defined in the link will take precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "disk", "instance"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AttachedDiskStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Autoscaler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AutoscalerList is a list of Autoscalers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Autoscaler CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Autoscaler"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Autoscaler"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoscalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The configuration parameters for the autoscaling algorithm. You can define one or more of the policies for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization.\n\nIf none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the managed instance group that this autoscaler will scale.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the zone where the instance group resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "autoscalingPolicy", "name", "target"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoscalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The configuration parameters for the autoscaling algorithm. You can define one or more of the policies for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization.\n\nIf none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the managed instance group that this autoscaler will scale.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the zone where the instance group resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "autoscalingPolicy", "name", "target"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"cooldownPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of seconds that the autoscaler should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds.\n\nVirtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"cpuUtilization": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyCpuUtilization"),
						},
					},
					"loadBalancingUtilization": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration parameters of autoscaling based on a load balancer.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyLoadBalancingUtilization"),
						},
					},
					"maxReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances that the autoscaler can scale up to. This is required when creating or updating an autoscaler. The maximum number of replicas should not be lower than minimal number of replicas.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"metric": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration parameters of autoscaling based on a custom metric.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyMetric"),
									},
								},
							},
						},
					},
					"minReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum number of replicas that the autoscaler can scale down to. This cannot be less than 0. If not provided, autoscaler will choose a default value depending on maximum number of instances allowed.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines operating mode for this policy. Default value: \"ON\" Possible values: [\"OFF\", \"ONLY_UP\", \"ON\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scaleInControl": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines scale in controls to reduce the risk of response latency and outages due to abrupt scale-in events",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControl"),
						},
					},
				},
				Required: []string{"maxReplicas", "minReplicas"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyCpuUtilization", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyLoadBalancingUtilization", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyMetric", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControl"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyCpuUtilization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The target CPU utilization that the autoscaler should maintain. Must be a float value in the range (0, 1]. If not specified, the default is 0.6.\n\nIf the CPU level is below the target utilization, the autoscaler scales down the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization.\n\nIf the average CPU is above the target utilization, the autoscaler scales up until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"target"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyCpuUtilizationCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyLoadBalancingUtilization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "Fraction of backend capacity utilization (set in HTTP(s) load balancing configuration) that autoscaler should maintain. Must be a positive float value. If not defined, the default is 0.8.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"target"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyLoadBalancingUtilizationCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyMetric(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values.\n\nThe metric must have a value type of INT64 or DOUBLE.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The target value of the metric that autoscaler should maintain. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric.\n\nFor example, a good metric to use as a utilizationTarget is www.googleapis.com/compute/instance/network/received_bytes_count. The autoscaler will work to keep this value constant for each of the instances.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Possible values: [\"GAUGE\", \"DELTA_PER_SECOND\", \"DELTA_PER_MINUTE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControl(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxScaledInReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas"),
						},
					},
					"timeWindowSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long back autoscaling should look when computing recommendations to include directives regarding slower scale down, as described above.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControlCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixed": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a fixed number of VM instances. This must be a positive integer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percent": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicasCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_AutoscalerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucket(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackendBucketList is a list of BackendBuckets",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of BackendBucket CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucket"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucket"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackendBucketSignedURLKeyList is a list of BackendBucketSignedURLKeys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of BackendBucketSignedURLKey CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKey"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"backendBucket": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend bucket this signed URL key belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the signed URL key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "backendBucket", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSignedURLKeySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"backendBucket": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend bucket this signed URL key belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the signed URL key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "backendBucket", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSignedURLKeyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bucketName": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud Storage bucket name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cdnPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud CDN configuration for this Backend Bucket.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpecCdnPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the resource; provided by the client when the resource is created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableCdn": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, enable Cloud CDN for this BackendBucket.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "bucketName", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpecCdnPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bucketName": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud Storage bucket name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cdnPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud CDN configuration for this Backend Bucket.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpecCdnPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the resource; provided by the client when the resource is created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableCdn": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, enable Cloud CDN for this BackendBucket.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "bucketName", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendBucketSpecCdnPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpecCdnPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"signedURLCacheMaxAgeSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketSpecCdnPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendBucketStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackendServiceList is a list of BackendServices",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of BackendService CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendService"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendService"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackendServiceSignedURLKeyList is a list of BackendServiceSignedURLKeys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of BackendServiceSignedURLKey CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKey"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service this signed URL key belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the signed URL key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "backendService", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSignedURLKeySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service this signed URL key belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the signed URL key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "backendService", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSignedURLKeyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"affinityCookieTtlSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.\n\nWhen the load balancing scheme is INTERNAL, this field is not used.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"backend": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of backends that serve this BackendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecBackend"),
									},
								},
							},
						},
					},
					"cdnPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud CDN configuration for this BackendService.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicy"),
						},
					},
					"circuitBreakers": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling the volume of connections to a backend service. This field is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCircuitBreakers"),
						},
					},
					"connectionDrainingTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Time for which instance will be drained (not accept new connections, but still work to finish started).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"consistentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field only applies if the load_balancing_scheme is set to INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is set to MAGLEV or RING_HASH.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHash"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"customRequestHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers that the HTTP/S load balancer should add to proxied requests.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableCdn": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, enable Cloud CDN for this BackendService.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified.\n\nA health check must be specified unless the backend service uses an internet or serverless NEG as a backend.\n\nFor internal load balancing, a URL to a HealthCheck resource must be specified instead.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"iap": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings for enabling Cloud Identity Aware Proxy",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecIap"),
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL_SELF_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localityLbPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The load balancing algorithm used within the scope of the locality. The possible values are -\n\n* ROUND_ROBIN - This is a simple policy in which each healthy backend\n                is selected in round robin order.\n\n* LEAST_REQUEST - An O(1) algorithm which selects two random healthy\n                  hosts and picks the host which has fewer active requests.\n\n* RING_HASH - The ring/modulo hash load balancer implements consistent\n              hashing to backends. The algorithm has the property that the\n              addition/removal of a host from a set of N hosts only affects\n              1/N of the requests.\n\n* RANDOM - The load balancer selects a random healthy host.\n\n* ORIGINAL_DESTINATION - Backend host is selected based on the client\n                         connection metadata, i.e., connections are opened\n                         to the same address as the destination address of\n                         the incoming connection before the connection\n                         was redirected to the load balancer.\n\n* MAGLEV - used as a drop in replacement for the ring hash load balancer.\n           Maglev is not as stable as ring hash but has faster table lookup\n           build times and host selection times. For more information about\n           Maglev, refer to https://ai.google/research/pubs/pub44824\n\nThis field is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED. Possible values: [\"ROUND_ROBIN\", \"LEAST_REQUEST\", \"RING_HASH\", \"RANDOM\", \"ORIGINAL_DESTINATION\", \"MAGLEV\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"outlierDetection": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetection"),
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The protocol this BackendService uses to communicate with backends. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may result in errors if used with the GA API. Possible values: [\"HTTP\", \"HTTPS\", \"HTTP2\", \"TCP\", \"SSL\", \"GRPC\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The security policy associated with this backend service.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP. Possible values: [\"NONE\", \"CLIENT_IP\", \"CLIENT_IP_PORT_PROTO\", \"CLIENT_IP_PROTO\", \"GENERATED_COOKIE\", \"HEADER_FIELD\", \"HTTP_COOKIE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range is [1, 86400].",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecBackend", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCircuitBreakers", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHash", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecIap", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetection"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"affinityCookieTtlSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.\n\nWhen the load balancing scheme is INTERNAL, this field is not used.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"backend": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of backends that serve this BackendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecBackend"),
									},
								},
							},
						},
					},
					"cdnPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud CDN configuration for this BackendService.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicy"),
						},
					},
					"circuitBreakers": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling the volume of connections to a backend service. This field is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCircuitBreakers"),
						},
					},
					"connectionDrainingTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Time for which instance will be drained (not accept new connections, but still work to finish started).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"consistentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field only applies if the load_balancing_scheme is set to INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is set to MAGLEV or RING_HASH.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHash"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"customRequestHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers that the HTTP/S load balancer should add to proxied requests.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableCdn": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, enable Cloud CDN for this BackendService.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource for health checking this BackendService. Currently at most one health check can be specified.\n\nA health check must be specified unless the backend service uses an internet or serverless NEG as a backend.\n\nFor internal load balancing, a URL to a HealthCheck resource must be specified instead.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"iap": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings for enabling Cloud Identity Aware Proxy",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecIap"),
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates whether the backend service will be used with internal or external load balancing. A backend service created for one type of load balancing cannot be used with the other. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL_SELF_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localityLbPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The load balancing algorithm used within the scope of the locality. The possible values are -\n\n* ROUND_ROBIN - This is a simple policy in which each healthy backend\n                is selected in round robin order.\n\n* LEAST_REQUEST - An O(1) algorithm which selects two random healthy\n                  hosts and picks the host which has fewer active requests.\n\n* RING_HASH - The ring/modulo hash load balancer implements consistent\n              hashing to backends. The algorithm has the property that the\n              addition/removal of a host from a set of N hosts only affects\n              1/N of the requests.\n\n* RANDOM - The load balancer selects a random healthy host.\n\n* ORIGINAL_DESTINATION - Backend host is selected based on the client\n                         connection metadata, i.e., connections are opened\n                         to the same address as the destination address of\n                         the incoming connection before the connection\n                         was redirected to the load balancer.\n\n* MAGLEV - used as a drop in replacement for the ring hash load balancer.\n           Maglev is not as stable as ring hash but has faster table lookup\n           build times and host selection times. For more information about\n           Maglev, refer to https://ai.google/research/pubs/pub44824\n\nThis field is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED. Possible values: [\"ROUND_ROBIN\", \"LEAST_REQUEST\", \"RING_HASH\", \"RANDOM\", \"ORIGINAL_DESTINATION\", \"MAGLEV\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"outlierDetection": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetection"),
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of backend port. The same name should appear in the instance groups referenced by this service. Required when the load balancing scheme is EXTERNAL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The protocol this BackendService uses to communicate with backends. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may result in errors if used with the GA API. Possible values: [\"HTTP\", \"HTTPS\", \"HTTP2\", \"TCP\", \"SSL\", \"GRPC\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The security policy associated with this backend service.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP. Possible values: [\"NONE\", \"CLIENT_IP\", \"CLIENT_IP_PORT_PROTO\", \"CLIENT_IP_PROTO\", \"GENERATED_COOKIE\", \"HEADER_FIELD\", \"HTTP_COOKIE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range is [1, 86400].",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecBackend", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCircuitBreakers", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHash", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecIap", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetection"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecBackend(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"balancingMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the balancing mode for this backend.\n\nFor global HTTP(S) or TCP/SSL load balancing, the default is UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S)) and CONNECTION (for TCP/SSL). Default value: \"UTILIZATION\" Possible values: [\"UTILIZATION\", \"RATE\", \"CONNECTION\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"capacityScaler": {
						SchemaProps: spec.SchemaProps{
							Description: "A multiplier applied to the group's maximum servicing capacity (based on UTILIZATION, RATE or CONNECTION).\n\nDefault value is 1, which means the group will serve up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available Capacity. Valid range is [0.0,1.0].",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The fully-qualified URL of an Instance Group or Network Endpoint Group resource. In case of instance group this defines the list of instances that serve traffic. Member virtual machine instances from each instance group must live in the same zone as the instance group itself. No two backends in a backend service are allowed to use same Instance Group resource.\n\nFor Network Endpoint Groups this defines list of endpoints. All endpoints of Network Endpoint Group must be hosted on instances located in the same zone as the Network Endpoint Group.\n\nBackend services cannot mix Instance Group and Network Endpoint Group backends.\n\nNote that you must specify an Instance Group or Network Endpoint Group resource using the fully-qualified URL, rather than a partial URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxConnections": {
						SchemaProps: spec.SchemaProps{
							Description: "The max number of simultaneous connections for the group. Can be used with either CONNECTION or UTILIZATION balancing modes.\n\nFor CONNECTION mode, either maxConnections or one of maxConnectionsPerInstance or maxConnectionsPerEndpoint, as appropriate for group type, must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxConnectionsPerEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "The max number of simultaneous connections that a single backend network endpoint can handle. This is used to calculate the capacity of the group. Can be used in either CONNECTION or UTILIZATION balancing modes.\n\nFor CONNECTION mode, either maxConnections or maxConnectionsPerEndpoint must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxConnectionsPerInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "The max number of simultaneous connections that a single backend instance can handle. This is used to calculate the capacity of the group. Can be used in either CONNECTION or UTILIZATION balancing modes.\n\nFor CONNECTION mode, either maxConnections or maxConnectionsPerInstance must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRate": {
						SchemaProps: spec.SchemaProps{
							Description: "The max requests per second (RPS) of the group.\n\nCan be used with either RATE or UTILIZATION balancing modes, but required if RATE mode. For RATE mode, either maxRate or one of maxRatePerInstance or maxRatePerEndpoint, as appropriate for group type, must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRatePerEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "The max requests per second (RPS) that a single backend network endpoint can handle. This is used to calculate the capacity of the group. Can be used in either balancing mode. For RATE mode, either maxRate or maxRatePerEndpoint must be set.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"maxRatePerInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "The max requests per second (RPS) that a single backend instance can handle. This is used to calculate the capacity of the group. Can be used in either balancing mode. For RATE mode, either maxRate or maxRatePerInstance must be set.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"maxUtilization": {
						SchemaProps: spec.SchemaProps{
							Description: "Used when balancingMode is UTILIZATION. This ratio defines the CPU utilization target for the group. The default is 0.8. Valid range is [0.0, 1.0].",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"group"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"cacheKeyPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The CacheKeyPolicy for this CdnPolicy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicyCacheKeyPolicy"),
						},
					},
					"signedURLCacheMaxAgeSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum number of seconds the response to a signed URL request will be considered fresh, defaults to 1hr (3600s). After this time period, the response will be revalidated before being served.\n\nWhen serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecCdnPolicyCacheKeyPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicyCacheKeyPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"includeHost": {
						SchemaProps: spec.SchemaProps{
							Description: "If true requests to different hosts will be cached separately.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"includeProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, http and https requests will be cached separately.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"includeQueryString": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included.\n\nIf false, the query string will be excluded from the cache key entirely.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"queryStringBlacklist": {
						SchemaProps: spec.SchemaProps{
							Description: "Names of query string parameters to exclude in cache keys.\n\nAll other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"queryStringWhitelist": {
						SchemaProps: spec.SchemaProps{
							Description: "Names of query string parameters to include in cache keys.\n\nAll other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicyCacheKeyPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCdnPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCircuitBreakers(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxConnections": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of connections to the backend cluster. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxPendingRequests": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of pending requests to the backend cluster. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRequests": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of parallel requests to the backend cluster. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRequestsPerConnection": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum requests for a single backend connection. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of parallel retries to the backend cluster. Defaults to 3.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecCircuitBreakersCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHash(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpCookie": {
						SchemaProps: spec.SchemaProps{
							Description: "Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookie"),
						},
					},
					"httpHeaderName": {
						SchemaProps: spec.SchemaProps{
							Description: "The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minimumRingSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum number of virtual nodes to use for the hash ring. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookie"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookie(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the cookie.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to set for the cookie.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ttl": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifetime of the cookie.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookieTtl"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecConsistentHashHttpCookieTtl"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookieCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookieTtl(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecConsistentHashHttpCookieTtlCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecIap(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"oauth2ClientID": {
						SchemaProps: spec.SchemaProps{
							Description: "OAuth2 Client ID for IAP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"oauth2ClientID"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecIapCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecLogConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to enable logging for the load balancer traffic served by this backend service.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"sampleRate": {
						SchemaProps: spec.SchemaProps{
							Description: "This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecLogConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"baseEjectionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionBaseEjectionTime"),
						},
					},
					"consecutiveErrors": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"consecutiveGatewayFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 5.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"enforcingConsecutiveErrors": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"enforcingConsecutiveGatewayFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"enforcingSuccessRate": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"interval": {
						SchemaProps: spec.SchemaProps{
							Description: "Time interval between ejection sweep analysis. This can result in both new ejections as well as hosts being returned to service. Defaults to 10 seconds.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionInterval"),
						},
					},
					"maxEjectionPercent": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 10%.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"successRateMinimumHosts": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"successRateRequestVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"successRateStdevFactor": {
						SchemaProps: spec.SchemaProps{
							Description: "This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionBaseEjectionTime", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.BackendServiceSpecOutlierDetectionInterval"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionBaseEjectionTime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionBaseEjectionTimeCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionInterval(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceSpecOutlierDetectionIntervalCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_BackendServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Disk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DiskIamBindingList is a list of DiskIamBindings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of DiskIamBinding CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBinding"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBinding"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "members", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "members", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamMember(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DiskIamMemberList is a list of DiskIamMembers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of DiskIamMember CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMember"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMember"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "member", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "member", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamMemberStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DiskIamPolicyList is a list of DiskIamPolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of DiskIamPolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskIamPolicySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskIamPolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DiskList is a list of Disks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Disk CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Disk"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Disk"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DiskResourcePolicyAttachmentList is a list of DiskResourcePolicyAttachments",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of DiskResourcePolicyAttachment CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachment"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachment"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the disk in which the resource policies are attached to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The resource policy to be attached to the disk for scheduling snapshot creation. Do not specify the self link.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the zone where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "disk", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskResourcePolicyAttachmentSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the disk in which the resource policies are attached to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The resource policy to be attached to the disk for scheduling snapshot creation. Do not specify the self link.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the zone where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "disk", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskResourcePolicyAttachmentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Encrypts the disk using a customer-supplied encryption key.\n\nAfter you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later (e.g. to create a disk snapshot or an image, or to attach the disk to a virtual machine).\n\nCustomer-supplied encryption keys do not protect access to metadata of the disk.\n\nIf you do not provide an encryption key when creating the disk, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecDiskEncryptionKey"),
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The image from which to initialize this disk. This can be one of: the image's 'self_link', 'projects/{project}/global/images/{image}', 'projects/{project}/global/images/family/{family}', 'global/images/{image}', 'global/images/family/{family}', 'family/{family}', '{project}/{family}', '{project}/{image}', '{family}', or '{image}'. If referred by family, the images names must include the family name. If they don't, use the [google_compute_image data source](/docs/providers/google/d/compute_image.html). For instance, the image 'centos-6-v20180104' includes its family name 'centos-6'. These images can be referred by family name here.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource.  Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this disk.  A list of key->value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"lastAttachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last attach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastDetachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last detach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"physicalBlockSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the 'image' or 'snapshot' parameter, or specify it alone to create an empty persistent disk.\n\nIf you specify this field along with 'image' or 'snapshot', the value must not be less than the size of the image or the size of the snapshot.\n\n~>**NOTE** If you change the size, Terraform updates the disk size if upsizing is detected but recreates the disk if downsizing is requested. You can add 'lifecycle.prevent_destroy' in the config to prevent destroying and recreating.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"snapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. If the snapshot is in another project than this disk, you must supply a full URL. For example, the following are valid values:\n\n* 'https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot' * 'projects/project/global/snapshots/snapshot' * 'global/snapshots/snapshot' * 'snapshot'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceImageEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceImageEncryptionKey"),
						},
					},
					"sourceImageID": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSnapshotEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceSnapshotEncryptionKey"),
						},
					},
					"sourceSnapshotID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"users": {
						SchemaProps: spec.SchemaProps{
							Description: "Links to the users of the disk (attached instances) in form: project/zones/zone/instances/instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the zone where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecDiskEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceImageEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceSnapshotEncryptionKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Encrypts the disk using a customer-supplied encryption key.\n\nAfter you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later (e.g. to create a disk snapshot or an image, or to attach the disk to a virtual machine).\n\nCustomer-supplied encryption keys do not protect access to metadata of the disk.\n\nIf you do not provide an encryption key when creating the disk, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecDiskEncryptionKey"),
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The image from which to initialize this disk. This can be one of: the image's 'self_link', 'projects/{project}/global/images/{image}', 'projects/{project}/global/images/family/{family}', 'global/images/{image}', 'global/images/family/{family}', 'family/{family}', '{project}/{family}', '{project}/{image}', '{family}', or '{image}'. If referred by family, the images names must include the family name. If they don't, use the [google_compute_image data source](/docs/providers/google/d/compute_image.html). For instance, the image 'centos-6-v20180104' includes its family name 'centos-6'. These images can be referred by family name here.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource.  Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this disk.  A list of key->value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"lastAttachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last attach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastDetachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last detach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"physicalBlockSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the 'image' or 'snapshot' parameter, or specify it alone to create an empty persistent disk.\n\nIf you specify this field along with 'image' or 'snapshot', the value must not be less than the size of the image or the size of the snapshot.\n\n~>**NOTE** If you change the size, Terraform updates the disk size if upsizing is detected but recreates the disk if downsizing is requested. You can add 'lifecycle.prevent_destroy' in the config to prevent destroying and recreating.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"snapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. If the snapshot is in another project than this disk, you must supply a full URL. For example, the following are valid values:\n\n* 'https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot' * 'projects/project/global/snapshots/snapshot' * 'global/snapshots/snapshot' * 'snapshot'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceImageEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceImageEncryptionKey"),
						},
					},
					"sourceImageID": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSnapshotEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceSnapshotEncryptionKey"),
						},
					},
					"sourceSnapshotID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"users": {
						SchemaProps: spec.SchemaProps{
							Description: "Links to the users of the disk (attached instances) in form: project/zones/zone/instances/instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the zone where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecDiskEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceImageEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.DiskSpecSourceSnapshotEncryptionKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpecDiskEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self link of the encryption key used to encrypt the disk. Also called KmsKeyName in the cloud console. Your project's Compute Engine System service account ('service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com') must have 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature. See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kmsKeyServiceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account used for the encryption request for the given KMS key. If absent, the Compute Engine Service Agent service account is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpecDiskEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceImageEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self link of the encryption key used to encrypt the disk. Also called KmsKeyName in the cloud console. Your project's Compute Engine System service account ('service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com') must have 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature. See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kmsKeyServiceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account used for the encryption request for the given KMS key. If absent, the Compute Engine Service Agent service account is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"rawKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceImageEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceSnapshotEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self link of the encryption key used to encrypt the disk. Also called KmsKeyName in the cloud console. Your project's Compute Engine System service account ('service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com') must have 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature. See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kmsKeyServiceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account used for the encryption request for the given KMS key. If absent, the Compute Engine Service Agent service account is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"rawKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskSpecSourceSnapshotEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_DiskStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGateway(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewayStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewayStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewayList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExternalVPNGatewayList is a list of ExternalVPNGateways",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ExternalVPNGateway CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGateway"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGateway"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewaySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of interfaces on this external VPN gateway.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpecInterface"),
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"redundancyType": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates the redundancy type of this external VPN gateway Possible values: [\"FOUR_IPS_REDUNDANCY\", \"SINGLE_IP_INTERNALLY_REDUNDANT\", \"TWO_IPS_REDUNDANCY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpecInterface"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewaySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of interfaces on this external VPN gateway.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpecInterface"),
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"redundancyType": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates the redundancy type of this external VPN gateway Possible values: [\"FOUR_IPS_REDUNDANCY\", \"SINGLE_IP_INTERNALLY_REDUNDANT\", \"TWO_IPS_REDUNDANCY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ExternalVPNGatewaySpecInterface"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewaySpecInterface(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ID": {
						SchemaProps: spec.SchemaProps{
							Description: "The numeric ID for this interface. Allowed values are based on the redundancy type of this external VPN gateway * '0 - SINGLE_IP_INTERNALLY_REDUNDANT' * '0, 1 - TWO_IPS_REDUNDANCY' * '0, 1, 2, 3 - FOUR_IPS_REDUNDANCY'",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ExternalVPNGatewayStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Firewall(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FirewallList is a list of Firewalls",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Firewall CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Firewall"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Firewall"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"allow": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecAllow"),
									},
								},
							},
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deny": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecDeny"),
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"destinationRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"direction": {
						SchemaProps: spec.SchemaProps{
							Description: "Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags. Possible values: [\"INGRESS\", \"EGRESS\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableLogging": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes whether to enable logging for a particular firewall rule. If logging is enabled, logs will be exported to Stackdriver. Deprecated",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes the logging options for a particular firewall rule. If defined, logging is enabled, and logs will be exported to Cloud Logging.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the network to attach this firewall to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed is 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher precedence (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence over ALLOW rules having equal priority.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sourceRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sourceServiceAccounts": {
						SchemaProps: spec.SchemaProps{
							Description: "If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sourceTags": {
						SchemaProps: spec.SchemaProps{
							Description: "If source tags are specified, the firewall will apply only to traffic with source IP that belongs to a tag listed in source tags. Source tags cannot be used to control traffic to an instance's external IP address. Because tags are associated with an instance, not an IP address. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetServiceAccounts": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetTags": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of instance tags indicating sets of instances located in the network that may make network connections as specified in allowed[]. If no targetTags are specified, the firewall rule applies to all instances on the specified network.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecAllow", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecDeny", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecLogConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"allow": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecAllow"),
									},
								},
							},
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deny": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecDeny"),
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"destinationRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"direction": {
						SchemaProps: spec.SchemaProps{
							Description: "Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags. Possible values: [\"INGRESS\", \"EGRESS\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableLogging": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes whether to enable logging for a particular firewall rule. If logging is enabled, logs will be exported to Stackdriver. Deprecated",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes the logging options for a particular firewall rule. If defined, logging is enabled, and logs will be exported to Cloud Logging.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the network to attach this firewall to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed is 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher precedence (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence over ALLOW rules having equal priority.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sourceRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sourceServiceAccounts": {
						SchemaProps: spec.SchemaProps{
							Description: "If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sourceTags": {
						SchemaProps: spec.SchemaProps{
							Description: "If source tags are specified, the firewall will apply only to traffic with source IP that belongs to a tag listed in source tags. Source tags cannot be used to control traffic to an instance's external IP address. Because tags are associated with an instance, not an IP address. One or both of sourceRanges and sourceTags may be set. If both properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetServiceAccounts": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetTags": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of instance tags indicating sets of instances located in the network that may make network connections as specified in allowed[]. If no targetTags are specified, the firewall rule applies to all instances on the specified network.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecAllow", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecDeny", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.FirewallSpecLogConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecAllow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.\n\nExample inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"].",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"protocol"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecDeny(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port.\n\nExample inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"].",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, sctp, ipip, all), or the IP protocol number.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"protocol"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecLogConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes whether to include or exclude metadata for firewall logs. Possible values: [\"EXCLUDE_ALL_METADATA\", \"INCLUDE_ALL_METADATA\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"metadata"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallSpecLogConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_FirewallStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ForwardingRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ForwardingRuleList is a list of ForwardingRules",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ForwardingRule CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRule"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"allPorts": {
						SchemaProps: spec.SchemaProps{
							Description: "For internal TCP/UDP load balancing (i.e. load balancing scheme is INTERNAL and protocol is TCP/UDP), set this to true to allow packets addressed to any ports to be forwarded to the backends configured with this forwarding rule. Used with backend service. Cannot be set if port or portRange are set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowGlobalAccess": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, clients can access ILB from all regions. Otherwise only allows from the local region the ILB is located at.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "A BackendService to receive the matched traffic. This is used only for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address that this forwarding rule serves. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the target that you specify in the forwarding rule. The loadBalancingScheme and the forwarding rule's target determine the type of IP address that you can use. For detailed information, refer to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).\n\nAn address can be specified either by a literal IP address or a reference to an existing Address resource. If you don't specify a reserved IP address, an ephemeral IP address is assigned.\n\nThe value must be set to 0.0.0.0 when the target is a targetGrpcProxy that has validateForProxyless field set to true.\n\nFor Private Service Connect forwarding rules that forward traffic to Google APIs, IP address must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol to which this rule applies.\n\nWhen the load balancing scheme is INTERNAL, only TCP and UDP are valid. Possible values: [\"TCP\", \"UDP\", \"ESP\", \"AH\", \"SCTP\", \"ICMP\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"isMirroringCollector": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "This signifies what the ForwardingRule will be used for and can be EXTERNAL, INTERNAL, or INTERNAL_MANAGED. EXTERNAL is used for Classic Cloud VPN gateways, protocol forwarding to VMs from an external IP address, and HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP load balancers. INTERNAL is used for protocol forwarding to VMs from an internal IP address, and internal TCP/UDP load balancers. INTERNAL_MANAGED is used for internal HTTP(S) load balancers. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL\", \"INTERNAL_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "For internal load balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used. This field is only used for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The networking tier used for configuring this address. If this field is not specified, it is assumed to be PREMIUM. Possible values: [\"PREMIUM\", \"STANDARD\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portRange": {
						SchemaProps: spec.SchemaProps{
							Description: "This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.\n\nApplicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.\n\nSome types of forwarding target have constraints on the acceptable ports:\n\n* TargetHttpProxy: 80, 8080 * TargetHttpsProxy: 443 * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetVpnGateway: 500, 4500",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "This field is used along with the backend_service field for internal load balancing.\n\nWhen the load balancing scheme is INTERNAL, a single port or a comma separated list of ports can be configured. Only packets addressed to these ports will be forwarded to the backends configured with this forwarding rule.\n\nYou may specify a maximum of up to 5 ports.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceLabel": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional prefix to the service name for this Forwarding Rule. If specified, will be the first label of the fully qualified service name.\n\nThe label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThis field is only used for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The internal fully qualified service name for this Forwarding Rule. This field is only used for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The subnetwork that the load balanced IP should belong to for this Forwarding Rule.  This field is only used for INTERNAL load balancing.\n\nIf the network specified is in auto subnet mode, this field is optional. However, if the network is in custom subnet mode, a subnetwork must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the target resource to receive the matched traffic. The target must live in the same region as the forwarding rule. The forwarded traffic must be of a type appropriate to the target object.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ForwardingRuleSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"allPorts": {
						SchemaProps: spec.SchemaProps{
							Description: "For internal TCP/UDP load balancing (i.e. load balancing scheme is INTERNAL and protocol is TCP/UDP), set this to true to allow packets addressed to any ports to be forwarded to the backends configured with this forwarding rule. Used with backend service. Cannot be set if port or portRange are set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowGlobalAccess": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, clients can access ILB from all regions. Otherwise only allows from the local region the ILB is located at.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "A BackendService to receive the matched traffic. This is used only for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address that this forwarding rule serves. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the target that you specify in the forwarding rule. The loadBalancingScheme and the forwarding rule's target determine the type of IP address that you can use. For detailed information, refer to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).\n\nAn address can be specified either by a literal IP address or a reference to an existing Address resource. If you don't specify a reserved IP address, an ephemeral IP address is assigned.\n\nThe value must be set to 0.0.0.0 when the target is a targetGrpcProxy that has validateForProxyless field set to true.\n\nFor Private Service Connect forwarding rules that forward traffic to Google APIs, IP address must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol to which this rule applies.\n\nWhen the load balancing scheme is INTERNAL, only TCP and UDP are valid. Possible values: [\"TCP\", \"UDP\", \"ESP\", \"AH\", \"SCTP\", \"ICMP\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"isMirroringCollector": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "This signifies what the ForwardingRule will be used for and can be EXTERNAL, INTERNAL, or INTERNAL_MANAGED. EXTERNAL is used for Classic Cloud VPN gateways, protocol forwarding to VMs from an external IP address, and HTTP(S), SSL Proxy, TCP Proxy, and Network TCP/UDP load balancers. INTERNAL is used for protocol forwarding to VMs from an internal IP address, and internal TCP/UDP load balancers. INTERNAL_MANAGED is used for internal HTTP(S) load balancers. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL\", \"INTERNAL_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "For internal load balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used. This field is only used for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The networking tier used for configuring this address. If this field is not specified, it is assumed to be PREMIUM. Possible values: [\"PREMIUM\", \"STANDARD\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portRange": {
						SchemaProps: spec.SchemaProps{
							Description: "This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.\n\nApplicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.\n\nSome types of forwarding target have constraints on the acceptable ports:\n\n* TargetHttpProxy: 80, 8080 * TargetHttpsProxy: 443 * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetVpnGateway: 500, 4500",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "This field is used along with the backend_service field for internal load balancing.\n\nWhen the load balancing scheme is INTERNAL, a single port or a comma separated list of ports can be configured. Only packets addressed to these ports will be forwarded to the backends configured with this forwarding rule.\n\nYou may specify a maximum of up to 5 ports.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceLabel": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional prefix to the service name for this Forwarding Rule. If specified, will be the first label of the fully qualified service name.\n\nThe label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThis field is only used for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The internal fully qualified service name for this Forwarding Rule. This field is only used for INTERNAL load balancing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The subnetwork that the load balanced IP should belong to for this Forwarding Rule.  This field is only used for INTERNAL load balancing.\n\nIf the network specified is in auto subnet mode, this field is optional. However, if the network is in custom subnet mode, a subnetwork must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the target resource to receive the matched traffic. The target must live in the same region as the forwarding rule. The forwarded traffic must be of a type appropriate to the target object.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ForwardingRuleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalAddress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalAddressList is a list of GlobalAddresss",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of GlobalAddress CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddress"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddress"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address or beginning of the address range represented by this resource. This can be supplied as an input to reserve a specific address or omitted to allow GCP to choose a valid one for you.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"addressType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the address to reserve.\n\n* EXTERNAL indicates public/external single IP address. * INTERNAL indicates internal IP ranges belonging to some network. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP Version that will be used by this address. The default value is 'IPV4'. Possible values: [\"IPV4\", \"IPV6\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the network in which to reserve the IP range. The IP range must be in RFC1918 space. The network cannot be deleted if there are any reserved IP ranges referring to it.\n\nThis should only be set when using an Internal address.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixLength": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix length of the IP range. If not present, it means the address field is a single IP address.\n\nThis field is not applicable to addresses with addressType=EXTERNAL, or addressType=INTERNAL when purpose=PRIVATE_SERVICE_CONNECT",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"purpose": {
						SchemaProps: spec.SchemaProps{
							Description: "The purpose of the resource. Possible values include:\n\n* VPC_PEERING - for peer networks\n\n* PRIVATE_SERVICE_CONNECT - for ([Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html) only) Private Service Connect networks",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalAddressSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address or beginning of the address range represented by this resource. This can be supplied as an input to reserve a specific address or omitted to allow GCP to choose a valid one for you.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"addressType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the address to reserve.\n\n* EXTERNAL indicates public/external single IP address. * INTERNAL indicates internal IP ranges belonging to some network. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP Version that will be used by this address. The default value is 'IPV4'. Possible values: [\"IPV4\", \"IPV6\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the network in which to reserve the IP range. The IP range must be in RFC1918 space. The network cannot be deleted if there are any reserved IP ranges referring to it.\n\nThis should only be set when using an Internal address.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixLength": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix length of the IP range. If not present, it means the address field is a single IP address.\n\nThis field is not applicable to addresses with addressType=EXTERNAL, or addressType=INTERNAL when purpose=PRIVATE_SERVICE_CONNECT",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"purpose": {
						SchemaProps: spec.SchemaProps{
							Description: "The purpose of the resource. Possible values include:\n\n* VPC_PEERING - for peer networks\n\n* PRIVATE_SERVICE_CONNECT - for ([Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html) only) Private Service Connect networks",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalAddressStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalForwardingRuleList is a list of GlobalForwardingRules",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of GlobalForwardingRule CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRule"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address that this forwarding rule serves. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the target that you specify in the forwarding rule. The loadBalancingScheme and the forwarding rule's target determine the type of IP address that you can use. For detailed information, refer to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).\n\nAn address can be specified either by a literal IP address or a reference to an existing Address resource. If you don't specify a reserved IP address, an ephemeral IP address is assigned.\n\nThe value must be set to 0.0.0.0 when the target is a targetGrpcProxy that has validateForProxyless field set to true.\n\nFor Private Service Connect forwarding rules that forward traffic to Google APIs, IP address must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol to which this rule applies. When the load balancing scheme is INTERNAL_SELF_MANAGED, only TCP is valid. This field must not be set if the global address is configured as a purpose of PRIVATE_SERVICE_CONNECT and addressType of INTERNAL Possible values: [\"TCP\", \"UDP\", \"ESP\", \"AH\", \"SCTP\", \"ICMP\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP Version that will be used by this global forwarding rule. Possible values: [\"IPV4\", \"IPV6\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "This signifies what the GlobalForwardingRule will be used for. The value of INTERNAL_SELF_MANAGED means that this will be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Global Load Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy)\n\n([Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html) only) Note: This field must be set \"\" if the global address is configured as a purpose of PRIVATE_SERVICE_CONNECT and addressType of INTERNAL. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL_SELF_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataFilters": {
						SchemaProps: spec.SchemaProps{
							Description: "Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies.\n\nFor each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata.\n\nmetadataFilters specified here can be overridden by those specified in the UrlMap that this ForwardingRule references.\n\nmetadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFilters"),
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portRange": {
						SchemaProps: spec.SchemaProps{
							Description: "This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.\n\nApplicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.\n\nSome types of forwarding target have constraints on the acceptable ports:\n\n* TargetHttpProxy: 80, 8080 * TargetHttpsProxy: 443 * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetVpnGateway: 500, 4500",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the target resource to receive the matched traffic. The forwarded traffic must be of a type appropriate to the target object. For INTERNAL_SELF_MANAGED load balancing, only HTTP and HTTPS targets are valid.\n\n([Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html) only) For global address with a purpose of PRIVATE_SERVICE_CONNECT and addressType of INTERNAL, only \"all-apis\" and \"vpc-sc\" are valid.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "target"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFilters"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address that this forwarding rule serves. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the target that you specify in the forwarding rule. The loadBalancingScheme and the forwarding rule's target determine the type of IP address that you can use. For detailed information, refer to [IP address specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).\n\nAn address can be specified either by a literal IP address or a reference to an existing Address resource. If you don't specify a reserved IP address, an ephemeral IP address is assigned.\n\nThe value must be set to 0.0.0.0 when the target is a targetGrpcProxy that has validateForProxyless field set to true.\n\nFor Private Service Connect forwarding rules that forward traffic to Google APIs, IP address must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP protocol to which this rule applies. When the load balancing scheme is INTERNAL_SELF_MANAGED, only TCP is valid. This field must not be set if the global address is configured as a purpose of PRIVATE_SERVICE_CONNECT and addressType of INTERNAL Possible values: [\"TCP\", \"UDP\", \"ESP\", \"AH\", \"SCTP\", \"ICMP\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP Version that will be used by this global forwarding rule. Possible values: [\"IPV4\", \"IPV6\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "This signifies what the GlobalForwardingRule will be used for. The value of INTERNAL_SELF_MANAGED means that this will be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Global Load Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy)\n\n([Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html) only) Note: This field must be set \"\" if the global address is configured as a purpose of PRIVATE_SERVICE_CONNECT and addressType of INTERNAL. Default value: \"EXTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL_SELF_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataFilters": {
						SchemaProps: spec.SchemaProps{
							Description: "Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies.\n\nFor each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata.\n\nmetadataFilters specified here can be overridden by those specified in the UrlMap that this ForwardingRule references.\n\nmetadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFilters"),
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portRange": {
						SchemaProps: spec.SchemaProps{
							Description: "This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy, TargetVpnGateway, TargetPool, TargetInstance.\n\nApplicable only when IPProtocol is TCP, UDP, or SCTP, only packets addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress, IPProtocol] pair must have disjoint port ranges.\n\nSome types of forwarding target have constraints on the acceptable ports:\n\n* TargetHttpProxy: 80, 8080 * TargetHttpsProxy: 443 * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,\n                  1883, 5222\n* TargetVpnGateway: 500, 4500",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the target resource to receive the matched traffic. The forwarded traffic must be of a type appropriate to the target object. For INTERNAL_SELF_MANAGED load balancing, only HTTP and HTTPS targets are valid.\n\n([Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html) only) For global address with a purpose of PRIVATE_SERVICE_CONNECT and addressType of INTERNAL, only \"all-apis\" and \"vpc-sc\" are valid.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "target"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFilters"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpecMetadataFilters(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"filterLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria\n\nThis list must not be empty and can have at the most 64 entries.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFiltersFilterLabels"),
									},
								},
							},
						},
					},
					"filterMatchCriteria": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match.\n\nMATCH_ANY - At least one of the filterLabels must have a matching label in the provided metadata. MATCH_ALL - All filterLabels must have matching labels in the provided metadata. Possible values: [\"MATCH_ANY\", \"MATCH_ALL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"filterLabels", "filterMatchCriteria"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalForwardingRuleSpecMetadataFiltersFilterLabels"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleSpecMetadataFiltersFilterLabels(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the metadata label. The length must be between 1 and 1024 characters, inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "The value that the label must match. The value has a maximum length of 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalForwardingRuleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalNetworkEndpointGroupList is a list of GlobalNetworkEndpointGroups",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of GlobalNetworkEndpointGroup CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroup"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroup"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"defaultPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The default port used if the port number is not specified in the network endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of network endpoints in this network endpoint group. Possible values: [\"INTERNET_IP_PORT\", \"INTERNET_FQDN_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "networkEndpointType"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointGroupSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"defaultPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The default port used if the port number is not specified in the network endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of network endpoints in this network endpoint group. Possible values: [\"INTERNET_IP_PORT\", \"INTERNET_FQDN_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name", "networkEndpointType"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalNetworkEndpointList is a list of GlobalNetworkEndpoints",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of GlobalNetworkEndpoint CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpoint"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpoint"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fqdn": {
						SchemaProps: spec.SchemaProps{
							Description: "Fully qualified domain name of network endpoint. This can only be specified when network_endpoint_type of the NEG is INTERNET_FQDN_PORT.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"globalNetworkEndpointGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The global network endpoint group this endpoint is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address external endpoint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port number of the external endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "globalNetworkEndpointGroup", "port"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.GlobalNetworkEndpointSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fqdn": {
						SchemaProps: spec.SchemaProps{
							Description: "Fully qualified domain name of network endpoint. This can only be specified when network_endpoint_type of the NEG is INTERNET_FQDN_PORT.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"globalNetworkEndpointGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The global network endpoint group this endpoint is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address external endpoint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port number of the external endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "globalNetworkEndpointGroup", "port"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_GlobalNetworkEndpointStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HaVPNGateway(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewayStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewayStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewayList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HaVPNGatewayList is a list of HaVPNGateways",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of HaVPNGateway CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGateway"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGateway"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewaySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network this VPN gateway is accepting traffic for.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region this gateway should sit in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"vpnInterfaces": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of interfaces on this VPN gateway.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpecVpnInterfaces"),
									},
								},
							},
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpecVpnInterfaces"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewaySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network this VPN gateway is accepting traffic for.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region this gateway should sit in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"vpnInterfaces": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of interfaces on this VPN gateway.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpecVpnInterfaces"),
									},
								},
							},
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HaVPNGatewaySpecVpnInterfaces"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewaySpecVpnInterfaces(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ID": {
						SchemaProps: spec.SchemaProps{
							Description: "The numeric ID of this VPN gateway interface.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The external IP address for this VPN gateway interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HaVPNGatewayStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HealthCheckList is a list of HealthChecks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of HealthCheck CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheck"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"grpcHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecGrpcHealthCheck"),
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"http2HealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttp2HealthCheck"),
						},
					},
					"httpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpHealthCheck"),
						},
					},
					"httpsHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpsHealthCheck"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecSslHealthCheck"),
						},
					},
					"tcpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecTcpHealthCheck"),
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the health check. One of HTTP, HTTPS, TCP, or SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecGrpcHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttp2HealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpsHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecSslHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecTcpHealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"grpcHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecGrpcHealthCheck"),
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"http2HealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttp2HealthCheck"),
						},
					},
					"httpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpHealthCheck"),
						},
					},
					"httpsHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpsHealthCheck"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecSslHealthCheck"),
						},
					},
					"tcpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecTcpHealthCheck"),
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the health check. One of HTTP, HTTPS, TCP, or SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecGrpcHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttp2HealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecHttpsHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecSslHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HealthCheckSpecTcpHealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecGrpcHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"grpcServiceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The gRPC service name for the health check. The value of grpcServiceName has the following meanings by convention:\n  - Empty serviceName means the overall status of all services at the backend.\n  - Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.\nThe grpcServiceName can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number for the health check request. Must be specified if portName and portSpecification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, gRPC health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecGrpcHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttp2HealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTP2 health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTP2 health check request. The default value is 443.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, HTTP2 health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTP2 health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttp2HealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTP health check request. The default value is 80.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, HTTP health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTP health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpsHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTPS health check request. The default value is 443.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, HTTPS health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTPS health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecHttpsHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecSslHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the SSL health check request. The default value is 443.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, SSL health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"request": {
						SchemaProps: spec.SchemaProps{
							Description: "The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecSslHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecTcpHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the TCP health check request. The default value is 443.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, TCP health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"request": {
						SchemaProps: spec.SchemaProps{
							Description: "The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckSpecTcpHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HealthCheckStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HttpHealthCheckList is a list of HttpHealthChecks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of HttpHealthCheck CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheck"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTP health check request. The default value is 80.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTP health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpHealthCheckSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTP health check request. The default value is 80.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTP health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpHealthCheckStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HttpsHealthCheckList is a list of HttpsHealthChecks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of HttpsHealthCheck CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheck"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTPS health check request. The default value is 80.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTPS health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.HttpsHealthCheckSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTPS health check request. The default value is 80.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTPS health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_HttpsHealthCheckStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Image(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageIamBindingList is a list of ImageIamBindings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ImageIamBinding CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBinding"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBinding"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "image", "members", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "image", "members", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamMember(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageIamMemberList is a list of ImageIamMembers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ImageIamMember CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMember"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMember"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "image", "member", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "image", "member", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamMemberStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageIamPolicyList is a list of ImageIamPolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ImageIamPolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "image", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageIamPolicySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "image", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageIamPolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageList is a list of Images",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Image CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Image"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Image"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"archiveSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskSizeGb": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the image when restored onto a persistent disk (in GB).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"family": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"guestOsFeatures": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of features to enable on the guest operating system. Applicable only for bootable images.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecGuestOsFeatures"),
									},
								},
							},
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource. Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this Image.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"licenses": {
						SchemaProps: spec.SchemaProps{
							Description: "Any applicable license URI.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"rawDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The parameters of the raw disk image.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecRawDisk"),
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sourceDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The source disk to create this image based on. You must provide either this property or the rawDisk.source property but not both to create an image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceImage": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the source image used to create this image. In order to create an image, you must provide the full or partial URL of one of the following:\n\n* The selfLink URL * This property * The rawDisk.source URL * The sourceDisk URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSnapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the source snapshot used to create this image.\n\nIn order to create an image, you must provide the full or partial URL of one of the following:\n\n* The selfLink URL * This property * The sourceImage URL * The rawDisk.source URL * The sourceDisk URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecGuestOsFeatures", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecRawDisk"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"archiveSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskSizeGb": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the image when restored onto a persistent disk (in GB).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"family": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"guestOsFeatures": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of features to enable on the guest operating system. Applicable only for bootable images.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecGuestOsFeatures"),
									},
								},
							},
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource. Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this Image.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"licenses": {
						SchemaProps: spec.SchemaProps{
							Description: "Any applicable license URI.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"rawDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The parameters of the raw disk image.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecRawDisk"),
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sourceDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The source disk to create this image based on. You must provide either this property or the rawDisk.source property but not both to create an image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceImage": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the source image used to create this image. In order to create an image, you must provide the full or partial URL of one of the following:\n\n* The selfLink URL * This property * The rawDisk.source URL * The sourceDisk URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSnapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the source snapshot used to create this image.\n\nIn order to create an image, you must provide the full or partial URL of one of the following:\n\n* The selfLink URL * This property * The sourceImage URL * The rawDisk.source URL * The sourceDisk URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecGuestOsFeatures", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ImageSpecRawDisk"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageSpecGuestOsFeatures(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Possible values: [\"MULTI_IP_SUBNET\", \"SECURE_BOOT\", \"SEV_CAPABLE\", \"UEFI_COMPATIBLE\", \"VIRTIO_SCSI_MULTIQUEUE\", \"WINDOWS\", \"GVNIC\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageSpecRawDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"containerType": {
						SchemaProps: spec.SchemaProps{
							Description: "The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created. Default value: \"TAR\" Possible values: [\"TAR\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sha1": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional SHA1 checksum of the disk image before unpackaging. This is provided by the client when the disk image is created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The full Google Cloud Storage URL where disk storage is stored You must provide either this property or the sourceDisk property but not both.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"source"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageSpecRawDiskCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ImageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Instance(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceFromTemplateList is a list of InstanceFromTemplates",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceFromTemplate CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplate"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplate"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"allowStoppingForUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, allows Terraform to stop the instance to update its properties. If you try to update a property that requires stopping the instance without setting this field, the update will fail.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"attachedDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "List of disks attached to the instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecAttachedDisk"),
									},
								},
							},
						},
					},
					"bootDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The boot disk for the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDisk"),
						},
					},
					"canIPForward": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether sending and receiving of packets with non-matching source or destination IPs is allowed.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"confidentialInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The Confidential VM config being used by the instance.  on_host_maintenance has to be set to TERMINATE or this will fail to create.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecConfidentialInstanceConfig"),
						},
					},
					"cpuPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The CPU platform used by this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Current status of the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deletionProtection": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether deletion protection is enabled on this instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"desiredStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired status of the instance. Either \"RUNNING\" or \"TERMINATED\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableDisplay": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance has virtual displays enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"guestAccelerator": {
						SchemaProps: spec.SchemaProps{
							Description: "List of the type and count of accelerator cards attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecGuestAccelerator"),
									},
								},
							},
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid. Valid format is a series of labels 1-63 characters long matching the regular expression [a-z]([-a-z0-9]*[a-z0-9]), concatenated with periods. The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceID": {
						SchemaProps: spec.SchemaProps{
							Description: "The server-assigned unique identifier of this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the labels.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs assigned to the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "The machine type to create.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata key/value pairs made available within the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"metadataFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the metadata.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataStartupScript": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata startup scripts made available within the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minCPUPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum CPU platform specified for the VM instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance. One of name or self_link must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The networks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterface"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If self_link is provided, this value is ignored. If neither self_link nor project are provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourcePolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of short names or self_links of resource policies to attach to the instance. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"scheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduling strategy being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScheduling"),
						},
					},
					"scratchDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The scratch disks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScratchDisk"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account to attach to the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecServiceAccount"),
						},
					},
					"shieldedInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The shielded vm config being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecShieldedInstanceConfig"),
						},
					},
					"sourceInstanceTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "Name or self link of an instance template to create the instance based on.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of tags attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tagsFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the tags.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance. If self_link is provided, this value is ignored. If neither self_link nor zone are provided, the provider zone is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "sourceInstanceTemplate"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecAttachedDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecConfidentialInstanceConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecGuestAccelerator", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterface", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScheduling", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScratchDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecServiceAccount", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecShieldedInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"allowStoppingForUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, allows Terraform to stop the instance to update its properties. If you try to update a property that requires stopping the instance without setting this field, the update will fail.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"attachedDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "List of disks attached to the instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecAttachedDisk"),
									},
								},
							},
						},
					},
					"bootDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The boot disk for the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDisk"),
						},
					},
					"canIPForward": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether sending and receiving of packets with non-matching source or destination IPs is allowed.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"confidentialInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The Confidential VM config being used by the instance.  on_host_maintenance has to be set to TERMINATE or this will fail to create.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecConfidentialInstanceConfig"),
						},
					},
					"cpuPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The CPU platform used by this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Current status of the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deletionProtection": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether deletion protection is enabled on this instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"desiredStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired status of the instance. Either \"RUNNING\" or \"TERMINATED\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableDisplay": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance has virtual displays enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"guestAccelerator": {
						SchemaProps: spec.SchemaProps{
							Description: "List of the type and count of accelerator cards attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecGuestAccelerator"),
									},
								},
							},
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid. Valid format is a series of labels 1-63 characters long matching the regular expression [a-z]([-a-z0-9]*[a-z0-9]), concatenated with periods. The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceID": {
						SchemaProps: spec.SchemaProps{
							Description: "The server-assigned unique identifier of this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the labels.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs assigned to the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "The machine type to create.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata key/value pairs made available within the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"metadataFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the metadata.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataStartupScript": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata startup scripts made available within the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minCPUPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum CPU platform specified for the VM instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance. One of name or self_link must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The networks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterface"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If self_link is provided, this value is ignored. If neither self_link nor project are provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourcePolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of short names or self_links of resource policies to attach to the instance. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"scheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduling strategy being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScheduling"),
						},
					},
					"scratchDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The scratch disks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScratchDisk"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account to attach to the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecServiceAccount"),
						},
					},
					"shieldedInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The shielded vm config being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecShieldedInstanceConfig"),
						},
					},
					"sourceInstanceTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "Name or self link of an instance template to create the instance based on.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of tags attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tagsFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the tags.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance. If self_link is provided, this value is ignored. If neither self_link nor zone are provided, the provider zone is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "sourceInstanceTemplate"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecAttachedDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecConfidentialInstanceConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecGuestAccelerator", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterface", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScheduling", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecScratchDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecServiceAccount", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecShieldedInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecAttachedDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name with which the attached disk is accessible under /dev/disk/by-id/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKeySha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Read/write mode for the disk. One of \"READ_ONLY\" or \"READ_WRITE\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the disk attached to this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"source"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"autoDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the disk will be auto-deleted when the instance is deleted.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name with which attached disk will be accessible under /dev/disk/by-id/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKeySha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"initializeParams": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters with which a disk was created alongside the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDiskInitializeParams"),
						},
					},
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Read/write mode for the disk. One of \"READ_ONLY\" or \"READ_WRITE\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the disk attached to this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecBootDiskInitializeParams"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDiskCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDiskInitializeParams(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The image from which this disk was initialised.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs assigned to the disk.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The size of the image in gigabytes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The Google Compute Engine disk type. One of pd-standard, pd-ssd or pd-balanced.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecBootDiskInitializeParamsCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecConfidentialInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enableConfidentialCompute": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines whether the instance should have confidential compute enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enableConfidentialCompute"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecConfidentialInstanceConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecGuestAccelerator(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"count": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of the guest accelerator cards exposed to this instance.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The accelerator type resource exposed to this instance. E.g. nvidia-tesla-k80.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"count", "type"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecNetworkInterface(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"accessConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Access configurations, i.e. IPs via which this instance can be accessed via the Internet.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterfaceAccessConfig"),
									},
								},
							},
						},
					},
					"aliasIPRange": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of alias IP ranges for this network interface.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterfaceAliasIPRange"),
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the interface",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the network attached to this interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The private IP address assigned to the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nicType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the subnetwork attached to this interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetworkProject": {
						SchemaProps: spec.SchemaProps{
							Description: "The project in which the subnetwork belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterfaceAccessConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecNetworkInterfaceAliasIPRange"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecNetworkInterfaceAccessConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"natIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address that is be 1:1 mapped to the instance's network ip.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The networking tier used for configuring this instance. One of PREMIUM or STANDARD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"publicPtrDomainName": {
						SchemaProps: spec.SchemaProps{
							Description: "The DNS domain name for the public PTR record.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecNetworkInterfaceAliasIPRange(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ipCIDRRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP CIDR range represented by this alias IP range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetworkRangeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The subnetwork secondary range name specifying the secondary range from which to allocate the IP CIDR range for this alias IP range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"ipCIDRRange"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecScheduling(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"automaticRestart": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies if the instance should be restarted if it was terminated by Compute Engine (not a user).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"minNodeCpus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"nodeAffinities": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies node affinities or anti-affinities to determine which sole-tenant nodes your instances and managed instance groups will use as host systems.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecSchedulingNodeAffinities"),
									},
								},
							},
						},
					},
					"onHostMaintenance": {
						SchemaProps: spec.SchemaProps{
							Description: "Describes maintenance behavior for the instance. One of MIGRATE or TERMINATE,",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preemptible": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance is preemptible.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceFromTemplateSpecSchedulingNodeAffinities"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecSchedulingCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecSchedulingNodeAffinities(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"key", "operator", "values"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecScratchDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "The disk interface used for attaching this disk. One of SCSI or NVME.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"interface"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecServiceAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account e-mail address.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scopes": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of service scopes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"scopes"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecServiceAccountCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecShieldedInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enableIntegrityMonitoring": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether integrity monitoring is enabled for the instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableSecureBoot": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether secure boot is enabled for the instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableVtpm": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance uses vTPM.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateSpecShieldedInstanceConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceFromTemplateStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceGroupList is a list of InstanceGroups",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceGroup CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroup"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroup"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManager(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceGroupManagerList is a list of InstanceGroupManagers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceGroupManager CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManager"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManager"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoHealingPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "The autohealing policies for this managed instance group. You can specify only one value.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecAutoHealingPolicies"),
						},
					},
					"baseInstanceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The base instance name to use for instances in this group. The value must be a valid RFC1035 name. Supported characters are lowercase letters, numbers, and hyphens (-). Instances are named by appending a hyphen and a random four-character string to the base instance name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of the instance group created by the manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group manager. Must be 1-63 characters long and comply with RFC1035. Supported characters include lowercase letters, numbers, and hyphens.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namedPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The named port configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecNamedPort"),
									},
								},
							},
						},
					},
					"operation": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"statefulDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "Disks created on the instances that will be preserved on instance delete, update, etc.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecStatefulDisk"),
									},
								},
							},
						},
					},
					"targetPools": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of all target pools to which new instances in the group are added. Updating the target pools attribute does not affect existing instances.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The target number of running instances for this managed instance group. This value should always be explicitly set unless this resource is attached to an autoscaler, in which case it should never be set. Defaults to 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"updatePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The update policy for this managed instance group.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecUpdatePolicy"),
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Application versions managed by this instance group. Each version deals with a specific instance template, allowing canary release scenarios.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersion"),
									},
								},
							},
						},
					},
					"waitForInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to wait for all instances to be created/updated before returning. Note that if this is set to true and the operation does not succeed, Terraform will continue trying until it times out.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone that instances in this group should be created in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "baseInstanceName", "name", "version"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecAutoHealingPolicies", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecNamedPort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecStatefulDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecUpdatePolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersion"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoHealingPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "The autohealing policies for this managed instance group. You can specify only one value.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecAutoHealingPolicies"),
						},
					},
					"baseInstanceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The base instance name to use for instances in this group. The value must be a valid RFC1035 name. Supported characters are lowercase letters, numbers, and hyphens (-). Instances are named by appending a hyphen and a random four-character string to the base instance name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of the instance group created by the manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group manager. Must be 1-63 characters long and comply with RFC1035. Supported characters include lowercase letters, numbers, and hyphens.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namedPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The named port configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecNamedPort"),
									},
								},
							},
						},
					},
					"operation": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"statefulDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "Disks created on the instances that will be preserved on instance delete, update, etc.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecStatefulDisk"),
									},
								},
							},
						},
					},
					"targetPools": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of all target pools to which new instances in the group are added. Updating the target pools attribute does not affect existing instances.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The target number of running instances for this managed instance group. This value should always be explicitly set unless this resource is attached to an autoscaler, in which case it should never be set. Defaults to 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"updatePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The update policy for this managed instance group.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecUpdatePolicy"),
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Application versions managed by this instance group. Each version deals with a specific instance template, allowing canary release scenarios.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersion"),
									},
								},
							},
						},
					},
					"waitForInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to wait for all instances to be created/updated before returning. Note that if this is set to true and the operation does not succeed, Terraform will continue trying until it times out.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone that instances in this group should be created in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "baseInstanceName", "name", "version"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecAutoHealingPolicies", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecNamedPort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecStatefulDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecUpdatePolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersion"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecAutoHealingPolicies(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"healthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "The health check resource that signals autohealing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"initialDelaySec": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"healthCheck", "initialDelaySec"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecAutoHealingPoliciesCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecNamedPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the port.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"name", "port"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecStatefulDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"deleteRule": {
						SchemaProps: spec.SchemaProps{
							Description: "A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are NEVER and ON_PERMANENT_INSTANCE_DELETION. NEVER - detach the disk when the VM is deleted, but do not delete the disk. ON_PERMANENT_INSTANCE_DELETION will delete the stateful disk when the VM is permanently deleted from the instance group. The default is NEVER.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The device name of the disk to be attached.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"deviceName"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecUpdatePolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxSurgeFixed": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with max_surge_percent. If neither is set, defaults to 1",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxSurgePercent": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with max_surge_fixed.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxUnavailableFixed": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances that can be unavailable during the update process. Conflicts with max_unavailable_percent. If neither is set, defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxUnavailablePercent": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with max_unavailable_fixed.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"minReadySec": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600].",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"minimalAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replacementMethod": {
						SchemaProps: spec.SchemaProps{
							Description: "The instance replacement method for managed instance groups. Valid values are: \"RECREATE\", \"SUBSTITUTE\". If SUBSTITUTE (default), the group replaces VM instances with new instances that have randomly generated names. If RECREATE, instance names are preserved.  You must also set max_unavailable_fixed or max_unavailable_percent to be greater than 0.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"minimalAction", "type"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecUpdatePolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecVersion(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"instanceTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL to an instance template from which all new instances of this version will be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Version name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances calculated as a fixed number or a percentage depending on the settings.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersionTargetSize"),
						},
					},
				},
				Required: []string{"instanceTemplate"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupManagerSpecVersionTargetSize"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecVersionTargetSize(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixed": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances which are managed for this version. Conflicts with percent.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percent": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances (calculated as percentage) which are managed for this version. Conflicts with fixed. Note that when using percent, rounding will be in favor of explicitly set target_size values; a managed instance group with 2 instances and 2 versions, one of which has a target_size.percent of 60 will create 2 instances of that version.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerSpecVersionTargetSizeCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupManagerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceGroupNamedPortList is a list of InstanceGroupNamedPorts",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceGroupNamedPort CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPort"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPort"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number, which can be a value between 1 and 65535.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "group", "name", "port"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupNamedPortSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number, which can be a value between 1 and 65535.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "group", "name", "port"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupNamedPortStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the instance group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instances": {
						SchemaProps: spec.SchemaProps{
							Description: "List of instances in the group. They should be given as self_link URLs. When adding instances they must all be in the same network and zone as the instance group.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group. Must be 1-63 characters long and comply with RFC1035. Supported characters include lowercase letters, numbers, and hyphens.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namedPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The named port configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpecNamedPort"),
									},
								},
							},
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the network the instance group is in. If this is different from the network where the instances are in, the creation fails. Defaults to the network where the instances are in (if neither network nor instances is specified, this field will be blank).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances in the group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone that this instance group should be created in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpecNamedPort"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the instance group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instances": {
						SchemaProps: spec.SchemaProps{
							Description: "List of instances in the group. They should be given as self_link URLs. When adding instances they must all be in the same network and zone as the instance group.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group. Must be 1-63 characters long and comply with RFC1035. Supported characters include lowercase letters, numbers, and hyphens.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namedPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The named port configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpecNamedPort"),
									},
								},
							},
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the network the instance group is in. If this is different from the network where the instances are in, the creation fails. Defaults to the network where the instances are in (if neither network nor instances is specified, this field will be blank).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances in the group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone that this instance group should be created in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceGroupSpecNamedPort"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupSpecNamedPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name which the port will be mapped to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number to map the name to.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"name", "port"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceIamBindingList is a list of InstanceIamBindings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceIamBinding CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBinding"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBinding"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "instanceName", "members", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "instanceName", "members", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMember(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceIamMemberList is a list of InstanceIamMembers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceIamMember CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMember"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMember"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "instanceName", "member", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "instanceName", "member", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamMemberStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceIamPolicyList is a list of InstanceIamPolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceIamPolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "instanceName", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceIamPolicySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "instanceName", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceIamPolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceList is a list of Instances",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Instance CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Instance"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Instance"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"allowStoppingForUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, allows Terraform to stop the instance to update its properties. If you try to update a property that requires stopping the instance without setting this field, the update will fail.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"attachedDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "List of disks attached to the instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecAttachedDisk"),
									},
								},
							},
						},
					},
					"bootDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The boot disk for the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDisk"),
						},
					},
					"canIPForward": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether sending and receiving of packets with non-matching source or destination IPs is allowed.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"confidentialInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The Confidential VM config being used by the instance.  on_host_maintenance has to be set to TERMINATE or this will fail to create.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecConfidentialInstanceConfig"),
						},
					},
					"cpuPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The CPU platform used by this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Current status of the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deletionProtection": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether deletion protection is enabled on this instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"desiredStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired status of the instance. Either \"RUNNING\" or \"TERMINATED\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableDisplay": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance has virtual displays enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"guestAccelerator": {
						SchemaProps: spec.SchemaProps{
							Description: "List of the type and count of accelerator cards attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecGuestAccelerator"),
									},
								},
							},
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid. Valid format is a series of labels 1-63 characters long matching the regular expression [a-z]([-a-z0-9]*[a-z0-9]), concatenated with periods. The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceID": {
						SchemaProps: spec.SchemaProps{
							Description: "The server-assigned unique identifier of this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the labels.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs assigned to the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "The machine type to create.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata key/value pairs made available within the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"metadataFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the metadata.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataStartupScript": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata startup scripts made available within the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minCPUPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum CPU platform specified for the VM instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance. One of name or self_link must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The networks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterface"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If self_link is provided, this value is ignored. If neither self_link nor project are provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourcePolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of short names or self_links of resource policies to attach to the instance. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"scheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduling strategy being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScheduling"),
						},
					},
					"scratchDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The scratch disks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScratchDisk"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account to attach to the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecServiceAccount"),
						},
					},
					"shieldedInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The shielded vm config being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecShieldedInstanceConfig"),
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of tags attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tagsFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the tags.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance. If self_link is provided, this value is ignored. If neither self_link nor zone are provided, the provider zone is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "bootDisk", "machineType", "name", "networkInterface"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecAttachedDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecConfidentialInstanceConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecGuestAccelerator", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterface", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScheduling", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScratchDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecServiceAccount", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecShieldedInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"allowStoppingForUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, allows Terraform to stop the instance to update its properties. If you try to update a property that requires stopping the instance without setting this field, the update will fail.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"attachedDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "List of disks attached to the instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecAttachedDisk"),
									},
								},
							},
						},
					},
					"bootDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The boot disk for the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDisk"),
						},
					},
					"canIPForward": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether sending and receiving of packets with non-matching source or destination IPs is allowed.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"confidentialInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The Confidential VM config being used by the instance.  on_host_maintenance has to be set to TERMINATE or this will fail to create.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecConfidentialInstanceConfig"),
						},
					},
					"cpuPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The CPU platform used by this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Current status of the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deletionProtection": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether deletion protection is enabled on this instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"desiredStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired status of the instance. Either \"RUNNING\" or \"TERMINATED\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableDisplay": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance has virtual displays enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"guestAccelerator": {
						SchemaProps: spec.SchemaProps{
							Description: "List of the type and count of accelerator cards attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecGuestAccelerator"),
									},
								},
							},
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid. Valid format is a series of labels 1-63 characters long matching the regular expression [a-z]([-a-z0-9]*[a-z0-9]), concatenated with periods. The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceID": {
						SchemaProps: spec.SchemaProps{
							Description: "The server-assigned unique identifier of this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the labels.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs assigned to the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "The machine type to create.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata key/value pairs made available within the instance.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"metadataFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the metadata.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataStartupScript": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata startup scripts made available within the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minCPUPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum CPU platform specified for the VM instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance. One of name or self_link must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The networks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterface"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If self_link is provided, this value is ignored. If neither self_link nor project are provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourcePolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of short names or self_links of resource policies to attach to the instance. Modifying this list will cause the instance to recreate. Currently a max of 1 resource policy is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"scheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduling strategy being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScheduling"),
						},
					},
					"scratchDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "The scratch disks attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScratchDisk"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account to attach to the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecServiceAccount"),
						},
					},
					"shieldedInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The shielded vm config being used by the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecShieldedInstanceConfig"),
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of tags attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tagsFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the tags.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance. If self_link is provided, this value is ignored. If neither self_link nor zone are provided, the provider zone is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "bootDisk", "machineType", "name", "networkInterface"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecAttachedDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecConfidentialInstanceConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecGuestAccelerator", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterface", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScheduling", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecScratchDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecServiceAccount", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecShieldedInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecAttachedDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name with which the attached disk is accessible under /dev/disk/by-id/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKeySha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Read/write mode for the disk. One of \"READ_ONLY\" or \"READ_WRITE\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the disk attached to this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"source"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"autoDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the disk will be auto-deleted when the instance is deleted.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name with which attached disk will be accessible under /dev/disk/by-id/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKeySha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"initializeParams": {
						SchemaProps: spec.SchemaProps{
							Description: "Parameters with which a disk was created alongside the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDiskInitializeParams"),
						},
					},
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self_link of the encryption key that is stored in Google Cloud KMS to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Read/write mode for the disk. One of \"READ_ONLY\" or \"READ_WRITE\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the disk attached to this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecBootDiskInitializeParams"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDiskCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDiskInitializeParams(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The image from which this disk was initialised.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs assigned to the disk.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The size of the image in gigabytes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The Google Compute Engine disk type. One of pd-standard, pd-ssd or pd-balanced.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecBootDiskInitializeParamsCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecConfidentialInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enableConfidentialCompute": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines whether the instance should have confidential compute enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enableConfidentialCompute"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecConfidentialInstanceConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecGuestAccelerator(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"count": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of the guest accelerator cards exposed to this instance.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The accelerator type resource exposed to this instance. E.g. nvidia-tesla-k80.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"count", "type"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecNetworkInterface(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"accessConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Access configurations, i.e. IPs via which this instance can be accessed via the Internet.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterfaceAccessConfig"),
									},
								},
							},
						},
					},
					"aliasIPRange": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of alias IP ranges for this network interface.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterfaceAliasIPRange"),
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the interface",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the network attached to this interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The private IP address assigned to the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nicType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the subnetwork attached to this interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetworkProject": {
						SchemaProps: spec.SchemaProps{
							Description: "The project in which the subnetwork belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterfaceAccessConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecNetworkInterfaceAliasIPRange"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecNetworkInterfaceAccessConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"natIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address that is be 1:1 mapped to the instance's network ip.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The networking tier used for configuring this instance. One of PREMIUM or STANDARD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"publicPtrDomainName": {
						SchemaProps: spec.SchemaProps{
							Description: "The DNS domain name for the public PTR record.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecNetworkInterfaceAliasIPRange(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ipCIDRRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP CIDR range represented by this alias IP range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetworkRangeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The subnetwork secondary range name specifying the secondary range from which to allocate the IP CIDR range for this alias IP range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"ipCIDRRange"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecScheduling(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"automaticRestart": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies if the instance should be restarted if it was terminated by Compute Engine (not a user).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"minNodeCpus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"nodeAffinities": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies node affinities or anti-affinities to determine which sole-tenant nodes your instances and managed instance groups will use as host systems.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecSchedulingNodeAffinities"),
									},
								},
							},
						},
					},
					"onHostMaintenance": {
						SchemaProps: spec.SchemaProps{
							Description: "Describes maintenance behavior for the instance. One of MIGRATE or TERMINATE,",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preemptible": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance is preemptible.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceSpecSchedulingNodeAffinities"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecSchedulingCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecSchedulingNodeAffinities(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"key", "operator", "values"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecScratchDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "The disk interface used for attaching this disk. One of SCSI or NVME.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"interface"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecServiceAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account e-mail address.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scopes": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of service scopes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"scopes"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecServiceAccountCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecShieldedInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enableIntegrityMonitoring": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether integrity monitoring is enabled for the instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableSecureBoot": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether secure boot is enabled for the instance.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableVtpm": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the instance uses vTPM.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceSpecShieldedInstanceConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceTemplateList is a list of InstanceTemplates",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InstanceTemplate CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplate"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplate"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"canIPForward": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to allow sending and receiving of packets with non-matching source or destination IPs. This defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"confidentialInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The Confidential VM config being used by the instance. on_host_maintenance has to be set to TERMINATE or this will fail to create.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecConfidentialInstanceConfig"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "Disks to attach to instances created from this template. This can be specified multiple times for multiple disks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDisk"),
									},
								},
							},
						},
					},
					"enableDisplay": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable Virtual Displays on this instance. Note: allow_stopping_for_update must be set to true in order to update this field.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"guestAccelerator": {
						SchemaProps: spec.SchemaProps{
							Description: "List of the type and count of accelerator cards attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecGuestAccelerator"),
									},
								},
							},
						},
					},
					"instanceDescription": {
						SchemaProps: spec.SchemaProps{
							Description: "A description of the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs to assign to instances created from this template,",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "The machine type to create. To create a machine with a custom type (such as extended memory), format the value like custom-VCPUS-MEM_IN_MB like custom-6-20480 for 6 vCPU and 20GB of RAM.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata key/value pairs to make available from within instances created from this template.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"metadataFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the metadata.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataStartupScript": {
						SchemaProps: spec.SchemaProps{
							Description: "An alternative to using the startup-script metadata key, mostly to match the compute_instance resource. This replaces the startup-script metadata key on the created instance and thus the two mechanisms are not allowed to be used simultaneously.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minCPUPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a minimum CPU platform. Applicable values are the friendly names of CPU platforms, such as Intel Haswell or Intel Skylake.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance template. If you leave this blank, Terraform will auto-generate a unique name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "Creates a unique name beginning with the specified prefix. Conflicts with name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks to attach to instances created from this template. This can be specified multiple times for multiple networks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterface"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "An instance template is a global resource that is not bound to a zone or a region. However, you can still specify some regional resources in an instance template, which restricts the template to the region where that resource resides. For example, a custom subnetwork resource is tied to a specific region. Defaults to the region of the Provider if no value is given.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduling strategy to use.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecScheduling"),
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "Service account to attach to the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecServiceAccount"),
						},
					},
					"shieldedInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable Shielded VM on this instance. Shielded VM provides verifiable integrity to prevent against malware and rootkits. Defaults to disabled. Note: shielded_instance_config can only be used with boot images with shielded vm support.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecShieldedInstanceConfig"),
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "Tags to attach to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tagsFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the tags.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "disk", "machineType"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecConfidentialInstanceConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecGuestAccelerator", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterface", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecScheduling", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecServiceAccount", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecShieldedInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"canIPForward": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to allow sending and receiving of packets with non-matching source or destination IPs. This defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"confidentialInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "The Confidential VM config being used by the instance. on_host_maintenance has to be set to TERMINATE or this will fail to create.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecConfidentialInstanceConfig"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "Disks to attach to instances created from this template. This can be specified multiple times for multiple disks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDisk"),
									},
								},
							},
						},
					},
					"enableDisplay": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable Virtual Displays on this instance. Note: allow_stopping_for_update must be set to true in order to update this field.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"guestAccelerator": {
						SchemaProps: spec.SchemaProps{
							Description: "List of the type and count of accelerator cards attached to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecGuestAccelerator"),
									},
								},
							},
						},
					},
					"instanceDescription": {
						SchemaProps: spec.SchemaProps{
							Description: "A description of the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs to assign to instances created from this template,",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "The machine type to create. To create a machine with a custom type (such as extended memory), format the value like custom-VCPUS-MEM_IN_MB like custom-6-20480 for 6 vCPU and 20GB of RAM.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata key/value pairs to make available from within instances created from this template.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"metadataFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the metadata.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataStartupScript": {
						SchemaProps: spec.SchemaProps{
							Description: "An alternative to using the startup-script metadata key, mostly to match the compute_instance resource. This replaces the startup-script metadata key on the created instance and thus the two mechanisms are not allowed to be used simultaneously.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minCPUPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a minimum CPU platform. Applicable values are the friendly names of CPU platforms, such as Intel Haswell or Intel Skylake.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance template. If you leave this blank, Terraform will auto-generate a unique name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "Creates a unique name beginning with the specified prefix. Conflicts with name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks to attach to instances created from this template. This can be specified multiple times for multiple networks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterface"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "An instance template is a global resource that is not bound to a zone or a region. However, you can still specify some regional resources in an instance template, which restricts the template to the region where that resource resides. For example, a custom subnetwork resource is tied to a specific region. Defaults to the region of the Provider if no value is given.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduling strategy to use.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecScheduling"),
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "Service account to attach to the instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecServiceAccount"),
						},
					},
					"shieldedInstanceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable Shielded VM on this instance. Shielded VM provides verifiable integrity to prevent against malware and rootkits. Defaults to disabled. Note: shielded_instance_config can only be used with boot images with shielded vm support.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecShieldedInstanceConfig"),
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "Tags to attach to the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tagsFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique fingerprint of the tags.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "disk", "machineType"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecConfidentialInstanceConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecGuestAccelerator", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterface", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecScheduling", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecServiceAccount", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecShieldedInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecConfidentialInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enableConfidentialCompute": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines whether the instance should have confidential compute enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enableConfidentialCompute"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecConfidentialInstanceConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"autoDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether or not the disk should be auto-deleted. This defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"boot": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates that this is a boot disk.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Encrypts or decrypts a disk using a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDiskDiskEncryptionKey"),
						},
					},
					"diskName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the disk. When not provided, this defaults to the name of the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskSizeGb": {
						SchemaProps: spec.SchemaProps{
							Description: "The size of the image in gigabytes. If not specified, it will inherit the size of its base image. For SCRATCH disks, the size must be exactly 375GB.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"diskType": {
						SchemaProps: spec.SchemaProps{
							Description: "The Google Compute Engine disk type. Can be either \"pd-ssd\", \"local-ssd\", \"pd-balanced\" or \"pd-standard\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the disk interface to use for attaching this disk.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key/value label pairs to assign to disks,",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If you are attaching or creating a boot disk, this must read-write mode.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourcePolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "A list (short name or id) of resource policies to attach to this disk. Currently a max of 1 resource policy is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The name (not self_link) of the disk (such as those managed by google_compute_disk) to attach. ~> Note: Either source or source_image is required when creating a new instance except for when creating a local SSD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceImage": {
						SchemaProps: spec.SchemaProps{
							Description: "The image from which to initialize this disk. This can be one of: the image's self_link, projects/{project}/global/images/{image}, projects/{project}/global/images/family/{family}, global/images/{image}, global/images/family/{family}, family/{family}, {project}/{family}, {project}/{image}, {family}, or {image}. ~> Note: Either source or source_image is required when creating a new instance except for when creating a local SSD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of Google Compute Engine disk, can be either \"SCRATCH\" or \"PERSISTENT\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecDiskDiskEncryptionKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecDiskDiskEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The self link of the encryption key that is stored in Google Cloud KMS.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"kmsKeySelfLink"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecDiskDiskEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecGuestAccelerator(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"count": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of the guest accelerator cards exposed to this instance.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The accelerator type resource to expose to this instance. E.g. nvidia-tesla-k80.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"count", "type"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecNetworkInterface(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"accessConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Access configurations, i.e. IPs via which this instance can be accessed via the Internet. Omit to ensure that the instance is not accessible from the Internet (this means that ssh provisioners will not work unless you are running Terraform can send traffic to the instance's network (e.g. via tunnel or because it is running on another cloud instance on that network). This block can be repeated multiple times.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterfaceAccessConfig"),
									},
								},
							},
						},
					},
					"aliasIPRange": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of alias IP ranges for this network interface. Can only be specified for network interfaces on subnet-mode networks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterfaceAliasIPRange"),
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the network_interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or self_link of the network to attach this interface to. Use network attribute for Legacy or Auto subnetted networks and subnetwork for custom subnetted networks.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The private IP address to assign to the instance. If empty, the address will be automatically assigned.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nicType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the subnetwork to attach this interface to. The subnetwork must exist in the same region this instance will be created in. Either network or subnetwork must be provided.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetworkProject": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the subnetwork belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterfaceAccessConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecNetworkInterfaceAliasIPRange"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecNetworkInterfaceAccessConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"natIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address that will be 1:1 mapped to the instance's network ip. If not given, one will be generated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The networking tier used for configuring this instance template. This field can take the following values: PREMIUM or STANDARD. If this field is not specified, it is assumed to be PREMIUM.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"publicPtrDomainName": {
						SchemaProps: spec.SchemaProps{
							Description: "The DNS domain name for the public PTR record.The DNS domain name for the public PTR record.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecNetworkInterfaceAliasIPRange(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ipCIDRRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP CIDR range represented by this alias IP range. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. At the time of writing only a netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API error.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetworkRangeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The subnetwork secondary range name specifying the secondary range from which to allocate the IP CIDR range for this alias IP range. If left unspecified, the primary range of the subnetwork will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"ipCIDRRange"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecScheduling(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"automaticRestart": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). This defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"minNodeCpus": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum number of cpus for the instance.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"nodeAffinities": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies node affinities or anti-affinities to determine which sole-tenant nodes your instances and managed instance groups will use as host systems.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecSchedulingNodeAffinities"),
									},
								},
							},
						},
					},
					"onHostMaintenance": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the maintenance behavior for this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preemptible": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows instance to be preempted. This defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.InstanceTemplateSpecSchedulingNodeAffinities"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecSchedulingCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecSchedulingNodeAffinities(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"key", "operator", "values"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecServiceAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account e-mail address. If not given, the default Google Compute Engine service account is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scopes": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of service scopes. Both OAuth2 URLs and gcloud short names are supported. To allow full access to all Cloud APIs, use the cloud-platform scope.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"scopes"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecServiceAccountCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecShieldedInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enableIntegrityMonitoring": {
						SchemaProps: spec.SchemaProps{
							Description: "Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableSecureBoot": {
						SchemaProps: spec.SchemaProps{
							Description: "Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableVtpm": {
						SchemaProps: spec.SchemaProps{
							Description: "Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateSpecShieldedInstanceConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InstanceTemplateStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InterconnectAttachmentList is a list of InterconnectAttachments",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of InterconnectAttachment CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachment"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachment"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the VLAN attachment is enabled or disabled.  When using PARTNER type this will Pre-Activate the interconnect attachment",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bandwidth": {
						SchemaProps: spec.SchemaProps{
							Description: "Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible values: [\"BPS_50M\", \"BPS_100M\", \"BPS_200M\", \"BPS_300M\", \"BPS_400M\", \"BPS_500M\", \"BPS_1G\", \"BPS_2G\", \"BPS_5G\", \"BPS_10G\", \"BPS_20G\", \"BPS_50G\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"candidateSubnets": {
						SchemaProps: spec.SchemaProps{
							Description: "Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"cloudRouterIPAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"customerRouterIPAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"edgeAvailabilityDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved reliability, customers should configure a pair of attachments with one per availability domain. The selected availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"googleReferenceID": {
						SchemaProps: spec.SchemaProps{
							Description: "Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interconnect": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is DEDICATED, must not be set if type is PARTNER.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mtu": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pairingKey": {
						SchemaProps: spec.SchemaProps{
							Description: "[Output only for type PARTNER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form \"XXXXX/region/domain\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partnerAsn": {
						SchemaProps: spec.SchemaProps{
							Description: "[Output only for type PARTNER. Not present for DEDICATED]. Optional BGP ASN for the router that should be supplied by a layer 3 Partner if they configured BGP on behalf of the customer.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"privateInterconnectInfo": {
						SchemaProps: spec.SchemaProps{
							Description: "Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpecPrivateInterconnectInfo"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the regional interconnect attachment resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the cloud router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "[Output Only] The current state of this attachment's functionality.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: [\"DEDICATED\", \"PARTNER\", \"PARTNER_PROVIDER\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vlanTag8021q": {
						SchemaProps: spec.SchemaProps{
							Description: "The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed upstream.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "router"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpecPrivateInterconnectInfo"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the VLAN attachment is enabled or disabled.  When using PARTNER type this will Pre-Activate the interconnect attachment",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bandwidth": {
						SchemaProps: spec.SchemaProps{
							Description: "Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, Defaults to BPS_10G Possible values: [\"BPS_50M\", \"BPS_100M\", \"BPS_200M\", \"BPS_300M\", \"BPS_400M\", \"BPS_500M\", \"BPS_1G\", \"BPS_2G\", \"BPS_5G\", \"BPS_10G\", \"BPS_20G\", \"BPS_50G\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"candidateSubnets": {
						SchemaProps: spec.SchemaProps{
							Description: "Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"cloudRouterIPAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"customerRouterIPAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"edgeAvailabilityDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired availability domain for the attachment. Only available for type PARTNER, at creation time. For improved reliability, customers should configure a pair of attachments with one per availability domain. The selected availability domain will be provided to the Partner via the pairing key so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"googleReferenceID": {
						SchemaProps: spec.SchemaProps{
							Description: "Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interconnect": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the underlying Interconnect object that this attachment's traffic will traverse through. Required if type is DEDICATED, must not be set if type is PARTNER.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mtu": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Currently, only 1440 and 1500 are allowed. If not specified, the value will default to 1440.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pairingKey": {
						SchemaProps: spec.SchemaProps{
							Description: "[Output only for type PARTNER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form \"XXXXX/region/domain\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partnerAsn": {
						SchemaProps: spec.SchemaProps{
							Description: "[Output only for type PARTNER. Not present for DEDICATED]. Optional BGP ASN for the router that should be supplied by a layer 3 Partner if they configured BGP on behalf of the customer.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"privateInterconnectInfo": {
						SchemaProps: spec.SchemaProps{
							Description: "Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpecPrivateInterconnectInfo"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the regional interconnect attachment resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the cloud router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "[Output Only] The current state of this attachment's functionality.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of InterconnectAttachment you wish to create. Defaults to DEDICATED. Possible values: [\"DEDICATED\", \"PARTNER\", \"PARTNER_PROVIDER\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vlanTag8021q": {
						SchemaProps: spec.SchemaProps{
							Description: "The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. When using PARTNER type this will be managed upstream.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name", "router"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.InterconnectAttachmentSpecPrivateInterconnectInfo"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentSpecPrivateInterconnectInfo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"tag8021q": {
						SchemaProps: spec.SchemaProps{
							Description: "802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_InterconnectAttachmentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManagedSSLCertificateList is a list of ManagedSSLCertificates",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ManagedSSLCertificate CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificate"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificate"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"certificateID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expireTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Expire time of the certificate.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"managed": {
						SchemaProps: spec.SchemaProps{
							Description: "Properties relevant to a managed certificate.  These will be used if the certificate is managed (as indicated by a value of 'MANAGED' in 'type').",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpecManaged"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThese are in the same namespace as the managed SSL certificates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subjectAlternativeNames": {
						SchemaProps: spec.SchemaProps{
							Description: "Domains associated with the certificate via Subject Alternative Name.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: \"MANAGED\" Possible values: [\"MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpec2"),
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpecManaged"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"certificateID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expireTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Expire time of the certificate.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"managed": {
						SchemaProps: spec.SchemaProps{
							Description: "Properties relevant to a managed certificate.  These will be used if the certificate is managed (as indicated by a value of 'MANAGED' in 'type').",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpecManaged"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThese are in the same namespace as the managed SSL certificates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subjectAlternativeNames": {
						SchemaProps: spec.SchemaProps{
							Description: "Domains associated with the certificate via Subject Alternative Name.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Enum field whose value is always 'MANAGED' - used to signal to the API which type this is. Default value: \"MANAGED\" Possible values: [\"MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ManagedSSLCertificateSpecManaged"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpecManaged(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"domains": {
						SchemaProps: spec.SchemaProps{
							Description: "Domains for which a managed SSL certificate will be valid.  Currently, there can be up to 100 domains in this list.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"domains"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateSpecManagedCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ManagedSSLCertificateStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Network(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkEndpointGroupList is a list of NetworkEndpointGroups",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of NetworkEndpointGroup CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroup"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroup"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"defaultPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The default port used if the port number is not specified in the network endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network to which all network endpoints in the NEG belong. Uses \"default\" project network if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of network endpoints in this network endpoint group. Default value: \"GCE_VM_IP_PORT\" Possible values: [\"GCE_VM_IP_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of network endpoints in the network endpoint group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional subnetwork to which all network endpoints in the NEG belong.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where the network endpoint group is located.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointGroupSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"defaultPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The default port used if the port number is not specified in the network endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network to which all network endpoints in the NEG belong. Uses \"default\" project network if unspecified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of network endpoints in this network endpoint group. Default value: \"GCE_VM_IP_PORT\" Possible values: [\"GCE_VM_IP_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of network endpoints in the network endpoint group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional subnetwork to which all network endpoints in the NEG belong.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where the network endpoint group is located.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkEndpointList is a list of NetworkEndpoints",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of NetworkEndpoint CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpoint"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpoint"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instance": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address of network endpoint. The IP address must belong to a VM in GCE (either the primary IP or as part of an aliased IP range).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The network endpoint group this endpoint is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port number of network endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where the containing network endpoint group is located.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "instance", "ipAddress", "networkEndpointGroup", "port"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkEndpointSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instance": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network endpoint group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4 address of network endpoint. The IP address must belong to a VM in GCE (either the primary IP or as part of an aliased IP range).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The network endpoint group this endpoint is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port number of network endpoint.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where the containing network endpoint group is located.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "instance", "ipAddress", "networkEndpointGroup", "port"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkEndpointStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkList is a list of Networks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Network CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Network"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Network"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeering(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkPeeringList is a list of NetworkPeerings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of NetworkPeering CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeering"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeering"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkPeeringRoutesConfigList is a list of NetworkPeeringRoutesConfigs",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of NetworkPeeringRoutesConfig CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfig"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"exportCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to export the custom routes to the peer network.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"importCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to import the custom routes to the peer network.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the primary network for the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peering": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "exportCustomRoutes", "importCustomRoutes", "network", "peering"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringRoutesConfigSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"exportCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to export the custom routes to the peer network.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"importCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to import the custom routes to the peer network.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the primary network for the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peering": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "exportCustomRoutes", "importCustomRoutes", "network", "peering"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringRoutesConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"exportCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to export the custom routes to the peer network. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exportSubnetRoutesWithPublicIP": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"importCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to export the custom routes from the peer network. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"importSubnetRoutesWithPublicIP": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The primary network of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The peer network in the peering. The peer network may belong to a different project.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the peer network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stateDetails": {
						SchemaProps: spec.SchemaProps{
							Description: "Details about the current state of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "network", "peerNetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkPeeringSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"exportCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to export the custom routes to the peer network. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exportSubnetRoutesWithPublicIP": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"importCustomRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to export the custom routes from the peer network. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"importSubnetRoutesWithPublicIP": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The primary network of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "The peer network in the peering. The peer network may belong to a different project.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the peer network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stateDetails": {
						SchemaProps: spec.SchemaProps{
							Description: "Details about the current state of the peering.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "network", "peerNetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkPeeringStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoCreateSubnetworks": {
						SchemaProps: spec.SchemaProps{
							Description: "When set to 'true', the network is created in \"auto subnet mode\" and it will create a subnet for each region automatically across the '10.128.0.0/9' address range.\n\nWhen set to 'false', the network is created in \"custom subnet mode\" so the user can explicitly connect subnetwork resources.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"deleteDefaultRoutesOnCreate": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. The resource must be recreated to modify this field.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gatewayIpv4": {
						SchemaProps: spec.SchemaProps{
							Description: "The gateway address for default routing out of the network. This value is selected by GCP.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mtu": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum Transmission Unit in bytes. The minimum value for this field is 1460 and the maximum value is 1500 bytes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routingMode": {
						SchemaProps: spec.SchemaProps{
							Description: "The network-wide routing mode to use. If set to 'REGIONAL', this network's cloud routers will only advertise routes with subnetworks of this network in the same region as the router. If set to 'GLOBAL', this network's cloud routers will advertise routes with all subnetworks of this network, across regions. Possible values: [\"REGIONAL\", \"GLOBAL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NetworkSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoCreateSubnetworks": {
						SchemaProps: spec.SchemaProps{
							Description: "When set to 'true', the network is created in \"auto subnet mode\" and it will create a subnet for each region automatically across the '10.128.0.0/9' address range.\n\nWhen set to 'false', the network is created in \"custom subnet mode\" so the user can explicitly connect subnetwork resources.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"deleteDefaultRoutesOnCreate": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. The resource must be recreated to modify this field.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gatewayIpv4": {
						SchemaProps: spec.SchemaProps{
							Description: "The gateway address for default routing out of the network. This value is selected by GCP.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mtu": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum Transmission Unit in bytes. The minimum value for this field is 1460 and the maximum value is 1500 bytes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routingMode": {
						SchemaProps: spec.SchemaProps{
							Description: "The network-wide routing mode to use. If set to 'REGIONAL', this network's cloud routers will only advertise routes with subnetworks of this network in the same region as the router. If set to 'GLOBAL', this network's cloud routers will advertise routes with all subnetworks of this network, across regions. Possible values: [\"REGIONAL\", \"GLOBAL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NetworkStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroupList is a list of NodeGroups",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of NodeGroup CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroup"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroup"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoscalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes of your node groups.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecAutoscalingPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maintenancePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maintenanceWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "contains properties for the timeframe of maintenance",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecMaintenanceWindow"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the node template to which this node group belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes in the node group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where this node group is located",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "nodeTemplate", "size"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecAutoscalingPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecMaintenanceWindow"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoscalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "If you use sole-tenant nodes for your workloads, you can use the node group autoscaler to automatically manage the sizes of your node groups.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecAutoscalingPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maintenancePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maintenanceWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "contains properties for the timeframe of maintenance",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecMaintenanceWindow"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the node template to which this node group belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The total number of nodes in the node group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where this node group is located",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "nodeTemplate", "size"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecAutoscalingPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeGroupSpecMaintenanceWindow"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecAutoscalingPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum size of the node group. Set to a value less than or equal to 100 and greater than or equal to min-nodes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"minNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum size of the node group. Must be less than or equal to max-nodes. The default value is 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The autoscaling mode. Set to one of the following:\n  - OFF: Disables the autoscaler.\n  - ON: Enables scaling in and scaling out.\n  - ONLY_SCALE_OUT: Enables only scaling out.\n  You must use this mode if your node groups are configured to\n  restart their hosted VMs on minimal servers. Possible values: [\"OFF\", \"ON\", \"ONLY_SCALE_OUT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecAutoscalingPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecMaintenanceWindow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"startTime"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupSpecMaintenanceWindowCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeTemplateList is a list of NodeTemplates",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of NodeTemplate CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplate"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplate"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cpuOvercommitType": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU overcommit. Default value: \"NONE\" Possible values: [\"ENABLED\", \"NONE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeAffinityLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to use for node affinity, which will be used in instance scheduling.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"nodeType": {
						SchemaProps: spec.SchemaProps{
							Description: "Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeTypeFlexibility": {
						SchemaProps: spec.SchemaProps{
							Description: "Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecNodeTypeFlexibility"),
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where nodes using the node template will be created. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serverBinding": {
						SchemaProps: spec.SchemaProps{
							Description: "The server binding policy for nodes using this template. Determines where the nodes should restart following a maintenance event.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecServerBinding"),
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpec2"),
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecNodeTypeFlexibility", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecServerBinding"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cpuOvercommitType": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU overcommit. Default value: \"NONE\" Possible values: [\"ENABLED\", \"NONE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeAffinityLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to use for node affinity, which will be used in instance scheduling.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"nodeType": {
						SchemaProps: spec.SchemaProps{
							Description: "Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeTypeFlexibility": {
						SchemaProps: spec.SchemaProps{
							Description: "Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecNodeTypeFlexibility"),
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where nodes using the node template will be created. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serverBinding": {
						SchemaProps: spec.SchemaProps{
							Description: "The server binding policy for nodes using this template. Determines where the nodes should restart following a maintenance event.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecServerBinding"),
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecNodeTypeFlexibility", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.NodeTemplateSpecServerBinding"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecNodeTypeFlexibility(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"cpus": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of virtual CPUs to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localSsd": {
						SchemaProps: spec.SchemaProps{
							Description: "Use local SSD",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Description: "Physical memory available to the node, defined in MB.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecNodeTypeFlexibilityCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecServerBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of server binding policy. If 'RESTART_NODE_ON_ANY_SERVER', nodes using this template will restart on any physical server following a maintenance event.\n\nIf 'RESTART_NODE_ON_MINIMAL_SERVER', nodes using this template will restart on the same physical server following a maintenance event, instead of being live migrated to or restarted on a new physical server. This option may be useful if you are using software licenses tied to the underlying server characteristics such as physical sockets or cores, to avoid the need for additional licenses when maintenance occurs. However, VMs on such nodes will experience outages while maintenance is applied. Possible values: [\"RESTART_NODE_ON_ANY_SERVER\", \"RESTART_NODE_ON_MINIMAL_SERVERS\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateSpecServerBindingCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_NodeTemplateStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroring(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PacketMirroringList is a list of PacketMirrorings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of PacketMirroring CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroring"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroring"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"collectorIlb": {
						SchemaProps: spec.SchemaProps{
							Description: "The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL) that will be used as collector for mirrored traffic. The specified forwarding rule must have is_mirroring_collector set to true.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecCollectorIlb"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable description of the rule.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"filter": {
						SchemaProps: spec.SchemaProps{
							Description: "A filter for mirrored traffic.  If unset, all traffic is mirrored.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecFilter"),
						},
					},
					"mirroredResources": {
						SchemaProps: spec.SchemaProps{
							Description: "A means of specifying which resources to mirror.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResources"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the packet mirroring rule",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecNetwork"),
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "Since only one rule can be active at a time, priority is used to break ties in the case of two rules that apply to the same instances.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created address should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "collectorIlb", "mirroredResources", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecCollectorIlb", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecFilter", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResources", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecNetwork"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"collectorIlb": {
						SchemaProps: spec.SchemaProps{
							Description: "The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL) that will be used as collector for mirrored traffic. The specified forwarding rule must have is_mirroring_collector set to true.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecCollectorIlb"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable description of the rule.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"filter": {
						SchemaProps: spec.SchemaProps{
							Description: "A filter for mirrored traffic.  If unset, all traffic is mirrored.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecFilter"),
						},
					},
					"mirroredResources": {
						SchemaProps: spec.SchemaProps{
							Description: "A means of specifying which resources to mirror.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResources"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the packet mirroring rule",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecNetwork"),
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "Since only one rule can be active at a time, priority is used to break ties in the case of two rules that apply to the same instances.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created address should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "collectorIlb", "mirroredResources", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecCollectorIlb", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecFilter", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResources", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecNetwork"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecCollectorIlb(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the forwarding rule.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"url"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecCollectorIlbCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"cidrRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "IP CIDR ranges that apply as a filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"direction": {
						SchemaProps: spec.SchemaProps{
							Description: "Direction of traffic to mirror. Default value: \"BOTH\" Possible values: [\"INGRESS\", \"EGRESS\", \"BOTH\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipProtocols": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocols that apply as a filter on mirrored traffic. Possible values: [\"tcp\", \"udp\", \"icmp\"]",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecFilterCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResources(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"instances": {
						SchemaProps: spec.SchemaProps{
							Description: "All the listed instances will be mirrored.  Specify at most 50.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResourcesInstances"),
									},
								},
							},
						},
					},
					"subnetworks": {
						SchemaProps: spec.SchemaProps{
							Description: "All instances in one of these subnetworks will be mirrored.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResourcesSubnetworks"),
									},
								},
							},
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "All instances with these tags will be mirrored.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResourcesInstances", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PacketMirroringSpecMirroredResourcesSubnetworks"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResourcesCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResourcesInstances(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the instances where this rule should be active.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"url"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecMirroredResourcesSubnetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the subnetwork where this rule should be active.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"url"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecNetwork(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "The full self_link URL of the network where this rule is active.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"url"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringSpecNetworkCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PacketMirroringStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PerInstanceConfigList is a list of PerInstanceConfigs",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of PerInstanceConfig CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfig"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceGroupManager": {
						SchemaProps: spec.SchemaProps{
							Description: "The instance group manager this instance config is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minimalAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"mostDisruptiveAllowedAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for this per-instance config and its corresponding instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preservedState": {
						SchemaProps: spec.SchemaProps{
							Description: "The preserved state for this instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedState"),
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"removeInstanceStateOnDestroy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where the containing instance group manager is located",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "instanceGroupManager", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedState"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instanceGroupManager": {
						SchemaProps: spec.SchemaProps{
							Description: "The instance group manager this instance config is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minimalAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"mostDisruptiveAllowedAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for this per-instance config and its corresponding instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preservedState": {
						SchemaProps: spec.SchemaProps{
							Description: "The preserved state for this instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedState"),
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"removeInstanceStateOnDestroy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone where the containing instance group manager is located",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "instanceGroupManager", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedState"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpecPreservedState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "Stateful disks for the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedStateDisk"),
									},
								},
							},
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Preserved metadata defined for this instance. This is a list of key->value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.PerInstanceConfigSpecPreservedStateDisk"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpecPreservedStateCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigSpecPreservedStateDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"deleteRule": {
						SchemaProps: spec.SchemaProps{
							Description: "A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are 'NEVER' and 'ON_PERMANENT_INSTANCE_DELETION'. 'NEVER' - detach the disk when the VM is deleted, but do not delete the disk. 'ON_PERMANENT_INSTANCE_DELETION' will delete the stateful disk when the VM is permanently deleted from the instance group. Default value: \"NEVER\" Possible values: [\"NEVER\", \"ON_PERMANENT_INSTANCE_DELETION\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The mode of the disk. Default value: \"READ_WRITE\" Possible values: [\"READ_ONLY\", \"READ_WRITE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of an existing persistent disk to attach under the specified device-name in the format 'projects/project-id/zones/zone/disks/disk-name'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"deviceName", "source"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_PerInstanceConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectDefaultNetworkTierList is a list of ProjectDefaultNetworkTiers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ProjectDefaultNetworkTier CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTier"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTier"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The default network tier to be configured for the project. This field can take the following values: PREMIUM or STANDARD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "networkTier"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectDefaultNetworkTierSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"networkTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The default network tier to be configured for the project. This field can take the following values: PREMIUM or STANDARD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "networkTier"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectDefaultNetworkTierStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItem(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectMetadataItemList is a list of ProjectMetadataItems",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ProjectMetadataItem CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItem"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItem"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The metadata key to set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "The value to set for the given metadata key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "key", "value"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataItemSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "The metadata key to set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "The value to set for the given metadata key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "key", "value"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataItemStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectMetadataList is a list of ProjectMetadatas",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ProjectMetadata CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadata"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadata"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "A series of key value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "metadata"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ProjectMetadataSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "A series of key value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "metadata"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ProjectMetadataStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscaler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionAutoscalerList is a list of RegionAutoscalers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionAutoscaler CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscaler"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscaler"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoscalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The configuration parameters for the autoscaling algorithm. You can define one or more of the policies for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization.\n\nIf none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the region where the instance group resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the managed instance group that this autoscaler will scale.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "autoscalingPolicy", "name", "target"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoscalingPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The configuration parameters for the autoscaling algorithm. You can define one or more of the policies for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization.\n\nIf none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicy"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the region where the instance group resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the managed instance group that this autoscaler will scale.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "autoscalingPolicy", "name", "target"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"cooldownPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of seconds that the autoscaler should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds.\n\nVirtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"cpuUtilization": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyCpuUtilization"),
						},
					},
					"loadBalancingUtilization": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration parameters of autoscaling based on a load balancer.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilization"),
						},
					},
					"maxReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances that the autoscaler can scale up to. This is required when creating or updating an autoscaler. The maximum number of replicas should not be lower than minimal number of replicas.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"metric": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration parameters of autoscaling based on a custom metric.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyMetric"),
									},
								},
							},
						},
					},
					"minReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum number of replicas that the autoscaler can scale down to. This cannot be less than 0. If not provided, autoscaler will choose a default value depending on maximum number of instances allowed.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines operating mode for this policy. Default value: \"ON\" Possible values: [\"OFF\", \"ONLY_UP\", \"ON\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scaleInControl": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines scale in controls to reduce the risk of response latency and outages due to abrupt scale-in events",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControl"),
						},
					},
				},
				Required: []string{"maxReplicas", "minReplicas"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyCpuUtilization", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilization", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyMetric", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControl"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyCpuUtilization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The target CPU utilization that the autoscaler should maintain. Must be a float value in the range (0, 1]. If not specified, the default is 0.6.\n\nIf the CPU level is below the target utilization, the autoscaler scales down the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization.\n\nIf the average CPU is above the target utilization, the autoscaler scales up until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"target"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyCpuUtilizationCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "Fraction of backend capacity utilization (set in HTTP(s) load balancing configuration) that autoscaler should maintain. Must be a positive float value. If not defined, the default is 0.8.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"target"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyLoadBalancingUtilizationCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyMetric(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values.\n\nThe metric must have a value type of INT64 or DOUBLE.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The target value of the metric that autoscaler should maintain. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric.\n\nFor example, a good metric to use as a utilizationTarget is www.googleapis.com/compute/instance/network/received_bytes_count. The autoscaler will work to keep this value constant for each of the instances.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Possible values: [\"GAUGE\", \"DELTA_PER_SECOND\", \"DELTA_PER_MINUTE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControl(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxScaledInReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas"),
						},
					},
					"timeWindowSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long back autoscaling should look when computing recommendations to include directives regarding slower scale down, as described above.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControlCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicas(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixed": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a fixed number of VM instances. This must be a positive integer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percent": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerSpecAutoscalingPolicyScaleInControlMaxScaledInReplicasCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionAutoscalerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionBackendServiceList is a list of RegionBackendServices",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionBackendService CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendService"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendService"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"affinityCookieTtlSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.\n\nWhen the load balancing scheme is INTERNAL, this field is not used.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"backend": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of backends that serve this RegionBackendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecBackend"),
									},
								},
							},
						},
					},
					"cdnPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud CDN configuration for this BackendService.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicy"),
						},
					},
					"circuitBreakers": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling the volume of connections to a backend service. This field is applicable only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCircuitBreakers"),
						},
					},
					"connectionDrainingTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Time for which instance will be drained (not accept new connections, but still work to finish started).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"consistentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field only applies when all of the following are true -\n  * 'load_balancing_scheme' is set to INTERNAL_MANAGED\n  * 'protocol' is set to HTTP, HTTPS, or HTTP2\n  * 'locality_lb_policy' is set to MAGLEV or RING_HASH",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHash"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableCdn": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, enable Cloud CDN for this RegionBackendService.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"failoverPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy for failovers.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecFailoverPolicy"),
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of URLs to HealthCheck resources for health checking this RegionBackendService. Currently at most one health check can be specified.\n\nA health check must be specified unless the backend service uses an internet or serverless NEG as a backend.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates what kind of load balancing this regional backend service will be used for. A backend service created for one type of load balancing cannot be used with the other(s). Default value: \"INTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL\", \"INTERNAL_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localityLbPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The load balancing algorithm used within the scope of the locality. The possible values are -\n\n* ROUND_ROBIN - This is a simple policy in which each healthy backend\n                is selected in round robin order.\n\n* LEAST_REQUEST - An O(1) algorithm which selects two random healthy\n                  hosts and picks the host which has fewer active requests.\n\n* RING_HASH - The ring/modulo hash load balancer implements consistent\n              hashing to backends. The algorithm has the property that the\n              addition/removal of a host from a set of N hosts only affects\n              1/N of the requests.\n\n* RANDOM - The load balancer selects a random healthy host.\n\n* ORIGINAL_DESTINATION - Backend host is selected based on the client\n                         connection metadata, i.e., connections are opened\n                         to the same address as the destination address of\n                         the incoming connection before the connection\n                         was redirected to the load balancer.\n\n* MAGLEV - used as a drop in replacement for the ring hash load balancer.\n           Maglev is not as stable as ring hash but has faster table lookup\n           build times and host selection times. For more information about\n           Maglev, refer to https://ai.google/research/pubs/pub44824\n\nThis field is applicable only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2. Possible values: [\"ROUND_ROBIN\", \"LEAST_REQUEST\", \"RING_HASH\", \"RANDOM\", \"ORIGINAL_DESTINATION\", \"MAGLEV\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"outlierDetection": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetection"),
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "A named port on a backend instance group representing the port for communication to the backend VMs in that group. Required when the loadBalancingScheme is EXTERNAL, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED and the backends are instance groups. The named port must be defined on each backend instance group. This parameter has no meaning if the backends are NEGs. API sets a default of \"http\" if not given. Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The protocol this RegionBackendService uses to communicate with backends. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may result in errors if used with the GA API. Possible values: [\"HTTP\", \"HTTPS\", \"HTTP2\", \"SSL\", \"TCP\", \"UDP\", \"GRPC\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created backend service should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP. Possible values: [\"NONE\", \"CLIENT_IP\", \"CLIENT_IP_PORT_PROTO\", \"CLIENT_IP_PROTO\", \"GENERATED_COOKIE\", \"HEADER_FIELD\", \"HTTP_COOKIE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range is [1, 86400].",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecBackend", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCircuitBreakers", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHash", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecFailoverPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetection"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"affinityCookieTtlSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value for TTL is one day.\n\nWhen the load balancing scheme is INTERNAL, this field is not used.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"backend": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of backends that serve this RegionBackendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecBackend"),
									},
								},
							},
						},
					},
					"cdnPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud CDN configuration for this BackendService.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicy"),
						},
					},
					"circuitBreakers": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling the volume of connections to a backend service. This field is applicable only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCircuitBreakers"),
						},
					},
					"connectionDrainingTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Time for which instance will be drained (not accept new connections, but still work to finish started).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"consistentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies parameters that control consistent hashing. This field only applies when all of the following are true -\n  * 'load_balancing_scheme' is set to INTERNAL_MANAGED\n  * 'protocol' is set to HTTP, HTTPS, or HTTP2\n  * 'locality_lb_policy' is set to MAGLEV or RING_HASH",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHash"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableCdn": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, enable Cloud CDN for this RegionBackendService.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"failoverPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy for failovers.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecFailoverPolicy"),
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of URLs to HealthCheck resources for health checking this RegionBackendService. Currently at most one health check can be specified.\n\nA health check must be specified unless the backend service uses an internet or serverless NEG as a backend.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"loadBalancingScheme": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates what kind of load balancing this regional backend service will be used for. A backend service created for one type of load balancing cannot be used with the other(s). Default value: \"INTERNAL\" Possible values: [\"EXTERNAL\", \"INTERNAL\", \"INTERNAL_MANAGED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localityLbPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The load balancing algorithm used within the scope of the locality. The possible values are -\n\n* ROUND_ROBIN - This is a simple policy in which each healthy backend\n                is selected in round robin order.\n\n* LEAST_REQUEST - An O(1) algorithm which selects two random healthy\n                  hosts and picks the host which has fewer active requests.\n\n* RING_HASH - The ring/modulo hash load balancer implements consistent\n              hashing to backends. The algorithm has the property that the\n              addition/removal of a host from a set of N hosts only affects\n              1/N of the requests.\n\n* RANDOM - The load balancer selects a random healthy host.\n\n* ORIGINAL_DESTINATION - Backend host is selected based on the client\n                         connection metadata, i.e., connections are opened\n                         to the same address as the destination address of\n                         the incoming connection before the connection\n                         was redirected to the load balancer.\n\n* MAGLEV - used as a drop in replacement for the ring hash load balancer.\n           Maglev is not as stable as ring hash but has faster table lookup\n           build times and host selection times. For more information about\n           Maglev, refer to https://ai.google/research/pubs/pub44824\n\nThis field is applicable only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2. Possible values: [\"ROUND_ROBIN\", \"LEAST_REQUEST\", \"RING_HASH\", \"RANDOM\", \"ORIGINAL_DESTINATION\", \"MAGLEV\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"outlierDetection": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings controlling eviction of unhealthy hosts from the load balancing pool. This field is applicable only when the 'load_balancing_scheme' is set to INTERNAL_MANAGED and the 'protocol' is set to HTTP, HTTPS, or HTTP2.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetection"),
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "A named port on a backend instance group representing the port for communication to the backend VMs in that group. Required when the loadBalancingScheme is EXTERNAL, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED and the backends are instance groups. The named port must be defined on each backend instance group. This parameter has no meaning if the backends are NEGs. API sets a default of \"http\" if not given. Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "The protocol this RegionBackendService uses to communicate with backends. The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer types and may result in errors if used with the GA API. Possible values: [\"HTTP\", \"HTTPS\", \"HTTP2\", \"SSL\", \"TCP\", \"UDP\", \"GRPC\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created backend service should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of session affinity to use. The default is NONE. Session affinity is not applicable if the protocol is UDP. Possible values: [\"NONE\", \"CLIENT_IP\", \"CLIENT_IP_PORT_PROTO\", \"CLIENT_IP_PROTO\", \"GENERATED_COOKIE\", \"HEADER_FIELD\", \"HTTP_COOKIE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How many seconds to wait for the backend before considering it a failed request. Default is 30 seconds. Valid range is [1, 86400].",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecBackend", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCircuitBreakers", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHash", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecFailoverPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetection"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecBackend(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"balancingMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the balancing mode for this backend. Default value: \"CONNECTION\" Possible values: [\"UTILIZATION\", \"RATE\", \"CONNECTION\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"capacityScaler": {
						SchemaProps: spec.SchemaProps{
							Description: "A multiplier applied to the group's maximum servicing capacity (based on UTILIZATION, RATE or CONNECTION).\n\n~>**NOTE**: This field cannot be set for INTERNAL region backend services (default loadBalancingScheme), but is required for non-INTERNAL backend service. The total capacity_scaler for all backends must be non-zero.\n\nA setting of 0 means the group is completely drained, offering 0% of its available Capacity. Valid range is [0.0,1.0].",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"failover": {
						SchemaProps: spec.SchemaProps{
							Description: "This field designates whether this is a failover backend. More than one failover backend can be configured for a given RegionBackendService.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The fully-qualified URL of an Instance Group or Network Endpoint Group resource. In case of instance group this defines the list of instances that serve traffic. Member virtual machine instances from each instance group must live in the same zone as the instance group itself. No two backends in a backend service are allowed to use same Instance Group resource.\n\nFor Network Endpoint Groups this defines list of endpoints. All endpoints of Network Endpoint Group must be hosted on instances located in the same zone as the Network Endpoint Group.\n\nBackend services cannot mix Instance Group and Network Endpoint Group backends.\n\nWhen the 'load_balancing_scheme' is INTERNAL, only instance groups are supported.\n\nNote that you must specify an Instance Group or Network Endpoint Group resource using the fully-qualified URL, rather than a partial URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxConnections": {
						SchemaProps: spec.SchemaProps{
							Description: "The max number of simultaneous connections for the group. Can be used with either CONNECTION or UTILIZATION balancing modes. Cannot be set for INTERNAL backend services.\n\nFor CONNECTION mode, either maxConnections or one of maxConnectionsPerInstance or maxConnectionsPerEndpoint, as appropriate for group type, must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxConnectionsPerEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "The max number of simultaneous connections that a single backend network endpoint can handle. Cannot be set for INTERNAL backend services.\n\nThis is used to calculate the capacity of the group. Can be used in either CONNECTION or UTILIZATION balancing modes. For CONNECTION mode, either maxConnections or maxConnectionsPerEndpoint must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxConnectionsPerInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "The max number of simultaneous connections that a single backend instance can handle. Cannot be set for INTERNAL backend services.\n\nThis is used to calculate the capacity of the group. Can be used in either CONNECTION or UTILIZATION balancing modes. For CONNECTION mode, either maxConnections or maxConnectionsPerInstance must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRate": {
						SchemaProps: spec.SchemaProps{
							Description: "The max requests per second (RPS) of the group. Cannot be set for INTERNAL backend services.\n\nCan be used with either RATE or UTILIZATION balancing modes, but required if RATE mode. Either maxRate or one of maxRatePerInstance or maxRatePerEndpoint, as appropriate for group type, must be set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRatePerEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "The max requests per second (RPS) that a single backend network endpoint can handle. This is used to calculate the capacity of the group. Can be used in either balancing mode. For RATE mode, either maxRate or maxRatePerEndpoint must be set. Cannot be set for INTERNAL backend services.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"maxRatePerInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "The max requests per second (RPS) that a single backend instance can handle. This is used to calculate the capacity of the group. Can be used in either balancing mode. For RATE mode, either maxRate or maxRatePerInstance must be set. Cannot be set for INTERNAL backend services.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"maxUtilization": {
						SchemaProps: spec.SchemaProps{
							Description: "Used when balancingMode is UTILIZATION. This ratio defines the CPU utilization target for the group. Valid range is [0.0, 1.0]. Cannot be set for INTERNAL backend services.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"group"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"cacheKeyPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The CacheKeyPolicy for this CdnPolicy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicyCacheKeyPolicy"),
						},
					},
					"signedURLCacheMaxAgeSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum number of seconds the response to a signed URL request will be considered fresh, defaults to 1hr (3600s). After this time period, the response will be revalidated before being served.\n\nWhen serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecCdnPolicyCacheKeyPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicyCacheKeyPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"includeHost": {
						SchemaProps: spec.SchemaProps{
							Description: "If true requests to different hosts will be cached separately.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"includeProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, http and https requests will be cached separately.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"includeQueryString": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included.\n\nIf false, the query string will be excluded from the cache key entirely.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"queryStringBlacklist": {
						SchemaProps: spec.SchemaProps{
							Description: "Names of query string parameters to exclude in cache keys.\n\nAll other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"queryStringWhitelist": {
						SchemaProps: spec.SchemaProps{
							Description: "Names of query string parameters to include in cache keys.\n\nAll other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicyCacheKeyPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCdnPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCircuitBreakers(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxConnections": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of connections to the backend cluster. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxPendingRequests": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of pending requests to the backend cluster. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRequests": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of parallel requests to the backend cluster. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRequestsPerConnection": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum requests for a single backend connection. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of parallel retries to the backend cluster. Defaults to 3.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecCircuitBreakersCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHash(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpCookie": {
						SchemaProps: spec.SchemaProps{
							Description: "Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookie"),
						},
					},
					"httpHeaderName": {
						SchemaProps: spec.SchemaProps{
							Description: "The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minimumRingSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum number of virtual nodes to use for the hash ring. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node. Defaults to 1024.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookie"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookie(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the cookie.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to set for the cookie.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ttl": {
						SchemaProps: spec.SchemaProps{
							Description: "Lifetime of the cookie.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookieTtl"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecConsistentHashHttpCookieTtl"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookieCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookieTtl(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecConsistentHashHttpCookieTtlCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecFailoverPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"disableConnectionDrainOnFailover": {
						SchemaProps: spec.SchemaProps{
							Description: "On failover or failback, this field indicates whether connection drain will be honored. Setting this to true has the following effect: connections to the old active pool are not drained. Connections to the new active pool use the timeout of 10 min (currently fixed). Setting to false has the following effect: both old and new connections will have a drain timeout of 10 min. This can be set to true only if the protocol is TCP. The default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"dropTrafficIfUnhealthy": {
						SchemaProps: spec.SchemaProps{
							Description: "This option is used only when no healthy VMs are detected in the primary and backup instance groups. When set to true, traffic is dropped. When set to false, new connections are sent across all VMs in the primary group. The default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"failoverRatio": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the field must be in [0, 1]. If the ratio of the healthy VMs in the primary backend is at or below this number, traffic arriving at the load-balanced IP will be directed to the failover backend. In case where 'failoverRatio' is not set or all the VMs in the backup backend are unhealthy, the traffic will be directed back to the primary backend in the \"force\" mode, where traffic will be spread to the healthy VMs with the best effort, or to all VMs when no VM is healthy. This field is only used with l4 load balancing.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecFailoverPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecLogConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to enable logging for the load balancer traffic served by this backend service.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"sampleRate": {
						SchemaProps: spec.SchemaProps{
							Description: "This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecLogConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"baseEjectionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionBaseEjectionTime"),
						},
					},
					"consecutiveErrors": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"consecutiveGatewayFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 5.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"enforcingConsecutiveErrors": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"enforcingConsecutiveGatewayFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"enforcingSuccessRate": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"interval": {
						SchemaProps: spec.SchemaProps{
							Description: "Time interval between ejection sweep analysis. This can result in both new ejections as well as hosts being returned to service. Defaults to 10 seconds.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionInterval"),
						},
					},
					"maxEjectionPercent": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 10%.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"successRateMinimumHosts": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"successRateRequestVolume": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"successRateStdevFactor": {
						SchemaProps: spec.SchemaProps{
							Description: "This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionBaseEjectionTime", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionBackendServiceSpecOutlierDetectionInterval"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionBaseEjectionTime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionBaseEjectionTimeCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionInterval(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceSpecOutlierDetectionIntervalCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionBackendServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionDiskIamBindingList is a list of RegionDiskIamBindings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionDiskIamBinding CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBinding"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBinding"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "members", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "members", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMember(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionDiskIamMemberList is a list of RegionDiskIamMembers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionDiskIamMember CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMember"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMember"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "member", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "member", "name", "role"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamMemberStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionDiskIamPolicyList is a list of RegionDiskIamPolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionDiskIamPolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskIamPolicySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name", "policyData"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskIamPolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionDiskList is a list of RegionDisks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionDisk CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDisk"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDisk"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionDiskResourcePolicyAttachmentList is a list of RegionDiskResourcePolicyAttachments",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionDiskResourcePolicyAttachment CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachment"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachment"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the regional disk in which the resource policies are attached to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The resource policy to be attached to the disk for scheduling snapshot creation. Do not specify the self link.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "disk", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskResourcePolicyAttachmentSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the regional disk in which the resource policies are attached to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The resource policy to be attached to the disk for scheduling snapshot creation. Do not specify the self link.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "disk", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskResourcePolicyAttachmentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Encrypts the disk using a customer-supplied encryption key.\n\nAfter you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later (e.g. to create a disk snapshot or an image, or to attach the disk to a virtual machine).\n\nCustomer-supplied encryption keys do not protect access to metadata of the disk.\n\nIf you do not provide an encryption key when creating the disk, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecDiskEncryptionKey"),
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource.  Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this disk.  A list of key->value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"lastAttachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last attach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastDetachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last detach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"physicalBlockSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicaZones": {
						SchemaProps: spec.SchemaProps{
							Description: "URLs of the zones where the disk should be replicated to.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the sourceImage or sourceSnapshot parameter, or specify it alone to create an empty persistent disk.\n\nIf you specify this field along with sourceImage or sourceSnapshot, the value of sizeGb must not be less than the size of the sourceImage or the size of the snapshot.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"snapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:\n\n* 'https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot' * 'projects/project/global/snapshots/snapshot' * 'global/snapshots/snapshot' * 'snapshot'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSnapshotEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecSourceSnapshotEncryptionKey"),
						},
					},
					"sourceSnapshotID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"users": {
						SchemaProps: spec.SchemaProps{
							Description: "Links to the users of the disk (attached instances) in form: project/zones/zone/instances/instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "replicaZones"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecDiskEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecSourceSnapshotEncryptionKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Encrypts the disk using a customer-supplied encryption key.\n\nAfter you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later (e.g. to create a disk snapshot or an image, or to attach the disk to a virtual machine).\n\nCustomer-supplied encryption keys do not protect access to metadata of the disk.\n\nIf you do not provide an encryption key when creating the disk, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecDiskEncryptionKey"),
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource.  Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this disk.  A list of key->value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"lastAttachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last attach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastDetachTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Last detach timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"physicalBlockSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. Currently supported sizes are 4096 and 16384, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the disk resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicaZones": {
						SchemaProps: spec.SchemaProps{
							Description: "URLs of the zones where the disk should be replicated to.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the persistent disk, specified in GB. You can specify this field when creating a persistent disk using the sourceImage or sourceSnapshot parameter, or specify it alone to create an empty persistent disk.\n\nIf you specify this field along with sourceImage or sourceSnapshot, the value of sizeGb must not be less than the size of the sourceImage or the size of the snapshot.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"snapshot": {
						SchemaProps: spec.SchemaProps{
							Description: "The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values:\n\n* 'https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot' * 'projects/project/global/snapshots/snapshot' * 'global/snapshots/snapshot' * 'snapshot'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSnapshotEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecSourceSnapshotEncryptionKey"),
						},
					},
					"sourceSnapshotID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"users": {
						SchemaProps: spec.SchemaProps{
							Description: "Links to the users of the disk (attached instances) in form: project/zones/zone/instances/instance",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"providerRef", "name", "replicaZones"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecDiskEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionDiskSpecSourceSnapshotEncryptionKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecDiskEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"sha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecDiskEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecSourceSnapshotEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"rawKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskSpecSourceSnapshotEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionDiskStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionHealthCheckList is a list of RegionHealthChecks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionHealthCheck CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheck"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"grpcHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecGrpcHealthCheck"),
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"http2HealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttp2HealthCheck"),
						},
					},
					"httpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpHealthCheck"),
						},
					},
					"httpsHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpsHealthCheck"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created health check should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecSslHealthCheck"),
						},
					},
					"tcpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecTcpHealthCheck"),
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecGrpcHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttp2HealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpsHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecSslHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecTcpHealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"checkIntervalSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How often (in seconds) to send a health check. The default value is 5 seconds.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"grpcHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecGrpcHealthCheck"),
						},
					},
					"healthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"http2HealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttp2HealthCheck"),
						},
					},
					"httpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpHealthCheck"),
						},
					},
					"httpsHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpsHealthCheck"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created health check should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecSslHealthCheck"),
						},
					},
					"tcpHealthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "A nested object resource",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecTcpHealthCheck"),
						},
					},
					"timeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "How long (in seconds) to wait before claiming failure. The default value is 5 seconds.  It is invalid for timeoutSec to have greater value than checkIntervalSec.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the health check. One of HTTP, HTTP2, HTTPS, TCP, or SSL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"unhealthyThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecGrpcHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttp2HealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecHttpsHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecSslHealthCheck", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionHealthCheckSpecTcpHealthCheck"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecGrpcHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"grpcServiceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The gRPC service name for the health check. The value of grpcServiceName has the following meanings by convention:\n\n* Empty serviceName means the overall status of all services at the backend. * Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.\n\nThe grpcServiceName can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number for the health check request. Must be specified if portName and portSpecification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, gRPC health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecGrpcHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttp2HealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTP2 health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTP2 health check request. The default value is 443.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, HTTP2 health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTP2 health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttp2HealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTP health check request. The default value is 80.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, HTTP health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTP health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpsHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the HTTPS health check request. The default value is 443.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, HTTPS health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestPath": {
						SchemaProps: spec.SchemaProps{
							Description: "The request path of the HTTPS health check request. The default value is /.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecHttpsHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecSslHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the SSL health check request. The default value is 443.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, SSL health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"request": {
						SchemaProps: spec.SchemaProps{
							Description: "The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecSslHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecTcpHealthCheck(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The TCP port number for the TCP health check request. The default value is 80.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Description: "Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"portSpecification": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how port is selected for health checking, can be one of the following values:\n\n  * 'USE_FIXED_PORT': The port number in 'port' is used for health checking.\n\n  * 'USE_NAMED_PORT': The 'portName' is used for health checking.\n\n  * 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each\n  network endpoint is used for health checking. For other backends, the\n  port or named port specified in the Backend Service is used for health\n  checking.\n\nIf not specified, TCP health check follows behavior specified in 'port' and 'portName' fields. Possible values: [\"USE_FIXED_PORT\", \"USE_NAMED_PORT\", \"USE_SERVING_PORT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"request": {
						SchemaProps: spec.SchemaProps{
							Description: "The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"response": {
						SchemaProps: spec.SchemaProps{
							Description: "The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckSpecTcpHealthCheckCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionHealthCheckStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManager(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionInstanceGroupManagerList is a list of RegionInstanceGroupManagers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionInstanceGroupManager CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManager"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManager"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoHealingPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "The autohealing policies for this managed instance group. You can specify only one value.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecAutoHealingPolicies"),
						},
					},
					"baseInstanceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The base instance name to use for instances in this group. The value must be a valid RFC1035 name. Supported characters are lowercase letters, numbers, and hyphens (-). Instances are named by appending a hyphen and a random four-character string to the base instance name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"distributionPolicyTargetShape": {
						SchemaProps: spec.SchemaProps{
							Description: "The shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"distributionPolicyZones": {
						SchemaProps: spec.SchemaProps{
							Description: "The distribution policy for this managed instance group. You can specify one or more values.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of the instance group created by the manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group manager. Must be 1-63 characters long and comply with RFC1035. Supported characters include lowercase letters, numbers, and hyphens.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namedPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The named port configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecNamedPort"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region where the managed instance group resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"statefulDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the official documentation. Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the update_policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecStatefulDisk"),
									},
								},
							},
						},
					},
					"targetPools": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of all target pools to which new instances in the group are added. Updating the target pools attribute does not affect existing instances.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The target number of running instances for this managed instance group. This value should always be explicitly set unless this resource is attached to an autoscaler, in which case it should never be set. Defaults to 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"updatePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The update policy for this managed instance group.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecUpdatePolicy"),
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Application versions managed by this instance group. Each version deals with a specific instance template, allowing canary release scenarios.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersion"),
									},
								},
							},
						},
					},
					"waitForInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to wait for all instances to be created/updated before returning. Note that if this is set to true and the operation does not succeed, Terraform will continue trying until it times out.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "baseInstanceName", "name", "version"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecAutoHealingPolicies", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecNamedPort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecStatefulDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecUpdatePolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersion"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"autoHealingPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "The autohealing policies for this managed instance group. You can specify only one value.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecAutoHealingPolicies"),
						},
					},
					"baseInstanceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The base instance name to use for instances in this group. The value must be a valid RFC1035 name. Supported characters are lowercase letters, numbers, and hyphens (-). Instances are named by appending a hyphen and a random four-character string to the base instance name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional textual description of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"distributionPolicyTargetShape": {
						SchemaProps: spec.SchemaProps{
							Description: "The shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"distributionPolicyZones": {
						SchemaProps: spec.SchemaProps{
							Description: "The distribution policy for this managed instance group. You can specify one or more values.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint of the instance group manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instanceGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of the instance group created by the manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the instance group manager. Must be 1-63 characters long and comply with RFC1035. Supported characters include lowercase letters, numbers, and hyphens.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namedPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The named port configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecNamedPort"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region where the managed instance group resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"statefulDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "Disks created on the instances that will be preserved on instance delete, update, etc. Structure is documented below. For more information see the official documentation. Proactive cross zone instance redistribution must be disabled before you can update stateful disks on existing instance group managers. This can be controlled via the update_policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecStatefulDisk"),
									},
								},
							},
						},
					},
					"targetPools": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL of all target pools to which new instances in the group are added. Updating the target pools attribute does not affect existing instances.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"targetSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The target number of running instances for this managed instance group. This value should always be explicitly set unless this resource is attached to an autoscaler, in which case it should never be set. Defaults to 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"updatePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The update policy for this managed instance group.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecUpdatePolicy"),
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Application versions managed by this instance group. Each version deals with a specific instance template, allowing canary release scenarios.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersion"),
									},
								},
							},
						},
					},
					"waitForInstances": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to wait for all instances to be created/updated before returning. Note that if this is set to true and the operation does not succeed, Terraform will continue trying until it times out.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "baseInstanceName", "name", "version"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecAutoHealingPolicies", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecNamedPort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecStatefulDisk", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecUpdatePolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersion"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecAutoHealingPolicies(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"healthCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "The health check resource that signals autohealing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"initialDelaySec": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. Between 0 and 3600.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"healthCheck", "initialDelaySec"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecAutoHealingPoliciesCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecNamedPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the port.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port number.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"name", "port"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecStatefulDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"deleteRule": {
						SchemaProps: spec.SchemaProps{
							Description: "A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are NEVER and ON_PERMANENT_INSTANCE_DELETION. NEVER - detach the disk when the VM is deleted, but do not delete the disk. ON_PERMANENT_INSTANCE_DELETION will delete the stateful disk when the VM is permanently deleted from the instance group. The default is NEVER.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The device name of the disk to be attached.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"deviceName"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecUpdatePolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"instanceRedistributionType": {
						SchemaProps: spec.SchemaProps{
							Description: "The instance redistribution policy for regional managed instance groups. Valid values are: \"PROACTIVE\", \"NONE\". If PROACTIVE (default), the group attempts to maintain an even distribution of VM instances across zones in the region. If NONE, proactive redistribution is disabled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxSurgeFixed": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances that can be created above the specified targetSize during the update process. Conflicts with max_surge_percent. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of max_unavailable_fixed or max_surge_fixed must be greater than 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxSurgePercent": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances(calculated as percentage) that can be created above the specified targetSize during the update process. Conflicts with max_surge_fixed. Percent value is only allowed for regional managed instance groups with size at least 10.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxUnavailableFixed": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances that can be unavailable during the update process. Conflicts with max_unavailable_percent. It has to be either 0 or at least equal to the number of zones. If fixed values are used, at least one of max_unavailable_fixed or max_surge_fixed must be greater than 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxUnavailablePercent": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of instances(calculated as percentage) that can be unavailable during the update process. Conflicts with max_unavailable_fixed. Percent value is only allowed for regional managed instance groups with size at least 10.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"minReadySec": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600].",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"minimalAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replacementMethod": {
						SchemaProps: spec.SchemaProps{
							Description: "The instance replacement method for regional managed instance groups. Valid values are: \"RECREATE\", \"SUBSTITUTE\". If SUBSTITUTE (default), the group replaces VM instances with new instances that have randomly generated names. If RECREATE, instance names are preserved.  You must also set max_unavailable_fixed or max_unavailable_percent to be greater than 0.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"minimalAction", "type"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecUpdatePolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecVersion(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"instanceTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "The full URL to an instance template from which all new instances of this version will be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Version name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances calculated as a fixed number or a percentage depending on the settings.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersionTargetSize"),
						},
					},
				},
				Required: []string{"instanceTemplate"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionInstanceGroupManagerSpecVersionTargetSize"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecVersionTargetSize(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixed": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances which are managed for this version. Conflicts with percent.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percent": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of instances (calculated as percentage) which are managed for this version. Conflicts with fixed. Note that when using percent, rounding will be in favor of explicitly set target_size values; a managed instance group with 2 instances and 2 versions, one of which has a target_size.percent of 60 will create 2 instances of that version.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerSpecVersionTargetSizeCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionInstanceGroupManagerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionNetworkEndpointGroupList is a list of RegionNetworkEndpointGroups",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionNetworkEndpointGroup CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroup"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroup"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"appEngine": {
						SchemaProps: spec.SchemaProps{
							Description: "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloud_run, app_engine or cloud_function may be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecAppEngine"),
						},
					},
					"cloudFunction": {
						SchemaProps: spec.SchemaProps{
							Description: "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloud_run, app_engine or cloud_function may be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudFunction"),
						},
					},
					"cloudRun": {
						SchemaProps: spec.SchemaProps{
							Description: "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloud_run, app_engine or cloud_function may be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudRun"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of network endpoints in this network endpoint group. Defaults to SERVERLESS Default value: \"SERVERLESS\" Possible values: [\"SERVERLESS\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the Serverless NEGs Reside.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "region"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecAppEngine", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudFunction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudRun"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"appEngine": {
						SchemaProps: spec.SchemaProps{
							Description: "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloud_run, app_engine or cloud_function may be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecAppEngine"),
						},
					},
					"cloudFunction": {
						SchemaProps: spec.SchemaProps{
							Description: "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloud_run, app_engine or cloud_function may be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudFunction"),
						},
					},
					"cloudRun": {
						SchemaProps: spec.SchemaProps{
							Description: "Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloud_run, app_engine or cloud_function may be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudRun"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"networkEndpointType": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of network endpoints in this network endpoint group. Defaults to SERVERLESS Default value: \"SERVERLESS\" Possible values: [\"SERVERLESS\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the region where the Serverless NEGs Reside.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name", "region"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecAppEngine", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudFunction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionNetworkEndpointGroupSpecCloudRun"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecAppEngine(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional serving service. The service name must be 1-63 characters long, and comply with RFC1035. Example value: \"default\", \"my-service\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlMask": {
						SchemaProps: spec.SchemaProps{
							Description: "A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services.\n\nFor example, the request URLs \"foo1-dot-appname.appspot.com/v1\" and \"foo1-dot-appname.appspot.com/v2\" can be backed by the same Serverless NEG with URL mask \"-dot-appname.appspot.com/\". The URL mask will parse them to { service = \"foo1\", version = \"v1\" } and { service = \"foo1\", version = \"v2\" } respectively.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional serving version. The version must be 1-63 characters long, and comply with RFC1035. Example value: \"v1\", \"v2\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecAppEngineCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudFunction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"function": {
						SchemaProps: spec.SchemaProps{
							Description: "A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: \"func1\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlMask": {
						SchemaProps: spec.SchemaProps{
							Description: "A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services.\n\nFor example, request URLs \"mydomain.com/function1\" and \"mydomain.com/function2\" can be backed by the same Serverless NEG with URL mask \"/\". The URL mask will parse them to { function = \"function1\" } and { function = \"function2\" } respectively.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudFunctionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudRun(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: \"run-service\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud Run tag represents the \"named-revision\" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: \"revision-0010\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlMask": {
						SchemaProps: spec.SchemaProps{
							Description: "A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services.\n\nFor example, request URLs \"foo1.domain.com/bar1\" and \"foo1.domain.com/bar2\" an be backed by the same Serverless Network Endpoint Group (NEG) with URL mask \".domain.com/\". The URL mask will parse them to { service=\"bar1\", tag=\"foo1\" } and { service=\"bar2\", tag=\"foo2\" } respectively.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupSpecCloudRunCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionNetworkEndpointGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionPerInstanceConfigList is a list of RegionPerInstanceConfigs",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionPerInstanceConfig CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfig"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfig"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"minimalAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"mostDisruptiveAllowedAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for this per-instance config and its corresponding instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preservedState": {
						SchemaProps: spec.SchemaProps{
							Description: "The preserved state for this instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedState"),
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the containing instance group manager is located",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"regionInstanceGroupManager": {
						SchemaProps: spec.SchemaProps{
							Description: "The region instance group manager this instance config is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"removeInstanceStateOnDestroy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "regionInstanceGroupManager"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedState"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"minimalAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"mostDisruptiveAllowedAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name for this per-instance config and its corresponding instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preservedState": {
						SchemaProps: spec.SchemaProps{
							Description: "The preserved state for this instance.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedState"),
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the containing instance group manager is located",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"regionInstanceGroupManager": {
						SchemaProps: spec.SchemaProps{
							Description: "The region instance group manager this instance config is part of.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"removeInstanceStateOnDestroy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name", "regionInstanceGroupManager"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedState"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpecPreservedState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"disk": {
						SchemaProps: spec.SchemaProps{
							Description: "Stateful disks for the instance.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedStateDisk"),
									},
								},
							},
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Preserved metadata defined for this instance. This is a list of key->value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionPerInstanceConfigSpecPreservedStateDisk"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpecPreservedStateCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigSpecPreservedStateDisk(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"deleteRule": {
						SchemaProps: spec.SchemaProps{
							Description: "A value that prescribes what should happen to the stateful disk when the VM instance is deleted. The available options are 'NEVER' and 'ON_PERMANENT_INSTANCE_DELETION'. 'NEVER' - detach the disk when the VM is deleted, but do not delete the disk. 'ON_PERMANENT_INSTANCE_DELETION' will delete the stateful disk when the VM is permanently deleted from the instance group. Default value: \"NEVER\" Possible values: [\"NEVER\", \"ON_PERMANENT_INSTANCE_DELETION\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The mode of the disk. Default value: \"READ_WRITE\" Possible values: [\"READ_ONLY\", \"READ_WRITE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of an existing persistent disk to attach under the specified device-name in the format 'projects/project-id/zones/zone/disks/disk-name'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"deviceName", "source"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionPerInstanceConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionSSLCertificateList is a list of RegionSSLCertificates",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionSSLCertificate CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificate"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificate"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"certificateID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThese are in the same namespace as the managed SSL certificates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "Creates a unique name beginning with the specified prefix. Conflicts with name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateSpec2"),
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionSSLCertificateSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"certificateID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThese are in the same namespace as the managed SSL certificates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "Creates a unique name beginning with the specified prefix. Conflicts with name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created regional ssl certificate should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionSSLCertificateStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionTargetHTTPProxyList is a list of RegionTargetHTTPProxys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionTargetHTTPProxy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created target https proxy should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the RegionUrlMap resource that defines the mapping from URL to the BackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPProxySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created target https proxy should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the RegionUrlMap resource that defines the mapping from URL to the BackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionTargetHTTPSProxyList is a list of RegionTargetHTTPSProxys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionTargetHTTPSProxy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created target https proxy should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslCertificates": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of RegionSslCertificate resources that are used to authenticate connections between users and the load balancer. Currently, exactly one SSL certificate must be specified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the RegionUrlMap resource that defines the mapping from URL to the RegionBackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "sslCertificates", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionTargetHTTPSProxySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the created target https proxy should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslCertificates": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of RegionSslCertificate resources that are used to authenticate connections between users and the load balancer. Currently, exactly one SSL certificate must be specified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the RegionUrlMap resource that defines the mapping from URL to the RegionBackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "sslCertificates", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionTargetHTTPSProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMap(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegionURLMapList is a list of RegionURLMaps",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RegionURLMap CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMap"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMap"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultService": {
						SchemaProps: spec.SchemaProps{
							Description: "The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified.  Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultURLRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecDefaultURLRedirect"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. This field is used internally during updates of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostRule": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of HostRules to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecHostRule"),
									},
								},
							},
						},
					},
					"mapID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathMatcher": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of named PathMatchers to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcher"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the url map should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"test": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of expected URL mappings. Requests to update this UrlMap will succeed only if all of the test cases pass.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecTest"),
									},
								},
							},
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecDefaultURLRedirect", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecHostRule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcher", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecTest"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultService": {
						SchemaProps: spec.SchemaProps{
							Description: "The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified.  Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultURLRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecDefaultURLRedirect"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. This field is used internally during updates of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostRule": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of HostRules to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecHostRule"),
									},
								},
							},
						},
					},
					"mapID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathMatcher": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of named PathMatchers to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcher"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The Region in which the url map should reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"test": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of expected URL mappings. Requests to update this UrlMap will succeed only if all of the test cases pass.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecTest"),
									},
								},
							},
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecDefaultURLRedirect", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecHostRule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcher", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecTest"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecDefaultURLRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.\n This field is required to ensure an empty block is not set. The normal default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"stripQuery"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecDefaultURLRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecHostRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this HostRule. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hosts": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of host patterns to match. They must be valid hostnames, except * will match any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or ..",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"pathMatcher": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"hosts", "pathMatcher"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcher(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultService": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to a RegionBackendService resource. This will be used if none of the pathRules defined by this PathMatcher is matched by the URL's path portion.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultURLRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherDefaultURLRedirect"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name to which this PathMatcher is referred by the HostRule.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathRule": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRule"),
									},
								},
							},
						},
					},
					"routeRules": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of ordered HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. The order of specifying routeRules matters: the first rule that matches will cause its specified routing action to take effect. Within a given pathMatcher, only one of pathRules or routeRules must be set. routeRules are not supported in UrlMaps intended for External load balancers.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRules"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherDefaultURLRedirect", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRules"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherDefaultURLRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.\n This field is required to ensure an empty block is not set. The normal default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"stripQuery"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherDefaultURLRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"paths": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"routeAction": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices. Only one of routeAction or urlRedirect must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteAction"),
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "The region backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleUrlRedirect"),
						},
					},
				},
				Required: []string{"paths"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleUrlRedirect"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"corsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicy"),
						},
					},
					"faultInjectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy"),
						},
					},
					"requestMirrorPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy"),
						},
					},
					"retryPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the retry policy associated with this route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicy"),
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the timeout for the selected route. Timeout is computed from the time the request is has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, the default value is 15 seconds.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionTimeout"),
						},
					},
					"urlRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec to modify the URL of the request, prior to forwarding the request to the matched service",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewrite"),
						},
					},
					"weightedBackendServices": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one  weightedBackendService with weight set to a non 0 number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewrite", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"allowCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access- Control-Allow-Credentials header. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowMethods": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Methods header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOriginRegexes": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the regular expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOrigins": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, specifies the CORS policy is disabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exposeHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Expose-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"maxAge": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how long the results of a preflight request can be cached. This translates to the content for the Access-Control-Max-Age header.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"disabled"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"abort": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are aborted as part of fault injection.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort"),
						},
					},
					"delay": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"httpStatus", "percentage"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixedDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the value of the fixed delay interval.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay"),
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"fixedDelay", "percentage"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The RegionBackendService resource being mirrored to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"backendService"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"numRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the allowed number retries. This number must be > 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"perTryTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a non-zero timeout per retry attempt.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout"),
						},
					},
					"retryConditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies one or more conditions when this retry rule applies. Valid values are:\n\n- 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts. - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409. - refused-stream: Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewrite(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathPrefixRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewriteCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The default RegionBackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction"),
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"backendService", "weight"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleUrlRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.\n This field is required to ensure an empty block is not set. The normal default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"stripQuery"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherPathRuleUrlRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRules(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].r outeAction.weightedBackendService.backendServiceWeightAction[].headerAction",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderAction"),
						},
					},
					"matchRules": {
						SchemaProps: spec.SchemaProps{
							Description: "The rules for determining a match.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRules"),
									},
								},
							},
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied.\n\nYou cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive.\n\nPriority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"routeAction": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If  routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices. Only one of routeAction or urlRedirect must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteAction"),
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "The region backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesUrlRedirect"),
						},
					},
				},
				Required: []string{"priority"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRules", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesUrlRedirect"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRules(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fullPathMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. FullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerMatches": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a list of header match criteria, all of which must match corresponding headers in the request.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches"),
									},
								},
							},
						},
					},
					"ignoreCase": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies that prefixMatch and fullPathMatch matches are case sensitive. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"metadataFilters": {
						SchemaProps: spec.SchemaProps{
							Description: "Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata. metadataFilters specified here can be overrides those specified in ForwardingRule that refers to this UrlMap. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters"),
									},
								},
							},
						},
					},
					"prefixMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"queryParameterMatches": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches"),
									},
								},
							},
						},
					},
					"regexMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch, fullPathMatch or regexMatch must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"exactMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name \":authority\". For matching a request's method, use the headerName \":method\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"invertMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"prefixMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"presentMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value or not. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"rangeMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0]\n\n* -3 will match * 0 will not match * 0.25 will not match * -3someString will not match.\n\nOnly one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch"),
						},
					},
					"regexMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript  For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"suffixMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"rangeEnd": {
						SchemaProps: spec.SchemaProps{
							Description: "The end of the range (exclusive).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"rangeStart": {
						SchemaProps: spec.SchemaProps{
							Description: "The start of the range (inclusive).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"rangeEnd", "rangeStart"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"filterLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria  This list must not be empty and can have at the most 64 entries.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels"),
									},
								},
							},
						},
					},
					"filterMatchCriteria": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are:\n\n* MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. * MATCH_ALL: All filterLabels must have matching labels in the provided metadata. Possible values: [\"MATCH_ALL\", \"MATCH_ANY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"filterLabels", "filterMatchCriteria"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the label must match the specified value. value can have a maximum length of 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"exactMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"presentMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch and regexMatch must be set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"regexMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch, exactMatch and regexMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"corsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicy"),
						},
					},
					"faultInjectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy"),
						},
					},
					"requestMirrorPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy"),
						},
					},
					"retryPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the retry policy associated with this route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicy"),
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the timeout for the selected route. Timeout is computed from the time the request is has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, the default value is 15 seconds.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeout"),
						},
					},
					"urlRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec to modify the URL of the request, prior to forwarding the request to the matched service",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewrite"),
						},
					},
					"weightedBackendServices": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one  weightedBackendService with weight set to a non 0 number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewrite", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"allowCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access- Control-Allow-Credentials header. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowMethods": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Methods header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOriginRegexes": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the regular expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOrigins": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, specifies the CORS policy is disabled. which indicates that the CORS policy is in effect. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exposeHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Expose-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"maxAge": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how long the results of a preflight request can be cached. This translates to the content for the Access-Control-Max-Age header.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"abort": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are aborted as part of fault injection.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort"),
						},
					},
					"delay": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixedDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the value of the fixed delay interval.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay"),
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The RegionBackendService resource being mirrored to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"backendService"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"numRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the allowed number retries. This number must be > 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"perTryTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a non-zero timeout per retry attempt.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout"),
						},
					},
					"retryConditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies one or more conditions when this retry rule applies. Valid values are:\n\n* 5xx: Loadbalancer will attempt a retry if the backend service responds with\n  any 5xx response code, or if the backend service does not respond at all,\n  example: disconnects, reset, read timeout, connection failure, and refused\n  streams.\n* gateway-error: Similar to 5xx, but only applies to response codes\n  502, 503 or 504.\n* connect-failure: Loadbalancer will retry on failures\n  connecting to backend services, for example due to connection timeouts.\n* retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.\n  Currently the only retriable error supported is 409.\n* refused-stream: Loadbalancer will retry if the backend service resets the stream with a\n  REFUSED_STREAM error code. This reset type indicates that it is safe to retry.\n* cancelled: Loadbalancer will retry if the gRPC status code in the response\n  header is set to cancelled\n* deadline-exceeded: Loadbalancer will retry if the\n  gRPC status code in the response header is set to deadline-exceeded\n* resource-exhausted: Loadbalancer will retry if the gRPC status code in the response\n  header is set to resource-exhausted\n* unavailable: Loadbalancer will retry if the gRPC status code in\n  the response header is set to unavailable",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"numRetries"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewrite(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathPrefixRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewriteCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The default RegionBackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction"),
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"backendService", "weight"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesUrlRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecPathMatcherRouteRulesUrlRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapSpecTest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description of this test case.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host portion of the URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path portion of the URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to expected RegionBackendService resource the given URL should be mapped to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"host", "path", "service"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RegionURLMapStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Reservation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReservationList is a list of Reservations",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Reservation CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Reservation"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Reservation"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"commitment": {
						SchemaProps: spec.SchemaProps{
							Description: "Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"specificReservation": {
						SchemaProps: spec.SchemaProps{
							Description: "Reservation for instances with specific machine shapes.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservation"),
						},
					},
					"specificReservationRequired": {
						SchemaProps: spec.SchemaProps{
							Description: "When set to true, only VMs that target this reservation by name can consume this reservation. Otherwise, it can be consumed by VMs with affinity for any reservation. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "The status of the reservation.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone where the reservation is made.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "specificReservation", "zone"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservation"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"commitment": {
						SchemaProps: spec.SchemaProps{
							Description: "Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"specificReservation": {
						SchemaProps: spec.SchemaProps{
							Description: "Reservation for instances with specific machine shapes.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservation"),
						},
					},
					"specificReservationRequired": {
						SchemaProps: spec.SchemaProps{
							Description: "When set to true, only VMs that target this reservation by name can consume this reservation. Otherwise, it can be consumed by VMs with affinity for any reservation. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "The status of the reservation.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone where the reservation is made.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "specificReservation", "zone"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservation"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"count": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of resources that are allocated.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"inUseCount": {
						SchemaProps: spec.SchemaProps{
							Description: "How many instances are in use.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"instanceProperties": {
						SchemaProps: spec.SchemaProps{
							Description: "The instance properties for the reservation.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstanceProperties"),
						},
					},
				},
				Required: []string{"count", "instanceProperties"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstanceProperties"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstanceProperties(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"guestAccelerators": {
						SchemaProps: spec.SchemaProps{
							Description: "Guest accelerator type and count.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstancePropertiesGuestAccelerators"),
									},
								},
							},
						},
					},
					"localSsds": {
						SchemaProps: spec.SchemaProps{
							Description: "The amount of local ssd to reserve with each instance. This reserves disks of type 'local-ssd'.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstancePropertiesLocalSsds"),
									},
								},
							},
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the machine type to reserve.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minCPUPlatform": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum CPU platform for the reservation. For example, '\"Intel Skylake\"'. See the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones) for information on available CPU platforms.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"machineType"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstancePropertiesGuestAccelerators", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ReservationSpecSpecificReservationInstancePropertiesLocalSsds"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstancePropertiesCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstancePropertiesGuestAccelerators(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"acceleratorCount": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of the guest accelerator cards exposed to this instance.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"acceleratorType": {
						SchemaProps: spec.SchemaProps{
							Description: "The full or partial URL of the accelerator type to attach to this instance. For example: 'projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100'\n\nIf you are creating an instance template, specify only the accelerator name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"acceleratorCount", "acceleratorType"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationSpecSpecificReservationInstancePropertiesLocalSsds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"diskSizeGb": {
						SchemaProps: spec.SchemaProps{
							Description: "The size of the disk in base-2 GB.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "The disk interface to use for attaching this disk. Default value: \"SCSI\" Possible values: [\"SCSI\", \"NVME\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"diskSizeGb"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ReservationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourcePolicyList is a list of ResourcePolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of ResourcePolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"groupPlacementPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource policy for instances used for placement configuration.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecGroupPlacementPolicy"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])'? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where resource policy resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"snapshotSchedulePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy for creating snapshots of persistent disks.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicy"),
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecGroupPlacementPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"groupPlacementPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource policy for instances used for placement configuration.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecGroupPlacementPolicy"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])'? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where resource policy resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"snapshotSchedulePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy for creating snapshots of persistent disks.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicy"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecGroupPlacementPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecGroupPlacementPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"availabilityDomainCount": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"collocation": {
						SchemaProps: spec.SchemaProps{
							Description: "Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network. Specify 'COLLOCATED' to enable collocation. Can only be specified with 'vm_count'. If compute instances are created with a COLLOCATED policy, then exactly 'vm_count' instances must be created at the same time with the resource policy attached. Possible values: [\"COLLOCATED\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vmCount": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of vms in this placement group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecGroupPlacementPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"retentionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Retention policy applied to snapshots created by this resource policy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicy"),
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Contains one of an 'hourlySchedule', 'dailySchedule', or 'weeklySchedule'.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicySchedule"),
						},
					},
					"snapshotProperties": {
						SchemaProps: spec.SchemaProps{
							Description: "Properties with which the snapshots are created, such as labels.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicySnapshotProperties"),
						},
					},
				},
				Required: []string{"schedule"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicySchedule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicySnapshotProperties"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxRetentionDays": {
						SchemaProps: spec.SchemaProps{
							Description: "Maximum age of the snapshot that is allowed to be kept.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"onSourceDiskDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the behavior to apply to scheduled snapshots when the source disk is deleted. Default value: \"KEEP_AUTO_SNAPSHOTS\" Possible values: [\"KEEP_AUTO_SNAPSHOTS\", \"APPLY_RETENTION_POLICY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"maxRetentionDays"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyRetentionPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicySchedule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dailySchedule": {
						SchemaProps: spec.SchemaProps{
							Description: "The policy will execute every nth day at the specified time.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleDailySchedule"),
						},
					},
					"hourlySchedule": {
						SchemaProps: spec.SchemaProps{
							Description: "The policy will execute every nth hour starting at the specified time.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlySchedule"),
						},
					},
					"weeklySchedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows specifying a snapshot time for each day of the week.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklySchedule"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleDailySchedule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlySchedule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklySchedule"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleDailySchedule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"daysInCycle": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of days between snapshots.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"daysInCycle", "startTime"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleDailyScheduleCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlySchedule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hoursInCycle": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of hours between snapshots.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Time within the window to start the operations. It must be in an hourly format \"HH:MM\", where HH : [00-23] and MM : [00] GMT. eg: 21:00",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"hoursInCycle", "startTime"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleHourlyScheduleCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklySchedule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"dayOfWeeks": {
						SchemaProps: spec.SchemaProps{
							Description: "May contain up to seven (one for each day of the week) snapshot times.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks"),
									},
								},
							},
						},
					},
				},
				Required: []string{"dayOfWeeks"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"day": {
						SchemaProps: spec.SchemaProps{
							Description: "The day of the week to create the snapshot. e.g. MONDAY Possible values: [\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\", \"SUNDAY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Time within the window to start the operations. It must be in format \"HH:MM\", where HH : [00-23] and MM : [00-00] GMT.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"day", "startTime"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicySnapshotProperties(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"guestFlush": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to perform a 'guest aware' snapshot.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "A set of key-value pairs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"storageLocations": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud Storage bucket location to store the auto snapshot (regional or multi-regional)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicySpecSnapshotSchedulePolicySnapshotPropertiesCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_ResourcePolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Route(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouteList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RouteList is a list of Routes",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Route CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Route"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Route"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouteSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"destRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The destination range of outgoing packets that this route applies to. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network that this route applies to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to a gateway that should handle matching packets. Currently, you can only specify the internet gateway, using a full or partial valid URL: * 'https://www.googleapis.com/compute/v1/projects/project/global/gateways/default-internet-gateway' * 'projects/project/global/gateways/default-internet-gateway' * 'global/gateways/default-internet-gateway' * The string 'default-internet-gateway'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopIlb": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets. You can only specify the forwarding rule as a partial or full URL. For example, the following are all valid URLs: https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule regions/region/forwardingRules/forwardingRule Note that this can only be used when the destinationRange is a public (non-RFC 1918) IP CIDR range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: * 'https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance' * 'projects/project/zones/zone/instances/instance' * 'zones/zone/instances/instance' * Just the instance name, with the zone in 'next_hop_instance_zone'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopInstanceZone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance specified in next_hop_instance. Omit if next_hop_instance is specified as a URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopIP": {
						SchemaProps: spec.SchemaProps{
							Description: "Network IP address of an instance that should handle matching packets.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to a Network that should handle matching packets.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopVPNTunnel": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to a VpnTunnel that should handle matching packets.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length.\n\nIn the case of two routes with equal prefix length, the one with the lowest-numbered priority value wins.\n\nDefault value is 1000. Valid range is 0 through 65535.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of instance tags to which this route applies.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "destRange", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouteSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouteSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"destRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The destination range of outgoing packets that this route applies to. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network that this route applies to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to a gateway that should handle matching packets. Currently, you can only specify the internet gateway, using a full or partial valid URL: * 'https://www.googleapis.com/compute/v1/projects/project/global/gateways/default-internet-gateway' * 'projects/project/global/gateways/default-internet-gateway' * 'global/gateways/default-internet-gateway' * The string 'default-internet-gateway'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopIlb": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets. You can only specify the forwarding rule as a partial or full URL. For example, the following are all valid URLs: https://www.googleapis.com/compute/v1/projects/project/regions/region/forwardingRules/forwardingRule regions/region/forwardingRules/forwardingRule Note that this can only be used when the destinationRange is a public (non-RFC 1918) IP CIDR range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopInstance": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: * 'https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/instance' * 'projects/project/zones/zone/instances/instance' * 'zones/zone/instances/instance' * Just the instance name, with the zone in 'next_hop_instance_zone'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopInstanceZone": {
						SchemaProps: spec.SchemaProps{
							Description: "The zone of the instance specified in next_hop_instance. Omit if next_hop_instance is specified as a URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopIP": {
						SchemaProps: spec.SchemaProps{
							Description: "Network IP address of an instance that should handle matching packets.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to a Network that should handle matching packets.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nextHopVPNTunnel": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to a VpnTunnel that should handle matching packets.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length.\n\nIn the case of two routes with equal prefix length, the one with the lowest-numbered priority value wins.\n\nDefault value is 1000. Valid range is 0 through 65535.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of instance tags to which this route applies.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"providerRef", "destRange", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouteStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Router(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterInterface(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RouterInterfaceList is a list of RouterInterfaces",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RouterInterface CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterface"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterface"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"interconnectAttachment": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or resource link to the VLAN interconnect for this interface. Changing this forces a new interface to be created. Only one of vpn_tunnel and interconnect_attachment can be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipRange": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address and range of the interface. The IP range must be in the RFC3927 link-local IP space. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique name for the interface, required by GCE. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which this interface's router belongs. If it is not provided, the provider project is used. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region this interface's router sits in. If not specified, the project region will be used. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the router this interface will be attached to. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpnTunnel": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or resource link to the VPN tunnel this interface will be linked to. Changing this forces a new interface to be created. Only one of vpn_tunnel and interconnect_attachment can be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "router"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterInterfaceSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"interconnectAttachment": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or resource link to the VLAN interconnect for this interface. Changing this forces a new interface to be created. Only one of vpn_tunnel and interconnect_attachment can be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipRange": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address and range of the interface. The IP range must be in the RFC3927 link-local IP space. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique name for the interface, required by GCE. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which this interface's router belongs. If it is not provided, the provider project is used. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region this interface's router sits in. If not specified, the project region will be used. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the router this interface will be attached to. Changing this forces a new interface to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpnTunnel": {
						SchemaProps: spec.SchemaProps{
							Description: "The name or resource link to the VPN tunnel this interface will be linked to. Changing this forces a new interface to be created. Only one of vpn_tunnel and interconnect_attachment can be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "router"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterInterfaceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RouterList is a list of Routers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Router CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Router"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Router"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNAT(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNATList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RouterNATList is a list of RouterNATs",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RouterNAT CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNAT"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNAT"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"drainNATIPS": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"enableEndpointIndependentMapping": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"icmpIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for logging on NAT",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecLogConfig"),
						},
					},
					"minPortsPerVm": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum number of ports allocated to a VM from this NAT.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"natIPAllocateOption": {
						SchemaProps: spec.SchemaProps{
							Description: "How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: [\"MANUAL_ONLY\", \"AUTO_ONLY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"natIPS": {
						SchemaProps: spec.SchemaProps{
							Description: "Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the router and NAT reside.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the Cloud Router in which this NAT will be configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSubnetworkIPRangesToNAT": {
						SchemaProps: spec.SchemaProps{
							Description: "How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this network in this region. Possible values: [\"ALL_SUBNETWORKS_ALL_IP_RANGES\", \"ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES\", \"LIST_OF_SUBNETWORKS\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to 'LIST_OF_SUBNETWORKS'",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecSubnetwork"),
									},
								},
							},
						},
					},
					"tcpEstablishedIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"tcpTransitoryIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"udpIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for UDP connections. Defaults to 30s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "natIPAllocateOption", "router", "sourceSubnetworkIPRangesToNAT"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecSubnetwork"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"drainNATIPS": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"enableEndpointIndependentMapping": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"icmpIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for logging on NAT",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecLogConfig"),
						},
					},
					"minPortsPerVm": {
						SchemaProps: spec.SchemaProps{
							Description: "Minimum number of ports allocated to a VM from this NAT.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"natIPAllocateOption": {
						SchemaProps: spec.SchemaProps{
							Description: "How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: [\"MANUAL_ONLY\", \"AUTO_ONLY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"natIPS": {
						SchemaProps: spec.SchemaProps{
							Description: "Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the router and NAT reside.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the Cloud Router in which this NAT will be configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceSubnetworkIPRangesToNAT": {
						SchemaProps: spec.SchemaProps{
							Description: "How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this network in this region. Possible values: [\"ALL_SUBNETWORKS_ALL_IP_RANGES\", \"ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES\", \"LIST_OF_SUBNETWORKS\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to 'LIST_OF_SUBNETWORKS'",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecSubnetwork"),
									},
								},
							},
						},
					},
					"tcpEstablishedIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"tcpTransitoryIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"udpIdleTimeoutSec": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout (in seconds) for UDP connections. Defaults to 30s if not set.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name", "natIPAllocateOption", "router", "sourceSubnetworkIPRangesToNAT"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterNATSpecSubnetwork"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpecLogConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Description: "Indicates whether or not to export logs.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"filter": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the desired filtering of logs on this NAT. Possible values: [\"ERRORS_ONLY\", \"TRANSLATIONS_ONLY\", \"ALL\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"enable", "filter"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpecLogConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNATSpecSubnetwork(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Self-link of subnetwork to NAT",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secondaryIPRangeNames": {
						SchemaProps: spec.SchemaProps{
							Description: "List of the secondary ranges of the subnetwork that are allowed to use NAT. This can be populated only if 'LIST_OF_SECONDARY_IP_RANGES' is one of the values in sourceIpRangesToNat",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sourceIPRangesToNAT": {
						SchemaProps: spec.SchemaProps{
							Description: "List of options for which source IPs in the subnetwork should have NAT enabled. Supported values include: 'ALL_IP_RANGES', 'LIST_OF_SECONDARY_IP_RANGES', 'PRIMARY_IP_RANGE'.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "sourceIPRangesToNAT"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterNATStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterPeer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterPeerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RouterPeerList is a list of RouterPeers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of RouterPeer CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeer"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeer"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterPeerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"advertiseMode": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified flag to indicate which mode to use for advertisement. Valid values of this enum field are: 'DEFAULT', 'CUSTOM' Default value: \"DEFAULT\" Possible values: [\"DEFAULT\", \"CUSTOM\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"advertisedGroups": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified list of prefix groups to advertise in custom mode, which can take one of the following options:\n\n* 'ALL_SUBNETS': Advertises all available subnets, including peer VPC subnets. * 'ALL_VPC_SUBNETS': Advertises the router's own VPC subnets. * 'ALL_PEER_VPC_SUBNETS': Advertises peer subnets of the router's VPC network.\n\nNote that this field can only be populated if advertiseMode is 'CUSTOM' and overrides the list defined for the router (in the \"bgp\" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"advertisedIPRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertiseMode is 'CUSTOM' and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpecAdvertisedIPRanges"),
									},
								},
							},
						},
					},
					"advertisedRoutePriority": {
						SchemaProps: spec.SchemaProps{
							Description: "The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the interface the BGP peer is associated with.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"managementType": {
						SchemaProps: spec.SchemaProps{
							Description: "The resource that configures and manages this BGP peer.\n\n* 'MANAGED_BY_USER' is the default value and can be managed by you or other users * 'MANAGED_BY_ATTACHMENT' is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerAsn": {
						SchemaProps: spec.SchemaProps{
							Description: "Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"peerIPAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the router and BgpPeer reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the Cloud Router in which this BgpPeer will be configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "interface", "name", "peerAsn", "peerIPAddress", "router"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpecAdvertisedIPRanges"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterPeerSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"advertiseMode": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified flag to indicate which mode to use for advertisement. Valid values of this enum field are: 'DEFAULT', 'CUSTOM' Default value: \"DEFAULT\" Possible values: [\"DEFAULT\", \"CUSTOM\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"advertisedGroups": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified list of prefix groups to advertise in custom mode, which can take one of the following options:\n\n* 'ALL_SUBNETS': Advertises all available subnets, including peer VPC subnets. * 'ALL_VPC_SUBNETS': Advertises the router's own VPC subnets. * 'ALL_PEER_VPC_SUBNETS': Advertises peer subnets of the router's VPC network.\n\nNote that this field can only be populated if advertiseMode is 'CUSTOM' and overrides the list defined for the router (in the \"bgp\" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"advertisedIPRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertiseMode is 'CUSTOM' and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpecAdvertisedIPRanges"),
									},
								},
							},
						},
					},
					"advertisedRoutePriority": {
						SchemaProps: spec.SchemaProps{
							Description: "The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"interface": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the interface the BGP peer is associated with.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"managementType": {
						SchemaProps: spec.SchemaProps{
							Description: "The resource that configures and manages this BGP peer.\n\n* 'MANAGED_BY_USER' is the default value and can be managed by you or other users * 'MANAGED_BY_ATTACHMENT' is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerAsn": {
						SchemaProps: spec.SchemaProps{
							Description: "Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"peerIPAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the router and BgpPeer reside. If it is not provided, the provider region is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the Cloud Router in which this BgpPeer will be configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "interface", "name", "peerAsn", "peerIPAddress", "router"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterPeerSpecAdvertisedIPRanges"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterPeerSpecAdvertisedIPRanges(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified description for the IP range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"range": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP range to advertise. The value must be a CIDR-formatted string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"range"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterPeerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bgp": {
						SchemaProps: spec.SchemaProps{
							Description: "BGP information specific to this router.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgp"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the network to which this router belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the router resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgp"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bgp": {
						SchemaProps: spec.SchemaProps{
							Description: "BGP information specific to this router.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgp"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the network to which this router belongs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region where the router resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgp"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterSpecBgp(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"advertiseMode": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified flag to indicate which mode to use for advertisement. Default value: \"DEFAULT\" Possible values: [\"DEFAULT\", \"CUSTOM\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"advertisedGroups": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertiseMode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.\n\nThis enum field has the one valid value: ALL_SUBNETS",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"advertisedIPRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertiseMode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgpAdvertisedIPRanges"),
									},
								},
							},
						},
					},
					"asn": {
						SchemaProps: spec.SchemaProps{
							Description: "Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"asn"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.RouterSpecBgpAdvertisedIPRanges"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterSpecBgpAdvertisedIPRanges(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "User-specified description for the IP range.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"range": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP range to advertise. The value must be a CIDR-formatted string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"range"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterSpecBgpCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_RouterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecurityPolicyList is a list of SecurityPolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SecurityPolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this security policy. Max size is 2048.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the security policy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"rule": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match \"*\"). If no rules are provided when creating a security policy, a default rule with action \"allow\" will be added.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRule"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRule"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this security policy. Max size is 2048.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the security policy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"rule": {
						SchemaProps: spec.SchemaProps{
							Description: "The set of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match \"*\"). If no rules are provided when creating a security policy, a default rule with action \"allow\" will be added.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRule"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRule"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Description: "Action to take when match matches the request. Valid values:   \"allow\" : allow access to target, \"deny(status)\" : deny access to target, returns the HTTP response code specified (valid values are 403, 404 and 502)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this rule. Max size is 64.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"match": {
						SchemaProps: spec.SchemaProps{
							Description: "A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding action is enforced.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatch"),
						},
					},
					"preview": {
						SchemaProps: spec.SchemaProps{
							Description: "When set to true, the action specified above is not enforced. Stackdriver logs for requests that trigger a preview action are annotated as such.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "An unique positive integer indicating the priority of evaluation for a rule. Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"action", "match", "priority"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatch"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchConfig"),
						},
					},
					"expr": {
						SchemaProps: spec.SchemaProps{
							Description: "User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchExpr"),
						},
					},
					"versionedExpr": {
						SchemaProps: spec.SchemaProps{
							Description: "Predefined rule expression. If this field is specified, config must also be specified. Available options:   SRC_IPS_V1: Must specify the corresponding src_ip_ranges field in config.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SecurityPolicySpecRuleMatchExpr"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"srcIPRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation to match against inbound traffic. There is a limit of 10 IP ranges per rule. A value of '*' matches all IPs (can be used to override the default behavior).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"srcIPRanges"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchExpr(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"expression": {
						SchemaProps: spec.SchemaProps{
							Description: "Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"expression"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicySpecRuleMatchExprCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SecurityPolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProject(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SharedVpcHostProjectList is a list of SharedVpcHostProjects",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SharedVpcHostProject CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProject"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProject"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project that will serve as a Shared VPC host project",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "project"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcHostProjectSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project that will serve as a Shared VPC host project",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "project"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcHostProjectStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProject(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SharedVpcServiceProjectList is a list of SharedVpcServiceProjects",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SharedVpcServiceProject CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProject"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProject"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hostProject": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of a host project to associate.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceProject": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project that will serve as a Shared VPC service project.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "hostProject", "serviceProject"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SharedVpcServiceProjectSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hostProject": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of a host project to associate.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceProject": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project that will serve as a Shared VPC service project.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "hostProject", "serviceProject"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SharedVpcServiceProjectStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Snapshot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SnapshotList is a list of Snapshots",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Snapshot CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Snapshot"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Snapshot"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskSizeGb": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the snapshot, specified in GB.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource. Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this Snapshot.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"licenses": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).  snapshotEncryptionKey nested object Encrypts the snapshot using a customer-supplied encryption key.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"snapshotEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSnapshotEncryptionKey"),
						},
					},
					"snapshotID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"sourceDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the disk used to create this snapshot.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceDiskEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSourceDiskEncryptionKey"),
						},
					},
					"sourceDiskLink": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"storageLocations": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud Storage bucket storage location of the snapshot (regional or multi-regional).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the zone where the disk is hosted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "sourceDisk"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSnapshotEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSourceDiskEncryptionKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"diskSizeGb": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the snapshot, specified in GB.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"labelFingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "The fingerprint used for optimistic locking of this resource. Used internally during updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply to this Snapshot.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"licenses": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).  snapshotEncryptionKey nested object Encrypts the snapshot using a customer-supplied encryption key.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"snapshotEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSnapshotEncryptionKey"),
						},
					},
					"snapshotID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"sourceDisk": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the disk used to create this snapshot.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceDiskEncryptionKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSourceDiskEncryptionKey"),
						},
					},
					"sourceDiskLink": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"storageLocations": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud Storage bucket storage location of the snapshot (regional or multi-regional).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the zone where the disk is hosted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "sourceDisk"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSnapshotEncryptionKey", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SnapshotSpecSourceDiskEncryptionKey"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSnapshotEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kmsKeySelfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the encryption key that is stored in Google Cloud KMS.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kmsKeyServiceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account used for the encryption request for the given KMS key. If absent, the Compute Engine Service Agent service account is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sha256": {
						SchemaProps: spec.SchemaProps{
							Description: "The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSnapshotEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSourceDiskEncryptionKey(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kmsKeyServiceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "The service account used for the encryption request for the given KMS key. If absent, the Compute Engine Service Agent service account is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotSpecSourceDiskEncryptionKeyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SnapshotStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslCertificate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslCertificateList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SslCertificateList is a list of SslCertificates",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SslCertificate CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificate"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificate"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslCertificateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"certificateID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThese are in the same namespace as the managed SSL certificates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "Creates a unique name beginning with the specified prefix. Conflicts with name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateSpec2"),
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslCertificateSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslCertificateSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"certificateID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n\nThese are in the same namespace as the managed SSL certificates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "Creates a unique name beginning with the specified prefix. Conflicts with name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslCertificateStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SslPolicyList is a list of SslPolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SslPolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"customFeatures": {
						SchemaProps: spec.SchemaProps{
							Description: "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of 'COMPATIBLE', 'MODERN', 'RESTRICTED', or 'CUSTOM'. If using 'CUSTOM', the set of SSL features to enable must be specified in the 'customFeatures' field.\n\nSee the [official documentation](https://cloud.google.com/compute/docs/load-balancing/ssl-policies#profilefeaturesupport) for which ciphers are available to use. **Note**: this argument *must* be present when using the 'CUSTOM' profile. This argument *must not* be present when using any other profile.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enabledFeatures": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of features enabled in the SSL policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minTLSVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. Default value: \"TLS_1_0\" Possible values: [\"TLS_1_0\", \"TLS_1_1\", \"TLS_1_2\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"profile": {
						SchemaProps: spec.SchemaProps{
							Description: "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. If using 'CUSTOM', the set of SSL features to enable must be specified in the 'customFeatures' field.\n\nSee the [official documentation](https://cloud.google.com/compute/docs/load-balancing/ssl-policies#profilefeaturesupport) for information on what cipher suites each profile provides. If 'CUSTOM' is used, the 'custom_features' attribute **must be set**. Default value: \"COMPATIBLE\" Possible values: [\"COMPATIBLE\", \"MODERN\", \"RESTRICTED\", \"CUSTOM\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SslPolicySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslPolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"customFeatures": {
						SchemaProps: spec.SchemaProps{
							Description: "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of 'COMPATIBLE', 'MODERN', 'RESTRICTED', or 'CUSTOM'. If using 'CUSTOM', the set of SSL features to enable must be specified in the 'customFeatures' field.\n\nSee the [official documentation](https://cloud.google.com/compute/docs/load-balancing/ssl-policies#profilefeaturesupport) for which ciphers are available to use. **Note**: this argument *must* be present when using the 'CUSTOM' profile. This argument *must not* be present when using any other profile.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enabledFeatures": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of features enabled in the SSL policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"minTLSVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. Default value: \"TLS_1_0\" Possible values: [\"TLS_1_0\", \"TLS_1_1\", \"TLS_1_2\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"profile": {
						SchemaProps: spec.SchemaProps{
							Description: "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. If using 'CUSTOM', the set of SSL features to enable must be specified in the 'customFeatures' field.\n\nSee the [official documentation](https://cloud.google.com/compute/docs/load-balancing/ssl-policies#profilefeaturesupport) for information on what cipher suites each profile provides. If 'CUSTOM' is used, the 'custom_features' attribute **must be set**. Default value: \"COMPATIBLE\" Possible values: [\"COMPATIBLE\", \"MODERN\", \"RESTRICTED\", \"CUSTOM\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SslPolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_Subnetwork(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubnetworkIamBindingList is a list of SubnetworkIamBindings",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SubnetworkIamBinding CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBinding"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBinding"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "members", "role", "subnetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "members", "role", "subnetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamBindingSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMember(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubnetworkIamMemberList is a list of SubnetworkIamMembers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SubnetworkIamMember CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMember"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMember"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "member", "role", "subnetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpecCondition"),
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"member": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "member", "role", "subnetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamMemberSpecCondition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpecCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"expression": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"expression", "title"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberSpecConditionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamMemberStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubnetworkIamPolicyList is a list of SubnetworkIamPolicys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of SubnetworkIamPolicy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "policyData", "subnetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkIamPolicySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"policyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "policyData", "subnetwork"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkIamPolicyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubnetworkList is a list of Subnetworks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of Subnetwork CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.Subnetwork"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.Subnetwork"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. This field is used internally during updates of this resource. Deprecated",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gatewayAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The gateway address for default routes to reach destination addresses outside this subnetwork.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipCIDRRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Denotes the logging options for the subnetwork flow logs. If logging is enabled logs will be exported to Stackdriver. This field cannot be set if the 'purpose' of this subnetwork is 'INTERNAL_HTTPS_LOAD_BALANCER'",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network this subnet belongs to. Only networks that are in the distributed mode can have subnetworks.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"privateIPGoogleAccess": {
						SchemaProps: spec.SchemaProps{
							Description: "When enabled, VMs in this subnetwork without external IP addresses can access Google APIs and services by using Private Google Access.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"privateIpv6GoogleAccess": {
						SchemaProps: spec.SchemaProps{
							Description: "The private IPv6 google access type for the VMs in this subnet.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The GCP region for this subnetwork.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secondaryIPRange": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges.\n\n**Note**: This field uses [attr-as-block mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html) to avoid breaking users during the 0.12 upgrade. To explicitly send a list of zero objects you must use the following syntax: 'example=[]' For more details about this behavior, see [this section](https://www.terraform.io/docs/configuration/attr-as-blocks.html#defining-a-fixed-object-collection-value).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecSecondaryIPRange"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "ipCIDRRange", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecSecondaryIPRange"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. This field is used internally during updates of this resource. Deprecated",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gatewayAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The gateway address for default routes to reach destination addresses outside this subnetwork.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipCIDRRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Denotes the logging options for the subnetwork flow logs. If logging is enabled logs will be exported to Stackdriver. This field cannot be set if the 'purpose' of this subnetwork is 'INTERNAL_HTTPS_LOAD_BALANCER'",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecLogConfig"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network this subnet belongs to. Only networks that are in the distributed mode can have subnetworks.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"privateIPGoogleAccess": {
						SchemaProps: spec.SchemaProps{
							Description: "When enabled, VMs in this subnetwork without external IP addresses can access Google APIs and services by using Private Google Access.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"privateIpv6GoogleAccess": {
						SchemaProps: spec.SchemaProps{
							Description: "The private IPv6 google access type for the VMs in this subnet.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The GCP region for this subnetwork.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secondaryIPRange": {
						SchemaProps: spec.SchemaProps{
							Description: "An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges.\n\n**Note**: This field uses [attr-as-block mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html) to avoid breaking users during the 0.12 upgrade. To explicitly send a list of zero objects you must use the following syntax: 'example=[]' For more details about this behavior, see [this section](https://www.terraform.io/docs/configuration/attr-as-blocks.html#defining-a-fixed-object-collection-value).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecSecondaryIPRange"),
									},
								},
							},
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "ipCIDRRange", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecLogConfig", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.SubnetworkSpecSecondaryIPRange"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpecLogConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"aggregationInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection. Default value: \"INTERVAL_5_SEC\" Possible values: [\"INTERVAL_5_SEC\", \"INTERVAL_30_SEC\", \"INTERVAL_1_MIN\", \"INTERVAL_5_MIN\", \"INTERVAL_10_MIN\", \"INTERVAL_15_MIN\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"filterExpr": {
						SchemaProps: spec.SchemaProps{
							Description: "Export filter used to define which VPC flow logs should be logged, as as CEL expression. See https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field. The default value is 'true', which evaluates to include everything.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"flowSampling": {
						SchemaProps: spec.SchemaProps{
							Description: "Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 which means half of all collected logs are reported.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Can only be specified if VPC flow logging for this subnetwork is enabled. Configures whether metadata fields should be added to the reported VPC flow logs. Default value: \"INCLUDE_ALL_METADATA\" Possible values: [\"EXCLUDE_ALL_METADATA\", \"INCLUDE_ALL_METADATA\", \"CUSTOM_METADATA\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataFields": {
						SchemaProps: spec.SchemaProps{
							Description: "List of metadata fields that should be added to reported logs. Can only be specified if VPC flow logs for this subnetwork is enabled and \"metadata\" is set to CUSTOM_METADATA.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpecLogConfigCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkSpecSecondaryIPRange(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ipCIDRRange": {
						SchemaProps: spec.SchemaProps{
							Description: "The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"rangeName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"ipCIDRRange", "rangeName"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_SubnetworkStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetGrpcProxyList is a list of TargetGrpcProxys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of TargetGrpcProxy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLinkWithID": {
						SchemaProps: spec.SchemaProps{
							Description: "Server-defined URL with id for the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"validateForProxyless": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use \"xds:///\" scheme in the target URI of the service it is connecting to. If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use \"xds:///\" scheme in the target URI of the service it is connecting to",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetGrpcProxySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetGrpcProxy. A base64-encoded string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLinkWithID": {
						SchemaProps: spec.SchemaProps{
							Description: "Server-defined URL with id for the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"validateForProxyless": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use \"xds:///\" scheme in the target URI of the service it is connecting to. If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use \"xds:///\" scheme in the target URI of the service it is connecting to",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetGrpcProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetHTTPProxyList is a list of TargetHTTPProxys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of TargetHTTPProxy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyBind": {
						SchemaProps: spec.SchemaProps{
							Description: "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the UrlMap resource that defines the mapping from URL to the BackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPProxySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyBind": {
						SchemaProps: spec.SchemaProps{
							Description: "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the UrlMap resource that defines the mapping from URL to the BackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetHTTPSProxyList is a list of TargetHTTPSProxys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of TargetHTTPSProxy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyBind": {
						SchemaProps: spec.SchemaProps{
							Description: "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"quicOverride": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the QUIC override policy for this resource. This determines whether the load balancer will attempt to negotiate QUIC with clients or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is specified, uses the QUIC policy with no user overrides, which is equivalent to DISABLE. Default value: \"NONE\" Possible values: [\"NONE\", \"ENABLE\", \"DISABLE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslCertificates": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sslPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource will not have any SSL policy configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the UrlMap resource that defines the mapping from URL to the BackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "sslCertificates", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetHTTPSProxySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyBind": {
						SchemaProps: spec.SchemaProps{
							Description: "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"quicOverride": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the QUIC override policy for this resource. This determines whether the load balancer will attempt to negotiate QUIC with clients or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is specified, uses the QUIC policy with no user overrides, which is equivalent to DISABLE. Default value: \"NONE\" Possible values: [\"NONE\", \"ENABLE\", \"DISABLE\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslCertificates": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sslPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource will not have any SSL policy configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlMap": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the UrlMap resource that defines the mapping from URL to the BackendService.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name", "sslCertificates", "urlMap"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetHTTPSProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetInstance(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetInstanceList is a list of TargetInstances",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of TargetInstance CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstance"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstance"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instance": {
						SchemaProps: spec.SchemaProps{
							Description: "The Compute instance VM handling traffic for this target instance. Accepts the instance self-link, relative path (e.g. 'projects/project/zones/zone/instances/instance') or name. If name is given, the zone will default to the given zone or the provider-default zone and the project will default to the provider-level project.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"natPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported. Default value: \"NO_NAT\" Possible values: [\"NO_NAT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the zone where the target instance resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "instance", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetInstanceSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"instance": {
						SchemaProps: spec.SchemaProps{
							Description: "The Compute instance VM handling traffic for this target instance. Accepts the instance self-link, relative path (e.g. 'projects/project/zones/zone/instances/instance') or name. If name is given, the zone will default to the given zone or the provider-default zone and the project will default to the provider-level project.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"natPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported. Default value: \"NO_NAT\" Possible values: [\"NO_NAT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the zone where the target instance resides.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "instance", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetInstanceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetPool(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetPoolList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetPoolList is a list of TargetPools",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of TargetPool CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPool"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPool"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetPoolSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"backupPool": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to the backup target pool. Must also set failover_ratio.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Textual description field.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"failoverRatio": {
						SchemaProps: spec.SchemaProps{
							Description: "Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"healthChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "List of zero or one health check name or self_link. Only legacy google_compute_http_health_check is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"instances": {
						SchemaProps: spec.SchemaProps{
							Description: "List of instances in the pool. They can be given as URLs, or in the form of \"zone/name\". Note that the instances need not exist at the time of target pool creation, so there is no need to use the Terraform interpolators to create a dependency on the instances from the target pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique name for the resource, required by GCE. Changing this forces a new resource to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Where the target pool resides. Defaults to project region.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "How to distribute load. Options are \"NONE\" (no affinity). \"CLIENT_IP\" (hash of the source/dest addresses / ports), and \"CLIENT_IP_PROTO\" also includes the protocol (default \"NONE\").",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetPoolSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetPoolSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"backupPool": {
						SchemaProps: spec.SchemaProps{
							Description: "URL to the backup target pool. Must also set failover_ratio.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Textual description field.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"failoverRatio": {
						SchemaProps: spec.SchemaProps{
							Description: "Ratio (0 to 1) of failed nodes before using the backup pool (which must also be set).",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"healthChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "List of zero or one health check name or self_link. Only legacy google_compute_http_health_check is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"instances": {
						SchemaProps: spec.SchemaProps{
							Description: "List of instances in the pool. They can be given as URLs, or in the form of \"zone/name\". Note that the instances need not exist at the time of target pool creation, so there is no need to use the Terraform interpolators to create a dependency on the instances from the target pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique name for the resource, required by GCE. Changing this forces a new resource to be created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "The ID of the project in which the resource belongs. If it is not provided, the provider project is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Where the target pool resides. Defaults to project region.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "The URI of the created resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "How to distribute load. Options are \"NONE\" (no affinity). \"CLIENT_IP\" (hash of the source/dest addresses / ports), and \"CLIENT_IP_PROTO\" also includes the protocol (default \"NONE\").",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetPoolStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetSSLProxyList is a list of TargetSSLProxys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of TargetSSLProxy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the BackendService resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslCertificates": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sslPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "backendService", "name", "sslCertificates"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetSSLProxySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the BackendService resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sslCertificates": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"sslPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"providerRef", "backendService", "name", "sslCertificates"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetSSLProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxyStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetTcpProxyList is a list of TargetTcpProxys",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of TargetTcpProxy CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxy"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the BackendService resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyBind": {
						SchemaProps: spec.SchemaProps{
							Description: "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "backendService", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.TargetTcpProxySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "A reference to the BackendService resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"proxyBind": {
						SchemaProps: spec.SchemaProps{
							Description: "This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"proxyHeader": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the type of proxy header to append before sending data to the backend. Default value: \"NONE\" Possible values: [\"NONE\", \"PROXY_V1\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "backendService", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_TargetTcpProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMap(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UrlMapList is a list of UrlMaps",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of UrlMap CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMap"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMap"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultRouteAction": {
						SchemaProps: spec.SchemaProps{
							Description: "defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.\n\nOnly one of defaultRouteAction or defaultUrlRedirect must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteAction"),
						},
					},
					"defaultService": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service or backend bucket to use when none of the given rules match.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultURLRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultURLRedirect"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here take effect after headerAction specified under pathMatcher.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderAction"),
						},
					},
					"hostRule": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of HostRules to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHostRule"),
									},
								},
							},
						},
					},
					"mapID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathMatcher": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of named PathMatchers to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcher"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"test": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test cases pass. You can specify a maximum of 100 tests per UrlMap.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecTest"),
									},
								},
							},
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpec2", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultURLRedirect", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHostRule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcher", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecTest"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultRouteAction": {
						SchemaProps: spec.SchemaProps{
							Description: "defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.\n\nOnly one of defaultRouteAction or defaultUrlRedirect must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteAction"),
						},
					},
					"defaultService": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service or backend bucket to use when none of the given rules match.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultURLRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultURLRedirect"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fingerprint": {
						SchemaProps: spec.SchemaProps{
							Description: "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here take effect after headerAction specified under pathMatcher.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderAction"),
						},
					},
					"hostRule": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of HostRules to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHostRule"),
									},
								},
							},
						},
					},
					"mapID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathMatcher": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of named PathMatchers to use against the URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcher"),
									},
								},
							},
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"test": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of expected URL mapping tests. Request to update this UrlMap will succeed only if all of the test cases pass. You can specify a maximum of 100 tests per UrlMap.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecTest"),
									},
								},
							},
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultURLRedirect", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHostRule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcher", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecTest"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"corsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for allowing client side cross-origin requests. Please see [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionCorsPolicy"),
						},
					},
					"faultInjectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.\n\ntimeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicy"),
						},
					},
					"requestMirrorPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRequestMirrorPolicy"),
						},
					},
					"retryPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the retry policy associated with this route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicy"),
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.\n\nIf not specified, will use the largest timeout among all backend services associated with the route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionTimeout"),
						},
					},
					"urlRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec to modify the URL of the request, prior to forwarding the request to the matched service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionUrlRewrite"),
						},
					},
					"weightedBackendServices": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non 0 number.\n\nOnce a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServices"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionCorsPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRequestMirrorPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionUrlRewrite", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServices"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionCorsPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"allowCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowMethods": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Methods header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOriginRegexes": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the regular expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOrigins": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exposeHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Expose-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"maxAge": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionCorsPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"abort": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are aborted as part of fault injection.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbort"),
						},
					},
					"delay": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelay"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyAbortCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixedDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the value of the fixed delay interval.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelay"),
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRequestMirrorPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The full or partial URL to the BackendService resource being mirrored to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"backendService"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRequestMirrorPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"numRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"perTryTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a non-zero timeout per retry attempt.\n\nIf not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeout"),
						},
					},
					"retryConditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Specfies one or more conditions when this retry rule applies. Valid values are:\n\n* 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,\n  or if the backend service does not respond at all, example: disconnects, reset, read timeout,\n* connection failure, and refused streams. * gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. * connect-failure: Loadbalancer will retry on failures connecting to backend services,\n  for example due to connection timeouts.\n* retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.\n  Currently the only retriable error supported is 409.\n* refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.\n  This reset type indicates that it is safe to retry.\n* cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled * deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded * resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted * unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionRetryPolicyPerTryTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionUrlRewrite(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite.\n\nThe value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathPrefixRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite.\n\nThe value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionUrlRewriteCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServices(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService.\n\nheaderAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderAction"),
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) .\n\nThe selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy.\n\nThe value must be between 0 and 1000",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderAction"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultURLRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.\n This field is required to ensure an empty block is not set. The normal default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"stripQuery"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecDefaultURLRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecHostRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hosts": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of host patterns to match. They must be valid hostnames, except * will match any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or ..",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"pathMatcher": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"hosts", "pathMatcher"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcher(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultRouteAction": {
						SchemaProps: spec.SchemaProps{
							Description: "defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.\n\nOnly one of defaultRouteAction or defaultUrlRedirect must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteAction"),
						},
					},
					"defaultService": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service or backend bucket to use when none of the given paths match.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultURLRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultURLRedirect"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource. Provide this property when you create the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderAction"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name to which this PathMatcher is referred by the HostRule.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathRule": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRule"),
									},
								},
							},
						},
					},
					"routeRules": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of ordered HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. The order of specifying routeRules matters: the first rule that matches will cause its specified routing action to take effect. Within a given pathMatcher, only one of pathRules or routeRules must be set. routeRules are not supported in UrlMaps intended for External load balancers.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRules"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultURLRedirect", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRule", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRules"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"corsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for allowing client side cross-origin requests. Please see [W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/)",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionCorsPolicy"),
						},
					},
					"faultInjectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.\n\ntimeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicy"),
						},
					},
					"requestMirrorPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicy"),
						},
					},
					"retryPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the retry policy associated with this route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicy"),
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.\n\nIf not specified, will use the largest timeout among all backend services associated with the route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionTimeout"),
						},
					},
					"urlRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec to modify the URL of the request, prior to forwarding the request to the matched service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionUrlRewrite"),
						},
					},
					"weightedBackendServices": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non 0 number.\n\nOnce a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServices"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionCorsPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionUrlRewrite", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServices"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionCorsPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"allowCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowMethods": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Methods header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOriginRegexes": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the regular expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOrigins": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, specifies the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exposeHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Expose-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"maxAge": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionCorsPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"abort": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are aborted as part of fault injection.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbort"),
						},
					},
					"delay": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelay"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyAbortCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixedDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the value of the fixed delay interval.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay"),
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The full or partial URL to the BackendService resource being mirrored to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"backendService"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRequestMirrorPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"numRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"perTryTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a non-zero timeout per retry attempt.\n\nIf not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeout"),
						},
					},
					"retryConditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Specfies one or more conditions when this retry rule applies. Valid values are:\n\n* 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code,\n  or if the backend service does not respond at all, example: disconnects, reset, read timeout,\n* connection failure, and refused streams. * gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. * connect-failure: Loadbalancer will retry on failures connecting to backend services,\n  for example due to connection timeouts.\n* retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.\n  Currently the only retriable error supported is 409.\n* refused-stream:Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code.\n  This reset type indicates that it is safe to retry.\n* cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled * deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded * resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted * unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionRetryPolicyPerTryTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 seconds field and a positive nanos field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionUrlRewrite(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite.\n\nThe value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathPrefixRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite.\n\nThe value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionUrlRewriteCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServices(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService.\n\nheaderAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction"),
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) .\n\nThe selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy.\n\nThe value must be between 0 and 1000",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultURLRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.\n This field is required to ensure an empty block is not set. The normal default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"stripQuery"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherDefaultURLRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"paths": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"routeAction": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices. Only one of routeAction or urlRedirect must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteAction"),
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service or backend bucket to use if any of the given paths match.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleUrlRedirect"),
						},
					},
				},
				Required: []string{"paths"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleUrlRedirect"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"corsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicy"),
						},
					},
					"faultInjectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy"),
						},
					},
					"requestMirrorPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy"),
						},
					},
					"retryPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the retry policy associated with this route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicy"),
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the timeout for the selected route. Timeout is computed from the time the request is has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, the default value is 15 seconds.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionTimeout"),
						},
					},
					"urlRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec to modify the URL of the request, prior to forwarding the request to the matched service",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionUrlRewrite"),
						},
					},
					"weightedBackendServices": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one  weightedBackendService with weight set to a non 0 number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionUrlRewrite", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"allowCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access- Control-Allow-Credentials header. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowMethods": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Methods header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOriginRegexes": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the regular expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOrigins": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, specifies the CORS policy is disabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exposeHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Expose-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"maxAge": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how long the results of a preflight request can be cached. This translates to the content for the Access-Control-Max-Age header.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"disabled"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionCorsPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"abort": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are aborted as part of fault injection.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort"),
						},
					},
					"delay": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"httpStatus", "percentage"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixedDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the value of the fixed delay interval.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay"),
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
				Required: []string{"fixedDelay", "percentage"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The BackendService resource being mirrored to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"backendService"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"numRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the allowed number retries. This number must be > 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"perTryTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a non-zero timeout per retry attempt.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout"),
						},
					},
					"retryConditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies one or more conditions when this retry rule applies. Valid values are:\n\n* 5xx: Loadbalancer will attempt a retry if the backend service responds with any 5xx response code, or if the backend service does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. * gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. * connect-failure: Loadbalancer will retry on failures connecting to backend services, for example due to connection timeouts. * retriable-4xx: Loadbalancer will retry for retriable 4xx response codes. Currently the only retriable error supported is 409. * refused-stream: Loadbalancer will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. * cancelled: Loadbalancer will retry if the gRPC status code in the response header is set to cancelled * deadline-exceeded: Loadbalancer will retry if the gRPC status code in the response header is set to deadline-exceeded * resource-exhausted: Loadbalancer will retry if the gRPC status code in the response header is set to resource-exhausted * unavailable: Loadbalancer will retry if the gRPC status code in the response header is set to unavailable",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionUrlRewrite(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathPrefixRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionUrlRewriteCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction"),
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"backendService", "weight"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleUrlRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained.\n This field is required to ensure an empty block is not set. The normal default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"stripQuery"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherPathRuleUrlRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRules(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].r outeAction.weightedBackendService.backendServiceWeightAction[].headerAction",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderAction"),
						},
					},
					"matchRules": {
						SchemaProps: spec.SchemaProps{
							Description: "The rules for determining a match.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRules"),
									},
								},
							},
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied.\n\nYou cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive.\n\nPriority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"routeAction": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If  routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any  weightedBackendServices. Only one of routeAction or urlRedirect must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteAction"),
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"urlRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesUrlRedirect"),
						},
					},
				},
				Required: []string{"priority"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRules", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteAction", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesUrlRedirect"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRules(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fullPathMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. FullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerMatches": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a list of header match criteria, all of which must match corresponding headers in the request.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches"),
									},
								},
							},
						},
					},
					"ignoreCase": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies that prefixMatch and fullPathMatch matches are case sensitive. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"metadataFilters": {
						SchemaProps: spec.SchemaProps{
							Description: "Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the provided metadata. metadataFilters specified here can be overrides those specified in ForwardingRule that refers to this UrlMap. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters"),
									},
								},
							},
						},
					},
					"prefixMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"queryParameterMatches": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches"),
									},
								},
							},
						},
					},
					"regexMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch, fullPathMatch or regexMatch must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"exactMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name \":authority\". For matching a request's method, use the headerName \":method\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"invertMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"prefixMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"presentMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value or not. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"rangeMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will not match.  - 0.25 will not match.  - -3someString will not match.   Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch"),
						},
					},
					"regexMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript  For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"suffixMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"rangeEnd": {
						SchemaProps: spec.SchemaProps{
							Description: "The end of the range (exclusive).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"rangeStart": {
						SchemaProps: spec.SchemaProps{
							Description: "The start of the range (inclusive).",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"rangeEnd", "rangeStart"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatchCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"filterLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria  This list must not be empty and can have at the most 64 entries.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels"),
									},
								},
							},
						},
					},
					"filterMatchCriteria": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are:\n  - MATCH_ANY: At least one of the filterLabels must have a matching label in the\nprovided metadata.\n  - MATCH_ALL: All filterLabels must have matching labels in\nthe provided metadata. Possible values: [\"MATCH_ALL\", \"MATCH_ANY\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"filterLabels", "filterMatchCriteria"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the label must match the specified value. value can have a maximum length of 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"exactMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"presentMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch and regexMatch must be set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"regexMatch": {
						SchemaProps: spec.SchemaProps{
							Description: "The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch, exactMatch and regexMatch must be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"corsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicy"),
						},
					},
					"faultInjectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy"),
						},
					},
					"requestMirrorPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy"),
						},
					},
					"retryPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the retry policy associated with this route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicy"),
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the timeout for the selected route. Timeout is computed from the time the request is has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, the default value is 15 seconds.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionTimeout"),
						},
					},
					"urlRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "The spec to modify the URL of the request, prior to forwarding the request to the matched service",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewrite"),
						},
					},
					"weightedBackendServices": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one  weightedBackendService with weight set to a non 0 number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions like Url rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicy", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewrite", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"allowCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access- Control-Allow-Credentials header. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowMethods": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Allow-Methods header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOriginRegexes": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the regular expression patterns that match allowed origins. For regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"allowOrigins": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either allow_origins or allow_origin_regex.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, specifies the CORS policy is disabled. which indicates that the CORS policy is in effect. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exposeHeaders": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the content for the Access-Control-Expose-Headers header.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"maxAge": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies how long the results of a preflight request can be cached. This translates to the content for the Access-Control-Max-Age header.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionCorsPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"abort": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are aborted as part of fault injection.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort"),
						},
					},
					"delay": {
						SchemaProps: spec.SchemaProps{
							Description: "The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbortCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"fixedDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the value of the fixed delay interval.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay"),
						},
					},
					"percentage": {
						SchemaProps: spec.SchemaProps{
							Description: "The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelayCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The BackendService resource being mirrored to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"backendService"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"numRetries": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the allowed number retries. This number must be > 0.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"perTryTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout"),
						},
					},
					"retryConditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Specfies one or more conditions when this retry rule applies. Valid values are:\n\n* 5xx: Loadbalancer will attempt a retry if the backend service responds with\n  any 5xx response code, or if the backend service does not respond at all,\n  example: disconnects, reset, read timeout, connection failure, and refused\n  streams.\n* gateway-error: Similar to 5xx, but only applies to response codes\n  502, 503 or 504.\n* connect-failure: Loadbalancer will retry on failures\n  connecting to backend services, for example due to connection timeouts.\n* retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.\n  Currently the only retriable error supported is 409.\n* refused-stream: Loadbalancer will retry if the backend service resets the stream with a\n  REFUSED_STREAM error code. This reset type indicates that it is safe to retry.\n* cancelled: Loadbalancer will retry if the gRPC status code in the response\n  header is set to cancelled\n* deadline-exceeded: Loadbalancer will retry if the\n  gRPC status code in the response header is set to deadline-exceeded\n* resource-exhausted: Loadbalancer will retry if the gRPC status code in the response\n  header is set to resource-exhausted\n* unavailable: Loadbalancer will retry if the gRPC status code in\n  the response header is set to unavailable",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"numRetries"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionTimeout(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 'seconds' field and a positive 'nanos' field. Must be from 0 to 999,999,999 inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"seconds"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionTimeoutCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewrite(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pathPrefixRewrite": {
						SchemaProps: spec.SchemaProps{
							Description: "Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionUrlRewriteCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"backendService": {
						SchemaProps: spec.SchemaProps{
							Description: "The default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerAction": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.",
							Ref:         ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction"),
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"backendService", "weight"},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"requestHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add to a matching request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd"),
									},
								},
							},
						},
					},
					"requestHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"responseHeadersToAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "Headers to add the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"),
									},
								},
							},
						},
					},
					"responseHeadersToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of header names for headers that need to be removed from the response prior to sending the response back to the client.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"headerName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the header.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"headerValue": {
						SchemaProps: spec.SchemaProps{
							Description: "The value of the header to add.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"headerName", "headerValue", "replace"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesUrlRedirect(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hostRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pathRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The path that will be used in the redirect response instead of the one that was supplied in the request. Only one of pathRedirect or prefixRedirect must be specified. The value must be between 1 and 1024 characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prefixRedirect": {
						SchemaProps: spec.SchemaProps{
							Description: "The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redirectResponseCode": {
						SchemaProps: spec.SchemaProps{
							Description: "The HTTP Status code to use for this RedirectAction. Supported values are:\n\n* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.\n\n* FOUND, which corresponds to 302.\n\n* SEE_OTHER which corresponds to 303.\n\n* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.\n\n* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: [\"FOUND\", \"MOVED_PERMANENTLY_DEFAULT\", \"PERMANENT_REDIRECT\", \"SEE_OTHER\", \"TEMPORARY_REDIRECT\"]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stripQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecPathMatcherRouteRulesUrlRedirectCodec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapSpecTest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description of this test case.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host portion of the URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path portion of the URL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Description: "The backend service or backend bucket link that should be matched by this test.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"host", "path", "service"},
			},
		},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_UrlMapStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnGateway(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewaySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewayStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewaySpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewayStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnGatewayList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VpnGatewayList is a list of VpnGateways",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of VpnGateway CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGateway"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGateway"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnGatewaySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gatewayID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network this VPN gateway is accepting traffic for.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region this gateway should sit in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewaySpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnGatewaySpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnGatewaySpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gatewayID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.  Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "The network this VPN gateway is accepting traffic for.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region this gateway should sit in.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"providerRef", "name", "network"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnGatewayStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnTunnel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelSpec", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelStatus"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VpnTunnelList is a list of VpnTunnels",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of VpnTunnel CRD objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnel"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnel"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"detailedStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Detailed status message for the VPN tunnel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ikeVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "IKE protocol version to use when establishing the VPN tunnel with peer VPN gateway. Acceptable IKE versions are 1 or 2. Default version is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"localTrafficSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Local traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerExternalGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the peer side external VPN gateway to which this VPN tunnel is connected.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerExternalGatewayInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The interface ID of the external VPN gateway to which this VPN tunnel is connected.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"peerGcpGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. If provided, the VPN tunnel will automatically use the same vpn_gateway_interface ID in the peer GCP VPN gateway. This field must reference a 'google_compute_ha_vpn_gateway' resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerIP": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the peer VPN gateway. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region where the tunnel is located. If unset, is set to the region of 'target_vpn_gateway'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remoteTrafficSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Remote traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of router resource to be used for dynamic routing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sharedSecretHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Hash of the shared secret.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetVPNGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the Target VPN gateway with which this VPN tunnel is associated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tunnelID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource. This identifier is defined by the server.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpnGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the VPN gateway with which this VPN tunnel is associated. This must be used if a High Availability VPN gateway resource is created. This field must reference a 'google_compute_ha_vpn_gateway' resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpnGatewayInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The interface ID of the VPN gateway with which this VPN tunnel is associated.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"kubeformOutput": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelSpec2"),
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout", "kubeform.dev/provider-google-api/apis/compute/v1alpha1.VpnTunnelSpec2"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelSpec2(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"terminationPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"timeouts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"),
						},
					},
					"providerRef": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "Creation timestamp in RFC3339 text format.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description of this resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"detailedStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Detailed status message for the VPN tunnel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ikeVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "IKE protocol version to use when establishing the VPN tunnel with peer VPN gateway. Acceptable IKE versions are 1 or 2. Default version is 2.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"localTrafficSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Local traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerExternalGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the peer side external VPN gateway to which this VPN tunnel is connected.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerExternalGatewayInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The interface ID of the external VPN gateway to which this VPN tunnel is connected.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"peerGcpGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. If provided, the VPN tunnel will automatically use the same vpn_gateway_interface ID in the peer GCP VPN gateway. This field must reference a 'google_compute_ha_vpn_gateway' resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerIP": {
						SchemaProps: spec.SchemaProps{
							Description: "IP address of the peer VPN gateway. Only IPv4 is supported.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region where the tunnel is located. If unset, is set to the region of 'target_vpn_gateway'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remoteTrafficSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Remote traffic selector to use when establishing the VPN tunnel with peer VPN gateway. The value should be a CIDR formatted string, for example '192.168.0.0/16'. The ranges should be disjoint. Only IPv4 is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of router resource to be used for dynamic routing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sharedSecretHash": {
						SchemaProps: spec.SchemaProps{
							Description: "Hash of the shared secret.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetVPNGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the Target VPN gateway with which this VPN tunnel is associated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tunnelID": {
						SchemaProps: spec.SchemaProps{
							Description: "The unique identifier for the resource. This identifier is defined by the server.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpnGateway": {
						SchemaProps: spec.SchemaProps{
							Description: "URL of the VPN gateway with which this VPN tunnel is associated. This must be used if a High Availability VPN gateway resource is created. This field must reference a 'google_compute_ha_vpn_gateway' resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpnGatewayInterface": {
						SchemaProps: spec.SchemaProps{
							Description: "The interface ID of the VPN gateway with which this VPN tunnel is associated.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"providerRef", "name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference", "kubeform.dev/apimachinery/api/v1alpha1.ResourceTimeout"},
	}
}

func schema_provider_google_api_apis_compute_v1alpha1_VpnTunnelStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("kmodules.xyz/client-go/api/v1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"kmodules.xyz/client-go/api/v1.Condition"},
	}
}
