/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RegionURLMap struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegionURLMapSpec   `json:"spec,omitempty"`
	Status            RegionURLMapStatus `json:"status,omitempty"`
}

type RegionURLMapSpec struct {
	RegionURLMapSpec2 `json:",inline"`
	// +optional
	KubeformOutput RegionURLMapSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RegionURLMapSpecDefaultURLRedirect struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	// +optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	// +optional
	HttpsRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	// +optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	// +optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	//
	// * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	//
	// * FOUND, which corresponds to 302.
	//
	// * SEE_OTHER which corresponds to 303.
	//
	// * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	//
	// * PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained. Possible values: ["FOUND", "MOVED_PERMANENTLY_DEFAULT", "PERMANENT_REDIRECT", "SEE_OTHER", "TEMPORARY_REDIRECT"]
	// +optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code"`
	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	//  This field is required to ensure an empty block is not set. The normal default value is false.
	StripQuery *bool `json:"stripQuery" tf:"strip_query"`
}

type RegionURLMapSpecHostRule struct {
	// An optional description of this HostRule. Provide this property
	// when you create the resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The list of host patterns to match. They must be valid
	// hostnames, except * will match any string of ([a-z0-9-.]*). In
	// that case, * must be the first character and must be followed in
	// the pattern by either - or ..
	Hosts []string `json:"hosts" tf:"hosts"`
	// The name of the PathMatcher to use to match the path portion of
	// the URL if the hostRule matches the URL's host portion.
	PathMatcher *string `json:"pathMatcher" tf:"path_matcher"`
}

type RegionURLMapSpecPathMatcherDefaultURLRedirect struct {
	// The host that will be used in the redirect response instead of the one that was
	// supplied in the request. The value must be between 1 and 255 characters.
	// +optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to
	// false, the URL scheme of the redirected request will remain the same as that of the
	// request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	// true for TargetHttpsProxy is not permitted. The default is set to false.
	// +optional
	HttpsRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect"`
	// The path that will be used in the redirect response instead of the one that was
	// supplied in the request. pathRedirect cannot be supplied together with
	// prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	// original request will be used for the redirect. The value must be between 1 and 1024
	// characters.
	// +optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	// retaining the remaining portion of the URL before redirecting the request.
	// prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	// neither. If neither is supplied, the path of the original request will be used for
	// the redirect. The value must be between 1 and 1024 characters.
	// +optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	//
	// * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	//
	// * FOUND, which corresponds to 302.
	//
	// * SEE_OTHER which corresponds to 303.
	//
	// * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	//
	// * PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained. Possible values: ["FOUND", "MOVED_PERMANENTLY_DEFAULT", "PERMANENT_REDIRECT", "SEE_OTHER", "TEMPORARY_REDIRECT"]
	// +optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code"`
	// If set to true, any accompanying query portion of the original URL is removed prior
	// to redirecting the request. If set to false, the query portion of the original URL is
	// retained.
	//  This field is required to ensure an empty block is not set. The normal default value is false.
	StripQuery *bool `json:"stripQuery" tf:"strip_query"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	// +optional
	AllowHeaders []string `json:"allowHeaders,omitempty" tf:"allow_headers"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	// +optional
	AllowMethods []string `json:"allowMethods,omitempty" tf:"allow_methods"`
	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +optional
	AllowOriginRegexes []string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +optional
	AllowOrigins []string `json:"allowOrigins,omitempty" tf:"allow_origins"`
	// If true, specifies the CORS policy is disabled.
	Disabled *bool `json:"disabled" tf:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	// +optional
	ExposeHeaders []string `json:"exposeHeaders,omitempty" tf:"expose_headers"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +optional
	MaxAge *int64 `json:"maxAge,omitempty" tf:"max_age"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	HttpStatus *int64 `json:"httpStatus" tf:"http_status"`
	// The percentage of traffic (connections/operations/requests) which will be
	// aborted as part of fault injection. The value must be between 0.0 and 100.0
	// inclusive.
	Percentage *float64 `json:"percentage" tf:"percentage"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds" tf:"seconds"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay struct {
	// Specifies the value of the fixed delay interval.
	FixedDelay *RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelay `json:"fixedDelay" tf:"fixed_delay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	Percentage *float64 `json:"percentage" tf:"percentage"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy struct {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// +optional
	Abort *RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyAbort `json:"abort,omitempty" tf:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// +optional
	Delay *RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicyDelay `json:"delay,omitempty" tf:"delay"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy struct {
	// The RegionBackendService resource being mirrored to.
	BackendService *string `json:"backendService" tf:"backend_service"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds" tf:"seconds"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicy struct {
	// Specifies the allowed number retries. This number must be > 0.
	// +optional
	NumRetries *int64 `json:"numRetries,omitempty" tf:"num_retries"`
	// Specifies a non-zero timeout per retry attempt.
	// +optional
	PerTryTimeout *RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeout `json:"perTryTimeout,omitempty" tf:"per_try_timeout"`
	// Specifies one or more conditions when this retry rule applies. Valid values are:
	//
	// - 5xx: Loadbalancer will attempt a retry if the backend service responds with
	// any 5xx response code, or if the backend service does not respond at all,
	// example: disconnects, reset, read timeout, connection failure, and refused
	// streams.
	// - gateway-error: Similar to 5xx, but only applies to response codes
	// 502, 503 or 504.
	// - connect-failure: Loadbalancer will retry on failures
	// connecting to backend services, for example due to connection timeouts.
	// - retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	// Currently the only retriable error supported is 409.
	// - refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	// REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// - cancelled: Loadbalancer will retry if the gRPC status code in the response
	// header is set to cancelled
	// - deadline-exceeded: Loadbalancer will retry if the
	// gRPC status code in the response header is set to deadline-exceeded
	// - resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	// header is set to resource-exhausted
	// - unavailable: Loadbalancer will retry if
	// the gRPC status code in the response header is set to unavailable
	// +optional
	RetryConditions []string `json:"retryConditions,omitempty" tf:"retry_conditions"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds" tf:"seconds"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +optional
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +optional
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName *string `json:"headerName" tf:"header_name"`
	// The value of the header to add.
	HeaderValue *string `json:"headerValue" tf:"header_value"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace" tf:"replace"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName *string `json:"headerName" tf:"header_name"`
	// The value of the header to add.
	HeaderValue *string `json:"headerValue" tf:"header_value"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace" tf:"replace"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// +optional
	RequestHeadersToAdd []RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +optional
	RequestHeadersToRemove []string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove"`
	// Headers to add the response prior to sending the response back to the client.
	// +optional
	ResponseHeadersToAdd []RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +optional
	ResponseHeadersToRemove []string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService" tf:"backend_service"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// +optional
	HeaderAction *RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServicesHeaderAction `json:"headerAction,omitempty" tf:"header_action"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *int64 `json:"weight" tf:"weight"`
}

type RegionURLMapSpecPathMatcherPathRuleRouteAction struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// +optional
	CorsPolicy *RegionURLMapSpecPathMatcherPathRuleRouteActionCorsPolicy `json:"corsPolicy,omitempty" tf:"cors_policy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// +optional
	FaultInjectionPolicy *RegionURLMapSpecPathMatcherPathRuleRouteActionFaultInjectionPolicy `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// +optional
	RequestMirrorPolicy *RegionURLMapSpecPathMatcherPathRuleRouteActionRequestMirrorPolicy `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy"`
	// Specifies the retry policy associated with this route.
	// +optional
	RetryPolicy *RegionURLMapSpecPathMatcherPathRuleRouteActionRetryPolicy `json:"retryPolicy,omitempty" tf:"retry_policy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// +optional
	Timeout *RegionURLMapSpecPathMatcherPathRuleRouteActionTimeout `json:"timeout,omitempty" tf:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// +optional
	UrlRewrite *RegionURLMapSpecPathMatcherPathRuleRouteActionUrlRewrite `json:"urlRewrite,omitempty" tf:"url_rewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// +optional
	WeightedBackendServices []RegionURLMapSpecPathMatcherPathRuleRouteActionWeightedBackendServices `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services"`
}

type RegionURLMapSpecPathMatcherPathRuleUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect"`
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +optional
	HttpsRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect"`
	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect"`
	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	//
	// * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	//
	// * FOUND, which corresponds to 302.
	//
	// * SEE_OTHER which corresponds to 303.
	//
	// * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	//
	// * PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained. Possible values: ["FOUND", "MOVED_PERMANENTLY_DEFAULT", "PERMANENT_REDIRECT", "SEE_OTHER", "TEMPORARY_REDIRECT"]
	// +optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code"`
	// If set to true, any accompanying query portion of the original URL is removed
	// prior to redirecting the request. If set to false, the query portion of the
	// original URL is retained.
	//  This field is required to ensure an empty block is not set. The normal default value is false.
	StripQuery *bool `json:"stripQuery" tf:"strip_query"`
}

type RegionURLMapSpecPathMatcherPathRule struct {
	// The list of path patterns to match. Each must start with / and the only place a
	// * is allowed is at the end following a /. The string fed to the path matcher
	// does not include any text after the first ? or #, and those chars are not
	// allowed here.
	Paths []string `json:"paths" tf:"paths"`
	// In response to a matching path, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// +optional
	RouteAction *RegionURLMapSpecPathMatcherPathRuleRouteAction `json:"routeAction,omitempty" tf:"route_action"`
	// The region backend service resource to which traffic is
	// directed if this rule is matched. If routeAction is additionally specified,
	// advanced routing actions like URL Rewrites, etc. take effect prior to sending
	// the request to the backend. However, if service is specified, routeAction cannot
	// contain any weightedBackendService s. Conversely, if routeAction specifies any
	// weightedBackendServices, service must not be specified. Only one of urlRedirect,
	// service or routeAction.weightedBackendService must be set.
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified
	// by urlRedirect. If urlRedirect is specified, service or routeAction must not
	// be set.
	// +optional
	UrlRedirect *RegionURLMapSpecPathMatcherPathRuleUrlRedirect `json:"urlRedirect,omitempty" tf:"url_redirect"`
}

type RegionURLMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName *string `json:"headerName" tf:"header_name"`
	// The value of the header to add.
	HeaderValue *string `json:"headerValue" tf:"header_value"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace" tf:"replace"`
}

type RegionURLMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName *string `json:"headerName" tf:"header_name"`
	// The value of the header to add.
	HeaderValue *string `json:"headerValue" tf:"header_value"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace" tf:"replace"`
}

type RegionURLMapSpecPathMatcherRouteRulesHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// +optional
	RequestHeadersToAdd []RegionURLMapSpecPathMatcherRouteRulesHeaderActionRequestHeadersToAdd `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +optional
	RequestHeadersToRemove []string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove"`
	// Headers to add the response prior to sending the response back to the client.
	// +optional
	ResponseHeadersToAdd []RegionURLMapSpecPathMatcherRouteRulesHeaderActionResponseHeadersToAdd `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +optional
	ResponseHeadersToRemove []string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove"`
}

type RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch struct {
	// The end of the range (exclusive).
	RangeEnd *int64 `json:"rangeEnd" tf:"range_end"`
	// The start of the range (inclusive).
	RangeStart *int64 `json:"rangeStart" tf:"range_start"`
}

type RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches struct {
	// The value should exactly match contents of exactMatch. Only one of exactMatch,
	// prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	// +optional
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match"`
	// The name of the HTTP header to match. For matching against the HTTP request's
	// authority, use a headerMatch with the header name ":authority". For matching a
	// request's method, use the headerName ":method".
	HeaderName *string `json:"headerName" tf:"header_name"`
	// If set to false, the headerMatch is considered a match if the match criteria
	// above are met. If set to true, the headerMatch is considered a match if the
	// match criteria above are NOT met. Defaults to false.
	// +optional
	InvertMatch *bool `json:"invertMatch,omitempty" tf:"invert_match"`
	// The value of the header must start with the contents of prefixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	// +optional
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match"`
	// A header with the contents of headerName must exist. The match takes place
	// whether or not the request's header has a value or not. Only one of exactMatch,
	// prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	// +optional
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match"`
	// The header value must be an integer and its value must be in the range specified
	// in rangeMatch. If the header does not contain an integer, number or is empty,
	// the match fails. For example for a range [-5, 0]
	//
	// * -3 will match
	// * 0 will not match
	// * 0.25 will not match
	// * -3someString will not match.
	//
	// Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or
	// rangeMatch must be set.
	// +optional
	RangeMatch *RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatchesRangeMatch `json:"rangeMatch,omitempty" tf:"range_match"`
	// The value of the header must match the regular expression specified in
	// regexMatch. For regular expression grammar, please see:
	// en.cppreference.com/w/cpp/regex/ecmascript  For matching against a port
	// specified in the HTTP request, use a headerMatch with headerName set to PORT and
	// a regular expression that satisfies the RFC2616 Host header's port specifier.
	// Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or
	// rangeMatch must be set.
	// +optional
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match"`
	// The value of the header must end with the contents of suffixMatch. Only one of
	// exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	// must be set.
	// +optional
	SuffixMatch *string `json:"suffixMatch,omitempty" tf:"suffix_match"`
}

type RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels struct {
	// Name of metadata label. The name can have a maximum length of 1024 characters
	// and must be at least 1 character long.
	Name *string `json:"name" tf:"name"`
	// The value of the label must match the specified value. value can have a maximum
	// length of 1024 characters.
	Value *string `json:"value" tf:"value"`
}

type RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters struct {
	// The list of label value pairs that must match labels in the provided metadata
	// based on filterMatchCriteria  This list must not be empty and can have at the
	// most 64 entries.
	// +kubebuilder:validation:MaxItems=64
	// +kubebuilder:validation:MinItems=1
	FilterLabels []RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFiltersFilterLabels `json:"filterLabels" tf:"filter_labels"`
	// Specifies how individual filterLabel matches within the list of filterLabels
	// contribute towards the overall metadataFilter match. Supported values are:
	//
	// * MATCH_ANY: At least one of the filterLabels must have a matching label in the
	// provided metadata.
	// * MATCH_ALL: All filterLabels must have matching labels in
	// the provided metadata. Possible values: ["MATCH_ALL", "MATCH_ANY"]
	FilterMatchCriteria *string `json:"filterMatchCriteria" tf:"filter_match_criteria"`
}

type RegionURLMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches
	// the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	// must be set.
	// +optional
	ExactMatch *string `json:"exactMatch,omitempty" tf:"exact_match"`
	// The name of the query parameter to match. The query parameter must exist in the
	// request, in the absence of which the request match fails.
	Name *string `json:"name" tf:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query
	// parameter, irrespective of whether the parameter has a value or not. Only one of
	// presentMatch, exactMatch and regexMatch must be set.
	// +optional
	PresentMatch *bool `json:"presentMatch,omitempty" tf:"present_match"`
	// The queryParameterMatch matches if the value of the parameter matches the
	// regular expression specified by regexMatch. For the regular expression grammar,
	// please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	// exactMatch and regexMatch must be set.
	// +optional
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match"`
}

type RegionURLMapSpecPathMatcherRouteRulesMatchRules struct {
	// For satisfying the matchRule condition, the path of the request must exactly
	// match the value specified in fullPathMatch after removing any query parameters
	// and anchor that may be part of the original URL. FullPathMatch must be between 1
	// and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	// be specified.
	// +optional
	FullPathMatch *string `json:"fullPathMatch,omitempty" tf:"full_path_match"`
	// Specifies a list of header match criteria, all of which must match corresponding
	// headers in the request.
	// +optional
	HeaderMatches []RegionURLMapSpecPathMatcherRouteRulesMatchRulesHeaderMatches `json:"headerMatches,omitempty" tf:"header_matches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	// Defaults to false.
	// +optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	// a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	// clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in
	// this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	// filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	// with corresponding labels in the provided metadata. metadataFilters specified
	// here can be overrides those specified in ForwardingRule that refers to this
	// UrlMap. metadataFilters only applies to Loadbalancers that have their
	// loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// +optional
	MetadataFilters []RegionURLMapSpecPathMatcherRouteRulesMatchRulesMetadataFilters `json:"metadataFilters,omitempty" tf:"metadata_filters"`
	// For satisfying the matchRule condition, the request's path must begin with the
	// specified prefixMatch. prefixMatch must begin with a /. The value must be
	// between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	// regexMatch must be specified.
	// +optional
	PrefixMatch *string `json:"prefixMatch,omitempty" tf:"prefix_match"`
	// Specifies a list of query parameter match criteria, all of which must match
	// corresponding query parameters in the request.
	// +optional
	QueryParameterMatches []RegionURLMapSpecPathMatcherRouteRulesMatchRulesQueryParameterMatches `json:"queryParameterMatches,omitempty" tf:"query_parameter_matches"`
	// For satisfying the matchRule condition, the path of the request must satisfy the
	// regular expression specified in regexMatch after removing any query parameters
	// and anchor supplied with the original URL. For regular expression grammar please
	// see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch,
	// fullPathMatch or regexMatch must be specified.
	// +optional
	RegexMatch *string `json:"regexMatch,omitempty" tf:"regex_match"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the
	// actual request can include user credentials. This translates to the Access-
	// Control-Allow-Credentials header. Defaults to false.
	// +optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	// +optional
	AllowHeaders []string `json:"allowHeaders,omitempty" tf:"allow_headers"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	// +optional
	AllowMethods []string `json:"allowMethods,omitempty" tf:"allow_methods"`
	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	// An origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +optional
	AllowOriginRegexes []string `json:"allowOriginRegexes,omitempty" tf:"allow_origin_regexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An
	// origin is allowed if it matches either allow_origins or allow_origin_regex.
	// +optional
	AllowOrigins []string `json:"allowOrigins,omitempty" tf:"allow_origins"`
	// If true, specifies the CORS policy is disabled.
	// which indicates that the CORS policy is in effect. Defaults to false.
	// +optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	// +optional
	ExposeHeaders []string `json:"exposeHeaders,omitempty" tf:"expose_headers"`
	// Specifies how long the results of a preflight request can be cached. This
	// translates to the content for the Access-Control-Max-Age header.
	// +optional
	MaxAge *int64 `json:"maxAge,omitempty" tf:"max_age"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200
	// and 599 inclusive.
	// +optional
	HttpStatus *int64 `json:"httpStatus,omitempty" tf:"http_status"`
	// The percentage of traffic (connections/operations/requests) which will be
	// aborted as part of fault injection. The value must be between 0.0 and 100.0
	// inclusive.
	// +optional
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds" tf:"seconds"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay struct {
	// Specifies the value of the fixed delay interval.
	// +optional
	FixedDelay *RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelayFixedDelay `json:"fixedDelay,omitempty" tf:"fixed_delay"`
	// The percentage of traffic (connections/operations/requests) on which delay will
	// be introduced as part of fault injection. The value must be between 0.0 and
	// 100.0 inclusive.
	// +optional
	Percentage *float64 `json:"percentage,omitempty" tf:"percentage"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy struct {
	// The specification for how client requests are aborted as part of fault
	// injection.
	// +optional
	Abort *RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyAbort `json:"abort,omitempty" tf:"abort"`
	// The specification for how client requests are delayed as part of fault
	// injection, before being sent to a backend service.
	// +optional
	Delay *RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicyDelay `json:"delay,omitempty" tf:"delay"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy struct {
	// The RegionBackendService resource being mirrored to.
	BackendService *string `json:"backendService" tf:"backend_service"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds" tf:"seconds"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicy struct {
	// Specifies the allowed number retries. This number must be > 0.
	NumRetries *int64 `json:"numRetries" tf:"num_retries"`
	// Specifies a non-zero timeout per retry attempt.
	// +optional
	PerTryTimeout *RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicyPerTryTimeout `json:"perTryTimeout,omitempty" tf:"per_try_timeout"`
	// Specifies one or more conditions when this retry rule applies. Valid values are:
	//
	// * 5xx: Loadbalancer will attempt a retry if the backend service responds with
	//   any 5xx response code, or if the backend service does not respond at all,
	//   example: disconnects, reset, read timeout, connection failure, and refused
	//   streams.
	// * gateway-error: Similar to 5xx, but only applies to response codes
	//   502, 503 or 504.
	// * connect-failure: Loadbalancer will retry on failures
	//   connecting to backend services, for example due to connection timeouts.
	// * retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	//   Currently the only retriable error supported is 409.
	// * refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	//   REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	// * cancelled: Loadbalancer will retry if the gRPC status code in the response
	//   header is set to cancelled
	// * deadline-exceeded: Loadbalancer will retry if the
	//   gRPC status code in the response header is set to deadline-exceeded
	// * resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	//   header is set to resource-exhausted
	// * unavailable: Loadbalancer will retry if the gRPC status code in
	//   the response header is set to unavailable
	// +optional
	RetryConditions []string `json:"retryConditions,omitempty" tf:"retry_conditions"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeout struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *string `json:"seconds" tf:"seconds"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewrite struct {
	// Prior to forwarding the request to the selected service, the request's host
	// header is replaced with contents of hostRewrite. The value must be between 1 and
	// 255 characters.
	// +optional
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite"`
	// Prior to forwarding the request to the selected backend service, the matching
	// portion of the request's path is replaced by pathPrefixRewrite. The value must
	// be between 1 and 1024 characters.
	// +optional
	PathPrefixRewrite *string `json:"pathPrefixRewrite,omitempty" tf:"path_prefix_rewrite"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd struct {
	// The name of the header.
	HeaderName *string `json:"headerName" tf:"header_name"`
	// The value of the header to add.
	HeaderValue *string `json:"headerValue" tf:"header_value"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace" tf:"replace"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd struct {
	// The name of the header.
	HeaderName *string `json:"headerName" tf:"header_name"`
	// The value of the header to add.
	HeaderValue *string `json:"headerValue" tf:"header_value"`
	// If false, headerValue is appended to any values that already exist for the
	// header. If true, headerValue is set for the header, discarding any values that
	// were set for that header.
	Replace *bool `json:"replace" tf:"replace"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the
	// backendService.
	// +optional
	RequestHeadersToAdd []RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionRequestHeadersToAdd `json:"requestHeadersToAdd,omitempty" tf:"request_headers_to_add"`
	// A list of header names for headers that need to be removed from the request
	// prior to forwarding the request to the backendService.
	// +optional
	RequestHeadersToRemove []string `json:"requestHeadersToRemove,omitempty" tf:"request_headers_to_remove"`
	// Headers to add the response prior to sending the response back to the client.
	// +optional
	ResponseHeadersToAdd []RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderActionResponseHeadersToAdd `json:"responseHeadersToAdd,omitempty" tf:"response_headers_to_add"`
	// A list of header names for headers that need to be removed from the response
	// prior to sending the response back to the client.
	// +optional
	ResponseHeadersToRemove []string `json:"responseHeadersToRemove,omitempty" tf:"response_headers_to_remove"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices struct {
	// The default RegionBackendService resource. Before
	// forwarding the request to backendService, the loadbalancer applies any relevant
	// headerActions specified as part of this backendServiceWeight.
	BackendService *string `json:"backendService" tf:"backend_service"`
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. headerAction specified here take effect before
	// headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap.
	// +optional
	HeaderAction *RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServicesHeaderAction `json:"headerAction,omitempty" tf:"header_action"`
	// Specifies the fraction of traffic sent to backendService, computed as weight /
	// (sum of all weightedBackendService weights in routeAction) . The selection of a
	// backend service is determined only for new traffic. Once a user's request has
	// been directed to a backendService, subsequent requests will be sent to the same
	// backendService as determined by the BackendService's session affinity policy.
	// The value must be between 0 and 1000
	Weight *int64 `json:"weight" tf:"weight"`
}

type RegionURLMapSpecPathMatcherRouteRulesRouteAction struct {
	// The specification for allowing client side cross-origin requests. Please see W3C
	// Recommendation for Cross Origin Resource Sharing
	// +optional
	CorsPolicy *RegionURLMapSpecPathMatcherRouteRulesRouteActionCorsPolicy `json:"corsPolicy,omitempty" tf:"cors_policy"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault injection,
	// when clients send requests to a backend service, delays can be introduced by
	// Loadbalancer on a percentage of requests before sending those request to the
	// backend service. Similarly requests from clients can be aborted by the
	// Loadbalancer for a percentage of requests. timeout and retry_policy will be
	// ignored by clients that are configured with a fault_injection_policy.
	// +optional
	FaultInjectionPolicy *RegionURLMapSpecPathMatcherRouteRulesRouteActionFaultInjectionPolicy `json:"faultInjectionPolicy,omitempty" tf:"fault_injection_policy"`
	// Specifies the policy on how requests intended for the route's backends are
	// shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	// responses from the shadow service. Prior to sending traffic to the shadow
	// service, the host / authority header is suffixed with -shadow.
	// +optional
	RequestMirrorPolicy *RegionURLMapSpecPathMatcherRouteRulesRouteActionRequestMirrorPolicy `json:"requestMirrorPolicy,omitempty" tf:"request_mirror_policy"`
	// Specifies the retry policy associated with this route.
	// +optional
	RetryPolicy *RegionURLMapSpecPathMatcherRouteRulesRouteActionRetryPolicy `json:"retryPolicy,omitempty" tf:"retry_policy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time
	// the request is has been fully processed (i.e. end-of-stream) up until the
	// response has been completely processed. Timeout includes all retries. If not
	// specified, the default value is 15 seconds.
	// +optional
	Timeout *RegionURLMapSpecPathMatcherRouteRulesRouteActionTimeout `json:"timeout,omitempty" tf:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to
	// the matched service
	// +optional
	UrlRewrite *RegionURLMapSpecPathMatcherRouteRulesRouteActionUrlRewrite `json:"urlRewrite,omitempty" tf:"url_rewrite"`
	// A list of weighted backend services to send traffic to when a route match
	// occurs. The weights determine the fraction of traffic that flows to their
	// corresponding backend service. If all traffic needs to go to a single backend
	// service, there must be one  weightedBackendService with weight set to a non 0
	// number. Once a backendService is identified and before forwarding the request to
	// the backend service, advanced routing actions like Url rewrites and header
	// transformations are applied depending on additional settings specified in this
	// HttpRouteAction.
	// +optional
	WeightedBackendServices []RegionURLMapSpecPathMatcherRouteRulesRouteActionWeightedBackendServices `json:"weightedBackendServices,omitempty" tf:"weighted_backend_services"`
}

type RegionURLMapSpecPathMatcherRouteRulesUrlRedirect struct {
	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request. The value must be between 1 and 255
	// characters.
	// +optional
	HostRedirect *string `json:"hostRedirect,omitempty" tf:"host_redirect"`
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request. This must only be set for UrlMaps used in
	// TargetHttpProxys. Setting this true for TargetHttpsProxy is not
	// permitted. The default is set to false.
	// +optional
	HttpsRedirect *bool `json:"httpsRedirect,omitempty" tf:"https_redirect"`
	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request. pathRedirect cannot be supplied
	// together with prefixRedirect. Supply one alone or neither. If neither is
	// supplied, the path of the original request will be used for the redirect.
	// The value must be between 1 and 1024 characters.
	// +optional
	PathRedirect *string `json:"pathRedirect,omitempty" tf:"path_redirect"`
	// The prefix that replaces the prefixMatch specified in the
	// HttpRouteRuleMatch, retaining the remaining portion of the URL before
	// redirecting the request. prefixRedirect cannot be supplied together with
	// pathRedirect. Supply one alone or neither. If neither is supplied, the
	// path of the original request will be used for the redirect. The value
	// must be between 1 and 1024 characters.
	// +optional
	PrefixRedirect *string `json:"prefixRedirect,omitempty" tf:"prefix_redirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are:
	//
	// * MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
	//
	// * FOUND, which corresponds to 302.
	//
	// * SEE_OTHER which corresponds to 303.
	//
	// * TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	// will be retained.
	//
	// * PERMANENT_REDIRECT, which corresponds to 308. In this case,
	// the request method will be retained. Possible values: ["FOUND", "MOVED_PERMANENTLY_DEFAULT", "PERMANENT_REDIRECT", "SEE_OTHER", "TEMPORARY_REDIRECT"]
	// +optional
	RedirectResponseCode *string `json:"redirectResponseCode,omitempty" tf:"redirect_response_code"`
	// If set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained. The default value is false.
	// +optional
	StripQuery *bool `json:"stripQuery,omitempty" tf:"strip_query"`
}

type RegionURLMapSpecPathMatcherRouteRules struct {
	// Specifies changes to request and response headers that need to take effect for
	// the selected backendService. The headerAction specified here are applied before
	// the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].r
	// outeAction.weightedBackendService.backendServiceWeightAction[].headerAction
	// +optional
	HeaderAction *RegionURLMapSpecPathMatcherRouteRulesHeaderAction `json:"headerAction,omitempty" tf:"header_action"`
	// The rules for determining a match.
	// +optional
	MatchRules []RegionURLMapSpecPathMatcherRouteRulesMatchRules `json:"matchRules,omitempty" tf:"match_rules"`
	// For routeRules within a given pathMatcher, priority determines the order
	// in which load balancer will interpret routeRules. RouteRules are evaluated
	// in order of priority, from the lowest to highest number. The priority of
	// a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	// that matches the request is applied.
	//
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 0 and
	// 2147483647 inclusive.
	//
	// Priority numbers can have gaps, which enable you to add or remove rules
	// in the future without affecting the rest of the rules. For example,
	// 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	// you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	// future without any impact on existing rules.
	Priority *int64 `json:"priority" tf:"priority"`
	// In response to a matching matchRule, the load balancer performs advanced routing
	// actions like URL rewrites, header transformations, etc. prior to forwarding the
	// request to the selected backend. If  routeAction specifies any
	// weightedBackendServices, service must not be set. Conversely if service is set,
	// routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	// or urlRedirect must be set.
	// +optional
	RouteAction *RegionURLMapSpecPathMatcherRouteRulesRouteAction `json:"routeAction,omitempty" tf:"route_action"`
	// The region backend service resource to which traffic is
	// directed if this rule is matched. If routeAction is additionally specified,
	// advanced routing actions like URL Rewrites, etc. take effect prior to sending
	// the request to the backend. However, if service is specified, routeAction cannot
	// contain any weightedBackendService s. Conversely, if routeAction specifies any
	// weightedBackendServices, service must not be specified. Only one of urlRedirect,
	// service or routeAction.weightedBackendService must be set.
	// +optional
	Service *string `json:"service,omitempty" tf:"service"`
	// When this rule is matched, the request is redirected to a URL specified by
	// urlRedirect. If urlRedirect is specified, service or routeAction must not be
	// set.
	// +optional
	UrlRedirect *RegionURLMapSpecPathMatcherRouteRulesUrlRedirect `json:"urlRedirect,omitempty" tf:"url_redirect"`
}

type RegionURLMapSpecPathMatcher struct {
	// A reference to a RegionBackendService resource. This will be used if
	// none of the pathRules defined by this PathMatcher is matched by
	// the URL's path portion.
	// +optional
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service"`
	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// +optional
	DefaultURLRedirect *RegionURLMapSpecPathMatcherDefaultURLRedirect `json:"defaultURLRedirect,omitempty" tf:"default_url_redirect"`
	// An optional description of this resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The name to which this PathMatcher is referred by the HostRule.
	Name *string `json:"name" tf:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based
	// on simple path matching is all that's required. The order by which path rules
	// are specified does not matter. Matches are always done on the longest-path-first
	// basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	// irrespective of the order in which those paths appear in this list. Within a
	// given pathMatcher, only one of pathRules or routeRules must be set.
	// +optional
	PathRule []RegionURLMapSpecPathMatcherPathRule `json:"pathRule,omitempty" tf:"path_rule"`
	// The list of ordered HTTP route rules. Use this list instead of pathRules when
	// advanced route matching and routing actions are desired. The order of specifying
	// routeRules matters: the first rule that matches will cause its specified routing
	// action to take effect. Within a given pathMatcher, only one of pathRules or
	// routeRules must be set. routeRules are not supported in UrlMaps intended for
	// External load balancers.
	// +optional
	RouteRules []RegionURLMapSpecPathMatcherRouteRules `json:"routeRules,omitempty" tf:"route_rules"`
}

type RegionURLMapSpecTest struct {
	// Description of this test case.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Host portion of the URL.
	Host *string `json:"host" tf:"host"`
	// Path portion of the URL.
	Path *string `json:"path" tf:"path"`
	// A reference to expected RegionBackendService resource the given URL should be mapped to.
	Service *string `json:"service" tf:"service"`
}

type RegionURLMapSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Creation timestamp in RFC3339 text format.
	// +optional
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp"`
	// The full or partial URL of the defaultService resource to which traffic is directed if
	// none of the hostRules match. If defaultRouteAction is additionally specified, advanced
	// routing actions like URL Rewrites, etc. take effect prior to sending the request to the
	// backend. However, if defaultService is specified, defaultRouteAction cannot contain any
	// weightedBackendServices. Conversely, if routeAction specifies any
	// weightedBackendServices, service must not be specified.  Only one of defaultService,
	// defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
	// +optional
	DefaultService *string `json:"defaultService,omitempty" tf:"default_service"`
	// When none of the specified hostRules match, the request is redirected to a URL specified
	// by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	// defaultRouteAction must not be set.
	// +optional
	DefaultURLRedirect *RegionURLMapSpecDefaultURLRedirect `json:"defaultURLRedirect,omitempty" tf:"default_url_redirect"`
	// An optional description of this resource. Provide this property when
	// you create the resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Fingerprint of this resource. This field is used internally during
	// updates of this resource.
	// +optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint"`
	// The list of HostRules to use against the URL.
	// +optional
	HostRule []RegionURLMapSpecHostRule `json:"hostRule,omitempty" tf:"host_rule"`
	// The unique identifier for the resource.
	// +optional
	MapID *int64 `json:"mapID,omitempty" tf:"map_id"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `json:"name" tf:"name"`
	// The list of named PathMatchers to use against the URL.
	// +optional
	PathMatcher []RegionURLMapSpecPathMatcher `json:"pathMatcher,omitempty" tf:"path_matcher"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The Region in which the url map should reside.
	// If it is not provided, the provider region is used.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link"`
	// The list of expected URL mappings. Requests to update this UrlMap will
	// succeed only if all of the test cases pass.
	// +optional
	Test []RegionURLMapSpecTest `json:"test,omitempty" tf:"test"`
}

type RegionURLMapStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RegionURLMapList is a list of RegionURLMaps
type RegionURLMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RegionURLMap CRD objects
	Items []RegionURLMap `json:"items,omitempty"`
}
