/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BackendService struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackendServiceSpec   `json:"spec,omitempty"`
	Status            BackendServiceStatus `json:"status,omitempty"`
}

type BackendServiceSpec struct {
	BackendServiceSpec2 `json:",inline"`
	// +optional
	KubeformOutput BackendServiceSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type BackendServiceSpecBackend struct {
	// Specifies the balancing mode for this backend.
	//
	// For global HTTP(S) or TCP/SSL load balancing, the default is
	// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
	// and CONNECTION (for TCP/SSL). Default value: "UTILIZATION" Possible values: ["UTILIZATION", "RATE", "CONNECTION"]
	// +optional
	BalancingMode *string `json:"balancingMode,omitempty" tf:"balancing_mode"`
	// A multiplier applied to the group's maximum servicing capacity
	// (based on UTILIZATION, RATE or CONNECTION).
	//
	// Default value is 1, which means the group will serve up to 100%
	// of its configured capacity (depending on balancingMode). A
	// setting of 0 means the group is completely drained, offering
	// 0% of its available Capacity. Valid range is [0.0,1.0].
	// +optional
	CapacityScaler *float64 `json:"capacityScaler,omitempty" tf:"capacity_scaler"`
	// An optional description of this resource.
	// Provide this property when you create the resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// The fully-qualified URL of an Instance Group or Network Endpoint
	// Group resource. In case of instance group this defines the list
	// of instances that serve traffic. Member virtual machine
	// instances from each instance group must live in the same zone as
	// the instance group itself. No two backends in a backend service
	// are allowed to use same Instance Group resource.
	//
	// For Network Endpoint Groups this defines list of endpoints. All
	// endpoints of Network Endpoint Group must be hosted on instances
	// located in the same zone as the Network Endpoint Group.
	//
	// Backend services cannot mix Instance Group and
	// Network Endpoint Group backends.
	//
	// Note that you must specify an Instance Group or Network Endpoint
	// Group resource using the fully-qualified URL, rather than a
	// partial URL.
	Group *string `json:"group" tf:"group"`
	// The max number of simultaneous connections for the group. Can
	// be used with either CONNECTION or UTILIZATION balancing modes.
	//
	// For CONNECTION mode, either maxConnections or one
	// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
	// as appropriate for group type, must be set.
	// +optional
	MaxConnections *int64 `json:"maxConnections,omitempty" tf:"max_connections"`
	// The max number of simultaneous connections that a single backend
	// network endpoint can handle. This is used to calculate the
	// capacity of the group. Can be used in either CONNECTION or
	// UTILIZATION balancing modes.
	//
	// For CONNECTION mode, either
	// maxConnections or maxConnectionsPerEndpoint must be set.
	// +optional
	MaxConnectionsPerEndpoint *int64 `json:"maxConnectionsPerEndpoint,omitempty" tf:"max_connections_per_endpoint"`
	// The max number of simultaneous connections that a single
	// backend instance can handle. This is used to calculate the
	// capacity of the group. Can be used in either CONNECTION or
	// UTILIZATION balancing modes.
	//
	// For CONNECTION mode, either maxConnections or
	// maxConnectionsPerInstance must be set.
	// +optional
	MaxConnectionsPerInstance *int64 `json:"maxConnectionsPerInstance,omitempty" tf:"max_connections_per_instance"`
	// The max requests per second (RPS) of the group.
	//
	// Can be used with either RATE or UTILIZATION balancing modes,
	// but required if RATE mode. For RATE mode, either maxRate or one
	// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
	// group type, must be set.
	// +optional
	MaxRate *int64 `json:"maxRate,omitempty" tf:"max_rate"`
	// The max requests per second (RPS) that a single backend network
	// endpoint can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerEndpoint must be set.
	// +optional
	MaxRatePerEndpoint *float64 `json:"maxRatePerEndpoint,omitempty" tf:"max_rate_per_endpoint"`
	// The max requests per second (RPS) that a single backend
	// instance can handle. This is used to calculate the capacity of
	// the group. Can be used in either balancing mode. For RATE mode,
	// either maxRate or maxRatePerInstance must be set.
	// +optional
	MaxRatePerInstance *float64 `json:"maxRatePerInstance,omitempty" tf:"max_rate_per_instance"`
	// Used when balancingMode is UTILIZATION. This ratio defines the
	// CPU utilization target for the group. The default is 0.8. Valid
	// range is [0.0, 1.0].
	// +optional
	MaxUtilization *float64 `json:"maxUtilization,omitempty" tf:"max_utilization"`
}

type BackendServiceSpecCdnPolicyCacheKeyPolicy struct {
	// If true requests to different hosts will be cached separately.
	// +optional
	IncludeHost *bool `json:"includeHost,omitempty" tf:"include_host"`
	// If true, http and https requests will be cached separately.
	// +optional
	IncludeProtocol *bool `json:"includeProtocol,omitempty" tf:"include_protocol"`
	// If true, include query string parameters in the cache key
	// according to query_string_whitelist and
	// query_string_blacklist. If neither is set, the entire query
	// string will be included.
	//
	// If false, the query string will be excluded from the cache
	// key entirely.
	// +optional
	IncludeQueryString *bool `json:"includeQueryString,omitempty" tf:"include_query_string"`
	// Names of query string parameters to exclude in cache keys.
	//
	// All other parameters will be included. Either specify
	// query_string_whitelist or query_string_blacklist, not both.
	// '&' and '=' will be percent encoded and not treated as
	// delimiters.
	// +optional
	QueryStringBlacklist []string `json:"queryStringBlacklist,omitempty" tf:"query_string_blacklist"`
	// Names of query string parameters to include in cache keys.
	//
	// All other parameters will be excluded. Either specify
	// query_string_whitelist or query_string_blacklist, not both.
	// '&' and '=' will be percent encoded and not treated as
	// delimiters.
	// +optional
	QueryStringWhitelist []string `json:"queryStringWhitelist,omitempty" tf:"query_string_whitelist"`
}

type BackendServiceSpecCdnPolicy struct {
	// The CacheKeyPolicy for this CdnPolicy.
	// +optional
	CacheKeyPolicy *BackendServiceSpecCdnPolicyCacheKeyPolicy `json:"cacheKeyPolicy,omitempty" tf:"cache_key_policy"`
	// Maximum number of seconds the response to a signed URL request
	// will be considered fresh, defaults to 1hr (3600s). After this
	// time period, the response will be revalidated before
	// being served.
	//
	// When serving responses to signed URL requests, Cloud CDN will
	// internally behave as though all responses from this backend had a
	// "Cache-Control: public, max-age=[TTL]" header, regardless of any
	// existing Cache-Control header. The actual headers served in
	// responses will not be altered.
	// +optional
	SignedURLCacheMaxAgeSec *int64 `json:"signedURLCacheMaxAgeSec,omitempty" tf:"signed_url_cache_max_age_sec"`
}

type BackendServiceSpecCircuitBreakers struct {
	// The maximum number of connections to the backend cluster.
	// Defaults to 1024.
	// +optional
	MaxConnections *int64 `json:"maxConnections,omitempty" tf:"max_connections"`
	// The maximum number of pending requests to the backend cluster.
	// Defaults to 1024.
	// +optional
	MaxPendingRequests *int64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests"`
	// The maximum number of parallel requests to the backend cluster.
	// Defaults to 1024.
	// +optional
	MaxRequests *int64 `json:"maxRequests,omitempty" tf:"max_requests"`
	// Maximum requests for a single backend connection. This parameter
	// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
	// not specified, there is no limit. Setting this parameter to 1
	// will effectively disable keep alive.
	// +optional
	MaxRequestsPerConnection *int64 `json:"maxRequestsPerConnection,omitempty" tf:"max_requests_per_connection"`
	// The maximum number of parallel retries to the backend cluster.
	// Defaults to 3.
	// +optional
	MaxRetries *int64 `json:"maxRetries,omitempty" tf:"max_retries"`
}

type BackendServiceSpecConsistentHashHttpCookieTtl struct {
	// Span of time that's a fraction of a second at nanosecond
	// resolution. Durations less than one second are represented
	// with a 0 seconds field and a positive nanos field. Must
	// be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second.
	// Must be from 0 to 315,576,000,000 inclusive.
	Seconds *int64 `json:"seconds" tf:"seconds"`
}

type BackendServiceSpecConsistentHashHttpCookie struct {
	// Name of the cookie.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Path to set for the cookie.
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// Lifetime of the cookie.
	// +optional
	Ttl *BackendServiceSpecConsistentHashHttpCookieTtl `json:"ttl,omitempty" tf:"ttl"`
}

type BackendServiceSpecConsistentHash struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie
	// that will be used as the hash key for the consistent hash load
	// balancer. If the cookie is not present, it will be generated.
	// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
	// +optional
	HttpCookie *BackendServiceSpecConsistentHashHttpCookie `json:"httpCookie,omitempty" tf:"http_cookie"`
	// The hash based on the value of the specified header field.
	// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	// +optional
	HttpHeaderName *string `json:"httpHeaderName,omitempty" tf:"http_header_name"`
	// The minimum number of virtual nodes to use for the hash ring.
	// Larger ring sizes result in more granular load
	// distributions. If the number of hosts in the load balancing pool
	// is larger than the ring size, each host will be assigned a single
	// virtual node.
	// Defaults to 1024.
	// +optional
	MinimumRingSize *int64 `json:"minimumRingSize,omitempty" tf:"minimum_ring_size"`
}

type BackendServiceSpecIap struct {
	// OAuth2 Client ID for IAP
	Oauth2ClientID *string `json:"oauth2ClientID" tf:"oauth2_client_id"`
	// OAuth2 Client Secret for IAP
	Oauth2ClientSecret *string `json:"-" sensitive:"true" tf:"oauth2_client_secret"`
	// OAuth2 Client Secret SHA-256 for IAP
	// +optional
	Oauth2ClientSecretSha256 *string `json:"-" sensitive:"true" tf:"oauth2_client_secret_sha256"`
}

type BackendServiceSpecLogConfig struct {
	// Whether to enable logging for the load balancer traffic served by this backend service.
	// +optional
	Enable *bool `json:"enable,omitempty" tf:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of
	// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
	// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
	// The default value is 1.0.
	// +optional
	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate"`
}

type BackendServiceSpecOutlierDetectionBaseEjectionTime struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *int64 `json:"seconds" tf:"seconds"`
}

type BackendServiceSpecOutlierDetectionInterval struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations
	// less than one second are represented with a 0 'seconds' field and a positive
	// 'nanos' field. Must be from 0 to 999,999,999 inclusive.
	// +optional
	Nanos *int64 `json:"nanos,omitempty" tf:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	// inclusive.
	Seconds *int64 `json:"seconds" tf:"seconds"`
}

type BackendServiceSpecOutlierDetection struct {
	// The base time that a host is ejected for. The real time is equal to the base
	// time multiplied by the number of times the host has been ejected. Defaults to
	// 30000ms or 30s.
	// +optional
	BaseEjectionTime *BackendServiceSpecOutlierDetectionBaseEjectionTime `json:"baseEjectionTime,omitempty" tf:"base_ejection_time"`
	// Number of errors before a host is ejected from the connection pool. When the
	// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
	// Defaults to 5.
	// +optional
	ConsecutiveErrors *int64 `json:"consecutiveErrors,omitempty" tf:"consecutive_errors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection
	// errors that are mapped to one of those status codes) before a consecutive
	// gateway failure ejection occurs. Defaults to 5.
	// +optional
	ConsecutiveGatewayFailure *int64 `json:"consecutiveGatewayFailure,omitempty" tf:"consecutive_gateway_failure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive 5xx. This setting can be used to disable
	// ejection or to ramp it up slowly. Defaults to 100.
	// +optional
	EnforcingConsecutiveErrors *int64 `json:"enforcingConsecutiveErrors,omitempty" tf:"enforcing_consecutive_errors"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through consecutive gateway failures. This setting can be
	// used to disable ejection or to ramp it up slowly. Defaults to 0.
	// +optional
	EnforcingConsecutiveGatewayFailure *int64 `json:"enforcingConsecutiveGatewayFailure,omitempty" tf:"enforcing_consecutive_gateway_failure"`
	// The percentage chance that a host will be actually ejected when an outlier
	// status is detected through success rate statistics. This setting can be used to
	// disable ejection or to ramp it up slowly. Defaults to 100.
	// +optional
	EnforcingSuccessRate *int64 `json:"enforcingSuccessRate,omitempty" tf:"enforcing_success_rate"`
	// Time interval between ejection sweep analysis. This can result in both new
	// ejections as well as hosts being returned to service. Defaults to 10 seconds.
	// +optional
	Interval *BackendServiceSpecOutlierDetectionInterval `json:"interval,omitempty" tf:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service
	// that can be ejected. Defaults to 10%.
	// +optional
	MaxEjectionPercent *int64 `json:"maxEjectionPercent,omitempty" tf:"max_ejection_percent"`
	// The number of hosts in a cluster that must have enough request volume to detect
	// success rate outliers. If the number of hosts is less than this setting, outlier
	// detection via success rate statistics is not performed for any host in the
	// cluster. Defaults to 5.
	// +optional
	SuccessRateMinimumHosts *int64 `json:"successRateMinimumHosts,omitempty" tf:"success_rate_minimum_hosts"`
	// The minimum number of total requests that must be collected in one interval (as
	// defined by the interval duration above) to include this host in success rate
	// based outlier detection. If the volume is lower than this setting, outlier
	// detection via success rate statistics is not performed for that host. Defaults
	// to 100.
	// +optional
	SuccessRateRequestVolume *int64 `json:"successRateRequestVolume,omitempty" tf:"success_rate_request_volume"`
	// This factor is used to determine the ejection threshold for success rate outlier
	// ejection. The ejection threshold is the difference between the mean success
	// rate, and the product of this factor and the standard deviation of the mean
	// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
	// by a thousand to get a double. That is, if the desired factor is 1.9, the
	// runtime value should be 1900. Defaults to 1900.
	// +optional
	SuccessRateStdevFactor *int64 `json:"successRateStdevFactor,omitempty" tf:"success_rate_stdev_factor"`
}

type BackendServiceSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// Lifetime of cookies in seconds if session_affinity is
	// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
	// only until the end of the browser session (or equivalent). The
	// maximum allowed value for TTL is one day.
	//
	// When the load balancing scheme is INTERNAL, this field is not used.
	// +optional
	AffinityCookieTtlSec *int64 `json:"affinityCookieTtlSec,omitempty" tf:"affinity_cookie_ttl_sec"`
	// The set of backends that serve this BackendService.
	// +optional
	Backend []BackendServiceSpecBackend `json:"backend,omitempty" tf:"backend"`
	// Cloud CDN configuration for this BackendService.
	// +optional
	CdnPolicy *BackendServiceSpecCdnPolicy `json:"cdnPolicy,omitempty" tf:"cdn_policy"`
	// Settings controlling the volume of connections to a backend service. This field
	// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
	// +optional
	CircuitBreakers *BackendServiceSpecCircuitBreakers `json:"circuitBreakers,omitempty" tf:"circuit_breakers"`
	// Time for which instance will be drained (not accept new
	// connections, but still work to finish started).
	// +optional
	ConnectionDrainingTimeoutSec *int64 `json:"connectionDrainingTimeoutSec,omitempty" tf:"connection_draining_timeout_sec"`
	// Consistent Hash-based load balancing can be used to provide soft session
	// affinity based on HTTP headers, cookies or other properties. This load balancing
	// policy is applicable only for HTTP connections. The affinity to a particular
	// destination host will be lost when one or more hosts are added/removed from the
	// destination service. This field specifies parameters that control consistent
	// hashing. This field only applies if the load_balancing_scheme is set to
	// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
	// set to MAGLEV or RING_HASH.
	// +optional
	ConsistentHash *BackendServiceSpecConsistentHash `json:"consistentHash,omitempty" tf:"consistent_hash"`
	// Creation timestamp in RFC3339 text format.
	// +optional
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp"`
	// Headers that the HTTP/S load balancer should add to proxied
	// requests.
	// +optional
	CustomRequestHeaders []string `json:"customRequestHeaders,omitempty" tf:"custom_request_headers"`
	// An optional description of this resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// If true, enable Cloud CDN for this BackendService.
	// +optional
	EnableCdn *bool `json:"enableCdn,omitempty" tf:"enable_cdn"`
	// Fingerprint of this resource. A hash of the contents stored in this
	// object. This field is used in optimistic locking.
	// +optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint"`
	// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
	// for health checking this BackendService. Currently at most one health
	// check can be specified.
	//
	// A health check must be specified unless the backend service uses an internet
	// or serverless NEG as a backend.
	//
	// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
	// +optional
	HealthChecks []string `json:"healthChecks,omitempty" tf:"health_checks"`
	// Settings for enabling Cloud Identity Aware Proxy
	// +optional
	Iap *BackendServiceSpecIap `json:"iap,omitempty" tf:"iap"`
	// Indicates whether the backend service will be used with internal or
	// external load balancing. A backend service created for one type of
	// load balancing cannot be used with the other. Default value: "EXTERNAL" Possible values: ["EXTERNAL", "INTERNAL_SELF_MANAGED"]
	// +optional
	LoadBalancingScheme *string `json:"loadBalancingScheme,omitempty" tf:"load_balancing_scheme"`
	// The load balancing algorithm used within the scope of the locality.
	// The possible values are -
	//
	// * ROUND_ROBIN - This is a simple policy in which each healthy backend
	//                 is selected in round robin order.
	//
	// * LEAST_REQUEST - An O(1) algorithm which selects two random healthy
	//                   hosts and picks the host which has fewer active requests.
	//
	// * RING_HASH - The ring/modulo hash load balancer implements consistent
	//               hashing to backends. The algorithm has the property that the
	//               addition/removal of a host from a set of N hosts only affects
	//               1/N of the requests.
	//
	// * RANDOM - The load balancer selects a random healthy host.
	//
	// * ORIGINAL_DESTINATION - Backend host is selected based on the client
	//                          connection metadata, i.e., connections are opened
	//                          to the same address as the destination address of
	//                          the incoming connection before the connection
	//                          was redirected to the load balancer.
	//
	// * MAGLEV - used as a drop in replacement for the ring hash load balancer.
	//            Maglev is not as stable as ring hash but has faster table lookup
	//            build times and host selection times. For more information about
	//            Maglev, refer to https://ai.google/research/pubs/pub44824
	//
	// This field is applicable only when the load_balancing_scheme is set to
	// INTERNAL_SELF_MANAGED. Possible values: ["ROUND_ROBIN", "LEAST_REQUEST", "RING_HASH", "RANDOM", "ORIGINAL_DESTINATION", "MAGLEV"]
	// +optional
	LocalityLbPolicy *string `json:"localityLbPolicy,omitempty" tf:"locality_lb_policy"`
	// This field denotes the logging options for the load balancer traffic served by this backend service.
	// If logging is enabled, logs will be exported to Stackdriver.
	// +optional
	LogConfig *BackendServiceSpecLogConfig `json:"logConfig,omitempty" tf:"log_config"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `json:"name" tf:"name"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool.
	// This field is applicable only when the load_balancing_scheme is set
	// to INTERNAL_SELF_MANAGED.
	// +optional
	OutlierDetection *BackendServiceSpecOutlierDetection `json:"outlierDetection,omitempty" tf:"outlier_detection"`
	// Name of backend port. The same name should appear in the instance
	// groups referenced by this service. Required when the load balancing
	// scheme is EXTERNAL.
	// +optional
	PortName *string `json:"portName,omitempty" tf:"port_name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// The protocol this BackendService uses to communicate with backends.
	// The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
	// types and may result in errors if used with the GA API. Possible values: ["HTTP", "HTTPS", "HTTP2", "TCP", "SSL", "GRPC"]
	// +optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
	// The security policy associated with this backend service.
	// +optional
	SecurityPolicy *string `json:"securityPolicy,omitempty" tf:"security_policy"`
	// +optional
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link"`
	// Type of session affinity to use. The default is NONE. Session affinity is
	// not applicable if the protocol is UDP. Possible values: ["NONE", "CLIENT_IP", "CLIENT_IP_PORT_PROTO", "CLIENT_IP_PROTO", "GENERATED_COOKIE", "HEADER_FIELD", "HTTP_COOKIE"]
	// +optional
	SessionAffinity *string `json:"sessionAffinity,omitempty" tf:"session_affinity"`
	// How many seconds to wait for the backend before considering it a
	// failed request. Default is 30 seconds. Valid range is [1, 86400].
	// +optional
	TimeoutSec *int64 `json:"timeoutSec,omitempty" tf:"timeout_sec"`
}

type BackendServiceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BackendServiceList is a list of BackendServices
type BackendServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BackendService CRD objects
	Items []BackendService `json:"items,omitempty"`
}
