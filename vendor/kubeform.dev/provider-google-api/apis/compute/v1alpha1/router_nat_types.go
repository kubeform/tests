/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type RouterNAT struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouterNATSpec   `json:"spec,omitempty"`
	Status            RouterNATStatus `json:"status,omitempty"`
}

type RouterNATSpec struct {
	RouterNATSpec2 `json:",inline"`
	// +optional
	KubeformOutput RouterNATSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type RouterNATSpecLogConfig struct {
	// Indicates whether or not to export logs.
	Enable *bool `json:"enable" tf:"enable"`
	// Specifies the desired filtering of logs on this NAT. Possible values: ["ERRORS_ONLY", "TRANSLATIONS_ONLY", "ALL"]
	Filter *string `json:"filter" tf:"filter"`
}

type RouterNATSpecSubnetwork struct {
	// Self-link of subnetwork to NAT
	Name *string `json:"name" tf:"name"`
	// List of the secondary ranges of the subnetwork that are allowed
	// to use NAT. This can be populated only if
	// 'LIST_OF_SECONDARY_IP_RANGES' is one of the values in
	// sourceIpRangesToNat
	// +optional
	SecondaryIPRangeNames []string `json:"secondaryIPRangeNames,omitempty" tf:"secondary_ip_range_names"`
	// List of options for which source IPs in the subnetwork
	// should have NAT enabled. Supported values include:
	// 'ALL_IP_RANGES', 'LIST_OF_SECONDARY_IP_RANGES',
	// 'PRIMARY_IP_RANGE'.
	// +kubebuilder:validation:MinItems=1
	SourceIPRangesToNAT []string `json:"sourceIPRangesToNAT" tf:"source_ip_ranges_to_nat"`
}

type RouterNATSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of URLs of the IP resources to be drained. These IPs must be
	// valid static external IPs that have been assigned to the NAT.
	// +optional
	DrainNATIPS []string `json:"drainNATIPS,omitempty" tf:"drain_nat_ips"`
	// Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information
	// see the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).
	// +optional
	EnableEndpointIndependentMapping *bool `json:"enableEndpointIndependentMapping,omitempty" tf:"enable_endpoint_independent_mapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	// +optional
	IcmpIdleTimeoutSec *int64 `json:"icmpIdleTimeoutSec,omitempty" tf:"icmp_idle_timeout_sec"`
	// Configuration for logging on NAT
	// +optional
	LogConfig *RouterNATSpecLogConfig `json:"logConfig,omitempty" tf:"log_config"`
	// Minimum number of ports allocated to a VM from this NAT.
	// +optional
	MinPortsPerVm *int64 `json:"minPortsPerVm,omitempty" tf:"min_ports_per_vm"`
	// Name of the NAT service. The name must be 1-63 characters long and
	// comply with RFC1035.
	Name *string `json:"name" tf:"name"`
	// How external IPs should be allocated for this NAT. Valid values are
	// 'AUTO_ONLY' for only allowing NAT IPs allocated by Google Cloud
	// Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY", "AUTO_ONLY"]
	NatIPAllocateOption *string `json:"natIPAllocateOption" tf:"nat_ip_allocate_option"`
	// Self-links of NAT IPs. Only valid if natIpAllocateOption
	// is set to MANUAL_ONLY.
	// +optional
	NatIPS []string `json:"natIPS,omitempty" tf:"nat_ips"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// Region where the router and NAT reside.
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// The name of the Cloud Router in which this NAT will be configured.
	Router *string `json:"router" tf:"router"`
	// How NAT should be configured per Subnetwork.
	// If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the
	// IP ranges in every Subnetwork are allowed to Nat.
	// If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP
	// ranges in every Subnetwork are allowed to Nat.
	// 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat
	// (specified in the field subnetwork below). Note that if this field
	// contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any
	// other RouterNat section in any Router for this network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES", "LIST_OF_SUBNETWORKS"]
	SourceSubnetworkIPRangesToNAT *string `json:"sourceSubnetworkIPRangesToNAT" tf:"source_subnetwork_ip_ranges_to_nat"`
	// One or more subnetwork NAT configurations. Only used if
	// 'source_subnetwork_ip_ranges_to_nat' is set to 'LIST_OF_SUBNETWORKS'
	// +optional
	Subnetwork []RouterNATSpecSubnetwork `json:"subnetwork,omitempty" tf:"subnetwork"`
	// Timeout (in seconds) for TCP established connections.
	// Defaults to 1200s if not set.
	// +optional
	TcpEstablishedIdleTimeoutSec *int64 `json:"tcpEstablishedIdleTimeoutSec,omitempty" tf:"tcp_established_idle_timeout_sec"`
	// Timeout (in seconds) for TCP transitory connections.
	// Defaults to 30s if not set.
	// +optional
	TcpTransitoryIdleTimeoutSec *int64 `json:"tcpTransitoryIdleTimeoutSec,omitempty" tf:"tcp_transitory_idle_timeout_sec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	// +optional
	UdpIdleTimeoutSec *int64 `json:"udpIdleTimeoutSec,omitempty" tf:"udp_idle_timeout_sec"`
}

type RouterNATStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// RouterNATList is a list of RouterNATs
type RouterNATList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of RouterNAT CRD objects
	Items []RouterNAT `json:"items,omitempty"`
}
