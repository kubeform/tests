/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Reservation struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReservationSpec   `json:"spec,omitempty"`
	Status            ReservationStatus `json:"status,omitempty"`
}

type ReservationSpec struct {
	ReservationSpec2 `json:",inline"`
	// +optional
	KubeformOutput ReservationSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type ReservationSpecSpecificReservationInstancePropertiesGuestAccelerators struct {
	// The number of the guest accelerator cards exposed to
	// this instance.
	AcceleratorCount *int64 `json:"acceleratorCount" tf:"accelerator_count"`
	// The full or partial URL of the accelerator type to
	// attach to this instance. For example:
	// 'projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100'
	//
	// If you are creating an instance template, specify only the accelerator name.
	AcceleratorType *string `json:"acceleratorType" tf:"accelerator_type"`
}

type ReservationSpecSpecificReservationInstancePropertiesLocalSsds struct {
	// The size of the disk in base-2 GB.
	DiskSizeGb *int64 `json:"diskSizeGb" tf:"disk_size_gb"`
	// The disk interface to use for attaching this disk. Default value: "SCSI" Possible values: ["SCSI", "NVME"]
	// +optional
	Interface *string `json:"interface,omitempty" tf:"interface"`
}

type ReservationSpecSpecificReservationInstanceProperties struct {
	// Guest accelerator type and count.
	// +optional
	GuestAccelerators []ReservationSpecSpecificReservationInstancePropertiesGuestAccelerators `json:"guestAccelerators,omitempty" tf:"guest_accelerators"`
	// The amount of local ssd to reserve with each instance. This
	// reserves disks of type 'local-ssd'.
	// +optional
	LocalSsds []ReservationSpecSpecificReservationInstancePropertiesLocalSsds `json:"localSsds,omitempty" tf:"local_ssds"`
	// The name of the machine type to reserve.
	MachineType *string `json:"machineType" tf:"machine_type"`
	// The minimum CPU platform for the reservation. For example,
	// '"Intel Skylake"'. See
	// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
	// for information on available CPU platforms.
	// +optional
	MinCPUPlatform *string `json:"minCPUPlatform,omitempty" tf:"min_cpu_platform"`
}

type ReservationSpecSpecificReservation struct {
	// The number of resources that are allocated.
	Count *int64 `json:"count" tf:"count"`
	// How many instances are in use.
	// +optional
	InUseCount *int64 `json:"inUseCount,omitempty" tf:"in_use_count"`
	// The instance properties for the reservation.
	InstanceProperties *ReservationSpecSpecificReservationInstanceProperties `json:"instanceProperties" tf:"instance_properties"`
}

type ReservationSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Full or partial URL to a parent commitment. This field displays for
	// reservations that are tied to a commitment.
	// +optional
	Commitment *string `json:"commitment,omitempty" tf:"commitment"`
	// Creation timestamp in RFC3339 text format.
	// +optional
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp"`
	// An optional description of this resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name *string `json:"name" tf:"name"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// +optional
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link"`
	// Reservation for instances with specific machine shapes.
	SpecificReservation *ReservationSpecSpecificReservation `json:"specificReservation" tf:"specific_reservation"`
	// When set to true, only VMs that target this reservation by name can
	// consume this reservation. Otherwise, it can be consumed by VMs with
	// affinity for any reservation. Defaults to false.
	// +optional
	SpecificReservationRequired *bool `json:"specificReservationRequired,omitempty" tf:"specific_reservation_required"`
	// The status of the reservation.
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// The zone where the reservation is made.
	Zone *string `json:"zone" tf:"zone"`
}

type ReservationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ReservationList is a list of Reservations
type ReservationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Reservation CRD objects
	Items []Reservation `json:"items,omitempty"`
}
