/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type NodeGroup struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodeGroupSpec   `json:"spec,omitempty"`
	Status            NodeGroupStatus `json:"status,omitempty"`
}

type NodeGroupSpec struct {
	NodeGroupSpec2 `json:",inline"`
	// +optional
	KubeformOutput NodeGroupSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type NodeGroupSpecAutoscalingPolicy struct {
	// Maximum size of the node group. Set to a value less than or equal
	// to 100 and greater than or equal to min-nodes.
	// +optional
	MaxNodes *int64 `json:"maxNodes,omitempty" tf:"max_nodes"`
	// Minimum size of the node group. Must be less
	// than or equal to max-nodes. The default value is 0.
	// +optional
	MinNodes *int64 `json:"minNodes,omitempty" tf:"min_nodes"`
	// The autoscaling mode. Set to one of the following:
	//   - OFF: Disables the autoscaler.
	//   - ON: Enables scaling in and scaling out.
	//   - ONLY_SCALE_OUT: Enables only scaling out.
	//   You must use this mode if your node groups are configured to
	//   restart their hosted VMs on minimal servers. Possible values: ["OFF", "ON", "ONLY_SCALE_OUT"]
	// +optional
	Mode *string `json:"mode,omitempty" tf:"mode"`
}

type NodeGroupSpecMaintenanceWindow struct {
	// instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime *string `json:"startTime" tf:"start_time"`
}

type NodeGroupSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// If you use sole-tenant nodes for your workloads, you can use the node
	// group autoscaler to automatically manage the sizes of your node groups.
	// +optional
	AutoscalingPolicy *NodeGroupSpecAutoscalingPolicy `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy"`
	// Creation timestamp in RFC3339 text format.
	// +optional
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp"`
	// An optional textual description of the resource.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
	// +optional
	MaintenancePolicy *string `json:"maintenancePolicy,omitempty" tf:"maintenance_policy"`
	// contains properties for the timeframe of maintenance
	// +optional
	MaintenanceWindow *NodeGroupSpecMaintenanceWindow `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`
	// Name of the resource.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The URL of the node template to which this node group belongs.
	NodeTemplate *string `json:"nodeTemplate" tf:"node_template"`
	// +optional
	Project *string `json:"project,omitempty" tf:"project"`
	// +optional
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link"`
	// The total number of nodes in the node group.
	Size *int64 `json:"size" tf:"size"`
	// Zone where this node group is located
	// +optional
	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type NodeGroupStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// NodeGroupList is a list of NodeGroups
type NodeGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of NodeGroup CRD objects
	Items []NodeGroup `json:"items,omitempty"`
}
