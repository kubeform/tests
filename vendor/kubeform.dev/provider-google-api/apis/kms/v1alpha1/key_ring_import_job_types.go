/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type KeyRingImportJob struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyRingImportJobSpec   `json:"spec,omitempty"`
	Status            KeyRingImportJobStatus `json:"status,omitempty"`
}

type KeyRingImportJobSpec struct {
	KeyRingImportJobSpec2 `json:",inline"`
	// +optional
	KubeformOutput KeyRingImportJobSpec2 `json:"kubeformOutput,omitempty" tf:"-"`
}

type KeyRingImportJobSpecAttestation struct {
	// The attestation data provided by the HSM when the key operation was performed.
	// A base64-encoded string.
	// +optional
	Content *string `json:"content,omitempty" tf:"content"`
	// The format of the attestation data.
	// +optional
	Format *string `json:"format,omitempty" tf:"format"`
}

type KeyRingImportJobSpecPublicKey struct {
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
	// for General Considerations and Textual Encoding of Subject Public Key Info.
	// +optional
	Pem *string `json:"pem,omitempty" tf:"pem"`
}

type KeyRingImportJobSpec2 struct {
	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time.
	// Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
	// Only present if the chosen ImportMethod is one with a protection level of HSM.
	// +optional
	Attestation []KeyRingImportJobSpecAttestation `json:"attestation,omitempty" tf:"attestation"`
	// The time at which this resource is scheduled for expiration and can no longer be used.
	// This is in RFC3339 text format.
	// +optional
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time"`
	// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
	ImportJobID *string `json:"importJobID" tf:"import_job_id"`
	// The wrapping method to be used for incoming key material. Possible values: ["RSA_OAEP_3072_SHA1_AES_256", "RSA_OAEP_4096_SHA1_AES_256"]
	ImportMethod *string `json:"importMethod" tf:"import_method"`
	// The KeyRing that this import job belongs to.
	// Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
	KeyRing *string `json:"keyRing" tf:"key_ring"`
	// The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into. Possible values: ["SOFTWARE", "HSM", "EXTERNAL"]
	ProtectionLevel *string `json:"protectionLevel" tf:"protection_level"`
	// The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.
	// +optional
	PublicKey []KeyRingImportJobSpecPublicKey `json:"publicKey,omitempty" tf:"public_key"`
	// The current state of the ImportJob, indicating if it can be used.
	// +optional
	State *string `json:"state,omitempty" tf:"state"`
}

type KeyRingImportJobStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// KeyRingImportJobList is a list of KeyRingImportJobs
type KeyRingImportJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of KeyRingImportJob CRD objects
	Items []KeyRingImportJob `json:"items,omitempty"`
}
