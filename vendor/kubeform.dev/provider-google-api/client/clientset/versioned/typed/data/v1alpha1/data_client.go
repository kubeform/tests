/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/data/v1alpha1"
	"kubeform.dev/provider-google-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type DataV1alpha1Interface interface {
	RESTClient() rest.Interface
	CatalogEntriesGetter
	CatalogEntryGroupsGetter
	CatalogEntryGroupIamBindingsGetter
	CatalogEntryGroupIamMembersGetter
	CatalogEntryGroupIamPoliciesGetter
	CatalogTagsGetter
	CatalogTagTemplatesGetter
	CatalogTagTemplateIamBindingsGetter
	CatalogTagTemplateIamMembersGetter
	CatalogTagTemplateIamPoliciesGetter
	LossPreventionDeidentifyTemplatesGetter
	LossPreventionInspectTemplatesGetter
	LossPreventionJobTriggersGetter
	LossPreventionStoredInfoTypesGetter
}

// DataV1alpha1Client is used to interact with features provided by the data.google.kubeform.com group.
type DataV1alpha1Client struct {
	restClient rest.Interface
}

func (c *DataV1alpha1Client) CatalogEntries(namespace string) CatalogEntryInterface {
	return newCatalogEntries(c, namespace)
}

func (c *DataV1alpha1Client) CatalogEntryGroups(namespace string) CatalogEntryGroupInterface {
	return newCatalogEntryGroups(c, namespace)
}

func (c *DataV1alpha1Client) CatalogEntryGroupIamBindings(namespace string) CatalogEntryGroupIamBindingInterface {
	return newCatalogEntryGroupIamBindings(c, namespace)
}

func (c *DataV1alpha1Client) CatalogEntryGroupIamMembers(namespace string) CatalogEntryGroupIamMemberInterface {
	return newCatalogEntryGroupIamMembers(c, namespace)
}

func (c *DataV1alpha1Client) CatalogEntryGroupIamPolicies(namespace string) CatalogEntryGroupIamPolicyInterface {
	return newCatalogEntryGroupIamPolicies(c, namespace)
}

func (c *DataV1alpha1Client) CatalogTags(namespace string) CatalogTagInterface {
	return newCatalogTags(c, namespace)
}

func (c *DataV1alpha1Client) CatalogTagTemplates(namespace string) CatalogTagTemplateInterface {
	return newCatalogTagTemplates(c, namespace)
}

func (c *DataV1alpha1Client) CatalogTagTemplateIamBindings(namespace string) CatalogTagTemplateIamBindingInterface {
	return newCatalogTagTemplateIamBindings(c, namespace)
}

func (c *DataV1alpha1Client) CatalogTagTemplateIamMembers(namespace string) CatalogTagTemplateIamMemberInterface {
	return newCatalogTagTemplateIamMembers(c, namespace)
}

func (c *DataV1alpha1Client) CatalogTagTemplateIamPolicies(namespace string) CatalogTagTemplateIamPolicyInterface {
	return newCatalogTagTemplateIamPolicies(c, namespace)
}

func (c *DataV1alpha1Client) LossPreventionDeidentifyTemplates(namespace string) LossPreventionDeidentifyTemplateInterface {
	return newLossPreventionDeidentifyTemplates(c, namespace)
}

func (c *DataV1alpha1Client) LossPreventionInspectTemplates(namespace string) LossPreventionInspectTemplateInterface {
	return newLossPreventionInspectTemplates(c, namespace)
}

func (c *DataV1alpha1Client) LossPreventionJobTriggers(namespace string) LossPreventionJobTriggerInterface {
	return newLossPreventionJobTriggers(c, namespace)
}

func (c *DataV1alpha1Client) LossPreventionStoredInfoTypes(namespace string) LossPreventionStoredInfoTypeInterface {
	return newLossPreventionStoredInfoTypes(c, namespace)
}

// NewForConfig creates a new DataV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*DataV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &DataV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new DataV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *DataV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new DataV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *DataV1alpha1Client {
	return &DataV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *DataV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
