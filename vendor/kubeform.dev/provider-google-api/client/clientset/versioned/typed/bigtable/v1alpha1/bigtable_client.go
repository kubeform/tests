/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/bigtable/v1alpha1"
	"kubeform.dev/provider-google-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type BigtableV1alpha1Interface interface {
	RESTClient() rest.Interface
	AppProfilesGetter
	GcPoliciesGetter
	InstancesGetter
	InstanceIamBindingsGetter
	InstanceIamMembersGetter
	InstanceIamPoliciesGetter
	TablesGetter
	TableIamBindingsGetter
	TableIamMembersGetter
	TableIamPoliciesGetter
}

// BigtableV1alpha1Client is used to interact with features provided by the bigtable.google.kubeform.com group.
type BigtableV1alpha1Client struct {
	restClient rest.Interface
}

func (c *BigtableV1alpha1Client) AppProfiles(namespace string) AppProfileInterface {
	return newAppProfiles(c, namespace)
}

func (c *BigtableV1alpha1Client) GcPolicies(namespace string) GcPolicyInterface {
	return newGcPolicies(c, namespace)
}

func (c *BigtableV1alpha1Client) Instances(namespace string) InstanceInterface {
	return newInstances(c, namespace)
}

func (c *BigtableV1alpha1Client) InstanceIamBindings(namespace string) InstanceIamBindingInterface {
	return newInstanceIamBindings(c, namespace)
}

func (c *BigtableV1alpha1Client) InstanceIamMembers(namespace string) InstanceIamMemberInterface {
	return newInstanceIamMembers(c, namespace)
}

func (c *BigtableV1alpha1Client) InstanceIamPolicies(namespace string) InstanceIamPolicyInterface {
	return newInstanceIamPolicies(c, namespace)
}

func (c *BigtableV1alpha1Client) Tables(namespace string) TableInterface {
	return newTables(c, namespace)
}

func (c *BigtableV1alpha1Client) TableIamBindings(namespace string) TableIamBindingInterface {
	return newTableIamBindings(c, namespace)
}

func (c *BigtableV1alpha1Client) TableIamMembers(namespace string) TableIamMemberInterface {
	return newTableIamMembers(c, namespace)
}

func (c *BigtableV1alpha1Client) TableIamPolicies(namespace string) TableIamPolicyInterface {
	return newTableIamPolicies(c, namespace)
}

// NewForConfig creates a new BigtableV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*BigtableV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &BigtableV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new BigtableV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *BigtableV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new BigtableV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *BigtableV1alpha1Client {
	return &BigtableV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *BigtableV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
