/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/healthcare/v1alpha1"
	"kubeform.dev/provider-google-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type HealthcareV1alpha1Interface interface {
	RESTClient() rest.Interface
	ConsentStoresGetter
	ConsentStoreIamBindingsGetter
	ConsentStoreIamMembersGetter
	ConsentStoreIamPoliciesGetter
	DatasetsGetter
	DatasetIamBindingsGetter
	DatasetIamMembersGetter
	DatasetIamPoliciesGetter
	DicomStoresGetter
	DicomStoreIamBindingsGetter
	DicomStoreIamMembersGetter
	DicomStoreIamPoliciesGetter
	FhirStoresGetter
	FhirStoreIamBindingsGetter
	FhirStoreIamMembersGetter
	FhirStoreIamPoliciesGetter
	Hl7V2StoresGetter
	Hl7V2StoreIamBindingsGetter
	Hl7V2StoreIamMembersGetter
	Hl7V2StoreIamPoliciesGetter
}

// HealthcareV1alpha1Client is used to interact with features provided by the healthcare.google.kubeform.com group.
type HealthcareV1alpha1Client struct {
	restClient rest.Interface
}

func (c *HealthcareV1alpha1Client) ConsentStores(namespace string) ConsentStoreInterface {
	return newConsentStores(c, namespace)
}

func (c *HealthcareV1alpha1Client) ConsentStoreIamBindings(namespace string) ConsentStoreIamBindingInterface {
	return newConsentStoreIamBindings(c, namespace)
}

func (c *HealthcareV1alpha1Client) ConsentStoreIamMembers(namespace string) ConsentStoreIamMemberInterface {
	return newConsentStoreIamMembers(c, namespace)
}

func (c *HealthcareV1alpha1Client) ConsentStoreIamPolicies(namespace string) ConsentStoreIamPolicyInterface {
	return newConsentStoreIamPolicies(c, namespace)
}

func (c *HealthcareV1alpha1Client) Datasets(namespace string) DatasetInterface {
	return newDatasets(c, namespace)
}

func (c *HealthcareV1alpha1Client) DatasetIamBindings(namespace string) DatasetIamBindingInterface {
	return newDatasetIamBindings(c, namespace)
}

func (c *HealthcareV1alpha1Client) DatasetIamMembers(namespace string) DatasetIamMemberInterface {
	return newDatasetIamMembers(c, namespace)
}

func (c *HealthcareV1alpha1Client) DatasetIamPolicies(namespace string) DatasetIamPolicyInterface {
	return newDatasetIamPolicies(c, namespace)
}

func (c *HealthcareV1alpha1Client) DicomStores(namespace string) DicomStoreInterface {
	return newDicomStores(c, namespace)
}

func (c *HealthcareV1alpha1Client) DicomStoreIamBindings(namespace string) DicomStoreIamBindingInterface {
	return newDicomStoreIamBindings(c, namespace)
}

func (c *HealthcareV1alpha1Client) DicomStoreIamMembers(namespace string) DicomStoreIamMemberInterface {
	return newDicomStoreIamMembers(c, namespace)
}

func (c *HealthcareV1alpha1Client) DicomStoreIamPolicies(namespace string) DicomStoreIamPolicyInterface {
	return newDicomStoreIamPolicies(c, namespace)
}

func (c *HealthcareV1alpha1Client) FhirStores(namespace string) FhirStoreInterface {
	return newFhirStores(c, namespace)
}

func (c *HealthcareV1alpha1Client) FhirStoreIamBindings(namespace string) FhirStoreIamBindingInterface {
	return newFhirStoreIamBindings(c, namespace)
}

func (c *HealthcareV1alpha1Client) FhirStoreIamMembers(namespace string) FhirStoreIamMemberInterface {
	return newFhirStoreIamMembers(c, namespace)
}

func (c *HealthcareV1alpha1Client) FhirStoreIamPolicies(namespace string) FhirStoreIamPolicyInterface {
	return newFhirStoreIamPolicies(c, namespace)
}

func (c *HealthcareV1alpha1Client) Hl7V2Stores(namespace string) Hl7V2StoreInterface {
	return newHl7V2Stores(c, namespace)
}

func (c *HealthcareV1alpha1Client) Hl7V2StoreIamBindings(namespace string) Hl7V2StoreIamBindingInterface {
	return newHl7V2StoreIamBindings(c, namespace)
}

func (c *HealthcareV1alpha1Client) Hl7V2StoreIamMembers(namespace string) Hl7V2StoreIamMemberInterface {
	return newHl7V2StoreIamMembers(c, namespace)
}

func (c *HealthcareV1alpha1Client) Hl7V2StoreIamPolicies(namespace string) Hl7V2StoreIamPolicyInterface {
	return newHl7V2StoreIamPolicies(c, namespace)
}

// NewForConfig creates a new HealthcareV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*HealthcareV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &HealthcareV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new HealthcareV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *HealthcareV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new HealthcareV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *HealthcareV1alpha1Client {
	return &HealthcareV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *HealthcareV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
