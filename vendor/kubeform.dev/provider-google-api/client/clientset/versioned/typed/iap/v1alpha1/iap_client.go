/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/iap/v1alpha1"
	"kubeform.dev/provider-google-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type IapV1alpha1Interface interface {
	RESTClient() rest.Interface
	AppEngineServiceIamBindingsGetter
	AppEngineServiceIamMembersGetter
	AppEngineServiceIamPoliciesGetter
	AppEngineVersionIamBindingsGetter
	AppEngineVersionIamMembersGetter
	AppEngineVersionIamPoliciesGetter
	BrandsGetter
	ClientsGetter
	TunnelIamBindingsGetter
	TunnelIamMembersGetter
	TunnelIamPoliciesGetter
	TunnelInstanceIamBindingsGetter
	TunnelInstanceIamMembersGetter
	TunnelInstanceIamPoliciesGetter
	WebBackendServiceIamBindingsGetter
	WebBackendServiceIamMembersGetter
	WebBackendServiceIamPoliciesGetter
	WebIamBindingsGetter
	WebIamMembersGetter
	WebIamPoliciesGetter
	WebTypeAppEngineIamBindingsGetter
	WebTypeAppEngineIamMembersGetter
	WebTypeAppEngineIamPoliciesGetter
	WebTypeComputeIamBindingsGetter
	WebTypeComputeIamMembersGetter
	WebTypeComputeIamPoliciesGetter
}

// IapV1alpha1Client is used to interact with features provided by the iap.google.kubeform.com group.
type IapV1alpha1Client struct {
	restClient rest.Interface
}

func (c *IapV1alpha1Client) AppEngineServiceIamBindings(namespace string) AppEngineServiceIamBindingInterface {
	return newAppEngineServiceIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) AppEngineServiceIamMembers(namespace string) AppEngineServiceIamMemberInterface {
	return newAppEngineServiceIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) AppEngineServiceIamPolicies(namespace string) AppEngineServiceIamPolicyInterface {
	return newAppEngineServiceIamPolicies(c, namespace)
}

func (c *IapV1alpha1Client) AppEngineVersionIamBindings(namespace string) AppEngineVersionIamBindingInterface {
	return newAppEngineVersionIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) AppEngineVersionIamMembers(namespace string) AppEngineVersionIamMemberInterface {
	return newAppEngineVersionIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) AppEngineVersionIamPolicies(namespace string) AppEngineVersionIamPolicyInterface {
	return newAppEngineVersionIamPolicies(c, namespace)
}

func (c *IapV1alpha1Client) Brands(namespace string) BrandInterface {
	return newBrands(c, namespace)
}

func (c *IapV1alpha1Client) Clients(namespace string) ClientInterface {
	return newClients(c, namespace)
}

func (c *IapV1alpha1Client) TunnelIamBindings(namespace string) TunnelIamBindingInterface {
	return newTunnelIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) TunnelIamMembers(namespace string) TunnelIamMemberInterface {
	return newTunnelIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) TunnelIamPolicies(namespace string) TunnelIamPolicyInterface {
	return newTunnelIamPolicies(c, namespace)
}

func (c *IapV1alpha1Client) TunnelInstanceIamBindings(namespace string) TunnelInstanceIamBindingInterface {
	return newTunnelInstanceIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) TunnelInstanceIamMembers(namespace string) TunnelInstanceIamMemberInterface {
	return newTunnelInstanceIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) TunnelInstanceIamPolicies(namespace string) TunnelInstanceIamPolicyInterface {
	return newTunnelInstanceIamPolicies(c, namespace)
}

func (c *IapV1alpha1Client) WebBackendServiceIamBindings(namespace string) WebBackendServiceIamBindingInterface {
	return newWebBackendServiceIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) WebBackendServiceIamMembers(namespace string) WebBackendServiceIamMemberInterface {
	return newWebBackendServiceIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) WebBackendServiceIamPolicies(namespace string) WebBackendServiceIamPolicyInterface {
	return newWebBackendServiceIamPolicies(c, namespace)
}

func (c *IapV1alpha1Client) WebIamBindings(namespace string) WebIamBindingInterface {
	return newWebIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) WebIamMembers(namespace string) WebIamMemberInterface {
	return newWebIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) WebIamPolicies(namespace string) WebIamPolicyInterface {
	return newWebIamPolicies(c, namespace)
}

func (c *IapV1alpha1Client) WebTypeAppEngineIamBindings(namespace string) WebTypeAppEngineIamBindingInterface {
	return newWebTypeAppEngineIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) WebTypeAppEngineIamMembers(namespace string) WebTypeAppEngineIamMemberInterface {
	return newWebTypeAppEngineIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) WebTypeAppEngineIamPolicies(namespace string) WebTypeAppEngineIamPolicyInterface {
	return newWebTypeAppEngineIamPolicies(c, namespace)
}

func (c *IapV1alpha1Client) WebTypeComputeIamBindings(namespace string) WebTypeComputeIamBindingInterface {
	return newWebTypeComputeIamBindings(c, namespace)
}

func (c *IapV1alpha1Client) WebTypeComputeIamMembers(namespace string) WebTypeComputeIamMemberInterface {
	return newWebTypeComputeIamMembers(c, namespace)
}

func (c *IapV1alpha1Client) WebTypeComputeIamPolicies(namespace string) WebTypeComputeIamPolicyInterface {
	return newWebTypeComputeIamPolicies(c, namespace)
}

// NewForConfig creates a new IapV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*IapV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &IapV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new IapV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *IapV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new IapV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *IapV1alpha1Client {
	return &IapV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *IapV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
