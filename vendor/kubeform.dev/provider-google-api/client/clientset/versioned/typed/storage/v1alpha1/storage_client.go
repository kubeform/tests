/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-google-api/apis/storage/v1alpha1"
	"kubeform.dev/provider-google-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type StorageV1alpha1Interface interface {
	RESTClient() rest.Interface
	BucketsGetter
	BucketACLsGetter
	BucketAccessControlsGetter
	BucketIamBindingsGetter
	BucketIamMembersGetter
	BucketIamPoliciesGetter
	BucketObjectsGetter
	DefaultObjectACLsGetter
	DefaultObjectAccessControlsGetter
	HmacKeysGetter
	NotificationsGetter
	ObjectACLsGetter
	ObjectAccessControlsGetter
	TransferJobsGetter
}

// StorageV1alpha1Client is used to interact with features provided by the storage.google.kubeform.com group.
type StorageV1alpha1Client struct {
	restClient rest.Interface
}

func (c *StorageV1alpha1Client) Buckets(namespace string) BucketInterface {
	return newBuckets(c, namespace)
}

func (c *StorageV1alpha1Client) BucketACLs(namespace string) BucketACLInterface {
	return newBucketACLs(c, namespace)
}

func (c *StorageV1alpha1Client) BucketAccessControls(namespace string) BucketAccessControlInterface {
	return newBucketAccessControls(c, namespace)
}

func (c *StorageV1alpha1Client) BucketIamBindings(namespace string) BucketIamBindingInterface {
	return newBucketIamBindings(c, namespace)
}

func (c *StorageV1alpha1Client) BucketIamMembers(namespace string) BucketIamMemberInterface {
	return newBucketIamMembers(c, namespace)
}

func (c *StorageV1alpha1Client) BucketIamPolicies(namespace string) BucketIamPolicyInterface {
	return newBucketIamPolicies(c, namespace)
}

func (c *StorageV1alpha1Client) BucketObjects(namespace string) BucketObjectInterface {
	return newBucketObjects(c, namespace)
}

func (c *StorageV1alpha1Client) DefaultObjectACLs(namespace string) DefaultObjectACLInterface {
	return newDefaultObjectACLs(c, namespace)
}

func (c *StorageV1alpha1Client) DefaultObjectAccessControls(namespace string) DefaultObjectAccessControlInterface {
	return newDefaultObjectAccessControls(c, namespace)
}

func (c *StorageV1alpha1Client) HmacKeys(namespace string) HmacKeyInterface {
	return newHmacKeys(c, namespace)
}

func (c *StorageV1alpha1Client) Notifications(namespace string) NotificationInterface {
	return newNotifications(c, namespace)
}

func (c *StorageV1alpha1Client) ObjectACLs(namespace string) ObjectACLInterface {
	return newObjectACLs(c, namespace)
}

func (c *StorageV1alpha1Client) ObjectAccessControls(namespace string) ObjectAccessControlInterface {
	return newObjectAccessControls(c, namespace)
}

func (c *StorageV1alpha1Client) TransferJobs(namespace string) TransferJobInterface {
	return newTransferJobs(c, namespace)
}

// NewForConfig creates a new StorageV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*StorageV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &StorageV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new StorageV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *StorageV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new StorageV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *StorageV1alpha1Client {
	return &StorageV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *StorageV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
