/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	accesscontextv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/accesscontext/v1alpha1"
	activev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/active/v1alpha1"
	apigeev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/apigee/v1alpha1"
	appenginev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/appengine/v1alpha1"
	bigqueryv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/bigquery/v1alpha1"
	bigtablev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/bigtable/v1alpha1"
	billingaccountv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/billingaccount/v1alpha1"
	billingbudgetv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/billingbudget/v1alpha1"
	billingsubaccountv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/billingsubaccount/v1alpha1"
	binaryauthorizationv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/binaryauthorization/v1alpha1"
	cloudv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/cloud/v1alpha1"
	cloudbuildv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/cloudbuild/v1alpha1"
	cloudfunctionsfunctionv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/cloudfunctionsfunction/v1alpha1"
	cloudiotv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/cloudiot/v1alpha1"
	composerv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/composer/v1alpha1"
	computev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/compute/v1alpha1"
	containerv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/container/v1alpha1"
	datav1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/data/v1alpha1"
	dataflowv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/dataflow/v1alpha1"
	dataprocv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/dataproc/v1alpha1"
	datastorev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/datastore/v1alpha1"
	deploymentv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/deployment/v1alpha1"
	dialogflowv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/dialogflow/v1alpha1"
	dnsv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/dns/v1alpha1"
	endpointsv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/endpoints/v1alpha1"
	eventarcv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/eventarc/v1alpha1"
	filestorev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/filestore/v1alpha1"
	firestorev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/firestore/v1alpha1"
	folderv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/folder/v1alpha1"
	gamev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/game/v1alpha1"
	healthcarev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/healthcare/v1alpha1"
	iapv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/iap/v1alpha1"
	identityv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/identity/v1alpha1"
	kmsv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/kms/v1alpha1"
	loggingv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/logging/v1alpha1"
	mlv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/ml/v1alpha1"
	monitoringv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/monitoring/v1alpha1"
	networkv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/network/v1alpha1"
	notebooksv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/notebooks/v1alpha1"
	organizationv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/organization/v1alpha1"
	osv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/os/v1alpha1"
	projectv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/project/v1alpha1"
	pubsubv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/pubsub/v1alpha1"
	redisv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/redis/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/resource/v1alpha1"
	runtimeconfigv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/runtimeconfig/v1alpha1"
	sccv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/scc/v1alpha1"
	secretv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/secret/v1alpha1"
	servicev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/service/v1alpha1"
	sourcereporepositoryv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/sourcereporepository/v1alpha1"
	spannerv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/spanner/v1alpha1"
	sqlv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/sql/v1alpha1"
	storagev1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/storage/v1alpha1"
	tagsv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/tags/v1alpha1"
	tpuv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/tpu/v1alpha1"
	vpcv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/vpc/v1alpha1"
	workflowsv1alpha1 "kubeform.dev/provider-google-api/client/clientset/versioned/typed/workflows/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AccesscontextV1alpha1() accesscontextv1alpha1.AccesscontextV1alpha1Interface
	ActiveV1alpha1() activev1alpha1.ActiveV1alpha1Interface
	ApigeeV1alpha1() apigeev1alpha1.ApigeeV1alpha1Interface
	AppengineV1alpha1() appenginev1alpha1.AppengineV1alpha1Interface
	BigqueryV1alpha1() bigqueryv1alpha1.BigqueryV1alpha1Interface
	BigtableV1alpha1() bigtablev1alpha1.BigtableV1alpha1Interface
	BillingaccountV1alpha1() billingaccountv1alpha1.BillingaccountV1alpha1Interface
	BillingbudgetV1alpha1() billingbudgetv1alpha1.BillingbudgetV1alpha1Interface
	BillingsubaccountV1alpha1() billingsubaccountv1alpha1.BillingsubaccountV1alpha1Interface
	BinaryauthorizationV1alpha1() binaryauthorizationv1alpha1.BinaryauthorizationV1alpha1Interface
	CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface
	CloudbuildV1alpha1() cloudbuildv1alpha1.CloudbuildV1alpha1Interface
	CloudfunctionsfunctionV1alpha1() cloudfunctionsfunctionv1alpha1.CloudfunctionsfunctionV1alpha1Interface
	CloudiotV1alpha1() cloudiotv1alpha1.CloudiotV1alpha1Interface
	ComposerV1alpha1() composerv1alpha1.ComposerV1alpha1Interface
	ComputeV1alpha1() computev1alpha1.ComputeV1alpha1Interface
	ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface
	DataV1alpha1() datav1alpha1.DataV1alpha1Interface
	DataflowV1alpha1() dataflowv1alpha1.DataflowV1alpha1Interface
	DataprocV1alpha1() dataprocv1alpha1.DataprocV1alpha1Interface
	DatastoreV1alpha1() datastorev1alpha1.DatastoreV1alpha1Interface
	DeploymentV1alpha1() deploymentv1alpha1.DeploymentV1alpha1Interface
	DialogflowV1alpha1() dialogflowv1alpha1.DialogflowV1alpha1Interface
	DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface
	EndpointsV1alpha1() endpointsv1alpha1.EndpointsV1alpha1Interface
	EventarcV1alpha1() eventarcv1alpha1.EventarcV1alpha1Interface
	FilestoreV1alpha1() filestorev1alpha1.FilestoreV1alpha1Interface
	FirestoreV1alpha1() firestorev1alpha1.FirestoreV1alpha1Interface
	FolderV1alpha1() folderv1alpha1.FolderV1alpha1Interface
	GameV1alpha1() gamev1alpha1.GameV1alpha1Interface
	HealthcareV1alpha1() healthcarev1alpha1.HealthcareV1alpha1Interface
	IapV1alpha1() iapv1alpha1.IapV1alpha1Interface
	IdentityV1alpha1() identityv1alpha1.IdentityV1alpha1Interface
	KmsV1alpha1() kmsv1alpha1.KmsV1alpha1Interface
	LoggingV1alpha1() loggingv1alpha1.LoggingV1alpha1Interface
	MlV1alpha1() mlv1alpha1.MlV1alpha1Interface
	MonitoringV1alpha1() monitoringv1alpha1.MonitoringV1alpha1Interface
	NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface
	NotebooksV1alpha1() notebooksv1alpha1.NotebooksV1alpha1Interface
	OrganizationV1alpha1() organizationv1alpha1.OrganizationV1alpha1Interface
	OsV1alpha1() osv1alpha1.OsV1alpha1Interface
	ProjectV1alpha1() projectv1alpha1.ProjectV1alpha1Interface
	PubsubV1alpha1() pubsubv1alpha1.PubsubV1alpha1Interface
	RedisV1alpha1() redisv1alpha1.RedisV1alpha1Interface
	ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface
	RuntimeconfigV1alpha1() runtimeconfigv1alpha1.RuntimeconfigV1alpha1Interface
	SccV1alpha1() sccv1alpha1.SccV1alpha1Interface
	SecretV1alpha1() secretv1alpha1.SecretV1alpha1Interface
	ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface
	SourcereporepositoryV1alpha1() sourcereporepositoryv1alpha1.SourcereporepositoryV1alpha1Interface
	SpannerV1alpha1() spannerv1alpha1.SpannerV1alpha1Interface
	SqlV1alpha1() sqlv1alpha1.SqlV1alpha1Interface
	StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface
	TagsV1alpha1() tagsv1alpha1.TagsV1alpha1Interface
	TpuV1alpha1() tpuv1alpha1.TpuV1alpha1Interface
	VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface
	WorkflowsV1alpha1() workflowsv1alpha1.WorkflowsV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	accesscontextV1alpha1          *accesscontextv1alpha1.AccesscontextV1alpha1Client
	activeV1alpha1                 *activev1alpha1.ActiveV1alpha1Client
	apigeeV1alpha1                 *apigeev1alpha1.ApigeeV1alpha1Client
	appengineV1alpha1              *appenginev1alpha1.AppengineV1alpha1Client
	bigqueryV1alpha1               *bigqueryv1alpha1.BigqueryV1alpha1Client
	bigtableV1alpha1               *bigtablev1alpha1.BigtableV1alpha1Client
	billingaccountV1alpha1         *billingaccountv1alpha1.BillingaccountV1alpha1Client
	billingbudgetV1alpha1          *billingbudgetv1alpha1.BillingbudgetV1alpha1Client
	billingsubaccountV1alpha1      *billingsubaccountv1alpha1.BillingsubaccountV1alpha1Client
	binaryauthorizationV1alpha1    *binaryauthorizationv1alpha1.BinaryauthorizationV1alpha1Client
	cloudV1alpha1                  *cloudv1alpha1.CloudV1alpha1Client
	cloudbuildV1alpha1             *cloudbuildv1alpha1.CloudbuildV1alpha1Client
	cloudfunctionsfunctionV1alpha1 *cloudfunctionsfunctionv1alpha1.CloudfunctionsfunctionV1alpha1Client
	cloudiotV1alpha1               *cloudiotv1alpha1.CloudiotV1alpha1Client
	composerV1alpha1               *composerv1alpha1.ComposerV1alpha1Client
	computeV1alpha1                *computev1alpha1.ComputeV1alpha1Client
	containerV1alpha1              *containerv1alpha1.ContainerV1alpha1Client
	dataV1alpha1                   *datav1alpha1.DataV1alpha1Client
	dataflowV1alpha1               *dataflowv1alpha1.DataflowV1alpha1Client
	dataprocV1alpha1               *dataprocv1alpha1.DataprocV1alpha1Client
	datastoreV1alpha1              *datastorev1alpha1.DatastoreV1alpha1Client
	deploymentV1alpha1             *deploymentv1alpha1.DeploymentV1alpha1Client
	dialogflowV1alpha1             *dialogflowv1alpha1.DialogflowV1alpha1Client
	dnsV1alpha1                    *dnsv1alpha1.DnsV1alpha1Client
	endpointsV1alpha1              *endpointsv1alpha1.EndpointsV1alpha1Client
	eventarcV1alpha1               *eventarcv1alpha1.EventarcV1alpha1Client
	filestoreV1alpha1              *filestorev1alpha1.FilestoreV1alpha1Client
	firestoreV1alpha1              *firestorev1alpha1.FirestoreV1alpha1Client
	folderV1alpha1                 *folderv1alpha1.FolderV1alpha1Client
	gameV1alpha1                   *gamev1alpha1.GameV1alpha1Client
	healthcareV1alpha1             *healthcarev1alpha1.HealthcareV1alpha1Client
	iapV1alpha1                    *iapv1alpha1.IapV1alpha1Client
	identityV1alpha1               *identityv1alpha1.IdentityV1alpha1Client
	kmsV1alpha1                    *kmsv1alpha1.KmsV1alpha1Client
	loggingV1alpha1                *loggingv1alpha1.LoggingV1alpha1Client
	mlV1alpha1                     *mlv1alpha1.MlV1alpha1Client
	monitoringV1alpha1             *monitoringv1alpha1.MonitoringV1alpha1Client
	networkV1alpha1                *networkv1alpha1.NetworkV1alpha1Client
	notebooksV1alpha1              *notebooksv1alpha1.NotebooksV1alpha1Client
	organizationV1alpha1           *organizationv1alpha1.OrganizationV1alpha1Client
	osV1alpha1                     *osv1alpha1.OsV1alpha1Client
	projectV1alpha1                *projectv1alpha1.ProjectV1alpha1Client
	pubsubV1alpha1                 *pubsubv1alpha1.PubsubV1alpha1Client
	redisV1alpha1                  *redisv1alpha1.RedisV1alpha1Client
	resourceV1alpha1               *resourcev1alpha1.ResourceV1alpha1Client
	runtimeconfigV1alpha1          *runtimeconfigv1alpha1.RuntimeconfigV1alpha1Client
	sccV1alpha1                    *sccv1alpha1.SccV1alpha1Client
	secretV1alpha1                 *secretv1alpha1.SecretV1alpha1Client
	serviceV1alpha1                *servicev1alpha1.ServiceV1alpha1Client
	sourcereporepositoryV1alpha1   *sourcereporepositoryv1alpha1.SourcereporepositoryV1alpha1Client
	spannerV1alpha1                *spannerv1alpha1.SpannerV1alpha1Client
	sqlV1alpha1                    *sqlv1alpha1.SqlV1alpha1Client
	storageV1alpha1                *storagev1alpha1.StorageV1alpha1Client
	tagsV1alpha1                   *tagsv1alpha1.TagsV1alpha1Client
	tpuV1alpha1                    *tpuv1alpha1.TpuV1alpha1Client
	vpcV1alpha1                    *vpcv1alpha1.VpcV1alpha1Client
	workflowsV1alpha1              *workflowsv1alpha1.WorkflowsV1alpha1Client
}

// AccesscontextV1alpha1 retrieves the AccesscontextV1alpha1Client
func (c *Clientset) AccesscontextV1alpha1() accesscontextv1alpha1.AccesscontextV1alpha1Interface {
	return c.accesscontextV1alpha1
}

// ActiveV1alpha1 retrieves the ActiveV1alpha1Client
func (c *Clientset) ActiveV1alpha1() activev1alpha1.ActiveV1alpha1Interface {
	return c.activeV1alpha1
}

// ApigeeV1alpha1 retrieves the ApigeeV1alpha1Client
func (c *Clientset) ApigeeV1alpha1() apigeev1alpha1.ApigeeV1alpha1Interface {
	return c.apigeeV1alpha1
}

// AppengineV1alpha1 retrieves the AppengineV1alpha1Client
func (c *Clientset) AppengineV1alpha1() appenginev1alpha1.AppengineV1alpha1Interface {
	return c.appengineV1alpha1
}

// BigqueryV1alpha1 retrieves the BigqueryV1alpha1Client
func (c *Clientset) BigqueryV1alpha1() bigqueryv1alpha1.BigqueryV1alpha1Interface {
	return c.bigqueryV1alpha1
}

// BigtableV1alpha1 retrieves the BigtableV1alpha1Client
func (c *Clientset) BigtableV1alpha1() bigtablev1alpha1.BigtableV1alpha1Interface {
	return c.bigtableV1alpha1
}

// BillingaccountV1alpha1 retrieves the BillingaccountV1alpha1Client
func (c *Clientset) BillingaccountV1alpha1() billingaccountv1alpha1.BillingaccountV1alpha1Interface {
	return c.billingaccountV1alpha1
}

// BillingbudgetV1alpha1 retrieves the BillingbudgetV1alpha1Client
func (c *Clientset) BillingbudgetV1alpha1() billingbudgetv1alpha1.BillingbudgetV1alpha1Interface {
	return c.billingbudgetV1alpha1
}

// BillingsubaccountV1alpha1 retrieves the BillingsubaccountV1alpha1Client
func (c *Clientset) BillingsubaccountV1alpha1() billingsubaccountv1alpha1.BillingsubaccountV1alpha1Interface {
	return c.billingsubaccountV1alpha1
}

// BinaryauthorizationV1alpha1 retrieves the BinaryauthorizationV1alpha1Client
func (c *Clientset) BinaryauthorizationV1alpha1() binaryauthorizationv1alpha1.BinaryauthorizationV1alpha1Interface {
	return c.binaryauthorizationV1alpha1
}

// CloudV1alpha1 retrieves the CloudV1alpha1Client
func (c *Clientset) CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface {
	return c.cloudV1alpha1
}

// CloudbuildV1alpha1 retrieves the CloudbuildV1alpha1Client
func (c *Clientset) CloudbuildV1alpha1() cloudbuildv1alpha1.CloudbuildV1alpha1Interface {
	return c.cloudbuildV1alpha1
}

// CloudfunctionsfunctionV1alpha1 retrieves the CloudfunctionsfunctionV1alpha1Client
func (c *Clientset) CloudfunctionsfunctionV1alpha1() cloudfunctionsfunctionv1alpha1.CloudfunctionsfunctionV1alpha1Interface {
	return c.cloudfunctionsfunctionV1alpha1
}

// CloudiotV1alpha1 retrieves the CloudiotV1alpha1Client
func (c *Clientset) CloudiotV1alpha1() cloudiotv1alpha1.CloudiotV1alpha1Interface {
	return c.cloudiotV1alpha1
}

// ComposerV1alpha1 retrieves the ComposerV1alpha1Client
func (c *Clientset) ComposerV1alpha1() composerv1alpha1.ComposerV1alpha1Interface {
	return c.composerV1alpha1
}

// ComputeV1alpha1 retrieves the ComputeV1alpha1Client
func (c *Clientset) ComputeV1alpha1() computev1alpha1.ComputeV1alpha1Interface {
	return c.computeV1alpha1
}

// ContainerV1alpha1 retrieves the ContainerV1alpha1Client
func (c *Clientset) ContainerV1alpha1() containerv1alpha1.ContainerV1alpha1Interface {
	return c.containerV1alpha1
}

// DataV1alpha1 retrieves the DataV1alpha1Client
func (c *Clientset) DataV1alpha1() datav1alpha1.DataV1alpha1Interface {
	return c.dataV1alpha1
}

// DataflowV1alpha1 retrieves the DataflowV1alpha1Client
func (c *Clientset) DataflowV1alpha1() dataflowv1alpha1.DataflowV1alpha1Interface {
	return c.dataflowV1alpha1
}

// DataprocV1alpha1 retrieves the DataprocV1alpha1Client
func (c *Clientset) DataprocV1alpha1() dataprocv1alpha1.DataprocV1alpha1Interface {
	return c.dataprocV1alpha1
}

// DatastoreV1alpha1 retrieves the DatastoreV1alpha1Client
func (c *Clientset) DatastoreV1alpha1() datastorev1alpha1.DatastoreV1alpha1Interface {
	return c.datastoreV1alpha1
}

// DeploymentV1alpha1 retrieves the DeploymentV1alpha1Client
func (c *Clientset) DeploymentV1alpha1() deploymentv1alpha1.DeploymentV1alpha1Interface {
	return c.deploymentV1alpha1
}

// DialogflowV1alpha1 retrieves the DialogflowV1alpha1Client
func (c *Clientset) DialogflowV1alpha1() dialogflowv1alpha1.DialogflowV1alpha1Interface {
	return c.dialogflowV1alpha1
}

// DnsV1alpha1 retrieves the DnsV1alpha1Client
func (c *Clientset) DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface {
	return c.dnsV1alpha1
}

// EndpointsV1alpha1 retrieves the EndpointsV1alpha1Client
func (c *Clientset) EndpointsV1alpha1() endpointsv1alpha1.EndpointsV1alpha1Interface {
	return c.endpointsV1alpha1
}

// EventarcV1alpha1 retrieves the EventarcV1alpha1Client
func (c *Clientset) EventarcV1alpha1() eventarcv1alpha1.EventarcV1alpha1Interface {
	return c.eventarcV1alpha1
}

// FilestoreV1alpha1 retrieves the FilestoreV1alpha1Client
func (c *Clientset) FilestoreV1alpha1() filestorev1alpha1.FilestoreV1alpha1Interface {
	return c.filestoreV1alpha1
}

// FirestoreV1alpha1 retrieves the FirestoreV1alpha1Client
func (c *Clientset) FirestoreV1alpha1() firestorev1alpha1.FirestoreV1alpha1Interface {
	return c.firestoreV1alpha1
}

// FolderV1alpha1 retrieves the FolderV1alpha1Client
func (c *Clientset) FolderV1alpha1() folderv1alpha1.FolderV1alpha1Interface {
	return c.folderV1alpha1
}

// GameV1alpha1 retrieves the GameV1alpha1Client
func (c *Clientset) GameV1alpha1() gamev1alpha1.GameV1alpha1Interface {
	return c.gameV1alpha1
}

// HealthcareV1alpha1 retrieves the HealthcareV1alpha1Client
func (c *Clientset) HealthcareV1alpha1() healthcarev1alpha1.HealthcareV1alpha1Interface {
	return c.healthcareV1alpha1
}

// IapV1alpha1 retrieves the IapV1alpha1Client
func (c *Clientset) IapV1alpha1() iapv1alpha1.IapV1alpha1Interface {
	return c.iapV1alpha1
}

// IdentityV1alpha1 retrieves the IdentityV1alpha1Client
func (c *Clientset) IdentityV1alpha1() identityv1alpha1.IdentityV1alpha1Interface {
	return c.identityV1alpha1
}

// KmsV1alpha1 retrieves the KmsV1alpha1Client
func (c *Clientset) KmsV1alpha1() kmsv1alpha1.KmsV1alpha1Interface {
	return c.kmsV1alpha1
}

// LoggingV1alpha1 retrieves the LoggingV1alpha1Client
func (c *Clientset) LoggingV1alpha1() loggingv1alpha1.LoggingV1alpha1Interface {
	return c.loggingV1alpha1
}

// MlV1alpha1 retrieves the MlV1alpha1Client
func (c *Clientset) MlV1alpha1() mlv1alpha1.MlV1alpha1Interface {
	return c.mlV1alpha1
}

// MonitoringV1alpha1 retrieves the MonitoringV1alpha1Client
func (c *Clientset) MonitoringV1alpha1() monitoringv1alpha1.MonitoringV1alpha1Interface {
	return c.monitoringV1alpha1
}

// NetworkV1alpha1 retrieves the NetworkV1alpha1Client
func (c *Clientset) NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface {
	return c.networkV1alpha1
}

// NotebooksV1alpha1 retrieves the NotebooksV1alpha1Client
func (c *Clientset) NotebooksV1alpha1() notebooksv1alpha1.NotebooksV1alpha1Interface {
	return c.notebooksV1alpha1
}

// OrganizationV1alpha1 retrieves the OrganizationV1alpha1Client
func (c *Clientset) OrganizationV1alpha1() organizationv1alpha1.OrganizationV1alpha1Interface {
	return c.organizationV1alpha1
}

// OsV1alpha1 retrieves the OsV1alpha1Client
func (c *Clientset) OsV1alpha1() osv1alpha1.OsV1alpha1Interface {
	return c.osV1alpha1
}

// ProjectV1alpha1 retrieves the ProjectV1alpha1Client
func (c *Clientset) ProjectV1alpha1() projectv1alpha1.ProjectV1alpha1Interface {
	return c.projectV1alpha1
}

// PubsubV1alpha1 retrieves the PubsubV1alpha1Client
func (c *Clientset) PubsubV1alpha1() pubsubv1alpha1.PubsubV1alpha1Interface {
	return c.pubsubV1alpha1
}

// RedisV1alpha1 retrieves the RedisV1alpha1Client
func (c *Clientset) RedisV1alpha1() redisv1alpha1.RedisV1alpha1Interface {
	return c.redisV1alpha1
}

// ResourceV1alpha1 retrieves the ResourceV1alpha1Client
func (c *Clientset) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	return c.resourceV1alpha1
}

// RuntimeconfigV1alpha1 retrieves the RuntimeconfigV1alpha1Client
func (c *Clientset) RuntimeconfigV1alpha1() runtimeconfigv1alpha1.RuntimeconfigV1alpha1Interface {
	return c.runtimeconfigV1alpha1
}

// SccV1alpha1 retrieves the SccV1alpha1Client
func (c *Clientset) SccV1alpha1() sccv1alpha1.SccV1alpha1Interface {
	return c.sccV1alpha1
}

// SecretV1alpha1 retrieves the SecretV1alpha1Client
func (c *Clientset) SecretV1alpha1() secretv1alpha1.SecretV1alpha1Interface {
	return c.secretV1alpha1
}

// ServiceV1alpha1 retrieves the ServiceV1alpha1Client
func (c *Clientset) ServiceV1alpha1() servicev1alpha1.ServiceV1alpha1Interface {
	return c.serviceV1alpha1
}

// SourcereporepositoryV1alpha1 retrieves the SourcereporepositoryV1alpha1Client
func (c *Clientset) SourcereporepositoryV1alpha1() sourcereporepositoryv1alpha1.SourcereporepositoryV1alpha1Interface {
	return c.sourcereporepositoryV1alpha1
}

// SpannerV1alpha1 retrieves the SpannerV1alpha1Client
func (c *Clientset) SpannerV1alpha1() spannerv1alpha1.SpannerV1alpha1Interface {
	return c.spannerV1alpha1
}

// SqlV1alpha1 retrieves the SqlV1alpha1Client
func (c *Clientset) SqlV1alpha1() sqlv1alpha1.SqlV1alpha1Interface {
	return c.sqlV1alpha1
}

// StorageV1alpha1 retrieves the StorageV1alpha1Client
func (c *Clientset) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	return c.storageV1alpha1
}

// TagsV1alpha1 retrieves the TagsV1alpha1Client
func (c *Clientset) TagsV1alpha1() tagsv1alpha1.TagsV1alpha1Interface {
	return c.tagsV1alpha1
}

// TpuV1alpha1 retrieves the TpuV1alpha1Client
func (c *Clientset) TpuV1alpha1() tpuv1alpha1.TpuV1alpha1Interface {
	return c.tpuV1alpha1
}

// VpcV1alpha1 retrieves the VpcV1alpha1Client
func (c *Clientset) VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface {
	return c.vpcV1alpha1
}

// WorkflowsV1alpha1 retrieves the WorkflowsV1alpha1Client
func (c *Clientset) WorkflowsV1alpha1() workflowsv1alpha1.WorkflowsV1alpha1Interface {
	return c.workflowsV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.accesscontextV1alpha1, err = accesscontextv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.activeV1alpha1, err = activev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.apigeeV1alpha1, err = apigeev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.appengineV1alpha1, err = appenginev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.bigqueryV1alpha1, err = bigqueryv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.bigtableV1alpha1, err = bigtablev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.billingaccountV1alpha1, err = billingaccountv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.billingbudgetV1alpha1, err = billingbudgetv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.billingsubaccountV1alpha1, err = billingsubaccountv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.binaryauthorizationV1alpha1, err = binaryauthorizationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudV1alpha1, err = cloudv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudbuildV1alpha1, err = cloudbuildv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudfunctionsfunctionV1alpha1, err = cloudfunctionsfunctionv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.cloudiotV1alpha1, err = cloudiotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.composerV1alpha1, err = composerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.computeV1alpha1, err = computev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.containerV1alpha1, err = containerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dataV1alpha1, err = datav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dataflowV1alpha1, err = dataflowv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dataprocV1alpha1, err = dataprocv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.datastoreV1alpha1, err = datastorev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.deploymentV1alpha1, err = deploymentv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dialogflowV1alpha1, err = dialogflowv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dnsV1alpha1, err = dnsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.endpointsV1alpha1, err = endpointsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventarcV1alpha1, err = eventarcv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.filestoreV1alpha1, err = filestorev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.firestoreV1alpha1, err = firestorev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.folderV1alpha1, err = folderv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.gameV1alpha1, err = gamev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.healthcareV1alpha1, err = healthcarev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iapV1alpha1, err = iapv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.identityV1alpha1, err = identityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.kmsV1alpha1, err = kmsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.loggingV1alpha1, err = loggingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mlV1alpha1, err = mlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.monitoringV1alpha1, err = monitoringv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.networkV1alpha1, err = networkv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.notebooksV1alpha1, err = notebooksv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.organizationV1alpha1, err = organizationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.osV1alpha1, err = osv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.projectV1alpha1, err = projectv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.pubsubV1alpha1, err = pubsubv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.redisV1alpha1, err = redisv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.resourceV1alpha1, err = resourcev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.runtimeconfigV1alpha1, err = runtimeconfigv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sccV1alpha1, err = sccv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.secretV1alpha1, err = secretv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.serviceV1alpha1, err = servicev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sourcereporepositoryV1alpha1, err = sourcereporepositoryv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.spannerV1alpha1, err = spannerv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sqlV1alpha1, err = sqlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.storageV1alpha1, err = storagev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tagsV1alpha1, err = tagsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tpuV1alpha1, err = tpuv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vpcV1alpha1, err = vpcv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.workflowsV1alpha1, err = workflowsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.accesscontextV1alpha1 = accesscontextv1alpha1.NewForConfigOrDie(c)
	cs.activeV1alpha1 = activev1alpha1.NewForConfigOrDie(c)
	cs.apigeeV1alpha1 = apigeev1alpha1.NewForConfigOrDie(c)
	cs.appengineV1alpha1 = appenginev1alpha1.NewForConfigOrDie(c)
	cs.bigqueryV1alpha1 = bigqueryv1alpha1.NewForConfigOrDie(c)
	cs.bigtableV1alpha1 = bigtablev1alpha1.NewForConfigOrDie(c)
	cs.billingaccountV1alpha1 = billingaccountv1alpha1.NewForConfigOrDie(c)
	cs.billingbudgetV1alpha1 = billingbudgetv1alpha1.NewForConfigOrDie(c)
	cs.billingsubaccountV1alpha1 = billingsubaccountv1alpha1.NewForConfigOrDie(c)
	cs.binaryauthorizationV1alpha1 = binaryauthorizationv1alpha1.NewForConfigOrDie(c)
	cs.cloudV1alpha1 = cloudv1alpha1.NewForConfigOrDie(c)
	cs.cloudbuildV1alpha1 = cloudbuildv1alpha1.NewForConfigOrDie(c)
	cs.cloudfunctionsfunctionV1alpha1 = cloudfunctionsfunctionv1alpha1.NewForConfigOrDie(c)
	cs.cloudiotV1alpha1 = cloudiotv1alpha1.NewForConfigOrDie(c)
	cs.composerV1alpha1 = composerv1alpha1.NewForConfigOrDie(c)
	cs.computeV1alpha1 = computev1alpha1.NewForConfigOrDie(c)
	cs.containerV1alpha1 = containerv1alpha1.NewForConfigOrDie(c)
	cs.dataV1alpha1 = datav1alpha1.NewForConfigOrDie(c)
	cs.dataflowV1alpha1 = dataflowv1alpha1.NewForConfigOrDie(c)
	cs.dataprocV1alpha1 = dataprocv1alpha1.NewForConfigOrDie(c)
	cs.datastoreV1alpha1 = datastorev1alpha1.NewForConfigOrDie(c)
	cs.deploymentV1alpha1 = deploymentv1alpha1.NewForConfigOrDie(c)
	cs.dialogflowV1alpha1 = dialogflowv1alpha1.NewForConfigOrDie(c)
	cs.dnsV1alpha1 = dnsv1alpha1.NewForConfigOrDie(c)
	cs.endpointsV1alpha1 = endpointsv1alpha1.NewForConfigOrDie(c)
	cs.eventarcV1alpha1 = eventarcv1alpha1.NewForConfigOrDie(c)
	cs.filestoreV1alpha1 = filestorev1alpha1.NewForConfigOrDie(c)
	cs.firestoreV1alpha1 = firestorev1alpha1.NewForConfigOrDie(c)
	cs.folderV1alpha1 = folderv1alpha1.NewForConfigOrDie(c)
	cs.gameV1alpha1 = gamev1alpha1.NewForConfigOrDie(c)
	cs.healthcareV1alpha1 = healthcarev1alpha1.NewForConfigOrDie(c)
	cs.iapV1alpha1 = iapv1alpha1.NewForConfigOrDie(c)
	cs.identityV1alpha1 = identityv1alpha1.NewForConfigOrDie(c)
	cs.kmsV1alpha1 = kmsv1alpha1.NewForConfigOrDie(c)
	cs.loggingV1alpha1 = loggingv1alpha1.NewForConfigOrDie(c)
	cs.mlV1alpha1 = mlv1alpha1.NewForConfigOrDie(c)
	cs.monitoringV1alpha1 = monitoringv1alpha1.NewForConfigOrDie(c)
	cs.networkV1alpha1 = networkv1alpha1.NewForConfigOrDie(c)
	cs.notebooksV1alpha1 = notebooksv1alpha1.NewForConfigOrDie(c)
	cs.organizationV1alpha1 = organizationv1alpha1.NewForConfigOrDie(c)
	cs.osV1alpha1 = osv1alpha1.NewForConfigOrDie(c)
	cs.projectV1alpha1 = projectv1alpha1.NewForConfigOrDie(c)
	cs.pubsubV1alpha1 = pubsubv1alpha1.NewForConfigOrDie(c)
	cs.redisV1alpha1 = redisv1alpha1.NewForConfigOrDie(c)
	cs.resourceV1alpha1 = resourcev1alpha1.NewForConfigOrDie(c)
	cs.runtimeconfigV1alpha1 = runtimeconfigv1alpha1.NewForConfigOrDie(c)
	cs.sccV1alpha1 = sccv1alpha1.NewForConfigOrDie(c)
	cs.secretV1alpha1 = secretv1alpha1.NewForConfigOrDie(c)
	cs.serviceV1alpha1 = servicev1alpha1.NewForConfigOrDie(c)
	cs.sourcereporepositoryV1alpha1 = sourcereporepositoryv1alpha1.NewForConfigOrDie(c)
	cs.spannerV1alpha1 = spannerv1alpha1.NewForConfigOrDie(c)
	cs.sqlV1alpha1 = sqlv1alpha1.NewForConfigOrDie(c)
	cs.storageV1alpha1 = storagev1alpha1.NewForConfigOrDie(c)
	cs.tagsV1alpha1 = tagsv1alpha1.NewForConfigOrDie(c)
	cs.tpuV1alpha1 = tpuv1alpha1.NewForConfigOrDie(c)
	cs.vpcV1alpha1 = vpcv1alpha1.NewForConfigOrDie(c)
	cs.workflowsV1alpha1 = workflowsv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.accesscontextV1alpha1 = accesscontextv1alpha1.New(c)
	cs.activeV1alpha1 = activev1alpha1.New(c)
	cs.apigeeV1alpha1 = apigeev1alpha1.New(c)
	cs.appengineV1alpha1 = appenginev1alpha1.New(c)
	cs.bigqueryV1alpha1 = bigqueryv1alpha1.New(c)
	cs.bigtableV1alpha1 = bigtablev1alpha1.New(c)
	cs.billingaccountV1alpha1 = billingaccountv1alpha1.New(c)
	cs.billingbudgetV1alpha1 = billingbudgetv1alpha1.New(c)
	cs.billingsubaccountV1alpha1 = billingsubaccountv1alpha1.New(c)
	cs.binaryauthorizationV1alpha1 = binaryauthorizationv1alpha1.New(c)
	cs.cloudV1alpha1 = cloudv1alpha1.New(c)
	cs.cloudbuildV1alpha1 = cloudbuildv1alpha1.New(c)
	cs.cloudfunctionsfunctionV1alpha1 = cloudfunctionsfunctionv1alpha1.New(c)
	cs.cloudiotV1alpha1 = cloudiotv1alpha1.New(c)
	cs.composerV1alpha1 = composerv1alpha1.New(c)
	cs.computeV1alpha1 = computev1alpha1.New(c)
	cs.containerV1alpha1 = containerv1alpha1.New(c)
	cs.dataV1alpha1 = datav1alpha1.New(c)
	cs.dataflowV1alpha1 = dataflowv1alpha1.New(c)
	cs.dataprocV1alpha1 = dataprocv1alpha1.New(c)
	cs.datastoreV1alpha1 = datastorev1alpha1.New(c)
	cs.deploymentV1alpha1 = deploymentv1alpha1.New(c)
	cs.dialogflowV1alpha1 = dialogflowv1alpha1.New(c)
	cs.dnsV1alpha1 = dnsv1alpha1.New(c)
	cs.endpointsV1alpha1 = endpointsv1alpha1.New(c)
	cs.eventarcV1alpha1 = eventarcv1alpha1.New(c)
	cs.filestoreV1alpha1 = filestorev1alpha1.New(c)
	cs.firestoreV1alpha1 = firestorev1alpha1.New(c)
	cs.folderV1alpha1 = folderv1alpha1.New(c)
	cs.gameV1alpha1 = gamev1alpha1.New(c)
	cs.healthcareV1alpha1 = healthcarev1alpha1.New(c)
	cs.iapV1alpha1 = iapv1alpha1.New(c)
	cs.identityV1alpha1 = identityv1alpha1.New(c)
	cs.kmsV1alpha1 = kmsv1alpha1.New(c)
	cs.loggingV1alpha1 = loggingv1alpha1.New(c)
	cs.mlV1alpha1 = mlv1alpha1.New(c)
	cs.monitoringV1alpha1 = monitoringv1alpha1.New(c)
	cs.networkV1alpha1 = networkv1alpha1.New(c)
	cs.notebooksV1alpha1 = notebooksv1alpha1.New(c)
	cs.organizationV1alpha1 = organizationv1alpha1.New(c)
	cs.osV1alpha1 = osv1alpha1.New(c)
	cs.projectV1alpha1 = projectv1alpha1.New(c)
	cs.pubsubV1alpha1 = pubsubv1alpha1.New(c)
	cs.redisV1alpha1 = redisv1alpha1.New(c)
	cs.resourceV1alpha1 = resourcev1alpha1.New(c)
	cs.runtimeconfigV1alpha1 = runtimeconfigv1alpha1.New(c)
	cs.sccV1alpha1 = sccv1alpha1.New(c)
	cs.secretV1alpha1 = secretv1alpha1.New(c)
	cs.serviceV1alpha1 = servicev1alpha1.New(c)
	cs.sourcereporepositoryV1alpha1 = sourcereporepositoryv1alpha1.New(c)
	cs.spannerV1alpha1 = spannerv1alpha1.New(c)
	cs.sqlV1alpha1 = sqlv1alpha1.New(c)
	cs.storageV1alpha1 = storagev1alpha1.New(c)
	cs.tagsV1alpha1 = tagsv1alpha1.New(c)
	cs.tpuV1alpha1 = tpuv1alpha1.New(c)
	cs.vpcV1alpha1 = vpcv1alpha1.New(c)
	cs.workflowsV1alpha1 = workflowsv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
