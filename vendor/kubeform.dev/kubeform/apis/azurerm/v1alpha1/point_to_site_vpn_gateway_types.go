/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type PointToSiteVPNGateway struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PointToSiteVPNGatewaySpec   `json:"spec,omitempty"`
	Status            PointToSiteVPNGatewayStatus `json:"status,omitempty"`
}

type PointToSiteVPNGatewaySpecConnectionConfigurationVpnClientAddressPool struct {
	AddressPrefixes []string `json:"addressPrefixes" tf:"address_prefixes"`
}

type PointToSiteVPNGatewaySpecConnectionConfiguration struct {
	Name string `json:"name" tf:"name"`
	// +kubebuilder:validation:MaxItems=1
	VpnClientAddressPool []PointToSiteVPNGatewaySpecConnectionConfigurationVpnClientAddressPool `json:"vpnClientAddressPool" tf:"vpn_client_address_pool"`
}

type PointToSiteVPNGatewaySpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:MaxItems=1
	ConnectionConfiguration []PointToSiteVPNGatewaySpecConnectionConfiguration `json:"connectionConfiguration" tf:"connection_configuration"`
	Location                string                                             `json:"location" tf:"location"`
	Name                    string                                             `json:"name" tf:"name"`
	ResourceGroupName       string                                             `json:"resourceGroupName" tf:"resource_group_name"`
	ScaleUnit               int64                                              `json:"scaleUnit" tf:"scale_unit"`
	// +optional
	Tags                     map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
	VirtualHubID             string            `json:"virtualHubID" tf:"virtual_hub_id"`
	VpnServerConfigurationID string            `json:"vpnServerConfigurationID" tf:"vpn_server_configuration_id"`
}

type PointToSiteVPNGatewayStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *PointToSiteVPNGatewaySpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PointToSiteVPNGatewayList is a list of PointToSiteVPNGateways
type PointToSiteVPNGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of PointToSiteVPNGateway CRD objects
	Items []PointToSiteVPNGateway `json:"items,omitempty"`
}
