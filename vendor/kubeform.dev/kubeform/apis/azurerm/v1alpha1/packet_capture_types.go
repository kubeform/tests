/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type PacketCapture struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PacketCaptureSpec   `json:"spec,omitempty"`
	Status            PacketCaptureStatus `json:"status,omitempty"`
}

type PacketCaptureSpecFilter struct {
	// +optional
	LocalIPAddress string `json:"localIPAddress,omitempty" tf:"local_ip_address,omitempty"`
	// +optional
	LocalPort string `json:"localPort,omitempty" tf:"local_port,omitempty"`
	Protocol  string `json:"protocol" tf:"protocol"`
	// +optional
	RemoteIPAddress string `json:"remoteIPAddress,omitempty" tf:"remote_ip_address,omitempty"`
	// +optional
	RemotePort string `json:"remotePort,omitempty" tf:"remote_port,omitempty"`
}

type PacketCaptureSpecStorageLocation struct {
	// +optional
	FilePath string `json:"filePath,omitempty" tf:"file_path,omitempty"`
	// +optional
	StorageAccountID string `json:"storageAccountID,omitempty" tf:"storage_account_id,omitempty"`
	// +optional
	StoragePath string `json:"storagePath,omitempty" tf:"storage_path,omitempty"`
}

type PacketCaptureSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Filter []PacketCaptureSpecFilter `json:"filter,omitempty" tf:"filter,omitempty"`
	// +optional
	MaximumBytesPerPacket int64 `json:"maximumBytesPerPacket,omitempty" tf:"maximum_bytes_per_packet,omitempty"`
	// +optional
	MaximumBytesPerSession int64 `json:"maximumBytesPerSession,omitempty" tf:"maximum_bytes_per_session,omitempty"`
	// +optional
	MaximumCaptureDuration int64  `json:"maximumCaptureDuration,omitempty" tf:"maximum_capture_duration,omitempty"`
	Name                   string `json:"name" tf:"name"`
	NetworkWatcherName     string `json:"networkWatcherName" tf:"network_watcher_name"`
	ResourceGroupName      string `json:"resourceGroupName" tf:"resource_group_name"`
	// +kubebuilder:validation:MaxItems=1
	StorageLocation  []PacketCaptureSpecStorageLocation `json:"storageLocation" tf:"storage_location"`
	TargetResourceID string                             `json:"targetResourceID" tf:"target_resource_id"`
}

type PacketCaptureStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *PacketCaptureSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// PacketCaptureList is a list of PacketCaptures
type PacketCaptureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of PacketCapture CRD objects
	Items []PacketCapture `json:"items,omitempty"`
}
