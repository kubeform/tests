/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type IothubDps struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IothubDpsSpec   `json:"spec,omitempty"`
	Status            IothubDpsStatus `json:"status,omitempty"`
}

type IothubDpsSpecLinkedHub struct {
	// +optional
	AllocationWeight int64 `json:"allocationWeight,omitempty" tf:"allocation_weight,omitempty"`
	// +optional
	ApplyAllocationPolicy bool   `json:"applyAllocationPolicy,omitempty" tf:"apply_allocation_policy,omitempty"`
	ConnectionString      string `json:"-" sensitive:"true" tf:"connection_string"`
	// +optional
	Hostname string `json:"hostname,omitempty" tf:"hostname,omitempty"`
	Location string `json:"location" tf:"location"`
}

type IothubDpsSpecSku struct {
	Capacity int64  `json:"capacity" tf:"capacity"`
	Name     string `json:"name" tf:"name"`
	// +optional
	// Deprecated
	Tier string `json:"tier,omitempty" tf:"tier,omitempty"`
}

type IothubDpsSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AllocationPolicy string `json:"allocationPolicy,omitempty" tf:"allocation_policy,omitempty"`
	// +optional
	DeviceProvisioningHostName string `json:"deviceProvisioningHostName,omitempty" tf:"device_provisioning_host_name,omitempty"`
	// +optional
	IDScope string `json:"IDScope,omitempty" tf:"id_scope,omitempty"`
	// +optional
	LinkedHub         []IothubDpsSpecLinkedHub `json:"linkedHub,omitempty" tf:"linked_hub,omitempty"`
	Location          string                   `json:"location" tf:"location"`
	Name              string                   `json:"name" tf:"name"`
	ResourceGroupName string                   `json:"resourceGroupName" tf:"resource_group_name"`
	// +optional
	ServiceOperationsHostName string `json:"serviceOperationsHostName,omitempty" tf:"service_operations_host_name,omitempty"`
	// +kubebuilder:validation:MaxItems=1
	Sku []IothubDpsSpecSku `json:"sku" tf:"sku"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IothubDpsStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *IothubDpsSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// IothubDpsList is a list of IothubDpss
type IothubDpsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of IothubDps CRD objects
	Items []IothubDps `json:"items,omitempty"`
}
