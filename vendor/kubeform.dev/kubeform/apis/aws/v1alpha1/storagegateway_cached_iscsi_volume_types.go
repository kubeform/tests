/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StoragegatewayCachedIscsiVolume struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StoragegatewayCachedIscsiVolumeSpec   `json:"spec,omitempty"`
	Status            StoragegatewayCachedIscsiVolumeStatus `json:"status,omitempty"`
}

type StoragegatewayCachedIscsiVolumeSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn string `json:"arn,omitempty" tf:"arn,omitempty"`
	// +optional
	ChapEnabled bool   `json:"chapEnabled,omitempty" tf:"chap_enabled,omitempty"`
	GatewayArn  string `json:"gatewayArn" tf:"gateway_arn"`
	// +optional
	LunNumber          int64  `json:"lunNumber,omitempty" tf:"lun_number,omitempty"`
	NetworkInterfaceID string `json:"networkInterfaceID" tf:"network_interface_id"`
	// +optional
	NetworkInterfacePort int64 `json:"networkInterfacePort,omitempty" tf:"network_interface_port,omitempty"`
	// +optional
	SnapshotID string `json:"snapshotID,omitempty" tf:"snapshot_id,omitempty"`
	// +optional
	SourceVolumeArn string `json:"sourceVolumeArn,omitempty" tf:"source_volume_arn,omitempty"`
	// +optional
	TargetArn  string `json:"targetArn,omitempty" tf:"target_arn,omitempty"`
	TargetName string `json:"targetName" tf:"target_name"`
	// +optional
	VolumeArn string `json:"volumeArn,omitempty" tf:"volume_arn,omitempty"`
	// +optional
	VolumeID          string `json:"volumeID,omitempty" tf:"volume_id,omitempty"`
	VolumeSizeInBytes int64  `json:"volumeSizeInBytes" tf:"volume_size_in_bytes"`
}

type StoragegatewayCachedIscsiVolumeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *StoragegatewayCachedIscsiVolumeSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StoragegatewayCachedIscsiVolumeList is a list of StoragegatewayCachedIscsiVolumes
type StoragegatewayCachedIscsiVolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of StoragegatewayCachedIscsiVolume CRD objects
	Items []StoragegatewayCachedIscsiVolume `json:"items,omitempty"`
}
