/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type WorklinkFleet struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorklinkFleetSpec   `json:"spec,omitempty"`
	Status            WorklinkFleetStatus `json:"status,omitempty"`
}

type WorklinkFleetSpecIdentityProvider struct {
	SamlMetadata string `json:"samlMetadata" tf:"saml_metadata"`
	Type         string `json:"type" tf:"type"`
}

type WorklinkFleetSpecNetwork struct {
	SecurityGroupIDS []string `json:"securityGroupIDS" tf:"security_group_ids"`
	SubnetIDS        []string `json:"subnetIDS" tf:"subnet_ids"`
	VpcID            string   `json:"vpcID" tf:"vpc_id"`
}

type WorklinkFleetSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Arn string `json:"arn,omitempty" tf:"arn,omitempty"`
	// +optional
	AuditStreamArn string `json:"auditStreamArn,omitempty" tf:"audit_stream_arn,omitempty"`
	// +optional
	CompanyCode string `json:"companyCode,omitempty" tf:"company_code,omitempty"`
	// +optional
	CreatedTime string `json:"createdTime,omitempty" tf:"created_time,omitempty"`
	// +optional
	DeviceCaCertificate string `json:"deviceCaCertificate,omitempty" tf:"device_ca_certificate,omitempty"`
	// +optional
	DisplayName string `json:"displayName,omitempty" tf:"display_name,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	IdentityProvider []WorklinkFleetSpecIdentityProvider `json:"identityProvider,omitempty" tf:"identity_provider,omitempty"`
	// +optional
	LastUpdatedTime string `json:"lastUpdatedTime,omitempty" tf:"last_updated_time,omitempty"`
	Name            string `json:"name" tf:"name"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	Network []WorklinkFleetSpecNetwork `json:"network,omitempty" tf:"network,omitempty"`
	// +optional
	OptimizeForEndUserLocation bool `json:"optimizeForEndUserLocation,omitempty" tf:"optimize_for_end_user_location,omitempty"`
}

type WorklinkFleetStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *WorklinkFleetSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// WorklinkFleetList is a list of WorklinkFleets
type WorklinkFleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of WorklinkFleet CRD objects
	Items []WorklinkFleet `json:"items,omitempty"`
}
