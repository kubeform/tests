/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type S3BucketObject struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketObjectSpec   `json:"spec,omitempty"`
	Status            S3BucketObjectStatus `json:"status,omitempty"`
}

type S3BucketObjectSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	Acl    string `json:"acl,omitempty" tf:"acl,omitempty"`
	Bucket string `json:"bucket" tf:"bucket"`
	// +optional
	CacheControl string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`
	// +optional
	Content string `json:"content,omitempty" tf:"content,omitempty"`
	// +optional
	ContentBase64 string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`
	// +optional
	ContentDisposition string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`
	// +optional
	ContentEncoding string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`
	// +optional
	ContentLanguage string `json:"contentLanguage,omitempty" tf:"content_language,omitempty"`
	// +optional
	ContentType string `json:"contentType,omitempty" tf:"content_type,omitempty"`
	// +optional
	Etag string `json:"etag,omitempty" tf:"etag,omitempty"`
	// +optional
	ForceDestroy bool   `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`
	Key          string `json:"key" tf:"key"`
	// +optional
	KmsKeyID string `json:"kmsKeyID,omitempty" tf:"kms_key_id,omitempty"`
	// +optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata,omitempty"`
	// +optional
	ObjectLockLegalHoldStatus string `json:"objectLockLegalHoldStatus,omitempty" tf:"object_lock_legal_hold_status,omitempty"`
	// +optional
	ObjectLockMode string `json:"objectLockMode,omitempty" tf:"object_lock_mode,omitempty"`
	// +optional
	ObjectLockRetainUntilDate string `json:"objectLockRetainUntilDate,omitempty" tf:"object_lock_retain_until_date,omitempty"`
	// +optional
	ServerSideEncryption string `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`
	// +optional
	Source string `json:"source,omitempty" tf:"source,omitempty"`
	// +optional
	StorageClass string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
	// +optional
	VersionID string `json:"versionID,omitempty" tf:"version_id,omitempty"`
	// +optional
	WebsiteRedirect string `json:"websiteRedirect,omitempty" tf:"website_redirect,omitempty"`
}

type S3BucketObjectStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *S3BucketObjectSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// S3BucketObjectList is a list of S3BucketObjects
type S3BucketObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of S3BucketObject CRD objects
	Items []S3BucketObject `json:"items,omitempty"`
}
