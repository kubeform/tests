/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type OpsworksStack struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksStackSpec   `json:"spec,omitempty"`
	Status            OpsworksStackStatus `json:"status,omitempty"`
}

type OpsworksStackSpecCustomCookbooksSource struct {
	// +optional
	Password string `json:"-" sensitive:"true" tf:"password,omitempty"`
	// +optional
	Revision string `json:"revision,omitempty" tf:"revision,omitempty"`
	// +optional
	SshKey string `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`
	Type   string `json:"type" tf:"type"`
	Url    string `json:"url" tf:"url"`
	// +optional
	Username string `json:"username,omitempty" tf:"username,omitempty"`
}

type OpsworksStackSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	// +optional
	AgentVersion string `json:"agentVersion,omitempty" tf:"agent_version,omitempty"`
	// +optional
	Arn string `json:"arn,omitempty" tf:"arn,omitempty"`
	// +optional
	BerkshelfVersion string `json:"berkshelfVersion,omitempty" tf:"berkshelf_version,omitempty"`
	// +optional
	Color string `json:"color,omitempty" tf:"color,omitempty"`
	// +optional
	ConfigurationManagerName string `json:"configurationManagerName,omitempty" tf:"configuration_manager_name,omitempty"`
	// +optional
	ConfigurationManagerVersion string `json:"configurationManagerVersion,omitempty" tf:"configuration_manager_version,omitempty"`
	// +optional
	CustomCookbooksSource []OpsworksStackSpecCustomCookbooksSource `json:"customCookbooksSource,omitempty" tf:"custom_cookbooks_source,omitempty"`
	// +optional
	CustomJSON string `json:"customJSON,omitempty" tf:"custom_json,omitempty"`
	// +optional
	DefaultAvailabilityZone   string `json:"defaultAvailabilityZone,omitempty" tf:"default_availability_zone,omitempty"`
	DefaultInstanceProfileArn string `json:"defaultInstanceProfileArn" tf:"default_instance_profile_arn"`
	// +optional
	DefaultOs string `json:"defaultOs,omitempty" tf:"default_os,omitempty"`
	// +optional
	DefaultRootDeviceType string `json:"defaultRootDeviceType,omitempty" tf:"default_root_device_type,omitempty"`
	// +optional
	DefaultSSHKeyName string `json:"defaultSSHKeyName,omitempty" tf:"default_ssh_key_name,omitempty"`
	// +optional
	DefaultSubnetID string `json:"defaultSubnetID,omitempty" tf:"default_subnet_id,omitempty"`
	// +optional
	HostnameTheme string `json:"hostnameTheme,omitempty" tf:"hostname_theme,omitempty"`
	// +optional
	ManageBerkshelf bool   `json:"manageBerkshelf,omitempty" tf:"manage_berkshelf,omitempty"`
	Name            string `json:"name" tf:"name"`
	Region          string `json:"region" tf:"region"`
	ServiceRoleArn  string `json:"serviceRoleArn" tf:"service_role_arn"`
	// +optional
	StackEndpoint string `json:"stackEndpoint,omitempty" tf:"stack_endpoint,omitempty"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty"`
	// +optional
	UseCustomCookbooks bool `json:"useCustomCookbooks,omitempty" tf:"use_custom_cookbooks,omitempty"`
	// +optional
	UseOpsworksSecurityGroups bool `json:"useOpsworksSecurityGroups,omitempty" tf:"use_opsworks_security_groups,omitempty"`
	// +optional
	VpcID string `json:"vpcID,omitempty" tf:"vpc_id,omitempty"`
}

type OpsworksStackStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *OpsworksStackSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// OpsworksStackList is a list of OpsworksStacks
type OpsworksStackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of OpsworksStack CRD objects
	Items []OpsworksStack `json:"items,omitempty"`
}
