/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type S3BucketNotification struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketNotificationSpec   `json:"spec,omitempty"`
	Status            S3BucketNotificationStatus `json:"status,omitempty"`
}

type S3BucketNotificationSpecLambdaFunction struct {
	Events []string `json:"events" tf:"events"`
	// +optional
	FilterPrefix string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`
	// +optional
	FilterSuffix string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`
	// +optional
	ID string `json:"ID,omitempty" tf:"id,omitempty"`
	// +optional
	LambdaFunctionArn string `json:"lambdaFunctionArn,omitempty" tf:"lambda_function_arn,omitempty"`
}

type S3BucketNotificationSpecQueue struct {
	Events []string `json:"events" tf:"events"`
	// +optional
	FilterPrefix string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`
	// +optional
	FilterSuffix string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`
	// +optional
	ID       string `json:"ID,omitempty" tf:"id,omitempty"`
	QueueArn string `json:"queueArn" tf:"queue_arn"`
}

type S3BucketNotificationSpecTopic struct {
	Events []string `json:"events" tf:"events"`
	// +optional
	FilterPrefix string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`
	// +optional
	FilterSuffix string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`
	// +optional
	ID       string `json:"ID,omitempty" tf:"id,omitempty"`
	TopicArn string `json:"topicArn" tf:"topic_arn"`
}

type S3BucketNotificationSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Bucket string `json:"bucket" tf:"bucket"`
	// +optional
	LambdaFunction []S3BucketNotificationSpecLambdaFunction `json:"lambdaFunction,omitempty" tf:"lambda_function,omitempty"`
	// +optional
	Queue []S3BucketNotificationSpecQueue `json:"queue,omitempty" tf:"queue,omitempty"`
	// +optional
	Topic []S3BucketNotificationSpecTopic `json:"topic,omitempty" tf:"topic,omitempty"`
}

type S3BucketNotificationStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *S3BucketNotificationSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// S3BucketNotificationList is a list of S3BucketNotifications
type S3BucketNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of S3BucketNotification CRD objects
	Items []S3BucketNotification `json:"items,omitempty"`
}
