/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type MonitoringAlertPolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitoringAlertPolicySpec   `json:"spec,omitempty"`
	Status            MonitoringAlertPolicyStatus `json:"status,omitempty"`
}

type MonitoringAlertPolicySpecConditionsConditionAbsentAggregations struct {
	// +optional
	AlignmentPeriod string `json:"alignmentPeriod,omitempty" tf:"alignment_period,omitempty"`
	// +optional
	CrossSeriesReducer string `json:"crossSeriesReducer,omitempty" tf:"cross_series_reducer,omitempty"`
	// +optional
	GroupByFields []string `json:"groupByFields,omitempty" tf:"group_by_fields,omitempty"`
	// +optional
	PerSeriesAligner string `json:"perSeriesAligner,omitempty" tf:"per_series_aligner,omitempty"`
}

type MonitoringAlertPolicySpecConditionsConditionAbsentTrigger struct {
	// +optional
	Count int64 `json:"count,omitempty" tf:"count,omitempty"`
	// +optional
	Percent float64 `json:"percent,omitempty" tf:"percent,omitempty"`
}

type MonitoringAlertPolicySpecConditionsConditionAbsent struct {
	// +optional
	Aggregations []MonitoringAlertPolicySpecConditionsConditionAbsentAggregations `json:"aggregations,omitempty" tf:"aggregations,omitempty"`
	Duration     string                                                           `json:"duration" tf:"duration"`
	// +optional
	Filter string `json:"filter,omitempty" tf:"filter,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	Trigger []MonitoringAlertPolicySpecConditionsConditionAbsentTrigger `json:"trigger,omitempty" tf:"trigger,omitempty"`
}

type MonitoringAlertPolicySpecConditionsConditionThresholdAggregations struct {
	// +optional
	AlignmentPeriod string `json:"alignmentPeriod,omitempty" tf:"alignment_period,omitempty"`
	// +optional
	CrossSeriesReducer string `json:"crossSeriesReducer,omitempty" tf:"cross_series_reducer,omitempty"`
	// +optional
	GroupByFields []string `json:"groupByFields,omitempty" tf:"group_by_fields,omitempty"`
	// +optional
	PerSeriesAligner string `json:"perSeriesAligner,omitempty" tf:"per_series_aligner,omitempty"`
}

type MonitoringAlertPolicySpecConditionsConditionThresholdDenominatorAggregations struct {
	// +optional
	AlignmentPeriod string `json:"alignmentPeriod,omitempty" tf:"alignment_period,omitempty"`
	// +optional
	CrossSeriesReducer string `json:"crossSeriesReducer,omitempty" tf:"cross_series_reducer,omitempty"`
	// +optional
	GroupByFields []string `json:"groupByFields,omitempty" tf:"group_by_fields,omitempty"`
	// +optional
	PerSeriesAligner string `json:"perSeriesAligner,omitempty" tf:"per_series_aligner,omitempty"`
}

type MonitoringAlertPolicySpecConditionsConditionThresholdTrigger struct {
	// +optional
	Count int64 `json:"count,omitempty" tf:"count,omitempty"`
	// +optional
	Percent float64 `json:"percent,omitempty" tf:"percent,omitempty"`
}

type MonitoringAlertPolicySpecConditionsConditionThreshold struct {
	// +optional
	Aggregations []MonitoringAlertPolicySpecConditionsConditionThresholdAggregations `json:"aggregations,omitempty" tf:"aggregations,omitempty"`
	Comparison   string                                                              `json:"comparison" tf:"comparison"`
	// +optional
	DenominatorAggregations []MonitoringAlertPolicySpecConditionsConditionThresholdDenominatorAggregations `json:"denominatorAggregations,omitempty" tf:"denominator_aggregations,omitempty"`
	// +optional
	DenominatorFilter string `json:"denominatorFilter,omitempty" tf:"denominator_filter,omitempty"`
	Duration          string `json:"duration" tf:"duration"`
	// +optional
	Filter string `json:"filter,omitempty" tf:"filter,omitempty"`
	// +optional
	ThresholdValue float64 `json:"thresholdValue,omitempty" tf:"threshold_value,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	Trigger []MonitoringAlertPolicySpecConditionsConditionThresholdTrigger `json:"trigger,omitempty" tf:"trigger,omitempty"`
}

type MonitoringAlertPolicySpecConditions struct {
	// +optional
	// +kubebuilder:validation:MaxItems=1
	ConditionAbsent []MonitoringAlertPolicySpecConditionsConditionAbsent `json:"conditionAbsent,omitempty" tf:"condition_absent,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	ConditionThreshold []MonitoringAlertPolicySpecConditionsConditionThreshold `json:"conditionThreshold,omitempty" tf:"condition_threshold,omitempty"`
	DisplayName        string                                                  `json:"displayName" tf:"display_name"`
	// +optional
	Name string `json:"name,omitempty" tf:"name,omitempty"`
}

type MonitoringAlertPolicySpecCreationRecord struct {
	// +optional
	MutateTime string `json:"mutateTime,omitempty" tf:"mutate_time,omitempty"`
	// +optional
	MutatedBy string `json:"mutatedBy,omitempty" tf:"mutated_by,omitempty"`
}

type MonitoringAlertPolicySpecDocumentation struct {
	// +optional
	Content string `json:"content,omitempty" tf:"content,omitempty"`
	// +optional
	MimeType string `json:"mimeType,omitempty" tf:"mime_type,omitempty"`
}

type MonitoringAlertPolicySpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	Combiner   string                                `json:"combiner" tf:"combiner"`
	Conditions []MonitoringAlertPolicySpecConditions `json:"conditions" tf:"conditions"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	CreationRecord []MonitoringAlertPolicySpecCreationRecord `json:"creationRecord,omitempty" tf:"creation_record,omitempty"`
	DisplayName    string                                    `json:"displayName" tf:"display_name"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	Documentation []MonitoringAlertPolicySpecDocumentation `json:"documentation,omitempty" tf:"documentation,omitempty"`
	// +optional
	Enabled bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
	// +optional
	// Deprecated
	Labels []string `json:"labels,omitempty" tf:"labels,omitempty"`
	// +optional
	Name string `json:"name,omitempty" tf:"name,omitempty"`
	// +optional
	NotificationChannels []string `json:"notificationChannels,omitempty" tf:"notification_channels,omitempty"`
	// +optional
	Project string `json:"project,omitempty" tf:"project,omitempty"`
	// +optional
	UserLabels map[string]string `json:"userLabels,omitempty" tf:"user_labels,omitempty"`
}

type MonitoringAlertPolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *MonitoringAlertPolicySpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// MonitoringAlertPolicyList is a list of MonitoringAlertPolicys
type MonitoringAlertPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of MonitoringAlertPolicy CRD objects
	Items []MonitoringAlertPolicy `json:"items,omitempty"`
}
