/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type AppEngineDomainMapping struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppEngineDomainMappingSpec   `json:"spec,omitempty"`
	Status            AppEngineDomainMappingStatus `json:"status,omitempty"`
}

type AppEngineDomainMappingSpecResourceRecords struct {
	// +optional
	Name string `json:"name,omitempty" tf:"name,omitempty"`
	// +optional
	Rrdata string `json:"rrdata,omitempty" tf:"rrdata,omitempty"`
	// +optional
	Type string `json:"type,omitempty" tf:"type,omitempty"`
}

type AppEngineDomainMappingSpecSslSettings struct {
	// +optional
	CertificateID string `json:"certificateID,omitempty" tf:"certificate_id,omitempty"`
	// +optional
	PendingManagedCertificateID string `json:"pendingManagedCertificateID,omitempty" tf:"pending_managed_certificate_id,omitempty"`
	// +optional
	SslManagementType string `json:"sslManagementType,omitempty" tf:"ssl_management_type,omitempty"`
}

type AppEngineDomainMappingSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	DomainName string `json:"domainName" tf:"domain_name"`
	// +optional
	Name string `json:"name,omitempty" tf:"name,omitempty"`
	// +optional
	OverrideStrategy string `json:"overrideStrategy,omitempty" tf:"override_strategy,omitempty"`
	// +optional
	Project string `json:"project,omitempty" tf:"project,omitempty"`
	// +optional
	ResourceRecords []AppEngineDomainMappingSpecResourceRecords `json:"resourceRecords,omitempty" tf:"resource_records,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	SslSettings []AppEngineDomainMappingSpecSslSettings `json:"sslSettings,omitempty" tf:"ssl_settings,omitempty"`
}

type AppEngineDomainMappingStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *AppEngineDomainMappingSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// AppEngineDomainMappingList is a list of AppEngineDomainMappings
type AppEngineDomainMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of AppEngineDomainMapping CRD objects
	Items []AppEngineDomainMapping `json:"items,omitempty"`
}
