/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BigqueryTable struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BigqueryTableSpec   `json:"spec,omitempty"`
	Status            BigqueryTableStatus `json:"status,omitempty"`
}

type BigqueryTableSpecExternalDataConfigurationCsvOptions struct {
	// +optional
	AllowJaggedRows bool `json:"allowJaggedRows,omitempty" tf:"allow_jagged_rows,omitempty"`
	// +optional
	AllowQuotedNewlines bool `json:"allowQuotedNewlines,omitempty" tf:"allow_quoted_newlines,omitempty"`
	// +optional
	Encoding string `json:"encoding,omitempty" tf:"encoding,omitempty"`
	// +optional
	FieldDelimiter string `json:"fieldDelimiter,omitempty" tf:"field_delimiter,omitempty"`
	Quote          string `json:"quote" tf:"quote"`
	// +optional
	SkipLeadingRows int64 `json:"skipLeadingRows,omitempty" tf:"skip_leading_rows,omitempty"`
}

type BigqueryTableSpecExternalDataConfigurationGoogleSheetsOptions struct {
	// +optional
	SkipLeadingRows int64 `json:"skipLeadingRows,omitempty" tf:"skip_leading_rows,omitempty"`
}

type BigqueryTableSpecExternalDataConfiguration struct {
	Autodetect bool `json:"autodetect" tf:"autodetect"`
	// +optional
	Compression string `json:"compression,omitempty" tf:"compression,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	CsvOptions []BigqueryTableSpecExternalDataConfigurationCsvOptions `json:"csvOptions,omitempty" tf:"csv_options,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	GoogleSheetsOptions []BigqueryTableSpecExternalDataConfigurationGoogleSheetsOptions `json:"googleSheetsOptions,omitempty" tf:"google_sheets_options,omitempty"`
	// +optional
	IgnoreUnknownValues bool `json:"ignoreUnknownValues,omitempty" tf:"ignore_unknown_values,omitempty"`
	// +optional
	MaxBadRecords int64    `json:"maxBadRecords,omitempty" tf:"max_bad_records,omitempty"`
	SourceFormat  string   `json:"sourceFormat" tf:"source_format"`
	SourceUris    []string `json:"sourceUris" tf:"source_uris"`
}

type BigqueryTableSpecTimePartitioning struct {
	// +optional
	ExpirationMs int64 `json:"expirationMs,omitempty" tf:"expiration_ms,omitempty"`
	// +optional
	Field string `json:"field,omitempty" tf:"field,omitempty"`
	// +optional
	RequirePartitionFilter bool   `json:"requirePartitionFilter,omitempty" tf:"require_partition_filter,omitempty"`
	Type                   string `json:"type" tf:"type"`
}

type BigqueryTableSpecView struct {
	Query string `json:"query" tf:"query"`
	// +optional
	UseLegacySQL bool `json:"useLegacySQL,omitempty" tf:"use_legacy_sql,omitempty"`
}

type BigqueryTableSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	// +kubebuilder:validation:MaxItems=4
	Clustering []string `json:"clustering,omitempty" tf:"clustering,omitempty"`
	// +optional
	CreationTime int64  `json:"creationTime,omitempty" tf:"creation_time,omitempty"`
	DatasetID    string `json:"datasetID" tf:"dataset_id"`
	// +optional
	Description string `json:"description,omitempty" tf:"description,omitempty"`
	// +optional
	Etag string `json:"etag,omitempty" tf:"etag,omitempty"`
	// +optional
	ExpirationTime int64 `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	ExternalDataConfiguration []BigqueryTableSpecExternalDataConfiguration `json:"externalDataConfiguration,omitempty" tf:"external_data_configuration,omitempty"`
	// +optional
	FriendlyName string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`
	// +optional
	Labels map[string]string `json:"labels,omitempty" tf:"labels,omitempty"`
	// +optional
	LastModifiedTime int64 `json:"lastModifiedTime,omitempty" tf:"last_modified_time,omitempty"`
	// +optional
	Location string `json:"location,omitempty" tf:"location,omitempty"`
	// +optional
	NumBytes int64 `json:"numBytes,omitempty" tf:"num_bytes,omitempty"`
	// +optional
	NumLongTermBytes int64 `json:"numLongTermBytes,omitempty" tf:"num_long_term_bytes,omitempty"`
	// +optional
	NumRows int64 `json:"numRows,omitempty" tf:"num_rows,omitempty"`
	// +optional
	Project string `json:"project,omitempty" tf:"project,omitempty"`
	// +optional
	Schema string `json:"schema,omitempty" tf:"schema,omitempty"`
	// +optional
	SelfLink string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
	TableID  string `json:"tableID" tf:"table_id"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	TimePartitioning []BigqueryTableSpecTimePartitioning `json:"timePartitioning,omitempty" tf:"time_partitioning,omitempty"`
	// +optional
	Type string `json:"type,omitempty" tf:"type,omitempty"`
	// +optional
	// +kubebuilder:validation:MaxItems=1
	View []BigqueryTableSpecView `json:"view,omitempty" tf:"view,omitempty"`
}

type BigqueryTableStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Output *BigqueryTableSpec `json:"output,omitempty"`
	// +optional
	State *base.State `json:"state,omitempty"`
	// +optional
	Phase base.Phase `json:"phase,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BigqueryTableList is a list of BigqueryTables
type BigqueryTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BigqueryTable CRD objects
	Items []BigqueryTable `json:"items,omitempty"`
}
