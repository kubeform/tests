/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "kubeform.dev/kubeform/apis/aws/v1alpha1"
	scheme "kubeform.dev/kubeform/client/clientset/versioned/scheme"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// IotPoliciesGetter has a method to return a IotPolicyInterface.
// A group's client should implement this interface.
type IotPoliciesGetter interface {
	IotPolicies(namespace string) IotPolicyInterface
}

// IotPolicyInterface has methods to work with IotPolicy resources.
type IotPolicyInterface interface {
	Create(ctx context.Context, iotPolicy *v1alpha1.IotPolicy, opts v1.CreateOptions) (*v1alpha1.IotPolicy, error)
	Update(ctx context.Context, iotPolicy *v1alpha1.IotPolicy, opts v1.UpdateOptions) (*v1alpha1.IotPolicy, error)
	UpdateStatus(ctx context.Context, iotPolicy *v1alpha1.IotPolicy, opts v1.UpdateOptions) (*v1alpha1.IotPolicy, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.IotPolicy, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.IotPolicyList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.IotPolicy, err error)
	IotPolicyExpansion
}

// iotPolicies implements IotPolicyInterface
type iotPolicies struct {
	client rest.Interface
	ns     string
}

// newIotPolicies returns a IotPolicies
func newIotPolicies(c *AwsV1alpha1Client, namespace string) *iotPolicies {
	return &iotPolicies{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the iotPolicy, and returns the corresponding iotPolicy object, and an error if there is any.
func (c *iotPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.IotPolicy, err error) {
	result = &v1alpha1.IotPolicy{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("iotpolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of IotPolicies that match those selectors.
func (c *iotPolicies) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.IotPolicyList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.IotPolicyList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("iotpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested iotPolicies.
func (c *iotPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("iotpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a iotPolicy and creates it.  Returns the server's representation of the iotPolicy, and an error, if there is any.
func (c *iotPolicies) Create(ctx context.Context, iotPolicy *v1alpha1.IotPolicy, opts v1.CreateOptions) (result *v1alpha1.IotPolicy, err error) {
	result = &v1alpha1.IotPolicy{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("iotpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(iotPolicy).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a iotPolicy and updates it. Returns the server's representation of the iotPolicy, and an error, if there is any.
func (c *iotPolicies) Update(ctx context.Context, iotPolicy *v1alpha1.IotPolicy, opts v1.UpdateOptions) (result *v1alpha1.IotPolicy, err error) {
	result = &v1alpha1.IotPolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("iotpolicies").
		Name(iotPolicy.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(iotPolicy).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *iotPolicies) UpdateStatus(ctx context.Context, iotPolicy *v1alpha1.IotPolicy, opts v1.UpdateOptions) (result *v1alpha1.IotPolicy, err error) {
	result = &v1alpha1.IotPolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("iotpolicies").
		Name(iotPolicy.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(iotPolicy).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the iotPolicy and deletes it. Returns an error if one occurs.
func (c *iotPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("iotpolicies").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *iotPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("iotpolicies").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched iotPolicy.
func (c *iotPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.IotPolicy, err error) {
	result = &v1alpha1.IotPolicy{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("iotpolicies").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
